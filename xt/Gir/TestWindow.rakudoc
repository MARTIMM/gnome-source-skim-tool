#TL:1:Gnome::Gtk3::Window:
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Gnome::Gtk3::Window


![](images/window.png)

=head1 Description
A B<Gnome::Gtk3::Window> is a toplevel window which can contain other widgets.
Windows normally have decorations that are under the control
of the windowing system and allow the user to manipulate the window
(resize it, move it, close it,...).

=head2 B<Gnome::Gtk3::Window> as B<Gnome::Gtk3::Buildable>

The B<Gnome::Gtk3::Window> implementation of the B<Gnome::Gtk3::Buildable> interface supports a
custom `<accel-groups>` element, which supports any number of `<group>`
elements representing the B<Gnome::Gtk3::AccelGroup> objects you want to add to
your window (synonymous with C<.add-accel-group()>.

It also supports the `<initial-focus>` element, whose name property names
the widget to receive the focus when the window is mapped.

An example of a UI definition fragment with accel groups:

=begin comment
Following text is XML
= begin code

<object class="GtkWindow">
  <accel-groups>
    <group name="accelgroup1"/>
  </accel-groups>
  <initial-focus name="thunderclap"/>
</object>

...

<object class="GtkAccelGroup" id="accelgroup1"/>
= end code
=end comment


The B<Gnome::Gtk3::Window> implementation of the B<Gnome::Gtk3::Buildable> interface supports
setting a child as the titlebar by specifying “titlebar” as the “type”
attribute of a `<child>` element.

=head2 CSS nodes

=begin comment
= begin code
window.background
├── decoration
├── <titlebar child>.titlebar [.default-decoration]
╰── <child>
= end code
=end comment


B<Gnome::Gtk3::Window> has a main CSS node with name window and style class .background,
and a subnode with name decoration.

Style classes that are typically used with the main CSS node are .csd (when
client-side decorations are in use), .solid-csd (for client-side decorations
without invisible borders), .ssd (used by mutter when rendering server-side
decorations). B<Gnome::Gtk3::Window> also represents window states with the following
style classes on the main node: .tiled, .maximized, .fullscreen. Specialized
types of window often add their own discriminating style classes, such as
.popup or .tooltip.

B<Gnome::Gtk3::Window> adds the .titlebar and .default-decoration style classes to the
widget that is added as a titlebar child.

=begin comment
=head2 Uml Diagram
![](plantuml/Label.svg)
=end comment

=head2 Inheriting this class

Inheriting is done in a special way in that it needs a call from new() to get the native object created by the class you are inheriting from.

  use Gnome::Gtk3::Window;

  unit class MyGuiClass;
  also is Gnome::Gtk3::Window;

  submethod new ( |c ) {
    # let the Gnome::Gtk3::Window class process the options
    self.bless( :GtkWindow, |c);
  }

  submethod BUILD ( ... ) {
    ...
  }


=begin comment
=head2 Example
  … text …
  … example code …
=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head1 Methods

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

#TM:1:new:
=head2 new

=head3 :type

Creates a new B<Gnome::Gtk3::Window>, which is a toplevel window that can contain other widgets. Nearly always, the type of the window should be GTK_WINDOW_TOPLEVEL. If you’re implementing something like a popup menu from scratch (which is a bad idea, just use B<Gnome::Gtk3::Menu>),
you might use GTK_WINDOW_POPUP. GTK_WINDOW_POPUP is not for dialogs, though in some other toolkits dialogs are called “popups”.
In GTK+, GTK_WINDOW_POPUP means a pop-up menu or pop-up tooltip.
On X11, popup windows are not controlled by the window manager.

If you simply want an undecorated window (no window borders), use C<.set-decorated()>, don’t use GTK_WINDOW_POPUP.

All top-level windows created by C<.new()> are stored in an internal top-level window list. This list can be obtained from C<.list-toplevels()>. Due to Gtk+ keeping a reference to the window internally, C<.new()> does not return a reference to the caller.

To delete a B<Gnome::Gtk3::Window>, call gtk_widget_destroy().

  multi method new ( GtkWindowType() :$type! )

=item :$type; type of window

=head3 :native-object

Create an object using a native object from elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object :$native-object! )


=head3 :build-id

Create an object using a native object from a builder. See also B<Gnome::GObject::Object>.

  multi method new ( Str :$build-id! )

=end pod

#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------
=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 activate-default

Activates the default widget for the window, unless the current focused widget has been configured to receive the default action
(see gtk_widget_set_receives_default()), in which case the focused widget is activated.

=begin code
method activate-default (
  N-Object() $window  --> Bool()
)
=end code

=item $window; a B<Gnome::Gtk3::Window>


Return value; C<True> if a widget got activated.

=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 activate-focus

Activates the current focused widget within the window.

=begin code
method activate-focus (
  N-Object() $window  --> Bool()
)
=end code

=item $window; a B<Gnome::Gtk3::Window>


Return value; C<True> if a widget got activated.

=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 activate-key

Activates mnemonics and accelerators for this B<Gnome::Gtk3::Window>. This is normally called by the default I<key_press_event> handler for toplevel windows,
however in some cases it may be useful to call this directly when overriding the standard key handling for a toplevel window.

=begin code
method activate-key (
  N-Object() $window,  $event  --> Bool()
)
=end code

=item $window; a B<Gnome::Gtk3::Window>
=item $event; a B<Gnome::Gdk3::EventKey>


Return value; C<True> if a mnemonic or accelerator was found and activated.

=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 add-accel-group

Associate C<$accel_group> with C<$window>, such that calling C<accel-groups-activate() function from Gnome::Gtk3> on C<$window> will activate accelerators in C<$accel_group>.

=begin code
method add-accel-group (
  N-Object() $window, N-Object() $accel-group
)
=end code

=item $window; window to attach accelerator group to
=item $accel-group; a B<Gnome::Gtk3::AccelGroup>


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 add-mnemonic

Adds a mnemonic to this window.

=begin code
method add-mnemonic (
  N-Object() $window, UInt() $keyval, N-Object() $target
)
=end code

=item $window; a B<Gnome::Gtk3::Window>
=item $keyval; the mnemonic
=item $target; the widget that gets activated by the mnemonic


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 begin-move-drag

Starts moving a window. This function is used if an application has window movement grips. When GDK can support it, the window movement will be done using the standard mechanism for the window manager or windowing system. Otherwise, GDK will try to emulate window movement,
potentially not all that well, depending on the windowing system.

=begin code
method begin-move-drag (
  N-Object() $window, Int() $button, Int() $root-x, Int() $root-y, UInt() $timestamp
)
=end code

=item $window; a B<Gnome::Gtk3::Window>
=item $button; mouse button that initiated the drag
=item $root-x; X position where the user clicked to initiate the drag, in root window coordinates
=item $root-y; Y position where the user clicked to initiate the drag
=item $timestamp; timestamp from the click event that initiated the drag


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 begin-resize-drag

Starts resizing a window. This function is used if an application has window resizing controls. When GDK can support it, the resize will be done using the standard mechanism for the window manager or windowing system. Otherwise, GDK will try to emulate window resizing,
potentially not all that well, depending on the windowing system.

=begin code
method begin-resize-drag (
  N-Object() $window, GdkWindowEdge() $edge, Int() $button, Int() $root-x, Int() $root-y, UInt() $timestamp
)
=end code

=item $window; a B<Gnome::Gtk3::Window>
=item $edge; position of the resize control
=item $button; mouse button that initiated the drag
=item $root-x; X position where the user clicked to initiate the drag, in root window coordinates
=item $root-y; Y position where the user clicked to initiate the drag
=item $timestamp; timestamp from the click event that initiated the drag


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 close

Requests that the window is closed, similar to what happens when a window manager close button is clicked.

This function can be used with close buttons in custom titlebars.

=begin code
method close (
  N-Object() $window
)
=end code

=item $window; a B<Gnome::Gtk3::Window>


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 deiconify

Asks to deiconify (i.e. unminimize) the specified C<$window>. Note that you shouldn’t assume the window is definitely deiconified afterward, because other entities (e.g. the user or window manager)) could iconify it again before your code which assumes deiconification gets to run.

You can track iconification via the “window-state-event” signal on B<Gnome::Gtk3::Widget>.

=begin code
method deiconify (
  N-Object() $window
)
=end code

=item $window; a B<Gnome::Gtk3::Window>


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 fullscreen

Asks to place C<$window> in the fullscreen state. Note that you shouldn’t assume the window is definitely full screen afterward,
because other entities (e.g. the user or window manager) could unfullscreen it again, and not all window managers honor requests to fullscreen windows. But normally the window will end up fullscreen. Just don’t write code that crashes if not.

You can track the fullscreen state via the “window-state-event” signal on B<Gnome::Gtk3::Widget>.

=begin code
method fullscreen (
  N-Object() $window
)
=end code

=item $window; a B<Gnome::Gtk3::Window>


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 fullscreen-on-monitor

Asks to place C<$window> in the fullscreen state. Note that you shouldn't assume the window is definitely full screen afterward.

You can track the fullscreen state via the "window-state-event" signal on B<Gnome::Gtk3::Widget>.

=begin code
method fullscreen-on-monitor (
  N-Object() $window, N-Object() $screen, Int() $monitor
)
=end code

=item $window; a B<Gnome::Gtk3::Window>
=item $screen; a B<Gnome::Gdk3::Screen> to draw to
=item $monitor; which monitor to go fullscreen on


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 get-accept-focus

Gets the value set by C<.set-accept-focus()>.

=begin code
method get-accept-focus (
  N-Object() $window  --> Bool()
)
=end code

=item $window; a B<Gnome::Gtk3::Window>


Return value; C<True> if window should receive the input focus

=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 get-application

Gets the B<Gnome::Gtk3::Application> associated with the window (if any).

=begin code
method get-application (
  N-Object() $window  --> N-Object
)
=end code

=item $window; a B<Gnome::Gtk3::Window>


Return value; a B<Gnome::Gtk3::Application>, or C<Nil>

=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 get-attached-to

Fetches the attach widget for this window. See C<.set-attached-to()>.

=begin code
method get-attached-to (
  N-Object() $window  --> N-Object
)
=end code

=item $window; a B<Gnome::Gtk3::Window>


Return value; the widget where the window is attached, or C<Nil> if the window is not attached to any widget.

=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 get-decorated

Returns whether the window has been set to have decorations such as a title bar via C<.set-decorated()>.

=begin code
method get-decorated (
  N-Object() $window  --> Bool()
)
=end code

=item $window; a B<Gnome::Gtk3::Window>


Return value; C<True> if the window has been set to have decorations

=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 get-default-size

Gets the default size of the window. A value of -1 for the width or height indicates that a default size has not been explicitly set for that dimension, so the “natural” size of the window will be used.

=begin code
method get-default-size (
  N-Object() $window, Array[Int] $width, Array[Int] $height
)
=end code

=item $window; a B<Gnome::Gtk3::Window>
=item $width; (transfer ownership: full) location to store the default width, or C<Nil>
=item $height; (transfer ownership: full) location to store the default height, or C<Nil>


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 get-default-widget

Returns the default widget for C<$window>. See C<.set-default()> for more details.

=begin code
method get-default-widget (
  N-Object() $window  --> N-Object
)
=end code

=item $window; a B<Gnome::Gtk3::Window>


Return value; the default widget, or C<Nil>
if there is none.

=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 get-deletable

Returns whether the window has been set to have a close button via C<.set-deletable()>.

=begin code
method get-deletable (
  N-Object() $window  --> Bool()
)
=end code

=item $window; a B<Gnome::Gtk3::Window>


Return value; C<True> if the window has been set to have a close button

=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 get-destroy-with-parent

Returns whether the window will be destroyed with its transient parent. See gtk_window_set_destroy_with_parent ().

=begin code
method get-destroy-with-parent (
  N-Object() $window  --> Bool()
)
=end code

=item $window; a B<Gnome::Gtk3::Window>


Return value; C<True> if the window will be destroyed with its transient parent.

=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 get-focus

Retrieves the current focused widget within the window.
Note that this is the widget that would have the focus if the toplevel window focused; if the toplevel window is not focused then `gtk_widget_has_focus (widget)` will not be C<True> for the widget.

=begin code
method get-focus (
  N-Object() $window  --> N-Object
)
=end code

=item $window; a B<Gnome::Gtk3::Window>


Return value; the currently focused widget,
or C<Nil> if there is none.

=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 get-focus-on-map

Gets the value set by C<.set-focus-on-map()>.

=begin code
method get-focus-on-map (
  N-Object() $window  --> Bool()
)
=end code

=item $window; a B<Gnome::Gtk3::Window>


Return value; C<True> if window should receive the input focus when mapped.

=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 get-focus-visible

Gets the value of the I<property focus-visible> property.

=begin code
method get-focus-visible (
  N-Object() $window  --> Bool()
)
=end code

=item $window; a B<Gnome::Gtk3::Window>


Return value; C<True> if “focus rectangles” are supposed to be visible
 in this window.

=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 get-gravity

Gets the value set by C<.set-gravity()>.

=begin code
method get-gravity (
  N-Object() $window  --> GdkGravity()
)
=end code

=item $window; a B<Gnome::Gtk3::Window>


Return value; window gravity

=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 get-group

Returns the group for C<$window> or the default group, if C<$window> is C<Nil> or if C<$window> does not have an explicit window group.

=begin code
method get-group (
  N-Object() $window  --> N-Object
)
=end code

=item $window; a B<Gnome::Gtk3::Window>, or C<Nil>


Return value; the B<Gnome::Gtk3::WindowGroup> for a window or the default group

=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 get-hide-titlebar-when-maximized

Returns whether the window has requested to have its titlebar hidden when maximized. See gtk_window_set_hide_titlebar_when_maximized ().

=begin code
method get-hide-titlebar-when-maximized (
  N-Object() $window  --> Bool()
)
=end code

=item $window; a B<Gnome::Gtk3::Window>


Return value; C<True> if the window has requested to have its titlebar
 hidden when maximized

=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 get-icon

Gets the value set by C<.set-icon()> (or if you've called C<.set-icon-list()>, gets the first icon in the icon list).

=begin code
method get-icon (
  N-Object() $window
)
=end code

=item $window; a B<Gnome::Gtk3::Window>


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 get-icon-list

Retrieves the list of icons set by C<.set-icon-list()>.
The list is copied, but the reference count on each member won’t be incremented.

=begin code
method get-icon-list (
  N-Object() $window  --> N-GList
)
=end code

=item $window; a B<Gnome::Gtk3::Window>


Return value; copy of window’s icon list

=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 get-icon-name

Returns the name of the themed icon for the window,
see C<.set-icon-name()>.

=begin code
method get-icon-name (
  N-Object() $window  --> Str
)
=end code

=item $window; a B<Gnome::Gtk3::Window>


Return value; the icon name or C<Nil> if the window has no themed icon

=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 get-mnemonic-modifier

Returns the mnemonic modifier for this window. See C<.set-mnemonic-modifier()>.

=begin code
method get-mnemonic-modifier (
  N-Object() $window  --> UInt
)
=end code

=item $window; a B<Gnome::Gtk3::Window>


Return value; the modifier mask used to activate
 mnemonics on this window.

=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 get-mnemonics-visible

Gets the value of the I<property mnemonics-visible> property.

=begin code
method get-mnemonics-visible (
  N-Object() $window  --> Bool()
)
=end code

=item $window; a B<Gnome::Gtk3::Window>


Return value; C<True> if mnemonics are supposed to be visible in this window.

=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 get-modal

Returns whether the window is modal. See C<.set-modal()>.

=begin code
method get-modal (
  N-Object() $window  --> Bool()
)
=end code

=item $window; a B<Gnome::Gtk3::Window>


Return value; C<True> if the window is set to be modal and
 establishes a grab when shown

=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 get-position

This function returns the position you need to pass to C<.move()> to keep C<$window> in its current position.
This means that the meaning of the returned value varies with window gravity. See C<.move()> for more details.

The reliability of this function depends on the windowing system currently in use. Some windowing systems, such as Wayland, do not support a global coordinate system, and thus the position of the window will always be (0, 0). Others, like X11, do not have a reliable way to obtain the geometry of the decorations of a window if they are provided by the window manager. Additionally, on X11, window manager have been known to mismanage window gravity, which result in windows moving even if you use the coordinates of the current position as returned by this function.

If you haven’t changed the window gravity, its gravity will be GDK_GRAVITY_NORTH_WEST. This means that C<.get-position()>
gets the position of the top-left corner of the window manager frame for the window. C<.move()> sets the position of this same top-left corner.

If a window has gravity GDK_GRAVITY_STATIC the window manager frame is not relevant, and thus C<.get-position()> will always produce accurate results. However you can’t use static gravity to do things like place a window in a corner of the screen,
because static gravity ignores the window manager decorations.

Ideally, this function should return appropriate values if the window has client side decorations, assuming that the windowing system supports global coordinates.

In practice, saving the window position should not be left to applications, as they lack enough knowledge of the windowing system and the window manager state to effectively do so. The appropriate way to implement saving the window position is to use a platform-specific protocol, wherever that is available.

=begin code
method get-position (
  N-Object() $window, Array[Int] $root-x, Array[Int] $root-y
)
=end code

=item $window; a B<Gnome::Gtk3::Window>
=item $root-x; (transfer ownership: full) return location for X coordinate of
 gravity-determined reference point, or C<Nil>
=item $root-y; (transfer ownership: full) return location for Y coordinate of
 gravity-determined reference point, or C<Nil>


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 get-resizable

Gets the value set by C<.set-resizable()>.

=begin code
method get-resizable (
  N-Object() $window  --> Bool()
)
=end code

=item $window; a B<Gnome::Gtk3::Window>


Return value; C<True> if the user can resize the window

=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 get-role

Returns the role of the window. See C<.set-role()> for further explanation.

=begin code
method get-role (
  N-Object() $window  --> Str
)
=end code

=item $window; a B<Gnome::Gtk3::Window>


Return value; the role of the window if set, or C<Nil>. The returned is owned by the widget and must not be modified or freed.

=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 get-screen

Returns the B<Gnome::Gdk3::Screen> associated with C<$window>.

=begin code
method get-screen (
  N-Object() $window  --> N-Object
)
=end code

=item $window; a B<Gnome::Gtk3::Window>.


Return value; a B<Gnome::Gdk3::Screen>.

=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 get-size

Obtains the current size of C<$window>.

If C<$window> is not visible on screen, this function return the size GTK+
will suggest to the window manager for the initial window size (but this is not reliably the same as the size the window manager will actually select). See: C<.set-default-size()>.

Depending on the windowing system and the window manager constraints,
the size returned by this function may not match the size set using C<.resize()>; additionally, since C<.resize()> may be implemented as an asynchronous operation, GTK+ cannot guarantee in any way that this code:

=begin comment
= begin code
 // width and height are set elsewhere
 gtk_window_resize (window, width, height);

 int new_width, new_height;
 gtk_window_get_size (window, &new_width, &new_height);
= end code
=end comment

will result in `new_width` and `new_height` matching `width` and
`height`, respectively.

This function will return the logical size of the B<Gnome::Gtk3::Window>,
excluding the widgets used in client side decorations; there is,
however, no guarantee that the result will be completely accurate because client side decoration may include widgets that depend on the user preferences and that may not be visibile at the time you call this function.

The dimensions returned by this function are suitable for being stored across sessions; use C<.set-default-size()> to restore them when before showing the window.

To avoid potential race conditions, you should only call this function in response to a size change notification, for instance inside a handler for the I<size-allocate defined in B<Gnome::Gtk3::Widget>> signal, or inside a handler for the I<configure-event defined in B<Gnome::Gtk3::Widget>> signal:

=begin comment
= begin code static void on_size_allocate (GtkWidget *widget, GtkAllocation *allocation)
{
 int new_width, new_height;

 gtk_window_get_size (GTK_WINDOW (widget), &new_width, &new_height);

 ...
}
= end code
=end comment

Note that, if you connect to the I<size-allocate defined in B<Gnome::Gtk3::Widget>> signal,
you should not use the dimensions of the B<Gdk.Rectangle> passed to the signal handler, as the allocation may contain client side decorations added by GTK+, depending on the windowing system in use.

If you are getting a window size in order to position the window on the screen, you should, instead, simply set the window’s semantic type with C<.set-type-hint()>, which allows the window manager to e.g. center dialogs. Also, if you set the transient parent of dialogs with C<.set-transient-for()> window managers will often center the dialog over its parent window. It's much preferred to let the window manager handle these cases rather than doing it yourself, because all apps will behave consistently and according to user or system preferences, if the window manager handles it. Also,
the window manager can take into account the size of the window decorations and border that it may add, and of which GTK+ has no knowledge. Additionally, positioning windows in global screen coordinates may not be allowed by the windowing system. For more information,
see: C<.set-position()>.

=begin code
method get-size (
  N-Object() $window, Array[Int] $width, Array[Int] $height
)
=end code

=item $window; a B<Gnome::Gtk3::Window>
=item $width; (transfer ownership: full) return location for width, or C<Nil>
=item $height; (transfer ownership: full) return location for height, or C<Nil>


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 get-skip-pager-hint

Gets the value set by C<.set-skip-pager-hint()>.

=begin code
method get-skip-pager-hint (
  N-Object() $window  --> Bool()
)
=end code

=item $window; a B<Gnome::Gtk3::Window>


Return value; C<True> if window shouldn’t be in pager

=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 get-skip-taskbar-hint

Gets the value set by C<.set-skip-taskbar-hint()>

=begin code
method get-skip-taskbar-hint (
  N-Object() $window  --> Bool()
)
=end code

=item $window; a B<Gnome::Gtk3::Window>


Return value; C<True> if window shouldn’t be in taskbar

=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 get-title

Retrieves the title of the window. See C<.set-title()>.

=begin code
method get-title (
  N-Object() $window  --> Str
)
=end code

=item $window; a B<Gnome::Gtk3::Window>


Return value; the title of the window, or C<Nil> if none has been set explicitly. The returned string is owned by the widget and must not be modified or freed.

=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 get-titlebar

Returns the custom titlebar that has been set with C<.set-titlebar()>.

=begin code
method get-titlebar (
  N-Object() $window  --> N-Object
)
=end code

=item $window; a B<Gnome::Gtk3::Window>


Return value; the custom titlebar, or C<Nil>

=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 get-transient-for

Fetches the transient parent for this window. See C<.set-transient-for()>.

=begin code
method get-transient-for (
  N-Object() $window  --> N-Object
)
=end code

=item $window; a B<Gnome::Gtk3::Window>


Return value; the transient parent for this window, or C<Nil> if no transient parent has been set.

=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 get-type-hint

Gets the type hint for this window. See C<.set-type-hint()>.

=begin code
method get-type-hint (
  N-Object() $window  --> GdkWindowTypeHint()
)
=end code

=item $window; a B<Gnome::Gtk3::Window>


Return value; the type hint for C<$window>.

=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 get-urgency-hint

Gets the value set by C<.set-urgency-hint()>

=begin code
method get-urgency-hint (
  N-Object() $window  --> Bool()
)
=end code

=item $window; a B<Gnome::Gtk3::Window>


Return value; C<True> if window is urgent

=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 get-window-type

Gets the type of the window. See C<GtkWindowType enumeration>.

=begin code
method get-window-type (
  N-Object() $window  --> GtkWindowType()
)
=end code

=item $window; a B<Gnome::Gtk3::Window>


Return value; the type of the window

=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 has-group

Returns whether C<$window> has an explicit window group.

=begin code
method has-group (
  N-Object() $window  --> Bool()
)
=end code

=item $window; a B<Gnome::Gtk3::Window>


Return value; C<True> if C<$window> has an explicit window group.

Since 2.22

=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 has-toplevel-focus

Returns whether the input focus is within this B<Gnome::Gtk3::Window>.
For real toplevel windows, this is identical to C<.is-active()>,
but for embedded windows, like B<Gnome::Gtk3::Plug>, the results will differ.

=begin code
method has-toplevel-focus (
  N-Object() $window  --> Bool()
)
=end code

=item $window; a B<Gnome::Gtk3::Window>


Return value; C<True> if the input focus is within this B<Gnome::Gtk3::Window>

=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 iconify

Asks to iconify (i.e. minimize) the specified C<$window>. Note that you shouldn’t assume the window is definitely iconified afterward,
because other entities (e.g. the user or window manager) could deiconify it again, or there may not be a window manager in which case iconification isn’t possible, etc. But normally the window will end up iconified. Just don’t write code that crashes if not.

It’s permitted to call this function before showing a window,
in which case the window will be iconified before it ever appears onscreen.

You can track iconification via the “window-state-event” signal on B<Gnome::Gtk3::Widget>.

=begin code
method iconify (
  N-Object() $window
)
=end code

=item $window; a B<Gnome::Gtk3::Window>


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 is-active

Returns whether the window is part of the current active toplevel.
(That is, the toplevel window receiving keystrokes.)
The return value is C<True> if the window is active toplevel itself, but also if it is, say, a B<Gnome::Gtk3::Plug> embedded in the active toplevel.
You might use this function if you wanted to draw a widget differently in an active window from a widget in an inactive window.
See C<.has-toplevel-focus()>

=begin code
method is-active (
  N-Object() $window  --> Bool()
)
=end code

=item $window; a B<Gnome::Gtk3::Window>


Return value; C<True> if the window part of the current active window.

=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 is-maximized

Retrieves the current maximized state of C<$window>.

Note that since maximization is ultimately handled by the window manager and happens asynchronously to an application request, you shouldn’t assume the return value of this function changing immediately (or at all), as an effect of calling C<.maximize()> or C<.unmaximize()>.

=begin code
method is-maximized (
  N-Object() $window  --> Bool()
)
=end code

=item $window; a B<Gnome::Gtk3::Window>


Return value; whether the window has a maximized state.

=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 maximize

Asks to maximize C<$window>, so that it becomes full-screen. Note that you shouldn’t assume the window is definitely maximized afterward,
because other entities (e.g. the user or window manager) could unmaximize it again, and not all window managers support maximization. But normally the window will end up maximized. Just don’t write code that crashes if not.

It’s permitted to call this function before showing a window,
in which case the window will be maximized when it appears onscreen initially.

You can track maximization via the “window-state-event” signal on B<Gnome::Gtk3::Widget>, or by listening to notifications on the I<property is-maximized> property.

=begin code
method maximize (
  N-Object() $window
)
=end code

=item $window; a B<Gnome::Gtk3::Window>


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 mnemonic-activate

Activates the targets associated with the mnemonic.

=begin code
method mnemonic-activate (
  N-Object() $window, UInt() $keyval, UInt() $modifier  --> Bool()
)
=end code

=item $window; a B<Gnome::Gtk3::Window>
=item $keyval; the mnemonic
=item $modifier; the modifiers


Return value; C<True> if the activation is done.

=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 move

Asks the window manager to move C<$window> to the given position. Window managers are free to ignore this; most window managers ignore requests for initial window positions (instead using a user-defined placement algorithm) and honor requests after the window has already been shown.

Note: the position is the position of the gravity-determined reference point for the window. The gravity determines two things:
first, the location of the reference point in root window coordinates; and second, which point on the window is positioned at the reference point.

By default the gravity is GDK_GRAVITY_NORTH_WEST, so the reference point is simply the C<$x>, C<$y> supplied to C<.move()>. The top-left corner of the window decorations (aka window frame or border) will be placed at C<$x>, C<$y>. Therefore, to position a window at the top left of the screen, you want to use the default gravity
(which is GDK_GRAVITY_NORTH_WEST) and move the window to 0,0.

To position a window at the bottom right corner of the screen, you would set GDK_GRAVITY_SOUTH_EAST, which means that the reference point is at C<$x> + the window width and C<$y> + the window height, and the bottom-right corner of the window border will be placed at that reference point. So, to place a window in the bottom right corner you would first set gravity to south east, then write:
`gtk_window_move (window, gdk_screen_width () - window_width,
gdk_screen_height () - window_height)` (note that this example does not take multi-head scenarios into account).

The [Extended Window Manager Hints Specification](http://www.freedesktop.org/Standards/wm-spec)
has a nice table of gravities in the “implementation notes” section.

The C<.get-position()> documentation may also be relevant.

=begin code
method move (
  N-Object() $window, Int() $x, Int() $y
)
=end code

=item $window; a B<Gnome::Gtk3::Window>
=item $x; X coordinate to move window to
=item $y; Y coordinate to move window to


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 present

Presents a window to the user. This function should not be used as when it is called, it is too late to gather a valid timestamp to allow focus stealing prevention to work correctly.

=begin code
method present (
  N-Object() $window
)
=end code

=item $window; a B<Gnome::Gtk3::Window>


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 present-with-time

Presents a window to the user. This may mean raising the window in the stacking order, deiconifying it, moving it to the current desktop, and/or giving it the keyboard focus, possibly dependent on the user’s platform, window manager, and preferences.

If C<$window> is hidden, this function calls gtk_widget_show()
as well.

This function should be used when the user tries to open a window that’s already open. Say for example the preferences dialog is currently open, and the user chooses Preferences from the menu a second time; use C<.present()> to move the already-open dialog where the user can see it.

Presents a window to the user in response to a user interaction. The timestamp should be gathered when the window was requested to be shown
(when clicking a link for example), rather than once the window is ready to be shown.

=begin code
method present-with-time (
  N-Object() $window, UInt() $timestamp
)
=end code

=item $window; a B<Gnome::Gtk3::Window>
=item $timestamp; the timestamp of the user interaction (typically a
 button or key press event) which triggered this call


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 propagate-key-event

Propagate a key press or release event to the focus widget and up the focus container chain until a widget handles C<$event>.
This is normally called by the default I<key_press_event> and I<key_release_event> handlers for toplevel windows,
however in some cases it may be useful to call this directly when overriding the standard key handling for a toplevel window.

=begin code
method propagate-key-event (
  N-Object() $window,  $event  --> Bool()
)
=end code

=item $window; a B<Gnome::Gtk3::Window>
=item $event; a B<Gnome::Gdk3::EventKey>


Return value; C<True> if a widget in the focus chain handled the event.

=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 remove-accel-group

Reverses the effects of C<.add-accel-group()>.

=begin code
method remove-accel-group (
  N-Object() $window, N-Object() $accel-group
)
=end code

=item $window; a B<Gnome::Gtk3::Window>
=item $accel-group; a B<Gnome::Gtk3::AccelGroup>


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 remove-mnemonic

Removes a mnemonic from this window.

=begin code
method remove-mnemonic (
  N-Object() $window, UInt() $keyval, N-Object() $target
)
=end code

=item $window; a B<Gnome::Gtk3::Window>
=item $keyval; the mnemonic
=item $target; the widget that gets activated by the mnemonic


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 resize

Resizes the window as if the user had done so, obeying geometry constraints. The default geometry constraint is that windows may not be smaller than their size request; to override this constraint, call gtk_widget_set_size_request() to set the window's request to a smaller value.

If C<.resize()> is called before showing a window for the first time, it overrides any default size set with C<.set-default-size()>.

Windows may not be resized smaller than 1 by 1 pixels.

When using client side decorations, GTK+ will do its best to adjust the given size so that the resulting window size matches the requested size without the title bar, borders and shadows added for the client side decorations, but there is no guarantee that the result will be totally accurate because these widgets added for client side decorations depend on the theme and may not be realized or visible at the time C<.resize()> is issued.

If the B<Gnome::Gtk3::Window> has a titlebar widget (see C<.set-titlebar()>), then typically, C<.resize()> will compensate for the height of the titlebar widget only if the height is known when the resulting B<Gnome::Gtk3::Window> configuration is issued.
For example, if new widgets are added after the B<Gnome::Gtk3::Window> configuration and cause the titlebar widget to grow in height, this will result in a window content smaller that specified by C<.resize()> and not a larger window.

=begin code
method resize (
  N-Object() $window, Int() $width, Int() $height
)
=end code

=item $window; a B<Gnome::Gtk3::Window>
=item $width; width in pixels to resize the window to
=item $height; height in pixels to resize the window to


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 set-accept-focus

Windows may set a hint asking the desktop environment not to receive the input focus. This function sets this hint.

=begin code
method set-accept-focus (
  N-Object() $window, Bool() $setting
)
=end code

=item $window; a B<Gnome::Gtk3::Window>
=item $setting; C<True> to let this window receive input focus


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 set-application

Sets or unsets the B<Gnome::Gtk3::Application> associated with the window.

The application will be kept alive for at least as long as it has any windows associated with it (see g_application_hold() for a way to keep it alive without windows).

Normally, the connection between the application and the window will remain until the window is destroyed, but you can explicitly remove it by setting the C<$application> to C<Nil>.

This is equivalent to calling gtk_application_remove_window() and/or gtk_application_add_window() on the old/new applications as relevant.

=begin code
method set-application (
  N-Object() $window, N-Object() $application
)
=end code

=item $window; a B<Gnome::Gtk3::Window>
=item $application; a B<Gnome::Gtk3::Application>, or C<Nil> to unset


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 set-attached-to

Marks C<$window> as attached to C<$attach_widget>. This creates a logical binding between the window and the widget it belongs to, which is used by GTK+ to propagate information such as styling or accessibility to C<$window> as if it was a children of C<$attach_widget>.

Examples of places where specifying this relation is useful are for instance a B<Gnome::Gtk3::Menu> created by a B<Gnome::Gtk3::ComboBox>, a completion popup window created by B<Gnome::Gtk3::Entry> or a typeahead search entry created by B<Gnome::Gtk3::TreeView>.

Note that this function should not be confused with C<.set-transient-for()>, which specifies a window manager relation between two toplevels instead.

Passing C<Nil> for C<$attach_widget> detaches the window.

=begin code
method set-attached-to (
  N-Object() $window, N-Object() $attach-widget
)
=end code

=item $window; a B<Gnome::Gtk3::Window>
=item $attach-widget; a B<Gnome::Gtk3::Widget>, or C<Nil>


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 set-decorated

By default, windows are decorated with a title bar, resize controls, etc. Some window managers allow GTK+ to disable these decorations, creating a borderless window. If you set the decorated property to C<False>
using this function, GTK+ will do its best to convince the window manager not to decorate the window. Depending on the system, this function may not have any effect when called on a window that is already visible, so you should call it before calling gtk_widget_show().

On Windows, this function always works, since there’s no window manager policy involved.

=begin code
method set-decorated (
  N-Object() $window, Bool() $setting
)
=end code

=item $window; a B<Gnome::Gtk3::Window>
=item $setting; C<True> to decorate the window


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 set-default

The default widget is the widget that’s activated when the user presses Enter in a dialog (for example). This function sets or unsets the default widget for a B<Gnome::Gtk3::Window>. When setting (rather than unsetting) the default widget it’s generally easier to call gtk_widget_grab_default() on the widget. Before making a widget the default widget, you must call gtk_widget_set_can_default() on the widget you’d like to make the default.

=begin code
method set-default (
  N-Object() $window, N-Object() $default-widget
)
=end code

=item $window; a B<Gnome::Gtk3::Window>
=item $default-widget; widget to be the default, or C<Nil>
 to unset the default widget for the toplevel


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 set-default-size

Sets the default size of a window. If the window’s “natural” size
(its size request) is larger than the default, the default will be ignored. More generally, if the default size does not obey the geometry hints for the window (C<.set-geometry-hints()> can be used to set these explicitly), the default size will be clamped to the nearest permitted size.

Unlike gtk_widget_set_size_request(), which sets a size request for a widget and thus would keep users from shrinking the window, this function only sets the initial size, just as if the user had resized the window themselves. Users can still shrink the window again as they normally would. Setting a default size of -1 means to use the “natural” default size (the size request of the window).

For more control over a window’s initial size and how resizing works,
investigate C<.set-geometry-hints()>.

For some uses, C<.resize()> is a more appropriate function.
C<.resize()> changes the current size of the window, rather than the size to be used on initial display. C<.resize()> always affects the window itself, not the geometry widget.

The default size of a window only affects the first time a window is shown; if a window is hidden and re-shown, it will remember the size it had prior to hiding, rather than using the default size.

Windows can’t actually be 0x0 in size, they must be at least 1x1, but passing 0 for C<$width> and C<$height> is OK, resulting in a 1x1 default size.

If you use this function to reestablish a previously saved window size,
note that the appropriate size to save is the one returned by C<.get-size()>. Using the window allocation directly will not work in all circumstances and can lead to growing or shrinking windows.

=begin code
method set-default-size (
  N-Object() $window, Int() $width, Int() $height
)
=end code

=item $window; a B<Gnome::Gtk3::Window>
=item $width; width in pixels, or -1 to unset the default width
=item $height; height in pixels, or -1 to unset the default height


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 set-deletable

By default, windows have a close button in the window frame. Some window managers allow GTK+ to disable this button. If you set the deletable property to C<False>
using this function, GTK+ will do its best to convince the window manager not to show a close button. Depending on the system, this function may not have any effect when called on a window that is already visible, so you should call it before calling gtk_widget_show().

On Windows, this function always works, since there’s no window manager policy involved.

=begin code
method set-deletable (
  N-Object() $window, Bool() $setting
)
=end code

=item $window; a B<Gnome::Gtk3::Window>
=item $setting; C<True> to decorate the window as deletable


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 set-destroy-with-parent

If C<$setting> is C<True>, then destroying the transient parent of C<$window>
will also destroy C<$window> itself. This is useful for dialogs that shouldn’t persist beyond the lifetime of the main window they're associated with, for example.

=begin code
method set-destroy-with-parent (
  N-Object() $window, Bool() $setting
)
=end code

=item $window; a B<Gnome::Gtk3::Window>
=item $setting; whether to destroy C<$window> with its transient parent


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 set-focus

If C<$focus> is not the current focus widget, and is focusable, sets it as the focus widget for the window. If C<$focus> is C<Nil>, unsets the focus widget for this window. To set the focus to a particular widget in the toplevel, it is usually more convenient to use gtk_widget_grab_focus() instead of this function.

=begin code
method set-focus (
  N-Object() $window, N-Object() $focus
)
=end code

=item $window; a B<Gnome::Gtk3::Window>
=item $focus; widget to be the new focus widget, or C<Nil> to unset
 any focus widget for the toplevel window.


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 set-focus-on-map

Windows may set a hint asking the desktop environment not to receive the input focus when the window is mapped. This function sets this hint.

=begin code
method set-focus-on-map (
  N-Object() $window, Bool() $setting
)
=end code

=item $window; a B<Gnome::Gtk3::Window>
=item $setting; C<True> to let this window receive input focus on map


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 set-focus-visible

Sets the I<property focus-visible> property.

=begin code
method set-focus-visible (
  N-Object() $window, Bool() $setting
)
=end code

=item $window; a B<Gnome::Gtk3::Window>
=item $setting; the new value


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 set-geometry-hints

This function sets up hints about how a window can be resized by the user. You can set a minimum and maximum size; allowed resize increments (e.g. for xterm, you can only resize by the size of a character); aspect ratios; and more. See the B<Gnome::Gdk3::Geometry> struct.

=begin code
method set-geometry-hints (
  N-Object() $window, N-Object() $geometry-widget,  $geometry, UInt() $geom-mask
)
=end code

=item $window; a B<Gnome::Gtk3::Window>
=item $geometry-widget; widget the geometry hints used to be applied to
 or C<Nil>. Since 3.20 this argument is ignored and GTK behaves as if C<Nil> was
 set.
=item $geometry; struct containing geometry information or C<Nil>
=item $geom-mask; mask indicating which struct fields should be paid attention to


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 set-gravity

Window gravity defines the meaning of coordinates passed to C<.move()>. See C<.move()> and C<GdkC<Gravity enumeration> enumeration> for more details.

The default window gravity is GDK_GRAVITY_NORTH_WEST which will typically “do what you mean.”

=begin code
method set-gravity (
  N-Object() $window, GdkGravity() $gravity
)
=end code

=item $window; a B<Gnome::Gtk3::Window>
=item $gravity; window gravity


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 set-has-user-ref-count

Tells GTK+ whether to drop its extra reference to the window when gtk_widget_destroy() is called.

This function is only exported for the benefit of language bindings which may need to keep the window alive until their wrapper object is garbage collected. There is no justification for ever calling this function in an application.

=begin code
method set-has-user-ref-count (
  N-Object() $window, Bool() $setting
)
=end code

=item $window; a B<Gnome::Gtk3::Window>
=item $setting; the new value


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 set-hide-titlebar-when-maximized

If C<$setting> is C<True>, then C<$window> will request that it’s titlebar should be hidden when maximized.
This is useful for windows that don’t convey any information other than the application name in the titlebar, to put the available screen space to better use. If the underlying window system does not support the request, the setting will not have any effect.

Note that custom titlebars set with C<.set-titlebar()> are not affected by this. The application is in full control of their content and visibility anyway.

=begin code
method set-hide-titlebar-when-maximized (
  N-Object() $window, Bool() $setting
)
=end code

=item $window; a B<Gnome::Gtk3::Window>
=item $setting; whether to hide the titlebar when C<$window> is maximized


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 set-icon

Sets up the icon representing a B<Gnome::Gtk3::Window>. This icon is used when the window is minimized (also known as iconified). Some window managers or desktop environments may also place it in the window frame, or display it in other contexts. On others, the icon is not used at all, so your mileage may vary.

The icon should be provided in whatever size it was naturally drawn; that is, don’t scale the image before passing it to GTK+. Scaling is postponed until the last minute, when the desired final size is known, to allow best quality.

If you have your icon hand-drawn in multiple sizes, use C<.set-icon-list()>. Then the best size will be used.

This function is equivalent to calling C<.set-icon-list()>
with a 1-element list.

See also C<.set-default-icon-list()> to set the icon for all windows in your application in one go.

=begin code
method set-icon (
  N-Object() $window,  $icon
)
=end code

=item $window; a B<Gnome::Gtk3::Window>
=item $icon; icon image, or C<Nil>


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 set-icon-from-file

Sets the icon for C<$window>.
Warns on failure if C<$err> is C<Nil>.

This function is equivalent to calling C<.set-icon()>
with a pixbuf created by loading the image from C<$filename>.

=begin code
method set-icon-from-file (
  N-Object() $window, Str $filename  --> Bool()
)
=end code

=item $window; a B<Gnome::Gtk3::Window>
=item $filename; location of icon file


Return value; C<True> if setting the icon succeeded.

=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 set-icon-list

Sets up the icon representing a B<Gnome::Gtk3::Window>. The icon is used when the window is minimized (also known as iconified). Some window managers or desktop environments may also place it in the window frame, or display it in other contexts. On others, the icon is not used at all, so your mileage may vary.

C<.set-icon-list()> allows you to pass in the same icon in several hand-drawn sizes. The list should contain the natural sizes your icon is available in; that is, don’t scale the image before passing it to GTK+. Scaling is postponed until the last minute,
when the desired final size is known, to allow best quality.

By passing several sizes, you may improve the final image quality of the icon, by reducing or eliminating automatic image scaling.

Recommended sizes to provide: 16x16, 32x32, 48x48 at minimum, and larger images (64x64, 128x128) if you have them.

See also C<.set-default-icon-list()> to set the icon for all windows in your application in one go.

Note that transient windows (those who have been set transient for another window using C<.set-transient-for()>) will inherit their icon from their transient parent. So there’s no need to explicitly set the icon on transient windows.

=begin code
method set-icon-list (
  N-Object() $window, N-GList() $list
)
=end code

=item $window; a B<Gnome::Gtk3::Window>
=item $list; list of GdkPixbuf


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 set-icon-name

Sets the icon for the window from a named themed icon.
See the docs for B<Gnome::Gtk3::IconTheme> for more details.
On some platforms, the window icon is not used at all.

Note that this has nothing to do with the WM_ICON_NAME property which is mentioned in the ICCCM.

=begin code
method set-icon-name (
  N-Object() $window, Str $name
)
=end code

=item $window; a B<Gnome::Gtk3::Window>
=item $name; the name of the themed icon


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 set-keep-above

Asks to keep C<$window> above, so that it stays on top. Note that you shouldn’t assume the window is definitely above afterward,
because other entities (e.g. the user or window manager) could not keep it above,
and not all window managers support keeping windows above. But normally the window will end kept above. Just don’t write code that crashes if not.

It’s permitted to call this function before showing a window,
in which case the window will be kept above when it appears onscreen initially.

You can track the above state via the “window-state-event” signal on B<Gnome::Gtk3::Widget>.

Note that, according to the
[Extended Window Manager Hints Specification](http://www.freedesktop.org/Standards/wm-spec),
the above state is mainly meant for user preferences and should not be used by applications e.g. for drawing attention to their dialogs.

=begin code
method set-keep-above (
  N-Object() $window, Bool() $setting
)
=end code

=item $window; a B<Gnome::Gtk3::Window>
=item $setting; whether to keep C<$window> above other windows


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 set-keep-below

Asks to keep C<$window> below, so that it stays in bottom. Note that you shouldn’t assume the window is definitely below afterward,
because other entities (e.g. the user or window manager) could not keep it below,
and not all window managers support putting windows below. But normally the window will be kept below. Just don’t write code that crashes if not.

It’s permitted to call this function before showing a window,
in which case the window will be kept below when it appears onscreen initially.

You can track the below state via the “window-state-event” signal on B<Gnome::Gtk3::Widget>.

Note that, according to the
[Extended Window Manager Hints Specification](http://www.freedesktop.org/Standards/wm-spec),
the above state is mainly meant for user preferences and should not be used by applications e.g. for drawing attention to their dialogs.

=begin code
method set-keep-below (
  N-Object() $window, Bool() $setting
)
=end code

=item $window; a B<Gnome::Gtk3::Window>
=item $setting; whether to keep C<$window> below other windows


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 set-mnemonic-modifier

Sets the mnemonic modifier for this window.

=begin code
method set-mnemonic-modifier (
  N-Object() $window, UInt() $modifier
)
=end code

=item $window; a B<Gnome::Gtk3::Window>
=item $modifier; the modifier mask used to activate
 mnemonics on this window.


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 set-mnemonics-visible

Sets the I<property mnemonics-visible> property.

=begin code
method set-mnemonics-visible (
  N-Object() $window, Bool() $setting
)
=end code

=item $window; a B<Gnome::Gtk3::Window>
=item $setting; the new value


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 set-modal

Sets a window modal or non-modal. Modal windows prevent interaction with other windows in the same application. To keep modal dialogs on top of main application windows, use C<.set-transient-for()> to make the dialog transient for the parent; most window managers will then disallow lowering the dialog below the parent.

=begin code
method set-modal (
  N-Object() $window, Bool() $modal
)
=end code

=item $window; a B<Gnome::Gtk3::Window>
=item $modal; whether the window is modal


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 set-position

Sets a position constraint for this window. If the old or new constraint is %GTK_WIN_POS_CENTER_ALWAYS, this will also cause the window to be repositioned to satisfy the new constraint.

=begin code
method set-position (
  N-Object() $window, GtkWindowPosition() $position
)
=end code

=item $window; a B<Gnome::Gtk3::Window>.
=item $position; a position constraint.


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 set-resizable

Sets whether the user can resize a window. Windows are user resizable by default.

=begin code
method set-resizable (
  N-Object() $window, Bool() $resizable
)
=end code

=item $window; a B<Gnome::Gtk3::Window>
=item $resizable; C<True> if the user can resize this window


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 set-role

This function is only useful on X11, not with other GTK+ targets.

In combination with the window title, the window role allows a window manager to identify "the same" window when an application is restarted. So for example you might set the “toolbox” role on your app’s toolbox window, so that when the user restarts their session, the window manager can put the toolbox back in the same place.

If a window already has a unique title, you don’t need to set the role, since the WM can use the title to identify the window when restoring the session.

=begin code
method set-role (
  N-Object() $window, Str $role
)
=end code

=item $window; a B<Gnome::Gtk3::Window>
=item $role; unique identifier for the window to be used when restoring a session


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 set-screen

Sets the B<Gnome::Gdk3::Screen> where the C<$window> is displayed; if the window is already mapped, it will be unmapped, and then remapped on the new screen.

=begin code
method set-screen (
  N-Object() $window, N-Object() $screen
)
=end code

=item $window; a B<Gnome::Gtk3::Window>.
=item $screen; a B<Gnome::Gdk3::Screen>.


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 set-skip-pager-hint

Windows may set a hint asking the desktop environment not to display the window in the pager. This function sets this hint.
(A "pager" is any desktop navigation tool such as a workspace switcher that displays a thumbnail representation of the windows on the screen.)

=begin code
method set-skip-pager-hint (
  N-Object() $window, Bool() $setting
)
=end code

=item $window; a B<Gnome::Gtk3::Window>
=item $setting; C<True> to keep this window from appearing in the pager


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 set-skip-taskbar-hint

Windows may set a hint asking the desktop environment not to display the window in the task bar. This function sets this hint.

=begin code
method set-skip-taskbar-hint (
  N-Object() $window, Bool() $setting
)
=end code

=item $window; a B<Gnome::Gtk3::Window>
=item $setting; C<True> to keep this window from appearing in the task bar


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 set-startup-id

Startup notification identifiers are used by desktop environment to track application startup, to provide user feedback and other features. This function changes the corresponding property on the underlying B<Gnome::Gdk3::Window>. Normally, startup identifier is managed automatically and you should only use this function in special cases like transferring focus from other processes. You should use this function before calling C<.present()> or any equivalent function generating a window map event.

This function is only useful on X11, not with other GTK+ targets.

=begin code
method set-startup-id (
  N-Object() $window, Str $startup-id
)
=end code

=item $window; a B<Gnome::Gtk3::Window>
=item $startup-id; a string with startup-notification identifier


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 set-title

Sets the title of the B<Gnome::Gtk3::Window>. The title of a window will be displayed in its title bar; on the X Window System, the title bar is rendered by the window manager,
so exactly how the title appears to users may vary according to a user’s exact configuration. The title should help a user distinguish this window from other windows they may have open. A good title might include the application name and current document filename, for example.

=begin code
method set-title (
  N-Object() $window, Str $title
)
=end code

=item $window; a B<Gnome::Gtk3::Window>
=item $title; title of the window


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 set-titlebar

Sets a custom titlebar for C<$window>.

A typical widget used here is B<Gnome::Gtk3::HeaderBar>, as it provides various features expected of a titlebar while allowing the addition of child widgets to it.

If you set a custom titlebar, GTK+ will do its best to convince the window manager not to put its own titlebar on the window.
Depending on the system, this function may not work for a window that is already visible, so you set the titlebar before calling gtk_widget_show().

=begin code
method set-titlebar (
  N-Object() $window, N-Object() $titlebar
)
=end code

=item $window; a B<Gnome::Gtk3::Window>
=item $titlebar; the widget to use as titlebar


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 set-transient-for

Dialog windows should be set transient for the main application window they were spawned from. This allows window managers to e.g. keep the dialog on top of the main window, or center the dialog over the main window. gtk_dialog_new_with_buttons() and other convenience functions in GTK+ will sometimes call C<.set-transient-for()> on your behalf.

Passing C<Nil> for C<$parent> unsets the current transient window.

On Wayland, this function can also be used to attach a new GTK_WINDOW_POPUP to a GTK_WINDOW_TOPLEVEL parent already mapped on screen so that the GTK_WINDOW_POPUP will be created as a subsurface-based window GDK_WINDOW_SUBSURFACE which can be positioned at will relatively to the GTK_WINDOW_TOPLEVEL surface.

On Windows, this function puts the child window on top of the parent,
much as the window manager would have done on X.

=begin code
method set-transient-for (
  N-Object() $window, N-Object() $parent
)
=end code

=item $window; a B<Gnome::Gtk3::Window>
=item $parent; parent window, or C<Nil>


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 set-type-hint

By setting the type hint for the window, you allow the window manager to decorate and handle the window in a way which is suitable to the function of the window in your application.

This function should be called before the window becomes visible.

gtk_dialog_new_with_buttons() and other convenience functions in GTK+
will sometimes call C<.set-type-hint()> on your behalf.

=begin code
method set-type-hint (
  N-Object() $window, GdkWindowTypeHint() $hint
)
=end code

=item $window; a B<Gnome::Gtk3::Window>
=item $hint; the window type


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 set-urgency-hint

Windows may set a hint asking the desktop environment to draw the users attention to the window. This function sets this hint.

=begin code
method set-urgency-hint (
  N-Object() $window, Bool() $setting
)
=end code

=item $window; a B<Gnome::Gtk3::Window>
=item $setting; C<True> to mark this window as urgent


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 stick

Asks to stick C<$window>, which means that it will appear on all user desktops. Note that you shouldn’t assume the window is definitely stuck afterward, because other entities (e.g. the user or window manager could unstick it again, and some window managers do not support sticking windows. But normally the window will end up stuck. Just don't write code that crashes if not.

It’s permitted to call this function before showing a window.

You can track stickiness via the “window-state-event” signal on B<Gnome::Gtk3::Widget>.

=begin code
method stick (
  N-Object() $window
)
=end code

=item $window; a B<Gnome::Gtk3::Window>


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 unfullscreen

Asks to toggle off the fullscreen state for C<$window>. Note that you shouldn’t assume the window is definitely not full screen afterward, because other entities (e.g. the user or window manager) could fullscreen it again, and not all window managers honor requests to unfullscreen windows. But normally the window will end up restored to its normal state. Just don’t write code that crashes if not.

You can track the fullscreen state via the “window-state-event” signal on B<Gnome::Gtk3::Widget>.

=begin code
method unfullscreen (
  N-Object() $window
)
=end code

=item $window; a B<Gnome::Gtk3::Window>


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 unmaximize

Asks to unmaximize C<$window>. Note that you shouldn’t assume the window is definitely unmaximized afterward, because other entities
(e.g. the user or window manager)
could maximize it again, and not all window managers honor requests to unmaximize. But normally the window will end up unmaximized. Just don’t write code that crashes if not.

You can track maximization via the “window-state-event” signal on B<Gnome::Gtk3::Widget>.

=begin code
method unmaximize (
  N-Object() $window
)
=end code

=item $window; a B<Gnome::Gtk3::Window>


=end pod
#-------------------------------------------------------------------------------
=begin pod
=head2 unstick

Asks to unstick C<$window>, which means that it will appear on only one of the user’s desktops. Note that you shouldn’t assume the window is definitely unstuck afterward, because other entities
(e.g. the user or window manager) could stick it again. But normally the window will end up unstuck. Just don’t write code that crashes if not.

You can track stickiness via the “window-state-event” signal on B<Gnome::Gtk3::Widget>.

=begin code
method unstick (
  N-Object() $window
)
=end code

=item $window; a B<Gnome::Gtk3::Window>


=end pod
#-------------------------------------------------------------------------------
#--[Functions]------------------------------------------------------------------
#-------------------------------------------------------------------------------
=begin pod
=head1 Functions
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-default-icon-list

Gets the value set by C<.set-default-icon-list()>.
The list is a copy and should be freed with g_list_free(),
but the pixbufs in the list have not had their reference count incremented.

=begin code
method get-default-icon-list (
  --> N-GList
)
=end code



Return value; copy of default icon list

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-default-icon-name

Returns the fallback icon name for windows that has been set with C<.set-default-icon-name()>. The returned string is owned by GTK+ and should not be modified. It is only valid until the next call to C<.set-default-icon-name()>.

=begin code
method get-default-icon-name (
  --> Str
)
=end code



Return value; the fallback icon name for windows

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 list-toplevels

Returns a list of all existing toplevel windows. The widgets in the list are not individually referenced. If you want to iterate through the list and perform actions involving callbacks that might destroy the widgets, you must call
`g_list_foreach (result, (B<Func>)g_object_ref, NULL)` first, and then unref all the widgets afterwards.

=begin code
method list-toplevels (
  --> N-GList
)
=end code



Return value; list of toplevel widgets

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-auto-startup-notification

By default, after showing the first B<Gnome::Gtk3::Window>, GTK+ calls C<notify-startup-complete() function from Gnome::Gdk3>. Call this function to disable the automatic startup notification. You might do this if your first window is a splash screen, and you want to delay notification until after your real main window has been shown, for example.

In that example, you would disable startup notification temporarily, show your splash screen, then re-enable it so that showing the main window would automatically result in notification.

=begin code
method set-auto-startup-notification (
  Bool() $setting
)
=end code

=item $setting; C<True> to automatically do startup notification


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-default-icon

Sets an icon to be used as fallback for windows that haven't had C<.set-icon()> called on them from a pixbuf.

=begin code
method set-default-icon (
   $icon
)
=end code

=item $icon; the icon


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-default-icon-from-file

Sets an icon to be used as fallback for windows that haven't had C<.set-icon-list()> called on them from a file on disk. Warns on failure if C<$err> is C<Nil>.

=begin code
method set-default-icon-from-file (
  Str $filename  --> Bool()
)
=end code

=item $filename; location of icon file


Return value; C<True> if setting the icon succeeded.

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-default-icon-list

Sets an icon list to be used as fallback for windows that haven't had C<.set-icon-list()> called on them to set up a window-specific icon list. This function allows you to set up the icon for all windows in your app at once.

See C<.set-icon-list()> for more details.

=begin code
method set-default-icon-list (
  N-GList() $list
)
=end code

=item $list; (transfer ownership: container) a list of GdkPixbuf


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-default-icon-name

Sets an icon to be used as fallback for windows that haven't had C<.set-icon-list()> called on them from a named themed icon, see C<.set-icon-name()>.

=begin code
method set-default-icon-name (
  Str $name
)
=end code

=item $name; the name of the themed icon


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-interactive-debugging

Opens or closes the interactive debugger,
which offers access to the widget hierarchy of the application and to useful debugging tools.

=begin code
method set-interactive-debugging (
  Bool() $enable
)
=end code

=item $enable; C<True> to enable interactive debugging


=end pod

#-------------------------------------------------------------------------------
#--[Signal Documentation]-------------------------------------------------------
#-------------------------------------------------------------------------------
=begin pod
=head1 Signals

=comment -----------------------------------------------------------------------
=comment #TS:0:activate-default:
=head3 activate-default

The I<activate-default> signal is a keybinding signal which gets emitted when the user activates the default widget of C<$window>.

=begin code
method handler (
  Int :$_handle_id,
  Gnome::Gtk3::Window() :$_native-object,
  Gnome::Gtk3::Window :$_widget,
  *%user-options
)
=end code

=item $_handle_id; the registered event handler id.
=item $_native-object; The native object provided by the caller wrapped in the Raku object.
=item $_widget; the object which received the signal.
=item %user-options; A list of named arguments provided at the C<.register-signal() method from Gnome::GObject::Object>.

=comment -----------------------------------------------------------------------
=comment #TS:0:activate-focus:
=head3 activate-focus

The I<activate-focus> signal is a keybinding signal which gets emitted when the user activates the currently focused widget of C<$window>.

=begin code
method handler (
  Int :$_handle_id,
  Gnome::Gtk3::Window() :$_native-object,
  Gnome::Gtk3::Window :$_widget,
  *%user-options
)
=end code

=item $_handle_id; the registered event handler id.
=item $_native-object; The native object provided by the caller wrapped in the Raku object.
=item $_widget; the object which received the signal.
=item %user-options; A list of named arguments provided at the C<.register-signal() method from Gnome::GObject::Object>.

=comment -----------------------------------------------------------------------
=comment #TS:0:enable-debugging:
=head3 enable-debugging

The I<enable-debugging> signal is a keybinding signal which gets emitted when the user enables or disables interactive debugging. When C<$toggle> is C<True>, interactive debugging is toggled on or off, when it is C<False>, the debugger will be pointed at the widget under the pointer.

The default bindings for this signal are Ctrl-Shift-I and Ctrl-Shift-D.

=begin code
method handler (
  Bool() $toggle,
  Int :$_handle_id,
  Gnome::Gtk3::Window() :$_native-object,
  Gnome::Gtk3::Window :$_widget,
  *%user-options
  --> gboolean
)
=end code

=item $toggle; toggle the debugger.
=item $_handle_id; the registered event handler id.
=item $_native-object; The native object provided by the caller wrapped in the Raku object.
=item $_widget; the object which received the signal.
=item %user-options; A list of named arguments provided at the C<.register-signal() method from Gnome::GObject::Object>.

Return value; C<True> if the key binding was handled

=comment -----------------------------------------------------------------------
=comment #TS:0:keys-changed:
=head3 keys-changed

The I<keys-changed> signal gets emitted when the set of accelerators or mnemonics that are associated with C<$window> changes.

=begin code
method handler (
  Int :$_handle_id,
  Gnome::Gtk3::Window() :$_native-object,
  Gnome::Gtk3::Window :$_widget,
  *%user-options
)
=end code

=item $_handle_id; the registered event handler id.
=item $_native-object; The native object provided by the caller wrapped in the Raku object.
=item $_widget; the object which received the signal.
=item %user-options; A list of named arguments provided at the C<.register-signal() method from Gnome::GObject::Object>.

=comment -----------------------------------------------------------------------
=comment #TS:0:set-focus:
=head3 set-focus

This signal is emitted whenever the currently focused widget in this window changes.

=begin code
method handler (
  N-Object() $widget,
  Int :$_handle_id,
  Gnome::Gtk3::Window() :$_native-object,
  Gnome::Gtk3::Window :$_widget,
  *%user-options
)
=end code

=item $widget; the newly focused widget (or C<Nil> for no focus).
=item $_handle_id; the registered event handler id.
=item $_native-object; The native object provided by the caller wrapped in the Raku object.
=item $_widget; the object which received the signal.
=item %user-options; A list of named arguments provided at the C<.register-signal() method from Gnome::GObject::Object>.

=end pod


#-------------------------------------------------------------------------------
#--[Property Documentation]-----------------------------------------------------
#-------------------------------------------------------------------------------
=begin pod
=head1 Properties

Please note that this information is not really necessary to use or know
about because there are routines to get or set its value for many of
those properties.

=comment -----------------------------------------------------------------------
=comment #TP:0:accept-focus:
=head3 accept-focus

Whether the window should receive the input focus.

=item B<Gnome::GObject::Value> for this property is G_TYPE_BOOLEAN.
=item The native type is gboolean.
=item Property is readable and writable
=item Getter method is C<.get-accept-focus()>
=item Setter method is C<.set-accept-focus()>

=comment -----------------------------------------------------------------------
=comment #TP:0:application:
=head3 application

The B<Gnome::Gtk3::Application> associated with the window.

The application will be kept alive for at least as long as it has any windows associated with it (see g_application_hold()
for a way to keep it alive without windows).

Normally, the connection between the application and the window will remain until the window is destroyed, but you can explicitly remove it by setting the I<property application> property to C<Nil>.

=item B<Gnome::GObject::Value> for this property is .
=item The native type is N-Object.
=item Property is readable and writable
=item Getter method is C<.get-application()>
=item Setter method is C<.set-application()>

=comment -----------------------------------------------------------------------
=comment #TP:0:attached-to:
=head3 attached-to

The widget to which this window is attached.
See C<.set-attached-to()>.

Examples of places where specifying this relation is useful are for instance a B<Gnome::Gtk3::Menu> created by a B<Gnome::Gtk3::ComboBox>, a completion popup window created by B<Gnome::Gtk3::Entry> or a typeahead search entry created by B<Gnome::Gtk3::TreeView>.

=item B<Gnome::GObject::Value> for this property is .
=item The native type is N-Object.
=item Property is readable and writable
=item Getter method is C<.get-attached-to()>
=item Setter method is C<.set-attached-to()>

=comment -----------------------------------------------------------------------
=comment #TP:0:decorated:
=head3 decorated

Whether the window should be decorated by the window manager.

=item B<Gnome::GObject::Value> for this property is G_TYPE_BOOLEAN.
=item The native type is gboolean.
=item Property is readable and writable
=item Getter method is C<.get-decorated()>
=item Setter method is C<.set-decorated()>

=comment -----------------------------------------------------------------------
=comment #TP:0:default-height:
=head3 default-height

There is no documentation for this property

=item B<Gnome::GObject::Value> for this property is G_TYPE_INT.
=item The native type is gint.
=item Property is readable and writable

=comment -----------------------------------------------------------------------
=comment #TP:0:default-width:
=head3 default-width

There is no documentation for this property

=item B<Gnome::GObject::Value> for this property is G_TYPE_INT.
=item The native type is gint.
=item Property is readable and writable

=comment -----------------------------------------------------------------------
=comment #TP:0:deletable:
=head3 deletable

Whether the window frame should have a close button.

=item B<Gnome::GObject::Value> for this property is G_TYPE_BOOLEAN.
=item The native type is gboolean.
=item Property is readable and writable
=item Getter method is C<.get-deletable()>
=item Setter method is C<.set-deletable()>

=comment -----------------------------------------------------------------------
=comment #TP:0:destroy-with-parent:
=head3 destroy-with-parent

There is no documentation for this property

=item B<Gnome::GObject::Value> for this property is G_TYPE_BOOLEAN.
=item The native type is gboolean.
=item Property is readable and writable
=item Getter method is C<.get-destroy-with-parent()>
=item Setter method is C<.set-destroy-with-parent()>

=comment -----------------------------------------------------------------------
=comment #TP:0:focus-on-map:
=head3 focus-on-map

Whether the window should receive the input focus when mapped.

=item B<Gnome::GObject::Value> for this property is G_TYPE_BOOLEAN.
=item The native type is gboolean.
=item Property is readable and writable
=item Getter method is C<.get-focus-on-map()>
=item Setter method is C<.set-focus-on-map()>

=comment -----------------------------------------------------------------------
=comment #TP:0:focus-visible:
=head3 focus-visible

Whether 'focus rectangles' are currently visible in this window.

This property is maintained by GTK+ based on user input and should not be set by applications.

=item B<Gnome::GObject::Value> for this property is G_TYPE_BOOLEAN.
=item The native type is gboolean.
=item Property is readable and writable
=item Getter method is C<.get-focus-visible()>
=item Setter method is C<.set-focus-visible()>

=comment -----------------------------------------------------------------------
=comment #TP:0:gravity:
=head3 gravity

The window gravity of the window. See C<.move()> and C<GdkC<Gravity enumeration> enumeration> for more details about window gravity.

=item B<Gnome::GObject::Value> for this property is G_TYPE_ENUM.
=item The native type is GEnum.
=item Property is readable and writable
=item Getter method is C<.get-gravity()>
=item Setter method is C<.set-gravity()>

=comment -----------------------------------------------------------------------
=comment #TP:0:has-toplevel-focus:
=head3 has-toplevel-focus

There is no documentation for this property

=item B<Gnome::GObject::Value> for this property is G_TYPE_BOOLEAN.
=item The native type is gboolean.
=item Property is readonly
=item Getter method is C<.has-toplevel-focus()>

=comment -----------------------------------------------------------------------
=comment #TP:0:hide-titlebar-when-maximized:
=head3 hide-titlebar-when-maximized

Whether the titlebar should be hidden during maximization.

=item B<Gnome::GObject::Value> for this property is G_TYPE_BOOLEAN.
=item The native type is gboolean.
=item Property is readable and writable
=item Getter method is C<.get-hide-titlebar-when-maximized()>
=item Setter method is C<.set-hide-titlebar-when-maximized()>

=comment -----------------------------------------------------------------------
=comment #TP:0:icon:
=head3 icon

There is no documentation for this property

=item B<Gnome::GObject::Value> for this property is G_TYPE_OBJECT.
=item The native type is .
=item Property is readable and writable
=item Getter method is C<.get-icon()>
=item Setter method is C<.set-icon()>

=comment -----------------------------------------------------------------------
=comment #TP:0:icon-name:
=head3 icon-name

The I<property icon-name> property specifies the name of the themed icon to use as the window icon. See B<Gnome::Gtk3::IconTheme> for more details.

=item B<Gnome::GObject::Value> for this property is .
=item The native type is Str.
=item Property is readable and writable
=item Getter method is C<.get-icon-name()>
=item Setter method is C<.set-icon-name()>

=comment -----------------------------------------------------------------------
=comment #TP:0:is-active:
=head3 is-active

There is no documentation for this property

=item B<Gnome::GObject::Value> for this property is G_TYPE_BOOLEAN.
=item The native type is gboolean.
=item Property is readonly
=item Getter method is C<.is-active()>

=comment -----------------------------------------------------------------------
=comment #TP:0:is-maximized:
=head3 is-maximized

There is no documentation for this property

=item B<Gnome::GObject::Value> for this property is G_TYPE_BOOLEAN.
=item The native type is gboolean.
=item Property is readonly
=item Getter method is C<.is-maximized()>

=comment -----------------------------------------------------------------------
=comment #TP:0:mnemonics-visible:
=head3 mnemonics-visible

Whether mnemonics are currently visible in this window.

This property is maintained by GTK+ based on user input,
and should not be set by applications.

=item B<Gnome::GObject::Value> for this property is G_TYPE_BOOLEAN.
=item The native type is gboolean.
=item Property is readable and writable
=item Getter method is C<.get-mnemonics-visible()>
=item Setter method is C<.set-mnemonics-visible()>

=comment -----------------------------------------------------------------------
=comment #TP:0:modal:
=head3 modal

There is no documentation for this property

=item B<Gnome::GObject::Value> for this property is G_TYPE_BOOLEAN.
=item The native type is gboolean.
=item Property is readable and writable
=item Getter method is C<.get-modal()>
=item Setter method is C<.set-modal()>

=comment -----------------------------------------------------------------------
=comment #TP:0:resizable:
=head3 resizable

There is no documentation for this property

=item B<Gnome::GObject::Value> for this property is G_TYPE_BOOLEAN.
=item The native type is gboolean.
=item Property is readable and writable
=item Getter method is C<.get-resizable()>
=item Setter method is C<.set-resizable()>

=comment -----------------------------------------------------------------------
=comment #TP:0:role:
=head3 role

There is no documentation for this property

=item B<Gnome::GObject::Value> for this property is .
=item The native type is Str.
=item Property is readable and writable
=item Getter method is C<.get-role()>
=item Setter method is C<.set-role()>

=comment -----------------------------------------------------------------------
=comment #TP:0:screen:
=head3 screen

There is no documentation for this property

=item B<Gnome::GObject::Value> for this property is .
=item The native type is N-Object.
=item Property is readable and writable
=item Getter method is C<.get-screen()>
=item Setter method is C<.set-screen()>

=comment -----------------------------------------------------------------------
=comment #TP:0:skip-pager-hint:
=head3 skip-pager-hint

There is no documentation for this property

=item B<Gnome::GObject::Value> for this property is G_TYPE_BOOLEAN.
=item The native type is gboolean.
=item Property is readable and writable
=item Getter method is C<.get-skip-pager-hint()>
=item Setter method is C<.set-skip-pager-hint()>

=comment -----------------------------------------------------------------------
=comment #TP:0:skip-taskbar-hint:
=head3 skip-taskbar-hint

There is no documentation for this property

=item B<Gnome::GObject::Value> for this property is G_TYPE_BOOLEAN.
=item The native type is gboolean.
=item Property is readable and writable
=item Getter method is C<.get-skip-taskbar-hint()>
=item Setter method is C<.set-skip-taskbar-hint()>

=comment -----------------------------------------------------------------------
=comment #TP:0:startup-id:
=head3 startup-id

The I<property startup-id> is a write-only property for setting window's startup notification identifier. See C<.set-startup-id()>
for more details.

=item B<Gnome::GObject::Value> for this property is .
=item The native type is Str.
=item Property is readable and writable
=item Setter method is C<.set-startup-id()>

=comment -----------------------------------------------------------------------
=comment #TP:0:title:
=head3 title

There is no documentation for this property

=item B<Gnome::GObject::Value> for this property is .
=item The native type is Str.
=item Property is readable and writable
=item Getter method is C<.get-title()>
=item Setter method is C<.set-title()>

=comment -----------------------------------------------------------------------
=comment #TP:0:transient-for:
=head3 transient-for

The transient parent of the window. See C<.set-transient-for()> for more details about transient windows.

=item B<Gnome::GObject::Value> for this property is .
=item The native type is N-Object.
=item Property is readable and writable
=item Getter method is C<.get-transient-for()>
=item Setter method is C<.set-transient-for()>

=comment -----------------------------------------------------------------------
=comment #TP:0:type:
=head3 type

There is no documentation for this property

=item B<Gnome::GObject::Value> for this property is G_TYPE_ENUM.
=item The native type is GEnum.
=item Property is readable and writable

=comment -----------------------------------------------------------------------
=comment #TP:0:type-hint:
=head3 type-hint

There is no documentation for this property

=item B<Gnome::GObject::Value> for this property is G_TYPE_ENUM.
=item The native type is GEnum.
=item Property is readable and writable
=item Getter method is C<.get-type-hint()>
=item Setter method is C<.set-type-hint()>

=comment -----------------------------------------------------------------------
=comment #TP:0:urgency-hint:
=head3 urgency-hint

There is no documentation for this property

=item B<Gnome::GObject::Value> for this property is G_TYPE_BOOLEAN.
=item The native type is gboolean.
=item Property is readable and writable
=item Getter method is C<.get-urgency-hint()>
=item Setter method is C<.set-urgency-hint()>

=comment -----------------------------------------------------------------------
=comment #TP:0:window-position:
=head3 window-position

There is no documentation for this property

=item B<Gnome::GObject::Value> for this property is G_TYPE_ENUM.
=item The native type is GEnum.
=item Property is readable and writable

=end pod

