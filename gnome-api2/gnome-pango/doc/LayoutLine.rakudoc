 use v6.d;

 =begin pod
 =head2 Project Description
 =item B<Distribution:> Gnome::Pango
 =item B<Project description:> Modules for package Gnome::Pango:api<2>. The language binding to Pango: Internationalized text layout and rendering
 =item B<Project version:> 0.1.2
 =item B<Rakudo version:> 6.d, 2023.10.67.g.688.b.625.ac
 =item B<Author:> Marcel Timmerman
 =end pod


#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod

![](images/layoutline.png)

=head1 Description

A B<Gnome::Pango::LayoutLine> represents one of the lines resulting from laying
out a paragraph via I<PangoLayout>.

B<Gnome::Pango::LayoutLine> structures are obtained by calling
C<.get-line() defined in Layout> and are only valid until the text,
attributes, or settings of the parent I<PangoLayout> are modified.
=begin comment
=head2 Uml Diagram
![](plantuml/….svg)
=end comment

=begin comment
=head2 Example
  … text …
  … example code …
=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

=head2 new

=head3 :native-object

Create an object using a native object from elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object :$native-object! )


=end pod

#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-extents

Computes the logical and ink extents of a layout line.

See C<.get-glyph-extents() defined in Font> for details about the interpretation of the rectangles.

=begin code
method get-extents ( CArray[N-Rectangle]  $ink-rect, CArray[N-Rectangle]  $logical-rect )
=end code

=item $ink-rect; rectangle used to store the extents of
 the glyph string as drawn.
=item $logical-rect; rectangle used to store the logical
 extents of the glyph string.

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-height

Computes the height of the line, as the maximum of the heights of fonts used in this line.

Note that the actual baseline-to-baseline distance between lines of text is influenced by other factors, such as C<.set-spacing() defined in Layout> and C<.set-line-spacing() defined in Layout>.

=begin code
method get-height ( Array[Int] $height )
=end code

=item $height; (transfer ownership: full) return location for the line height.

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-length

Returns the length of the line, in bytes.

=begin code
method get-length (--> Int )
=end code


Return value; the length of the line. 


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-pixel-extents

Computes the logical and ink extents of C<$layout_line> in device units.

This function just calls C<.get-extents()> followed by two [func C<$extents_to_pixels>] calls, rounding C<$ink_rect> and C<$logical_rect>
such that the rounded rectangles fully contain the unrounded one (that is,
passes them as first argument to [func C<$extents_to_pixels>]).

=begin code
method get-pixel-extents ( CArray[N-Rectangle]  $ink-rect, CArray[N-Rectangle]  $logical-rect )
=end code

=item $ink-rect; rectangle used to store the extents of
 the glyph string as drawn.
=item $logical-rect; rectangle used to store the logical
 extents of the glyph string.

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-resolved-direction

Returns the resolved direction of the line.

=begin code
method get-resolved-direction (--> PangoDirection )
=end code


Return value; the resolved direction of the line.  An enumeration.


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-start-index

Returns the start index of the line, as byte index into the text of the layout.

=begin code
method get-start-index (--> Int )
=end code


Return value; the start index of the line. 


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-x-ranges

Gets a list of visual ranges corresponding to a given logical range.

This list is not necessarily minimal - there may be consecutive ranges which are adjacent. The ranges will be sorted from left to right. The ranges are with respect to the left edge of the entire layout, not with respect to the line.

=begin code
method get-x-ranges ( Int() $start-index, Int() $end-index, Array[Int] $ranges, Array[Int] $n-ranges )
=end code

=item $start-index; Start byte index of the logical range. If this value
 is less than the start index for the line, then the first range
 will extend all the way to the leading edge of the layout. Otherwise,
 it will start at the leading edge of the first character..
=item $end-index; Ending byte index of the logical range. If this value is
 greater than the end index for the line, then the last range will
 extend all the way to the trailing edge of the layout. Otherwise,
 it will end at the trailing edge of the last character..
=item $ranges; (transfer ownership: full) location to
 store a pointer to an array of ranges. The array will be of length
 I<2*n_ranges>, with each range starting at I<(*ranges)[2*n]> and of
 width I<(*ranges)[2*n + 1] - (*ranges)[2*n]>. This array must be freed
 with g_free(). The coordinates are relative to the layout and are in
 Pango units..
=item $n-ranges; (transfer ownership: full) The number of ranges stored in C<$ranges>.

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 index-to-x

Converts an index within a line to a X position.

=begin code
method index-to-x ( Int() $index, Bool() $trailing, Array[Int] $x-pos )
=end code

=item $index; byte offset of a grapheme within the layout.
=item $trailing; an integer indicating the edge of the grapheme to retrieve
 the position of. If > 0, the trailing edge of the grapheme,
 if 0, the leading of the grapheme.
=item $x-pos; (transfer ownership: full) location to store the x_offset (in Pango units).

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 is-paragraph-start

Returns whether this is the first line of the paragraph.

=begin code
method is-paragraph-start (--> Bool )
=end code


Return value; %TRUE if this is the first line. 


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 ref

Increase the reference count of a B<Gnome::Pango::LayoutLine> by one.

=begin code
method ref (--> CArray[N-LayoutLine] )
=end code


Return value; the line passed in.. 


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 unref

Decrease the reference count of a B<Gnome::Pango::LayoutLine> by one.

If the result is zero, the line and all associated memory will be freed.

=begin code
method unref ( )
=end code


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 x-to-index

Converts from x offset to the byte index of the corresponding character within the text of the layout.

If C<$x_pos> is outside the line, C<$index_> and C<$trailing> will point to the very first or very last position in the line. This determination is based on the resolved direction of the paragraph; for example, if the resolved direction is right-to-left, then an X position to the right of the line (after it)
results in 0 being stored in C<$index_> and C<$trailing>. An X position to the left of the line results in C<$index_> pointing to the (logical) last grapheme in the line and C<$trailing> being set to the number of characters in that grapheme. The reverse is true for a left-to-right line.

=begin code
method x-to-index ( Int() $x-pos, Array[Int] $index, Array[Int] $trailing --> Bool )
=end code

=item $x-pos; the X offset (in Pango units) from the left edge of the line..
=item $index; (transfer ownership: full) location to store calculated byte index for the grapheme
 in which the user clicked.
=item $trailing; (transfer ownership: full) location to store an integer indicating where in the
 grapheme the user clicked. It will either be zero, or the number of
 characters in the grapheme. 0 represents the leading edge of the grapheme..

Return value; %FALSE if C<$x_pos> was outside the line, %TRUE if inside. 


=end pod

