=comment Package: Pango, C-Source: layout
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Gnome::Pango::N-LayoutLine

=head1 Description

A U<Gnome::Pango::N-LayoutLine> represents one of the lines resulting from laying
out a paragraph via B<Gnome::Pango::Layout>.

U<Gnome::Pango::N-LayoutLine> structures are obtained by calling
C<.get-line() in class Gnome::Pango::Layout> and are only valid until the text,
attributes, or settings of the parent B<Gnome::Pango::Layout> are modified.

=begin comment

=head2 Example
# Example use of module Gnome::Pango::LayoutLine

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Record Structure Documentation]---------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Record N-LayoutLine

  class N-LayoutLine:auth<github:MARTIMM>:api<2> is export is repr('CStruct') {

    has N-Object $.layout;
    has gint $.start-index;
    has gint $.length;
    has N-SList $.runs;
    has guint $.is-paragraph-start;
    has guint $.resolved-dir;
  }

=item layout; the layout this line belongs to, might be undefined
=item start-index; start of line as byte index into layout->text
=item length; length of line in bytes
=item runs; list of runs in the
  line, from left to right
=item is-paragraph-start; #TRUE if this is the first line of the paragraph
=item resolved-dir; #Resolved PangoDirection of line

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

=head2 new

=head3 :native-object

Create an object using a native object from elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object :$native-object! )

=end pod

#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-extents
This function is not yet available

Computes the logical and ink extents of a layout line.

See C<.get-glyph-extents() in class Gnome::Pango::Font> for details
about the interpretation of the rectangles.

=begin code
method get-extents ( CArray[N-Rectangle]  $ink-rect, CArray[N-Rectangle]  $logical-rect )
=end code

=item $ink-rect; rectangle used to store the extents of
  the glyph string as drawn.
=item $logical-rect; rectangle used to store the logical
  extents of the glyph string.

=begin comment

=head2 Example
# Example for get-extents

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-height

Computes the height of the line, as the maximum of the heights
of fonts used in this line.

Note that the actual baseline-to-baseline distance between lines
of text is influenced by other factors, such as
C<.set-spacing() in class Gnome::Pango::Layout> and
C<.set-line-spacing() in class Gnome::Pango::Layout>.

=begin code
method get-height ( Array[Int] $height )
=end code

=item $height; (transfer ownership: full) return location for the line height.

=begin comment

=head2 Example
# Example for get-height

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-length

Returns the length of the line, in bytes.

=begin code
method get-length (--> Int )
=end code

Return value; the length of the line. 

=begin comment

=head2 Example
# Example for get-length

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-pixel-extents
This function is not yet available

Computes the logical and ink extents of C<$layout_line> in device units.

This function just calls C<.get-extents()> followed by
two [func C<$extents_to_pixels>] calls, rounding C<$ink_rect> and C<$logical_rect>
such that the rounded rectangles fully contain the unrounded one (that is,
passes them as first argument to [func C<$extents_to_pixels>]).

=begin code
method get-pixel-extents ( CArray[N-Rectangle]  $ink-rect, CArray[N-Rectangle]  $logical-rect )
=end code

=item $ink-rect; rectangle used to store the extents of
  the glyph string as drawn.
=item $logical-rect; rectangle used to store the logical
  extents of the glyph string.

=begin comment

=head2 Example
# Example for get-pixel-extents

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-resolved-direction

Returns the resolved direction of the line.

=begin code
method get-resolved-direction (--> PangoDirection )
=end code

Return value; the resolved direction of the line. 

=begin comment

=head2 Example
# Example for get-resolved-direction

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-start-index

Returns the start index of the line, as byte index
into the text of the layout.

=begin code
method get-start-index (--> Int )
=end code

Return value; the start index of the line. 

=begin comment

=head2 Example
# Example for get-start-index

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-x-ranges

Gets a list of visual ranges corresponding to a given logical range.

This list is not necessarily minimal - there may be consecutive
ranges which are adjacent. The ranges will be sorted from left to
right. The ranges are with respect to the left edge of the entire
layout, not with respect to the line.

=begin code
method get-x-ranges ( Int() $start-index, Int() $end-index, Array[Int] $ranges, Array[Int] $n-ranges )
=end code

=item $start-index; Start byte index of the logical range. If this value
  is less than the start index for the line, then the first range
  will extend all the way to the leading edge of the layout. Otherwise,
  it will start at the leading edge of the first character..
=item $end-index; Ending byte index of the logical range. If this value is
  greater than the end index for the line, then the last range will
  extend all the way to the trailing edge of the layout. Otherwise,
  it will end at the trailing edge of the last character..
=item $ranges; (transfer ownership: full) location to
  store a pointer to an array of ranges. The array will be of length
  B<2*n_ranges>, with each range starting at B<(*ranges)[2*n]> and of
  width B<(*ranges)[2*n + 1] - (*ranges)[2*n]>. This array must be freed
  with g_free(). The coordinates are relative to the layout and are in
  Pango units..
=item $n-ranges; (transfer ownership: full) The number of ranges stored in C<$ranges>.

=begin comment

=head2 Example
# Example for get-x-ranges

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 index-to-x

Converts an index within a line to a X position.

=begin code
method index-to-x ( Int() $index, Bool() $trailing, Array[Int] $x-pos )
=end code

=item $index; byte offset of a grapheme within the layout.
=item $trailing; an integer indicating the edge of the grapheme to retrieve
  the position of. If > 0, the trailing edge of the grapheme,
  if 0, the leading of the grapheme.
=item $x-pos; (transfer ownership: full) location to store the x_offset (in Pango units).

=begin comment

=head2 Example
# Example for index-to-x

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 is-paragraph-start

Returns whether this is the first line of the paragraph.

=begin code
method is-paragraph-start (--> Bool )
=end code

Return value; C<True> if this is the first line. 

=begin comment

=head2 Example
# Example for is-paragraph-start

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 ref

Increase the reference count of a U<Gnome::Pango::N-LayoutLine> by one.

=begin code
method ref (--> CArray[N-LayoutLine] )
=end code

Return value; the line passed in.. 

=begin comment

=head2 Example
# Example for ref

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 unref

Decrease the reference count of a U<Gnome::Pango::N-LayoutLine> by one.

If the result is zero, the line and all associated memory
will be freed.

=begin code
method unref ( )
=end code

=begin comment

=head2 Example
# Example for unref

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 x-to-index

Converts from x offset to the byte index of the corresponding character
within the text of the layout.

If C<$x_pos> is outside the line, C<$index_> and C<$trailing> will point to the very
first or very last position in the line. This determination is based on the
resolved direction of the paragraph; for example, if the resolved direction
is right-to-left, then an X position to the right of the line (after it)
results in 0 being stored in C<$index_> and C<$trailing>. An X position to the
left of the line results in C<$index_> pointing to the (logical) last grapheme
in the line and C<$trailing> being set to the number of characters in that
grapheme. The reverse is true for a left-to-right line.

=begin code
method x-to-index ( Int() $x-pos, Array[Int] $index, Array[Int] $trailing --> Bool )
=end code

=item $x-pos; the X offset (in Pango units) from the left edge of the line..
=item $index; (transfer ownership: full) location to store calculated byte index for the grapheme
  in which the user clicked.
=item $trailing; (transfer ownership: full) location to store an integer indicating where in the
  grapheme the user clicked. It will either be zero, or the number of
  characters in the grapheme. 0 represents the leading edge of the grapheme..

Return value; C<False> if C<$x_pos> was outside the line, C<True> if inside. 

=begin comment

=head2 Example
# Example for x-to-index

=end comment

=end pod

