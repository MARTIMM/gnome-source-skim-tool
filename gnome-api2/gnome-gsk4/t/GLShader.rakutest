=comment Package: Gsk4, C-Source: glshader
use v6.d;

#TL:1:Gnome::Gsk4::GLShader:
#-------------------------------------------------------------------------------
#--[Module Imports]-------------------------------------------------------------
#-------------------------------------------------------------------------------

use Test;
use NativeCall;


#use Gnome::Glib::N-Bytes:api<2>;
use Gnome::Glib::N-Error:api<2>;
#use Gnome::Glib::T-array:api<2>;
use Gnome::Graphene::N-Vec2:api<2>;
use Gnome::Graphene::N-Vec3:api<2>;
use Gnome::Graphene::N-Vec4:api<2>;
use Gnome::Graphene::T-vec:api<2>;
use Gnome::Gsk4::GLShader:api<2>;
use Gnome::Gsk4::T-enums:api<2>;
use Gnome::N::GlibToRakuTypes:api<2>;
use Gnome::N::N-Object:api<2>;
use Gnome::N::NativeLib:api<2>;
use Gnome::N::X:api<2>;

#-------------------------------------------------------------------------------
#--[Test preparation]-----------------------------------------------------------
#-------------------------------------------------------------------------------

#Gnome::N::debug(:on);
my Gnome::Gsk4::GLShader $glshader;

#-------------------------------------------------------------------------------
#--[Class init tests]-----------------------------------------------------------
#-------------------------------------------------------------------------------

subtest 'ISA test', {
  given $glshader {
    my Str $resource-path;
    my N-Object $sourcecode;

#`{{
    #TC:0:new-from-bytes()
    $sourcecode = …;
    $glshader .= new-from-bytes( $sourcecode);
    ok .is-valid, '.new-from-bytes( $sourcecode)';

    #TC:0:new-from-resource()
    $resource-path = 'text';
    $glshader .= new-from-resource( $resource-path);
    ok .is-valid, '.new-from-resource( $resource-path)';

}}
  }
};

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# set environment variable 'raku-test-all' if rest must be tested too.
unless %*ENV<raku_test_all>:exists {
  done-testing;
  exit;
}

#-------------------------------------------------------------------------------
subtest 'Method tests', {
  with $glshader {
    my N-Object $args;
    my CArray[N-Error] $err;
    my Str $name;
    my N-Object $out-value;
    my  $uniforms;
    my gint $idx;
    my N-Object $renderer;


#`{{
    #TM:0:compile()
    ok .compile( $renderer, $err), '.compile()';

    #TM:0:find-uniform-by-name()
    ok .find-uniform-by-name( $name), '.find-uniform-by-name()';

    #TM:0:format-args()
    ok .format-args(), '.format-args()';

    #TM:0:format-args-va()
    ok .format-args-va( $uniforms), '.format-args-va()';

    #TM:0:get-arg-bool()
    is .get-arg-bool( $args, $idx), '…', '.get-arg-bool()';

    #TM:0:get-arg-float()
    is .get-arg-float( $args, $idx), '…', '.get-arg-float()';

    #TM:0:get-arg-int()
    is .get-arg-int( $args, $idx), '…', '.get-arg-int()';

    #TM:0:get-arg-uint()
    is .get-arg-uint( $args, $idx), '…', '.get-arg-uint()';

    #TM:0:get-arg-vec2()
    is .get-arg-vec2( $args, $idx, $out-value), '…', '.get-arg-vec2()';

    #TM:0:get-arg-vec3()
    is .get-arg-vec3( $args, $idx, $out-value), '…', '.get-arg-vec3()';

    #TM:0:get-arg-vec4()
    is .get-arg-vec4( $args, $idx, $out-value), '…', '.get-arg-vec4()';

    #TM:0:get-args-size()
     .get-args-size(), '…', '.get-args-size()';

    #TM:0:get-n-textures()
     .get-n-textures(), '…', '.get-n-textures()';

    #TM:0:get-n-uniforms()
     .get-n-uniforms(), '…', '.get-n-uniforms()';

    #TM:0:get-resource()
     .get-resource(), '…', '.get-resource()';

    #TM:0:get-source()
     .get-source(), '…', '.get-source()';

    #TM:0:get-uniform-name()
    is .get-uniform-name( $idx), '…', '.get-uniform-name()';

    #TM:0:get-uniform-offset()
    is .get-uniform-offset( $idx), '…', '.get-uniform-offset()';

    #TM:0:get-uniform-type()
    is .get-uniform-type( $idx), '…', '.get-uniform-type()';

}}
  }
};

#-------------------------------------------------------------------------------
subtest 'Function tests', {
  with $glshader {


#`{{
}}
  }
};

#-------------------------------------------------------------------------------
done-testing;

=finish

#-------------------------------------------------------------------------------
subtest 'Signals …', {
  use Gnome::Gtk3::Main;

  my Gnome::Gtk3::Main $main .= new;

  class SignalHandlers {
    has Bool $!signal-processed = False;

    method … (
      'any-args',
      Gnome::Gsk4::GLShader() :$_native-object, gulong :$_handler-id
      # --> …
    ) {

      isa-ok $_native-object, Gnome::Gsk4::GLShader;
      $!signal-processed = True;
    }

    method signal-emitter ( Gnome::Gsk4::GLShader :$_widget --> Str ) {

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      $_widget.emit-by-name(
        'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      );
      is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      #$!signal-processed = False;
      #$_widget.emit-by-name(
      #  'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      #);
      #is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }
      sleep(0.4);
      $main.gtk-main-quit;

      'done'
    }
  }

  my Gnome::Gsk4::GLShader $glshader .= new;

  #my Gnome::Gtk3::Window $w .= new;
  #$w.add($m);

  my SignalHandlers $sh .= new;
  $glshader.register-signal( $sh, 'method', 'signal');

  my Promise $p = $i.start-thread(
    $sh, 'signal-emitter',
    # :!new-context,
    # :start-time(now + 1)
  );

  is $main.gtk-main-level, 0, "loop level 0";
  $main.gtk-main;
  #is $main.gtk-main-level, 0, "loop level is 0 again";

  is $p.result, 'done', 'emitter finished';
}

