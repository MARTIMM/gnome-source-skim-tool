=comment Package: Gsk4, C-Source: enums
use v6.d;

=begin pod
=TITLE Gnome::Gsk4::T-enums
=end pod

#-------------------------------------------------------------------------------
#--[Enumerations]---------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Enumerations

=head2 GskBlendMode

The blend modes available for render nodes.

The implementation of each blend mode is deferred to the
rendering pipeline.

See <https://www.w3.org/TR/compositing-1/#blending> for more information
on blending and blend modes.
=item C<GSK_BLEND_MODE_DEFAULT>; The default blend mode, which specifies no blending
=item C<GSK_BLEND_MODE_MULTIPLY>; The source color is multiplied by the destination
  and replaces the destination
=item C<GSK_BLEND_MODE_SCREEN>; Multiplies the complements of the destination and source
  color values, then complements the result.
=item C<GSK_BLEND_MODE_OVERLAY>; Multiplies or screens the colors, depending on the
  destination color value. This is the inverse of hard-list
=item C<GSK_BLEND_MODE_DARKEN>; Selects the darker of the destination and source colors
=item C<GSK_BLEND_MODE_LIGHTEN>; Selects the lighter of the destination and source colors
=item C<GSK_BLEND_MODE_COLOR_DODGE>; Brightens the destination color to reflect the source color
=item C<GSK_BLEND_MODE_COLOR_BURN>; Darkens the destination color to reflect the source color
=item C<GSK_BLEND_MODE_HARD_LIGHT>; Multiplies or screens the colors, depending on the source color value
=item C<GSK_BLEND_MODE_SOFT_LIGHT>; Darkens or lightens the colors, depending on the source color value
=item C<GSK_BLEND_MODE_DIFFERENCE>; Subtracts the darker of the two constituent colors from the lighter color
=item C<GSK_BLEND_MODE_EXCLUSION>; Produces an effect similar to that of the difference mode but lower in contrast
=item C<GSK_BLEND_MODE_COLOR>; Creates a color with the hue and saturation of the source color and the luminosity of the destination color
=item C<GSK_BLEND_MODE_HUE>; Creates a color with the hue of the source color and the saturation and luminosity of the destination color
=item C<GSK_BLEND_MODE_SATURATION>; Creates a color with the saturation of the source color and the hue and luminosity of the destination color
=item C<GSK_BLEND_MODE_LUMINOSITY>; Creates a color with the luminosity of the source color and the hue and saturation of the destination color

=head2 GskCorner

The corner indices used by B<Gnome::Gsk4::N-RoundedRect>.
=item C<GSK_CORNER_TOP_LEFT>; The top left corner
=item C<GSK_CORNER_TOP_RIGHT>; The top right corner
=item C<GSK_CORNER_BOTTOM_RIGHT>; The bottom right corner
=item C<GSK_CORNER_BOTTOM_LEFT>; The bottom left corner

=head2 GskFillRule

C<enumeration GskFillRule defined in Gnome::Gsk4::T-enums> is used to select how paths are filled.

Whether or not a point is included in the fill is determined by taking
a ray from that point to infinity and looking at intersections with the
path. The ray can be in any direction, as long as it doesn't pass through
the end point of a segment or have a tricky intersection such as
intersecting tangent to the path.

(Note that filling is not actually implemented in this way. This
is just a description of the rule that is applied.)

New entries may be added in future versions.
=item C<GSK_FILL_RULE_WINDING>; If the path crosses the ray from
  left-to-right, counts +1. If the path crosses the ray
  from right to left, counts -1. (Left and right are determined
  from the perspective of looking along the ray from the starting
  point.) If the total count is non-zero, the point will be filled.
=item C<GSK_FILL_RULE_EVEN_ODD>; Counts the total number of
  intersections, without regard to the orientation of the contour. If
  the total number of intersections is odd, the point will be
  filled.

=head2 GskGLUniformType

This defines the types of the uniforms that B<GskGLShaders>
declare.

It defines both what the type is called in the GLSL shader
code, and what the corresponding C type is on the Gtk side.
=item C<GSK_GL_UNIFORM_TYPE_NONE>; No type, used for uninitialized or unspecified values.
=item C<GSK_GL_UNIFORM_TYPE_FLOAT>; A float uniform
=item C<GSK_GL_UNIFORM_TYPE_INT>; A GLSL int / gint32 uniform
=item C<GSK_GL_UNIFORM_TYPE_UINT>; A GLSL uint / guint32 uniform
=item C<GSK_GL_UNIFORM_TYPE_BOOL>; A GLSL bool / gboolean uniform
=item C<GSK_GL_UNIFORM_TYPE_VEC2>; A GLSL vec2 / graphene_vec2_t uniform
=item C<GSK_GL_UNIFORM_TYPE_VEC3>; A GLSL vec3 / graphene_vec3_t uniform
=item C<GSK_GL_UNIFORM_TYPE_VEC4>; A GLSL vec4 / graphene_vec4_t uniform

=head2 GskLineCap

Specifies how to render the start and end points of contours or
dashes when stroking.

The default line cap style is B<GSK_LINE_CAP_BUTT>.

New entries may be added in future versions.

<figure>
  <picture>
    <source srcset="caps-dark.png" media="(prefers-color-scheme: dark)">
    <img alt="Line Cap Styles" src="caps-light.png">
  </picture>
  <figcaption>GSK_LINE_CAP_BUTT, GSK_LINE_CAP_ROUND, GSK_LINE_CAP_SQUARE</figcaption>
</figure>
=item C<GSK_LINE_CAP_BUTT>; Start and stop the line exactly at the start
  and end point
=item C<GSK_LINE_CAP_ROUND>; Use a round ending, the center of the circle
  is the start or end point
=item C<GSK_LINE_CAP_SQUARE>; use squared ending, the center of the square
  is the start or end point

=head2 GskLineJoin

Specifies how to render the junction of two lines when stroking.

The default line join style is B<GSK_LINE_JOIN_MITER>.

New entries may be added in future versions.

<figure>
  <picture>
    <source srcset="join-dark.png" media="(prefers-color-scheme: dark)">
    <img alt="Line Join Styles" src="join-light.png">
  </picture>
  <figcaption>GSK_LINE_JOINT_MITER, GSK_LINE_JOINT_ROUND, GSK_LINE_JOIN_BEVEL</figcaption>
</figure>
=item C<GSK_LINE_JOIN_MITER>; Use a sharp angled corner
=item C<GSK_LINE_JOIN_ROUND>; Use a round join, the center of the circle is
  the join point
=item C<GSK_LINE_JOIN_BEVEL>; use a cut-off join, the join is cut off at half
  the line width from the joint point

=head2 GskMaskMode

The mask modes available for mask nodes.
=item C<GSK_MASK_MODE_ALPHA>; Use the alpha channel of the mask
=item C<GSK_MASK_MODE_INVERTED_ALPHA>; Use the inverted alpha channel of the mask
=item C<GSK_MASK_MODE_LUMINANCE>; Use the luminance of the mask,
    multiplied by mask alpha
=item C<GSK_MASK_MODE_INVERTED_LUMINANCE>; Use the inverted luminance of the mask,
    multiplied by mask alpha

=head2 GskPathDirection

The values of the C<enumeration GskPathDirection defined in Gnome::Gsk4::T-enums> enum are used to pick one
of the four tangents at a given point on the path.

Note that the directions for C<$GSK-PATH-FROM-START>/ C<$GSK-PATH-TO-END> and C<$GSK-PATH-TO-START>/ C<$GSK-PATH-FROM-END> will coincide for smooth points.
Only sharp turns will exhibit four different directions.

<picture>
  <source srcset="directions-dark.png" media="(prefers-color-scheme: dark)">
  <img alt="Path Tangents" src="directions-light.png">
</picture>
=item C<GSK_PATH_FROM_START>; The tangent in path direction of the incoming side
  of the path
=item C<GSK_PATH_TO_START>; The tangent against path direction of the incoming side
  of the path
=item C<GSK_PATH_TO_END>; The tangent in path direction of the outgoing side
  of the path
=item C<GSK_PATH_FROM_END>; The tangent against path direction of the outgoing
  side of the path

=head2 GskPathOperation

Path operations are used to describe the segments of a B<Gnome::Gsk4::N-Path>.

More values may be added in the future.
=item C<GSK_PATH_MOVE>; A move-to operation, with 1 point describing the target point.
=item C<GSK_PATH_CLOSE>; A close operation ending the current contour with a line back
  to the starting point. Two points describe the start and end of the line.
=item C<GSK_PATH_LINE>; A line-to operation, with 2 points describing the start and
  end point of a straight line.
=item C<GSK_PATH_QUAD>; A curve-to operation describing a quadratic Bézier curve
  with 3 points describing the start point, the control point and the end
  point of the curve.
=item C<GSK_PATH_CUBIC>; A curve-to operation describing a cubic Bézier curve with 4
  points describing the start point, the two control points and the end point
  of the curve.
=item C<GSK_PATH_CONIC>; A rational quadratic Bézier curve with 3 points describing
  the start point, control point and end point of the curve. A weight for the
  curve will be passed, too.

=head2 GskRenderNodeType

The type of a node determines what the node is rendering.
=item C<GSK_NOT_A_RENDER_NODE>; Error type. No node will ever have this type.
=item C<GSK_CONTAINER_NODE>; A node containing a stack of children
=item C<GSK_CAIRO_NODE>; A node drawing a B<Gnome::Cairo::N-Context>
=item C<GSK_COLOR_NODE>; A node drawing a single color rectangle
=item C<GSK_LINEAR_GRADIENT_NODE>; A node drawing a linear gradient
=item C<GSK_REPEATING_LINEAR_GRADIENT_NODE>; A node drawing a repeating linear gradient
=item C<GSK_RADIAL_GRADIENT_NODE>; A node drawing a radial gradient
=item C<GSK_REPEATING_RADIAL_GRADIENT_NODE>; A node drawing a repeating radial gradient
=item C<GSK_CONIC_GRADIENT_NODE>; A node drawing a conic gradient
=item C<GSK_BORDER_NODE>; A node stroking a border around an area
=item C<GSK_TEXTURE_NODE>; A node drawing a B<Gnome::Gdk4::Texture>
=item C<GSK_INSET_SHADOW_NODE>; A node drawing an inset shadow
=item C<GSK_OUTSET_SHADOW_NODE>; A node drawing an outset shadow
=item C<GSK_TRANSFORM_NODE>; A node that renders its child after applying a matrix transform
=item C<GSK_OPACITY_NODE>; A node that changes the opacity of its child
=item C<GSK_COLOR_MATRIX_NODE>; A node that applies a color matrix to every pixel
=item C<GSK_REPEAT_NODE>; A node that repeats the child's contents
=item C<GSK_CLIP_NODE>; A node that clips its child to a rectangular area
=item C<GSK_ROUNDED_CLIP_NODE>; A node that clips its child to a rounded rectangle
=item C<GSK_SHADOW_NODE>; A node that draws a shadow below its child
=item C<GSK_BLEND_NODE>; A node that blends two children together
=item C<GSK_CROSS_FADE_NODE>; A node that cross-fades between two children
=item C<GSK_TEXT_NODE>; A node containing a glyph string
=item C<GSK_BLUR_NODE>; A node that applies a blur
=item C<GSK_DEBUG_NODE>; Debug information that does not affect the rendering
=item C<GSK_GL_SHADER_NODE>; A node that uses OpenGL fragment shaders to render
=item C<GSK_TEXTURE_SCALE_NODE>; A node drawing a B<Gnome::Gdk4::Texture> scaled and filtered.
=item C<GSK_MASK_NODE>; A node that masks one child with another.
=item C<GSK_FILL_NODE>; A node that fills a path.
=item C<GSK_STROKE_NODE>; A node that strokes a path.
=item C<GSK_SUBSURFACE_NODE>; A node that possibly redirects part of the scene graph to a subsurface.

=head2 GskScalingFilter

The filters used when scaling texture data.

The actual implementation of each filter is deferred to the
rendering pipeline.
=item C<GSK_SCALING_FILTER_LINEAR>; linear interpolation filter
=item C<GSK_SCALING_FILTER_NEAREST>; nearest neighbor interpolation filter
=item C<GSK_SCALING_FILTER_TRILINEAR>; linear interpolation along each axis,
  plus mipmap generation, with linear interpolation along the mipmap
  levels

=head2 GskSerializationError

Errors that can happen during (de)serialization.
=item C<GSK_SERIALIZATION_UNSUPPORTED_FORMAT>; The format can not be identified
=item C<GSK_SERIALIZATION_UNSUPPORTED_VERSION>; The version of the data is not
  understood
=item C<GSK_SERIALIZATION_INVALID_DATA>; The given data may not exist in
  a proper serialization

=head2 GskTransformCategory

The categories of matrices relevant for GSK and GTK.

Note that any category includes matrices of all later categories.
So if you want to for example check if a matrix is a 2D matrix,
B<category> >= GSK_TRANSFORM_CATEGORY_2D` is the way to do this.

Also keep in mind that rounding errors may cause matrices to not
conform to their categories. Otherwise, matrix operations done via
multiplication will not worsen categories. So for the matrix
multiplication B<C> = A * B`, B<category>(C) = MIN (category(A), category(B))`.
=item C<GSK_TRANSFORM_CATEGORY_UNKNOWN>; The category of the matrix has not been
  determined.
=item C<GSK_TRANSFORM_CATEGORY_ANY>; Analyzing the matrix concluded that it does
  not fit in any other category.
=item C<GSK_TRANSFORM_CATEGORY_3D>; The matrix is a 3D matrix. This means that
  the w column (the last column) has the values (0, 0, 0, 1).
=item C<GSK_TRANSFORM_CATEGORY_2D>; The matrix is a 2D matrix. This is equivalent
  to graphene_matrix_is_2d() returning C<True>. In particular, this
  means that Cairo can deal with the matrix.
=item C<GSK_TRANSFORM_CATEGORY_2D_AFFINE>; The matrix is a combination of 2D scale
  and 2D translation operations. In particular, this means that any
  rectangle can be transformed exactly using this matrix.
=item C<GSK_TRANSFORM_CATEGORY_2D_TRANSLATE>; The matrix is a 2D translation.
=item C<GSK_TRANSFORM_CATEGORY_IDENTITY>; The matrix is the identity matrix.
=end pod

