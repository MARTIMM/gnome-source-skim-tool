# Command to generate: generate.raku -v -t Gio io
use v6.d;

#TL:1:Gnome::Gio::Menu:
#-------------------------------------------------------------------------------
#--[Module Imports]-------------------------------------------------------------
#-------------------------------------------------------------------------------

use NativeCall;
use Test;


use Gnome::Gio::Menu:api<2>;
use Gnome::N::GlibToRakuTypes:api<2>;
use Gnome::N::N-Object:api<2>;
use Gnome::N::NativeLib:api<2>;
use Gnome::N::X:api<2>;

#-------------------------------------------------------------------------------
#--[Test preparation]-----------------------------------------------------------
#-------------------------------------------------------------------------------

#Gnome::N::debug(:on);
my Gnome::Gio::Menu $menu;

#-------------------------------------------------------------------------------
#--[Class init tests]-----------------------------------------------------------
#-------------------------------------------------------------------------------

subtest 'ISA test', {
  given $menu {

#`{{
    #TC:0:new-menu()

    $menu .= new-menu();
    ok .is-valid, '.new-menu()';

}}
  }
};

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# set environment variable 'raku-test-all' if rest must be tested too.
unless %*ENV<raku_test_all>:exists {
  done-testing;
  exit;
}

#-------------------------------------------------------------------------------
subtest 'Method tests', {
  with $menu {
    my N-Object() $section;
    my N-Object() $submenu;
    my Str $label;
    my Str $detailed-action;
    my N-Object() $item;
    my Int() $position;


#`{{
    #TM:0:append()
    ok .append( $label, $detailed-action), '.append()';

    #TM:0:append-item()
    ok .append-item( $item), '.append-item()';

    #TM:0:append-section()
    ok .append-section( $label, $section), '.append-section()';

    #TM:0:append-submenu()
    ok .append-submenu( $label, $submenu), '.append-submenu()';

    #TM:0:freeze()
    ok .freeze(), '.freeze()';

    #TM:0:insert()
    ok .insert( $position, $label, $detailed-action), '.insert()';

    #TM:0:insert-item()
    ok .insert-item( $position, $item), '.insert-item()';

    #TM:0:insert-section()
    ok .insert-section( $position, $label, $section), '.insert-section()';

    #TM:0:insert-submenu()
    ok .insert-submenu( $position, $label, $submenu), '.insert-submenu()';

    #TM:0:prepend()
    ok .prepend( $label, $detailed-action), '.prepend()';

    #TM:0:prepend-item()
    ok .prepend-item( $item), '.prepend-item()';

    #TM:0:prepend-section()
    ok .prepend-section( $label, $section), '.prepend-section()';

    #TM:0:prepend-submenu()
    ok .prepend-submenu( $label, $submenu), '.prepend-submenu()';

    #TM:0:remove()
    ok .remove( $position), '.remove()';

    #TM:0:remove-all()
    ok .remove-all(), '.remove-all()';

}}
  }
};

#-------------------------------------------------------------------------------
done-testing;

=finish

#-------------------------------------------------------------------------------
subtest 'Signals …', {
  use Gnome::Gtk3::Main;

  my Gnome::Gtk3::Main $main .= new;

  class SignalHandlers {
    has Bool $!signal-processed = False;

    method … (
      'any-args',
      Gnome::Gio::Menu() :$_native-object, gulong :$_handler-id
      # --> …
    ) {

      isa-ok $_native-object, Gnome::Gio::Menu;
      $!signal-processed = True;
    }

    method signal-emitter ( Gnome::Gio::Menu :$_widget --> Str ) {

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      $_widget.emit-by-name(
        'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      );
      is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      #$!signal-processed = False;
      #$_widget.emit-by-name(
      #  'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      #);
      #is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }
      sleep(0.4);
      $main.gtk-main-quit;

      'done'
    }
  }

  my Gnome::Gio::Menu $menu .= new;

  #my Gnome::Gtk3::Window $w .= new;
  #$w.add($m);

  my SignalHandlers $sh .= new;
  $menu.register-signal( $sh, 'method', 'signal');

  my Promise $p = $i.start-thread(
    $sh, 'signal-emitter',
    # :!new-context,
    # :start-time(now + 1)
  );

  is $main.gtk-main-level, 0, "loop level 0";
  $main.gtk-main;
  #is $main.gtk-main-level, 0, "loop level is 0 again";

  is $p.result, 'done', 'emitter finished';
}

