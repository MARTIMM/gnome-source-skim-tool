# Command to generate: generate.raku -v -t Gio io
use v6.d;

#TL:1:Gnome::Gio::Notification:
#-------------------------------------------------------------------------------
#--[Module Imports]-------------------------------------------------------------
#-------------------------------------------------------------------------------

use NativeCall;
use Test;


use Gnome::Gio::Notification:api<2>;
#use Gnome::Gio::T-NotificationPriority:api<2>;
use Gnome::N::GlibToRakuTypes:api<2>;
use Gnome::N::N-GObject:api<2>;
use Gnome::N::NativeLib:api<2>;
use Gnome::N::X:api<2>;

#-------------------------------------------------------------------------------
#--[Test preparation]-----------------------------------------------------------
#-------------------------------------------------------------------------------

#Gnome::N::debug(:on);
my Gnome::Gio::Notification $notification;

#-------------------------------------------------------------------------------
#--[Class init tests]-----------------------------------------------------------
#-------------------------------------------------------------------------------

subtest 'ISA test', {
  given $notification {
    my Str $title;

#`{{
    #TC:0:new-notification()
    $title = 'text';
    $notification .= new-notification( $title);
    ok .is-valid, '.new-notification( $title)';

}}
  }
};

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# set environment variable 'raku-test-all' if rest must be tested too.
unless %*ENV<raku_test_all>:exists {
  done-testing;
  exit;
}

#-------------------------------------------------------------------------------
subtest 'Method tests', {
  with $notification {
    my Str $title;
    my Str $category;
    my Str $detailed-action;
    my Str $body;
    my Str $label;
    my Str $target-format;
    my N-GObject() $icon;
    my Str $action;
#    my GNotificationPriority  $priority;
    my N-GObject $target;


#`{{
    #TM:0:add-button()
    ok .add-button( $label, $detailed-action), '.add-button()';

    #TM:0:add-button-with-target()
    ok .add-button-with-target( $label, $action, $target-format), '.add-button-with-target()';

    #TM:0:add-button-with-target-value()
    ok .add-button-with-target-value( $label, $action, $target), '.add-button-with-target-value()';

    #TM:0:set-body()
    $body = 'text';
    .set-body( $body);
    ok True, '.set-body()';

    #TM:0:set-category()
    $category = 'text';
    .set-category( $category);
    ok True, '.set-category()';

    #TM:0:set-default-action()
    $detailed-action = 'text';
    .set-default-action( $detailed-action);
    ok True, '.set-default-action()';

    #TM:0:set-default-action-and-target()
    $action = 'text';
    $target-format = 'text';
    .set-default-action-and-target( $action, $target-format);
    ok True, '.set-default-action-and-target()';

    #TM:0:set-default-action-and-target-value()
    $action = 'text';
    $target = …;  # a native object
    .set-default-action-and-target-value( $action, $target);
    ok True, '.set-default-action-and-target-value()';

    #TM:0:set-icon()
    $icon = …;  # a native object
    .set-icon( $icon);
    ok True, '.set-icon()';

    #TM:0:set-priority()
    $priority = …;  # an enum or fla
    .set-priority( $priority);
    ok True, '.set-priority()';

    #TM:0:set-title()
    $title = 'text';
    .set-title( $title);
    ok True, '.set-title()';

}}
  }
};

#-------------------------------------------------------------------------------
done-testing;

=finish

#-------------------------------------------------------------------------------
subtest 'Signals …', {
  use Gnome::Gtk3::Main;

  my Gnome::Gtk3::Main $main .= new;

  class SignalHandlers {
    has Bool $!signal-processed = False;

    method … (
      'any-args',
      Gnome::Gio::Notification() :$_native-object, gulong :$_handler-id
      # --> …
    ) {

      isa-ok $_native-object, Gnome::Gio::Notification;
      $!signal-processed = True;
    }

    method signal-emitter ( Gnome::Gio::Notification :$_widget --> Str ) {

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      $_widget.emit-by-name(
        'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      );
      is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      #$!signal-processed = False;
      #$_widget.emit-by-name(
      #  'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      #);
      #is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }
      sleep(0.4);
      $main.gtk-main-quit;

      'done'
    }
  }

  my Gnome::Gio::Notification $notification .= new;

  #my Gnome::Gtk3::Window $w .= new;
  #$w.add($m);

  my SignalHandlers $sh .= new;
  $notification.register-signal( $sh, 'method', 'signal');

  my Promise $p = $i.start-thread(
    $sh, 'signal-emitter',
    # :!new-context,
    # :start-time(now + 1)
  );

  is $main.gtk-main-level, 0, "loop level 0";
  $main.gtk-main;
  #is $main.gtk-main-level, 0, "loop level is 0 again";

  is $p.result, 'done', 'emitter finished';
}

