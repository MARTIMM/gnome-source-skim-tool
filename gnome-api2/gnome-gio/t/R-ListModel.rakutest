=comment Package: Gio, C-Source: listmodel
use v6.d;

#TL:1:Gnome::Gio::R-ListModel:
#-------------------------------------------------------------------------------
#--[Module Imports]-------------------------------------------------------------
#-------------------------------------------------------------------------------

use NativeCall;
use Test;


use Gnome::Gio::ListStore:api<2>;
use Gnome::Gio::File:api<2>;

use Gnome::N::GlibToRakuTypes:api<2>;
use Gnome::N::N-Object:api<2>;
use Gnome::N::NativeLib:api<2>;
use Gnome::N::X:api<2>;

#Gnome::N::debug(:on);

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# set environment variable 'raku-test-all' if rest must be tested too.
unless %*ENV<raku_test_all>:exists {
  done-testing;
  exit;
}

#-------------------------------------------------------------------------------
#Gnome::N::debug(:on);
subtest 'Method tests', {
  my Str $uri = 'https://developer.gnome.org/gio/2.62/GFile.html';
  my Gnome::Gio::File $file .= new-for-uri($uri);
  my Gnome::Gio::ListStore $r-list-model .= new-liststore(
    $file.get-class-gtype
  );

  with $r-list-model {
    my guint $removed;
    my guint $position;
    my guint $added;

    # from ListStore
    .append($file);


#`{{
    #TM:0:get-item()
    is .get-item( $position), '…', '.get-item()';

    #TM:0:get-item-type()
     .get-item-type(), '…', '.get-item-type()';
}}

    #TM:1:get-n-items()
    is .get-n-items(), 1, '.get-n-items()';

    #TM:1:get-object()
    $position = 0;
    my Gnome::Gio::File $f .= new(:native-object(.get-object($position)));
    is $f.get-uri, $uri, '.get-object()';

#`{{
    #TM:0:items-changed()
    ok .items-changed( $position, $removed, $added), '.items-changed()';
}}
  }
};

#-------------------------------------------------------------------------------
done-testing;

=finish

#-------------------------------------------------------------------------------
subtest 'Signals …', {
  use Gnome::Gtk3::Main;

  my Gnome::Gtk3::Main $main .= new;

  class SignalHandlers {
    has Bool $!signal-processed = False;

    method … (
      'any-args',
      Gnome::Gio::ListModel() :$_native-object, gulong :$_handler-id
      # --> …
    ) {

      isa-ok $_native-object, Gnome::Gio::ListModel;
      $!signal-processed = True;
    }

    method signal-emitter ( Gnome::Gio::ListModel :$_widget --> Str ) {

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      $_widget.emit-by-name(
        'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      );
      is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      #$!signal-processed = False;
      #$_widget.emit-by-name(
      #  'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      #);
      #is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }
      sleep(0.4);
      $main.gtk-main-quit;

      'done'
    }
  }

  my Gnome::Gio::ListModel $r-list-model .= new;

  #my Gnome::Gtk3::Window $w .= new;
  #$w.add($m);

  my SignalHandlers $sh .= new;
  $r-list-model.register-signal( $sh, 'method', 'signal');

  my Promise $p = $i.start-thread(
    $sh, 'signal-emitter',
    # :!new-context,
    # :start-time(now + 1)
  );

  is $main.gtk-main-level, 0, "loop level 0";
  $main.gtk-main;
  #is $main.gtk-main-level, 0, "loop level is 0 again";

  is $p.result, 'done', 'emitter finished';
}

