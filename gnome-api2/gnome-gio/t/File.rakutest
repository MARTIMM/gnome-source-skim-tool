# Command to generate: generate.raku -c -t Gio file
use v6.d;

#TL:1:Gnome::Gio::File:
#-------------------------------------------------------------------------------
#--[Module Imports]-------------------------------------------------------------
#-------------------------------------------------------------------------------

use Test;
use NativeCall;


use Gnome::Gio::File:api<2>;
use Gnome::Gio::T-ioenums:api<2>;
use Gnome::N::GlibToRakuTypes:api<2>;
use Gnome::N::N-Object:api<2>;
use Gnome::N::NativeLib:api<2>;
use Gnome::N::X:api<2>;

#-------------------------------------------------------------------------------
#--[Test preparation]-----------------------------------------------------------
#-------------------------------------------------------------------------------

#Gnome::N::debug(:on);
my Gnome::Gio::File $file;

#-------------------------------------------------------------------------------
#--[Class init tests]-----------------------------------------------------------
#-------------------------------------------------------------------------------

subtest 'ISA test', {
  given $file {
    my Str $arg;
    my Str $uri;
    my Str $path;
    my Str $cwd;
    my N-Object() $iostream;
    my Str $first-element;
    my Str $tmpl;
    my Str $parse-name;

#`{{
    #TC:0:new-build-filename()
    $first-element = 'text';
    $file .= new-build-filename( $first-element);
    ok .is-valid, '.new-build-filename( $first-element)';

    #TC:0:new-for-commandline-arg()
    $arg = 'text';
    $file .= new-for-commandline-arg( $arg);
    ok .is-valid, '.new-for-commandline-arg( $arg)';

    #TC:0:new-for-commandline-arg-and-cwd()
    $arg = 'text';
    $cwd = 'text';
    $file .= new-for-commandline-arg-and-cwd( $arg, $cwd);
    ok .is-valid, '.new-for-commandline-arg-and-cwd( $arg, $cwd)';
}}

    #TC:1:new-for-path()
    $path = 't/File.rakutest';
    $file .= new-for-path($path);
    ok .is-valid, '.new-for-path($path)';

    #TC:1:new-for-uri()
    $uri = 'https://developer.gnome.org/gio/2.62/GFile.html';
    $file .= new-for-uri( $uri);
    ok .is-valid, '.new-for-uri( $uri)';

#`{{
    #TC:0:new-tmp()
    $tmpl = 'text';
    $iostream = …
    $file .= new-tmp( $tmpl, $iostream);
    ok .is-valid, '.new-tmp( $tmpl, $iostream)';

    #TM:0:parse-name()
    ok .parse-name( $parse-name), '.parse-name()';

}}
  }
};

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# set environment variable 'raku-test-all' if rest must be tested too.
unless %*ENV<raku_test_all>:exists {
  done-testing;
  exit;
}

#-------------------------------------------------------------------------------
subtest 'Method tests', {
  with $file {
    my N-Object() $result;
    my N-Object() $start-operation;
    my Int() $io-priority;
    my Str $uri-scheme;
    my UInt $flags;
    my N-Object() $info;
    my Array[Int] $num-dirs;
    my gpointer $progress-data;
    my Array[Str] $etag-out;
    sub progress-callback (  $current-num-bytes,  $total-num-bytes, gpointer $user-data ) {}
    my N-Object() $res;
    my Str $symlink-value;
    my N-Object() $mount-operation;
    my Array[Str] $new-etag;
    my gpointer $progress-callback-data;
    my N-Object() $file2;
    my Str $name;
    my N-Object() $prefix;
    my gpointer $user-data;
    my N-Object() $descendant;
    my N-Object() $destination;
    my Str $attribute;
    my Str $attributes;
    my N-Object() $parent;
    my GFileAttributeType $type;
    my gpointer $value-p;
    my UInt() $value;
    my Bool() $make-backup;
    my Int() $length;
    my N-Object $contents;
    sub read-more-callback ( Str $file-contents,  $file-size, gpointer $callback-data --> gboolean ) {}
    my N-Object() $cancellable;
    my Str $relative-path;
    my Array[Int] $num-files;
    sub callback ( N-Object $source-object, N-Object $res, gpointer $user-data ) {}
    my Array[Int] $disk-usage;
    my Str $display-name;
    my Str $etag;
    my Str $uri;
    my Str $path;


#`{{
    #TM:0:append-to()
    ok .append-to( $flags, $cancellable), '.append-to()';

    #TM:0:append-to-async()
    ok .append-to-async( $flags, $io-priority, $cancellable, $callback, $user-data), '.append-to-async()';

    #TM:0:append-to-finish()
    ok .append-to-finish( $res), '.append-to-finish()';

    #TM:0:build-attribute-list-for-copy()
    ok .build-attribute-list-for-copy( $flags, $cancellable), '.build-attribute-list-for-copy()';

    #TM:0:copy()
    ok .copy( $destination, $flags, $cancellable, $progress-callback, $progress-callback-data), '.copy()';

    #TM:0:copy-async()
    ok .copy-async( $destination, $flags, $io-priority, $cancellable, $progress-callback, $progress-callback-data, $callback, $user-data), '.copy-async()';

    #TM:0:copy-attributes()
    ok .copy-attributes( $destination, $flags, $cancellable), '.copy-attributes()';

    #TM:0:copy-finish()
    ok .copy-finish( $res), '.copy-finish()';

    #TM:0:create()
    ok .create( $flags, $cancellable), '.create()';

    #TM:0:create-async()
    ok .create-async( $flags, $io-priority, $cancellable, $callback, $user-data), '.create-async()';

    #TM:0:create-finish()
    ok .create-finish( $res), '.create-finish()';

    #TM:0:create-readwrite()
    ok .create-readwrite( $flags, $cancellable), '.create-readwrite()';

    #TM:0:create-readwrite-async()
    ok .create-readwrite-async( $flags, $io-priority, $cancellable, $callback, $user-data), '.create-readwrite-async()';

    #TM:0:create-readwrite-finish()
    ok .create-readwrite-finish( $res), '.create-readwrite-finish()';

    #TM:0:delete()
    ok .delete( $cancellable), '.delete()';

    #TM:0:delete-async()
    ok .delete-async( $io-priority, $cancellable, $callback, $user-data), '.delete-async()';

    #TM:0:delete-finish()
    ok .delete-finish( $result), '.delete-finish()';

    #TM:0:dup()
    ok .dup(), '.dup()';

    #TM:0:eject-mountable-with-operation()
    ok .eject-mountable-with-operation( $flags, $mount-operation, $cancellable, $callback, $user-data), '.eject-mountable-with-operation()';

    #TM:0:eject-mountable-with-operation-finish()
    ok .eject-mountable-with-operation-finish( $result), '.eject-mountable-with-operation-finish()';

    #TM:0:enumerate-children()
    ok .enumerate-children( $attributes, $flags, $cancellable), '.enumerate-children()';

    #TM:0:enumerate-children-async()
    ok .enumerate-children-async( $attributes, $flags, $io-priority, $cancellable, $callback, $user-data), '.enumerate-children-async()';

    #TM:0:enumerate-children-finish()
    ok .enumerate-children-finish( $res), '.enumerate-children-finish()';

    #TM:0:equal()
    ok .equal( $file2), '.equal()';

    #TM:0:find-enclosing-mount()
    ok .find-enclosing-mount( $cancellable), '.find-enclosing-mount()';

    #TM:0:find-enclosing-mount-async()
    ok .find-enclosing-mount-async( $io-priority, $cancellable, $callback, $user-data), '.find-enclosing-mount-async()';

    #TM:0:find-enclosing-mount-finish()
    ok .find-enclosing-mount-finish( $res), '.find-enclosing-mount-finish()';
}}

    #TM:1:get-basename()
    $uri = 'https://developer.gnome.org/gio/2.62/GFile.html';
    $file .= new-for-uri( $uri);
    is .get-basename(), 'GFile.html', '.get-basename()';

#`{{
    #TM:0:get-child()
    is .get-child( $name), '…', '.get-child()';

    #TM:0:get-child-for-display-name()
    is .get-child-for-display-name( $display-name), '…', '.get-child-for-display-name()';

    #TM:0:get-parent()
     .get-parent(), '…', '.get-parent()';

    #TM:0:get-parse-name()
     .get-parse-name(), '…', '.get-parse-name()';
}}

    #TM:1:get-path()
    $path = 't/File.rakutest';
    $file .= new-for-path($path);
    like .get-path(), / 't/File.rakutest' /, '.get-path()';

#`{{
    #TM:0:get-relative-path()
    is .get-relative-path( $descendant), '…', '.get-relative-path()';

    #TM:0:get-uri()
     .get-uri(), '…', '.get-uri()';

    #TM:0:get-uri-scheme()
     .get-uri-scheme(), '…', '.get-uri-scheme()';

    #TM:0:has-parent()
    ok .has-parent( $parent), '.has-parent()';

    #TM:0:has-prefix()
    ok .has-prefix( $prefix), '.has-prefix()';

    #TM:0:has-uri-scheme()
    ok .has-uri-scheme( $uri-scheme), '.has-uri-scheme()';

    #TM:0:hash()
    ok .hash(), '.hash()';

    #TM:0:is-native()
    ok .is-native(), '.is-native()';

    #TM:0:load-bytes()
    ok .load-bytes( $cancellable, $etag-out), '.load-bytes()';

    #TM:0:load-bytes-async()
    ok .load-bytes-async( $cancellable, $callback, $user-data), '.load-bytes-async()';

    #TM:0:load-bytes-finish()
    ok .load-bytes-finish( $result, $etag-out), '.load-bytes-finish()';

    #TM:0:load-contents()
    ok .load-contents( $cancellable, $contents, $length, $etag-out), '.load-contents()';

    #TM:0:load-contents-async()
    ok .load-contents-async( $cancellable, $callback, $user-data), '.load-contents-async()';

    #TM:0:load-contents-finish()
    ok .load-contents-finish( $res, $contents, $length, $etag-out), '.load-contents-finish()';

    #TM:0:load-partial-contents-async()
    ok .load-partial-contents-async( $cancellable, $read-more-callback, $callback, $user-data), '.load-partial-contents-async()';

    #TM:0:load-partial-contents-finish()
    ok .load-partial-contents-finish( $res, $contents, $length, $etag-out), '.load-partial-contents-finish()';

    #TM:0:make-directory()
    ok .make-directory( $cancellable), '.make-directory()';

    #TM:0:make-directory-async()
    ok .make-directory-async( $io-priority, $cancellable, $callback, $user-data), '.make-directory-async()';

    #TM:0:make-directory-finish()
    ok .make-directory-finish( $result), '.make-directory-finish()';

    #TM:0:make-directory-with-parents()
    ok .make-directory-with-parents( $cancellable), '.make-directory-with-parents()';

    #TM:0:make-symbolic-link()
    ok .make-symbolic-link( $symlink-value, $cancellable), '.make-symbolic-link()';

    #TM:0:measure-disk-usage()
    ok .measure-disk-usage( $flags, $cancellable, $progress-callback, $progress-data, $disk-usage, $num-dirs, $num-files), '.measure-disk-usage()';

    #TM:0:measure-disk-usage-async()
    ok .measure-disk-usage-async( $flags, $io-priority, $cancellable, $progress-callback, $progress-data, $callback, $user-data), '.measure-disk-usage-async()';

    #TM:0:measure-disk-usage-finish()
    ok .measure-disk-usage-finish( $result, $disk-usage, $num-dirs, $num-files), '.measure-disk-usage-finish()';

    #TM:0:monitor()
    ok .monitor( $flags, $cancellable), '.monitor()';

    #TM:0:monitor-directory()
    ok .monitor-directory( $flags, $cancellable), '.monitor-directory()';

    #TM:0:monitor-file()
    ok .monitor-file( $flags, $cancellable), '.monitor-file()';

    #TM:0:mount-enclosing-volume()
    ok .mount-enclosing-volume( $flags, $mount-operation, $cancellable, $callback, $user-data), '.mount-enclosing-volume()';

    #TM:0:mount-enclosing-volume-finish()
    ok .mount-enclosing-volume-finish( $result), '.mount-enclosing-volume-finish()';

    #TM:0:mount-mountable()
    ok .mount-mountable( $flags, $mount-operation, $cancellable, $callback, $user-data), '.mount-mountable()';

    #TM:0:mount-mountable-finish()
    ok .mount-mountable-finish( $result), '.mount-mountable-finish()';

    #TM:0:move()
    ok .move( $destination, $flags, $cancellable, $progress-callback, $progress-callback-data), '.move()';

    #TM:0:move-async()
    ok .move-async( $destination, $flags, $io-priority, $cancellable, $progress-callback, $progress-callback-data, $callback, $user-data), '.move-async()';

    #TM:0:move-finish()
    ok .move-finish( $result), '.move-finish()';

    #TM:0:open-readwrite()
    ok .open-readwrite( $cancellable), '.open-readwrite()';

    #TM:0:open-readwrite-async()
    ok .open-readwrite-async( $io-priority, $cancellable, $callback, $user-data), '.open-readwrite-async()';

    #TM:0:open-readwrite-finish()
    ok .open-readwrite-finish( $res), '.open-readwrite-finish()';

    #TM:0:peek-path()
    ok .peek-path(), '.peek-path()';

    #TM:0:poll-mountable()
    ok .poll-mountable( $cancellable, $callback, $user-data), '.poll-mountable()';

    #TM:0:poll-mountable-finish()
    ok .poll-mountable-finish( $result), '.poll-mountable-finish()';

    #TM:0:query-default-handler()
    ok .query-default-handler( $cancellable), '.query-default-handler()';

    #TM:0:query-default-handler-async()
    ok .query-default-handler-async( $io-priority, $cancellable, $callback, $user-data), '.query-default-handler-async()';

    #TM:0:query-default-handler-finish()
    ok .query-default-handler-finish( $result), '.query-default-handler-finish()';

    #TM:0:query-exists()
    ok .query-exists( $cancellable), '.query-exists()';

    #TM:0:query-file-type()
    ok .query-file-type( $flags, $cancellable), '.query-file-type()';

    #TM:0:query-filesystem-info()
    ok .query-filesystem-info( $attributes, $cancellable), '.query-filesystem-info()';

    #TM:0:query-filesystem-info-async()
    ok .query-filesystem-info-async( $attributes, $io-priority, $cancellable, $callback, $user-data), '.query-filesystem-info-async()';

    #TM:0:query-filesystem-info-finish()
    ok .query-filesystem-info-finish( $res), '.query-filesystem-info-finish()';

    #TM:0:query-info()
    ok .query-info( $attributes, $flags, $cancellable), '.query-info()';

    #TM:0:query-info-async()
    ok .query-info-async( $attributes, $flags, $io-priority, $cancellable, $callback, $user-data), '.query-info-async()';

    #TM:0:query-info-finish()
    ok .query-info-finish( $res), '.query-info-finish()';

    #TM:0:query-settable-attributes()
    ok .query-settable-attributes( $cancellable), '.query-settable-attributes()';

    #TM:0:query-writable-namespaces()
    ok .query-writable-namespaces( $cancellable), '.query-writable-namespaces()';

    #TM:0:read()
    ok .read( $cancellable), '.read()';

    #TM:0:read-async()
    ok .read-async( $io-priority, $cancellable, $callback, $user-data), '.read-async()';

    #TM:0:read-finish()
    ok .read-finish( $res), '.read-finish()';

    #TM:0:replace()
    ok .replace( $etag, $make-backup, $flags, $cancellable), '.replace()';

    #TM:0:replace-async()
    ok .replace-async( $etag, $make-backup, $flags, $io-priority, $cancellable, $callback, $user-data), '.replace-async()';

    #TM:0:replace-contents()
    ok .replace-contents( $contents, $length, $etag, $make-backup, $flags, $new-etag, $cancellable), '.replace-contents()';

    #TM:0:replace-contents-async()
    ok .replace-contents-async( $contents, $length, $etag, $make-backup, $flags, $cancellable, $callback, $user-data), '.replace-contents-async()';

    #TM:0:replace-contents-bytes-async()
    ok .replace-contents-bytes-async( $contents, $etag, $make-backup, $flags, $cancellable, $callback, $user-data), '.replace-contents-bytes-async()';

    #TM:0:replace-contents-finish()
    ok .replace-contents-finish( $res, $new-etag), '.replace-contents-finish()';

    #TM:0:replace-finish()
    ok .replace-finish( $res), '.replace-finish()';

    #TM:0:replace-readwrite()
    ok .replace-readwrite( $etag, $make-backup, $flags, $cancellable), '.replace-readwrite()';

    #TM:0:replace-readwrite-async()
    ok .replace-readwrite-async( $etag, $make-backup, $flags, $io-priority, $cancellable, $callback, $user-data), '.replace-readwrite-async()';

    #TM:0:replace-readwrite-finish()
    ok .replace-readwrite-finish( $res), '.replace-readwrite-finish()';

    #TM:0:resolve-relative-path()
    ok .resolve-relative-path( $relative-path), '.resolve-relative-path()';

    #TM:0:set-attribute()
    $attribute = 'text';
    $type = …;  # an enum or flag    $value-p = '…';
    $flags = …;  # an enum or flag    $cancellable = …
    .set-attribute( $attribute, $type, $value-p, $flags, $cancellable);
    ok True, '.set-attribute()';

    #TM:0:set-attribute-byte-string()
    $attribute = 'text';
    $value = 'text';
    $flags = …;  # an enum or flag    $cancellable = …
    .set-attribute-byte-string( $attribute, $value, $flags, $cancellable);
    ok True, '.set-attribute-byte-string()';

    #TM:0:set-attribute-int32()
    $attribute = 'text';
    $value = -42;
    $flags = …;  # an enum or flag    $cancellable = …
    .set-attribute-int32( $attribute, $value, $flags, $cancellable);
    ok True, '.set-attribute-int32()';

    #TM:0:set-attribute-int64()
    $attribute = 'text';
    $value = -42;
    $flags = …;  # an enum or flag    $cancellable = …
    .set-attribute-int64( $attribute, $value, $flags, $cancellable);
    ok True, '.set-attribute-int64()';

    #TM:0:set-attribute-string()
    $attribute = 'text';
    $value = 'text';
    $flags = …;  # an enum or flag    $cancellable = …
    .set-attribute-string( $attribute, $value, $flags, $cancellable);
    ok True, '.set-attribute-string()';

    #TM:0:set-attribute-uint32()
    $attribute = 'text';
    $value = 42;
    $flags = …;  # an enum or flag    $cancellable = …
    .set-attribute-uint32( $attribute, $value, $flags, $cancellable);
    ok True, '.set-attribute-uint32()';

    #TM:0:set-attribute-uint64()
    $attribute = 'text';
    $value = 42;
    $flags = …;  # an enum or flag    $cancellable = …
    .set-attribute-uint64( $attribute, $value, $flags, $cancellable);
    ok True, '.set-attribute-uint64()';

    #TM:0:set-attributes-async()
    $info = …;    $flags = …;  # an enum or flag    $io-priority = -42;
    $cancellable = …;    $callback = …;  # an enum or flag    $user-data = '…';
    .set-attributes-async( $info, $flags, $io-priority, $cancellable, $callback, $user-data);
    ok True, '.set-attributes-async()';

    #TM:0:set-attributes-finish()
    $result = …;    $info = …
    .set-attributes-finish( $result, $info);
    ok True, '.set-attributes-finish()';

    #TM:0:set-attributes-from-info()
    $info = …;    $flags = …;  # an enum or flag    $cancellable = …
    .set-attributes-from-info( $info, $flags, $cancellable);
    ok True, '.set-attributes-from-info()';

    #TM:0:set-display-name()
    $display-name = 'text';
    $cancellable = …
    .set-display-name( $display-name, $cancellable);
    ok True, '.set-display-name()';

    #TM:0:set-display-name-async()
    $display-name = 'text';
    $io-priority = -42;
    $cancellable = …;    $callback = …;  # an enum or flag    $user-data = '…';
    .set-display-name-async( $display-name, $io-priority, $cancellable, $callback, $user-data);
    ok True, '.set-display-name-async()';

    #TM:0:set-display-name-finish()
    $res = …
    .set-display-name-finish( $res);
    ok True, '.set-display-name-finish()';

    #TM:0:start-mountable()
    ok .start-mountable( $flags, $start-operation, $cancellable, $callback, $user-data), '.start-mountable()';

    #TM:0:start-mountable-finish()
    ok .start-mountable-finish( $result), '.start-mountable-finish()';

    #TM:0:stop-mountable()
    ok .stop-mountable( $flags, $mount-operation, $cancellable, $callback, $user-data), '.stop-mountable()';

    #TM:0:stop-mountable-finish()
    ok .stop-mountable-finish( $result), '.stop-mountable-finish()';

    #TM:0:supports-thread-contexts()
    ok .supports-thread-contexts(), '.supports-thread-contexts()';

    #TM:0:trash()
    ok .trash( $cancellable), '.trash()';

    #TM:0:trash-async()
    ok .trash-async( $io-priority, $cancellable, $callback, $user-data), '.trash-async()';

    #TM:0:trash-finish()
    ok .trash-finish( $result), '.trash-finish()';

    #TM:0:unmount-mountable-with-operation()
    ok .unmount-mountable-with-operation( $flags, $mount-operation, $cancellable, $callback, $user-data), '.unmount-mountable-with-operation()';

    #TM:0:unmount-mountable-with-operation-finish()
    ok .unmount-mountable-with-operation-finish( $result), '.unmount-mountable-with-operation-finish()';

}}
  }
};

#-------------------------------------------------------------------------------
done-testing;

=finish

#-------------------------------------------------------------------------------
subtest 'Signals …', {
  use Gnome::Gtk3::Main;

  my Gnome::Gtk3::Main $main .= new;

  class SignalHandlers {
    has Bool $!signal-processed = False;

    method … (
      'any-args',
      Gnome::Gio::File() :$_native-object, gulong :$_handler-id
      # --> …
    ) {

      isa-ok $_native-object, Gnome::Gio::File;
      $!signal-processed = True;
    }

    method signal-emitter ( Gnome::Gio::File :$_widget --> Str ) {

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      $_widget.emit-by-name(
        'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      );
      is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      #$!signal-processed = False;
      #$_widget.emit-by-name(
      #  'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      #);
      #is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }
      sleep(0.4);
      $main.gtk-main-quit;

      'done'
    }
  }

  my Gnome::Gio::File $file .= new;

  #my Gnome::Gtk3::Window $w .= new;
  #$w.add($m);

  my SignalHandlers $sh .= new;
  $file.register-signal( $sh, 'method', 'signal');

  my Promise $p = $i.start-thread(
    $sh, 'signal-emitter',
    # :!new-context,
    # :start-time(now + 1)
  );

  is $main.gtk-main-level, 0, "loop level 0";
  $main.gtk-main;
  #is $main.gtk-main-level, 0, "loop level is 0 again";

  is $p.result, 'done', 'emitter finished';
}

