=comment Package: Gio, C-Source: simpleasyncresult
use v6.d;

#TL:1:Gnome::Gio::SimpleAsyncResult:
#-------------------------------------------------------------------------------
#--[Module Imports]-------------------------------------------------------------
#-------------------------------------------------------------------------------

use NativeCall;
use Test;


use Gnome::Gio::SimpleAsyncResult:api<2>;
use Gnome::Glib::N-Error:api<2>;
use Gnome::Glib::T-error:api<2>;
use Gnome::N::GlibToRakuTypes:api<2>;
use Gnome::N::N-Object:api<2>;
use Gnome::N::NativeLib:api<2>;
use Gnome::N::X:api<2>;

#-------------------------------------------------------------------------------
#--[Test preparation]-----------------------------------------------------------
#-------------------------------------------------------------------------------

#Gnome::N::debug(:on);
my Gnome::Gio::SimpleAsyncResult $simpleasyncresult;

#-------------------------------------------------------------------------------
#--[Class init tests]-----------------------------------------------------------
#-------------------------------------------------------------------------------

subtest 'ISA test', {
  given $simpleasyncresult {
    my gint $code;
    my N-Object $error;
    my gpointer $source-tag;
    my gpointer $user-data;
    my N-Object $source-object;
    my GQuark $domain;
    sub callback ( N-Object $source-object, N-Object $res, gpointer $data ) {}
    my Str $format;

#`{{
    #TC:0:new-simpleasyncresult()
    $source-object = …;
    $callback = …;
    $user-data = '…';
    $source-tag = '…';
    $simpleasyncresult .= new-simpleasyncresult( $source-object, $callback, $user-data, $source-tag);
    ok .is-valid, '.new-simpleasyncresult( $source-object, $callback, $user-data, $source-tag)';

    #TC:0:new-error()
    $source-object = …;
    $callback = …;
    $user-data = '…';
    $domain = '…';
    $code = '…';
    $format = 'text';
    $simpleasyncresult .= new-error( $source-object, $callback, $user-data, $domain, $code, $format);
    ok .is-valid, '.new-error( $source-object, $callback, $user-data, $domain, $code, $format)';

    #TC:0:new-from-error()
    $source-object = …;
    $callback = …;
    $user-data = '…';
    $error = …;
    $simpleasyncresult .= new-from-error( $source-object, $callback, $user-data, $error);
    ok .is-valid, '.new-from-error( $source-object, $callback, $user-data, $error)';

    #TC:0:new-take-error()
    $source-object = …;
    $callback = …;
    $user-data = '…';
    $error = …;
    $simpleasyncresult .= new-take-error( $source-object, $callback, $user-data, $error);
    ok .is-valid, '.new-take-error( $source-object, $callback, $user-data, $error)';

}}
  }
};

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# set environment variable 'raku-test-all' if rest must be tested too.
unless %*ENV<raku_test_all>:exists {
  done-testing;
  exit;
}

#-------------------------------------------------------------------------------
subtest 'Method tests', {
  with $simpleasyncresult {
    my gint $io-priority;
    my GQuark $domain;
    sub func ( N-Object $res, N-Object $object, N-Object $cancellable ) {}
    my CArray[N-Error] $err;
    my Str $format;
    my N-Object $check-cancellable;
    my gint $code;
    my N-Object $error;
    my N-Object $cancellable;
    my  $destroy-op-res;
    my gboolean $handle-cancellation;
    my  $args;
    my gssize $op-res;


#`{{
    #TM:0:complete()
    ok .complete(), '.complete()';

    #TM:0:complete-in-idle()
    ok .complete-in-idle(), '.complete-in-idle()';

    #TM:0:get-source-tag()
     .get-source-tag(), '…', '.get-source-tag()';

    #TM:0:propagate-error()
    ok .propagate-error( $err), '.propagate-error()';

    #TM:0:run-in-thread()
    ok .run-in-thread( $func, $io-priority, $cancellable), '.run-in-thread()';

    #TM:0:set-check-cancellable()
    $check-cancellable = …;
    .set-check-cancellable( $check-cancellable);
    ok True, '.set-check-cancellable()';

    #TM:0:set-error()
    $domain = '…';
    $code = '…';
    $format = 'text';
    .set-error( $domain, $code, $format);
    ok True, '.set-error()';

    #TM:0:set-error-va()
    $domain = '…';
    $code = '…';
    $format = 'text';
    $args = '…';
    .set-error-va( $domain, $code, $format, $args);
    ok True, '.set-error-va()';

    #TM:0:set-from-error()
    $error = …;
    .set-from-error( $error);
    ok True, '.set-from-error()';

    #TM:0:set-handle-cancellation()
    $handle-cancellation = '…';
    .set-handle-cancellation( $handle-cancellation);
    ok True, '.set-handle-cancellation()';

    #TM:0:set-op-res-gboolean()
    $op-res = '…';
    .set-op-res-gboolean( $op-res);
    #TM:0:get-op-res-gboolean()
    is .get-op-res-gboolean(),  $op-res, '.set-op-res-gboolean() / .get-op-res-gboolean()';

    #TM:0:set-op-res-gpointer()
    $op-res = '…';
    $destroy-op-res = '…';
    .set-op-res-gpointer( $op-res, $destroy-op-res);
    #TM:0:get-op-res-gpointer()
    is .get-op-res-gpointer(),  $op-res, $destroy-op-res, '.set-op-res-gpointer() / .get-op-res-gpointer()';

    #TM:0:set-op-res-gssize()
    $op-res = '…';
    .set-op-res-gssize( $op-res);
    #TM:0:get-op-res-gssize()
    is .get-op-res-gssize(),  $op-res, '.set-op-res-gssize() / .get-op-res-gssize()';

    #TM:0:take-error()
    ok .take-error( $error), '.take-error()';

}}
  }
};

#-------------------------------------------------------------------------------
subtest 'Function tests', {
  with $simpleasyncresult {
    my N-Object() $result;
    my gpointer $source-tag;
    my N-Object() $source;


#`{{
    #TM:0:is-valid()
    ok .is-valid( $result, $source, $source-tag), '.is-valid()';

}}
  }
};

#-------------------------------------------------------------------------------
done-testing;

=finish

#-------------------------------------------------------------------------------
subtest 'Signals …', {
  use Gnome::Gtk3::Main;

  my Gnome::Gtk3::Main $main .= new;

  class SignalHandlers {
    has Bool $!signal-processed = False;

    method … (
      'any-args',
      Gnome::Gio::SimpleAsyncResult() :$_native-object, gulong :$_handler-id
      # --> …
    ) {

      isa-ok $_native-object, Gnome::Gio::SimpleAsyncResult;
      $!signal-processed = True;
    }

    method signal-emitter ( Gnome::Gio::SimpleAsyncResult :$_widget --> Str ) {

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      $_widget.emit-by-name(
        'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      );
      is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      #$!signal-processed = False;
      #$_widget.emit-by-name(
      #  'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      #);
      #is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }
      sleep(0.4);
      $main.gtk-main-quit;

      'done'
    }
  }

  my Gnome::Gio::SimpleAsyncResult $simpleasyncresult .= new;

  #my Gnome::Gtk3::Window $w .= new;
  #$w.add($m);

  my SignalHandlers $sh .= new;
  $simpleasyncresult.register-signal( $sh, 'method', 'signal');

  my Promise $p = $i.start-thread(
    $sh, 'signal-emitter',
    # :!new-context,
    # :start-time(now + 1)
  );

  is $main.gtk-main-level, 0, "loop level 0";
  $main.gtk-main;
  #is $main.gtk-main-level, 0, "loop level is 0 again";

  is $p.result, 'done', 'emitter finished';
}

