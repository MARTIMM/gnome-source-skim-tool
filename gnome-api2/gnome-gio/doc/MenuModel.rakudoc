=comment Package: Gio, C-Source: menumodel
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=TITLE Gnome::Gio::MenuModel
=head1 Description

B<Gnome::Gio::MenuModel> represents the contents of a menu — an ordered list of
menu items. The items are associated with actions, which can be
activated through them. Items can be grouped in sections, and may
have submenus associated with them. Both items and sections usually
have some representation data, such as labels or icons. The type of
the associated action (ie whether it is stateful, and what kind of
state it has) can influence the representation of the item.

The conceptual model of menus in B<Gnome::Gio::MenuModel> is hierarchical:
sections and submenus are again represented by B<Gnome::Gio::MenuModel>s.
Menus themselves do not define their own roles. Rather, the role
of a particular B<Gnome::Gio::MenuModel> is defined by the item that references
it (or, in the case of the ‘root’ menu, is defined by the context
in which it is used).

As an example, consider the visible portions of this menu:

=head3 An example menu

=for image :src<asset_files/images/menu-example.png> :width<30%> :class<inline>

There are 8 ‘menus’ visible in the screenshot: one menubar, two
submenus and 5 sections:

=item the toplevel menubar (containing 4 items)
=item the View submenu (containing 3 sections)
=item the first section of the View submenu (containing 2 items)
=item the second section of the View submenu (containing 1 item)
=item the final section of the View submenu (containing 1 item)
=item the Highlight Mode submenu (containing 2 sections)
=item the Sources section (containing 2 items)
=item the Markup section (containing 2 items)

The [example](#a-menu-example) illustrates the conceptual connection between
these 8 menus. Each large block in the figure represents a menu and the
smaller blocks within the large block represent items in that menu. Some
items contain references to other menus.

=head3 A menu example

=for image :src<asset_files/images/menu-model.png> :width<30%> :class<inline>

Notice that the separators visible in the [example](#an-example-menu)
appear nowhere in the [menu model](#a-menu-example). This is because
separators are not explicitly represented in the menu model. Instead,
a separator is inserted between any two non-empty sections of a menu.
Section items can have labels just like any other item. In that case,
a display system may show a section header instead of a separator.

The motivation for this abstract model of application controls is
that modern user interfaces tend to make these controls available
outside the application. Examples include global menus, jumplists,
dash boards, etc. To support such uses, it is necessary to ‘export’
information about actions and their representation in menus, which
is exactly what the action group exporter and the menu model exporter do for
B<Gnome::Gio::MenuModel> and B<Gnome::Gio::MenuModel>. The client-side
counterparts to make use of the exported information are
B<Gnome::Gio::MenuModel> and B<Gnome::Gio::MenuModel>.

The API of B<Gnome::Gio::MenuModel> is very generic, with iterators for the
attributes and links of an item, see
C<.iterate-item-attributes()> and
C<.iterate-item-links()>. The ‘standard’ attributes and
link types have predefined names: B<Gnome::Gio::T-menumodel>,
B<Gnome::Gio::T-menumodel>, B<Gnome::Gio::T-menumodel>, B<Gnome::Gio::T-menumodel>
and B<Gnome::Gio::T-menumodel>.

Items in a B<Gnome::Gio::MenuModel> represent active controls if they refer to
an action that can get activated when the user interacts with the
menu item. The reference to the action is encoded by the string ID
in the B<Gnome::Gio::T-menumodel> attribute. An action ID uniquely
identifies an action in an action group. Which action group(s) provide
actions depends on the context in which the menu model is used.
E.g. when the model is exported as the application menu of a
[B<GtkApplication>](https://docs.gtk.org/gtk4/class.Application.html),
actions can be application-wide or window-specific (and thus come from
two different action groups). By convention, the application-wide actions
have names that start with B<app>.`, while the names of window-specific
actions start with B<win>.`.

While a wide variety of stateful actions is possible, the following
is the minimum that is expected to be supported by all users of exported
menu information:
=item an action with no parameter type and no state
=item an action with no parameter type and boolean state
=item an action with string parameter type and string state

=head3 Stateless

A stateless action typically corresponds to an ordinary menu item.

Selecting such a menu item will activate the action (with no parameter).

=head3 Boolean State

An action with a boolean state will most typically be used with a ‘toggle’
or ‘switch’ menu item. The state can be set directly, but activating the
action (with no parameter) results in the state being toggled.

Selecting a toggle menu item will activate the action. The menu item should
be rendered as ‘checked’ when the state is true.

=head3 String Parameter and State

Actions with string parameters and state will most typically be used to
represent an enumerated choice over the items available for a group of
radio menu items. Activating the action with a string parameter is
equivalent to setting that parameter as the state.

Radio menu items, in addition to being associated with the action, will
have a target value. Selecting that menu item will result in activation
of the action with the target value as the parameter. The menu item should
be rendered as ‘selected’ when the state of the action is equal to the
target value of the menu item.

=head2 Uml Diagram
=for image :src<asset_files/images/plantuml/MenuModel.png> :width<70%> :class<inline>

=begin comment

=head2 Example
# Example use of module Gnome::Gio::MenuModel

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

=head2 new

=head3 :native-object

Create an object using a native object from an object of the same type found elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object() :$native-object! )

=end pod

#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-item-attribute
This function is not yet available

Queries item at position C<$item-index> in C<$model> for the attribute
specified by C<$attribute>.

If the attribute exists and matches the B<Gnome::Glib::N-VariantType> corresponding
to C<$format-string> then C<$format-string> is used to deconstruct the
value into the positional parameters and C<True> is returned.

If the attribute does not exist, or it does exist but has the wrong
type, then the positional parameters are ignored and C<False> is
returned.

This function is a mix of C<.get-item-attribute-value()> and
g_variant_get(), followed by a g_variant_unref().  As such, C<$format-string> must make a complete copy of the data (since the
B<Gnome::Glib::N-Variant> may go away after the call to g_variant_unref()).  In
particular, no '&' characters are allowed in C<$format-string>.

=begin code
method get-item-attribute ( Int() $item-index, Str $attribute, Str $format-string, … --> Bool )
=end code

=item $item-index; the index of the item.
=item $attribute; the attribute to query.
=item $format-string; a B<Gnome::Glib::N-Variant> format string.
=item …; …. Note that each argument must be specified as a type followed by its value!

Return value; C<True> if the named attribute was found with the expected
    type. 

=begin comment

=head2 Example
# Example for get-item-attribute

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-item-attribute-value

Queries the item at position C<$item-index> in C<$model> for the attribute
specified by C<$attribute>.

If C<$expected-type> is non-undefined then it specifies the expected type of
the attribute.  If it is undefined then any type will be accepted.

If the attribute exists and matches C<$expected-type> (or if the
expected type is unspecified) then the value is returned.

If the attribute does not exist, or does not match the expected type
then undefined is returned.

=begin code
method get-item-attribute-value ( Int() $item-index, Str $attribute, N-Object $expected-type --> N-Object )
=end code

=item $item-index; the index of the item.
=item $attribute; the attribute to query.
=item $expected-type; the expected type of the attribute, or
    undefined

Return value; the value of the attribute. 

=begin comment

=head2 Example
# Example for get-item-attribute-value

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-item-link

Queries the item at position C<$item-index> in C<$model> for the link
specified by C<$link>.

If the link exists, the linked B<Gnome::Gio::MenuModel> is returned.  If the link
does not exist, undefined is returned.

=begin code
method get-item-link ( Int() $item-index, Str $link --> N-Object )
=end code

=item $item-index; the index of the item.
=item $link; the link to query.

Return value; the linked B<Gnome::Gio::MenuModel>, or undefined. 

=begin comment

=head2 Example
# Example for get-item-link

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-n-items

Query the number of items in C<$model>.

=begin code
method get-n-items (--> Int )
=end code

Return value; the number of items. 

=begin comment

=head2 Example
# Example for get-n-items

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 is-mutable

Queries if C<$model> is mutable.

An immutable B<Gnome::Gio::MenuModel> will never emit the  I<items-changed>
signal. Consumers of the model may make optimisations accordingly.

=begin code
method is-mutable (--> Bool )
=end code

Return value; C<True> if the model is mutable (ie: "items-changed" may be
    emitted).. 

=begin comment

=head2 Example
# Example for is-mutable

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 items-changed

Requests emission of the  I<items-changed> signal on C<$model>.

This function should never be called except by B<Gnome::Gio::MenuModel>
subclasses.  Any other calls to this function will very likely lead
to a violation of the interface of the model.

The implementation should update its internal representation of the
menu before emitting the signal.  The implementation should further
expect to receive queries about the new state of the menu (and
particularly added menu items) while signal handlers are running.

The implementation must dispatch this call directly from a mainloop
entry and not in response to calls -- particularly those from the
B<Gnome::Gio::MenuModel> API.  Said another way: the menu must not change while
user code is running without returning to the mainloop.

=begin code
method items-changed ( Int() $position, Int() $removed, Int() $added )
=end code

=item $position; the position of the change.
=item $removed; the number of items removed.
=item $added; the number of items added.

=begin comment

=head2 Example
# Example for items-changed

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 iterate-item-attributes

Creates a B<Gnome::Gio::MenuAttributeIter> to iterate over the attributes of
the item at position C<$item-index> in C<$model>.

You must free the iterator with g_object_unref() when you are done.

=begin code
method iterate-item-attributes ( Int() $item-index --> N-Object )
=end code

=item $item-index; the index of the item.

Return value; a new B<Gnome::Gio::MenuAttributeIter>. 

=begin comment

=head2 Example
# Example for iterate-item-attributes

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 iterate-item-links

Creates a B<Gnome::Gio::MenuLinkIter> to iterate over the links of the item at
position C<$item-index> in C<$model>.

You must free the iterator with g_object_unref() when you are done.

=begin code
method iterate-item-links ( Int() $item-index --> N-Object )
=end code

=item $item-index; the index of the item.

Return value; a new B<Gnome::Gio::MenuLinkIter>. 

=begin comment

=head2 Example
# Example for iterate-item-links

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Signal Documentation]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Signals

=comment -----------------------------------------------------------------------
=head3 items-changed

Emitted when a change has occurred to the menu.

The only changes that can occur to a menu is that items are removed
or added.  Items may not change (except by being removed and added
back in the same location).  This signal is capable of describing
both of those changes (at the same time).

The signal means that starting at the index C<$position>, C<$removed>
items were removed and C<$added> items were added in their place.  If C<$removed> is zero then only items were added.  If C<$added> is zero
then only items were removed.

As an example, if the menu contains items a, b, c, d (in that
order) and the signal (2, 1, 3) occurs then the new composition of
the menu will be a, b, _, _, _, d (with each _ representing some
new item).

Signal handlers may query the model (particularly the added items)
and expect to see the results of the modification that is being
reported.  The signal is emitted after the modification.

=begin code
method handler (
  gint $position,
  gint $removed,
  gint $added,
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gio::MenuModel :$_widget,
  *C<user>-options
)
=end code

=item $position; the position of the change.
=item $removed; the number of items removed.
=item $added; the number of items added.
=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gio::MenuModel> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

=begin comment

=head2 Example
# Example for signal items-changed

=end comment

=end pod

