=comment Package: Gio, C-Source: asyncresult
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Gnome::Gio::R-AsyncResult

=head1 Description

B<Gnome::Gio::R-AsyncResult> provides a base class for implementing asynchronous function results.

Asynchronous operations are broken up into two separate operations
which are chained together by a B<Gnome::Gio::T-iotypes>. To begin
an asynchronous operation, provide a B<Gnome::Gio::T-iotypes> to the
asynchronous function. This callback will be triggered when the
operation has completed, and must be run in a later iteration of
the thread-default main context (see
C<.push-thread-default() in class Gnome::Gio::AsyncResult>) from where the operation was
initiated. It will be passed a B<Gnome::Gio::R-AsyncResult> instance filled with the
details of the operation's success or failure, the object the asynchronous
function was started for and any error codes returned. The asynchronous
callback function is then expected to call the corresponding B<_finish()>
function, passing the object the function was called for, the
B<Gnome::Gio::R-AsyncResult> instance, and (optionally) an C<$error> to grab any
error conditions that may have occurred.

The B<_finish()> function for an operation takes the generic result
(of type B<Gnome::Gio::R-AsyncResult>) and returns the specific result that the
operation in question yields (e.g. a B<Gnome::Gio::AsyncResult> for a
"enumerate children" operation). If the result or error status of the
operation is not needed, there is no need to call the B<_finish()>
function; GIO will take care of cleaning up the result and error
information after the B<Gnome::Gio::T-iotypes> returns. You can pass
undefined for the B<Gnome::Gio::T-iotypes> if you don't need to take any
action at all after the operation completes. Applications may also
take a reference to the B<Gnome::Gio::R-AsyncResult> and call B<_finish()> later;
however, the B<_finish()> function may be called at most once.

Example of a typical asynchronous operation flow:

=begin comment
void _theoretical_frobnitz_async (Theoretical         *t,
                                  GCancellable        *c,
                                  GAsyncReadyCallback  cb,
                                  gpointer             u);

gboolean _theoretical_frobnitz_finish (Theoretical   *t,
                                       GAsyncResult  *res,
                                       GError       **e);

static void
frobnitz_result_func (GObject      *source_object,
		 GAsyncResult *res,
		 gpointer      user_data)
{
  gboolean success = FALSE;

  success = _theoretical_frobnitz_finish (source_object, res, NULL);

  if (success)
    g_printf ("Hurray!\n");
  else
    g_printf ("Uh oh!\n");

  ...

}

int main (int argc, void *argv[])
{
   ...

   _theoretical_frobnitz_async (theoretical_data,
                                NULL,
                                frobnitz_result_func,
                                NULL);

   ...
}

=end comment

The callback for an asynchronous operation is called only once, and is
always called, even in the case of a cancelled operation. On cancellation
the result is a B<G_IO_ERROR_CANCELLED> error.

=head3 I/O Priority

Many I/O-related asynchronous operations have a priority parameter,
which is used in certain cases to determine the order in which
operations are executed. They are not used to determine system-wide
I/O scheduling. Priorities are integers, with lower numbers indicating
higher priority. It is recommended to choose priorities between
B<Gnome::Glib::T-main> and B<Gnome::Glib::T-main>, with B<Gnome::Glib::T-main>
as a default.

=begin comment

=head2 Uml Diagram
![](plantuml/â€¦.svg)

=end comment

=begin comment

=head2 Example
# Example use of module Gnome::Gio::AsyncResult

=end comment

=end pod
#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-source-object

Gets the source object from a B<Gnome::Gio::R-AsyncResult>.

=begin code
method get-source-object (--> N-Object )
=end code

Return value; a new reference to the source
   object for the C<$res>, or undefined if there is none.. 

=begin comment

=head2 Example
# Example for get-source-object

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-user-data

Gets the user data from a B<Gnome::Gio::R-AsyncResult>.

=begin code
method get-user-data (--> gpointer )
=end code

Return value; the user data for C<$res>.. 

=begin comment

=head2 Example
# Example for get-user-data

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 is-tagged

Checks if C<$res> has the given C<$source-tag> (generally a function
pointer indicating the function C<$res> was created by).

=begin code
method is-tagged ( gpointer $source-tag --> Bool )
=end code

=item $source-tag; an application-defined tag.

Return value; C<True> if C<$res> has the indicated C<$source-tag>, C<False> if
  not.. 

=begin comment

=head2 Example
# Example for is-tagged

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 legacy-propagate-error

If C<$res> is a B<Gnome::Gio::SimpleAsyncResult>, this is equivalent to
g_simple_async_result_propagate_error(). Otherwise it returns
C<False>.

This can be used for legacy error handling in async *_finish()
wrapper functions that traditionally handled B<Gnome::Gio::SimpleAsyncResult>
error returns themselves rather than calling into the virtual method.
This should not be used in new code; B<Gnome::Gio::R-AsyncResult> errors that are
set by virtual methods should also be extracted by virtual methods,
to enable subclasses to chain up correctly.

=begin code
method legacy-propagate-error ( CArray[N-Error] $err --> Bool )
=end code

=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; C<True> if C<$error> is has been filled in with an error from
  C<$res>, C<False> if not.. 

=begin comment

=head2 Example
# Example for legacy-propagate-error

=end comment

=end pod

