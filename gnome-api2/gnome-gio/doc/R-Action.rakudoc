=comment Package: Gio, C-Source: action
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Gnome::Gio::R-Action

=head1 Description

B<Gnome::Gio::R-Action> represents a single named action.

The main interface to an action is that it can be activated with
C<.activate()>.  This results in the 'activate' signal being
emitted.  An activation has a B<Gnome::Glib::N-Variant> parameter (which may be
undefined).  The correct type for the parameter is determined by a static
parameter type (which is given at construction time).

An action may optionally have a state, in which case the state may be
set with C<.change-state()>.  This call takes a B<Gnome::Glib::N-Variant>.  The
correct type for the state is determined by a static state type
(which is given at construction time).

The state may have a hint associated with it, specifying its valid
range.

B<Gnome::Gio::R-Action> is merely the interface to the concept of an action, as
described above.  Various implementations of actions exist, including
B<Gnome::Gio::SimpleAction>.

In all cases, the implementing class is responsible for storing the
name of the action, the parameter type, the enabled state, the
optional state type and the state and emitting the appropriate
signals when these change.  The implementor is responsible for filtering
calls to C<.activate()> and C<.change-state()> for type
safety and for the state being enabled.

Probably the only useful thing to do with a B<Gnome::Gio::R-Action> is to put it
inside of a B<Gnome::Gio::SimpleActionGroup>.

=begin comment

=head2 Uml Diagram
![](plantuml/â€¦.svg)

=end comment

=begin comment

=head2 Example
# Example use of module Gnome::Gio::Action

=end comment

=end pod
#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 activate

Activates the action.
 C<$parameter> must be the correct type of parameter for the action (ie:
the parameter type given at construction time).  If the parameter
type was undefined then C<$parameter> must also be undefined.

If the C<$parameter> GVariant is floating, it is consumed.

=begin code
method activate ( CArray[N-Variant] $parameter )
=end code

=item $parameter; the parameter to the activation.

=begin comment

=head2 Example
# Example for activate

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 change-state

Request for the state of C<$action> to be changed to C<$value>.

The action must be stateful and C<$value> must be of the correct type.
See C<.get-state-type()>.

This call merely requests a change.  The action may refuse to change
its state or may change its state to something other than C<$value>.
See C<.get-state-hint()>.

If the C<$value> GVariant is floating, it is consumed.

=begin code
method change-state ( CArray[N-Variant] $value )
=end code

=item $value; the new state.

=begin comment

=head2 Example
# Example for change-state

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-enabled

Checks if C<$action> is currently enabled.

An action must be enabled in order to be activated or in order to
have its state changed from outside callers.

=begin code
method get-enabled (--> Bool )
=end code

Return value; whether the action is enabled. 

=begin comment

=head2 Example
# Example for get-enabled

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-name

Queries the name of C<$action>.

=begin code
method get-name (--> Str )
=end code

Return value; the name of the action. 

=begin comment

=head2 Example
# Example for get-name

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-parameter-type

Queries the type of the parameter that must be given when activating C<$action>.

When activating the action using C<.activate()>, the B<Gnome::Glib::N-Variant>
given to that function must be of the type returned by this function.

In the case that this function returns undefined, you must not give any
B<Gnome::Glib::N-Variant>, but undefined instead.

=begin code
method get-parameter-type (--> CArray[N-VariantType] )
=end code

Return value; the parameter type. 

=begin comment

=head2 Example
# Example for get-parameter-type

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-state

Queries the current state of C<$action>.

If the action is not stateful then undefined will be returned.  If the
action is stateful then the type of the return value is the type
given by C<.get-state-type()>.

The return value (if non-undefined) should be freed with
g_variant_unref() when it is no longer required.

=begin code
method get-state (--> CArray[N-Variant] )
=end code

Return value; the current state of the action. 

=begin comment

=head2 Example
# Example for get-state

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-state-hint

Requests a hint about the valid range of values for the state of C<$action>.

If undefined is returned it either means that the action is not stateful
or that there is no hint about the valid range of values for the
state of the action.

If a B<Gnome::Glib::N-Variant> array is returned then each item in the array is a
possible value for the state.  If a B<Gnome::Glib::N-Variant> pair (ie: two-tuple) is
returned then the tuple specifies the inclusive lower and upper bound
of valid values for the state.

In any case, the information is merely a hint.  It may be possible to
have a state value outside of the hinted range and setting a value
within the range may fail.

The return value (if non-undefined) should be freed with
g_variant_unref() when it is no longer required.

=begin code
method get-state-hint (--> CArray[N-Variant] )
=end code

Return value; the state range hint. 

=begin comment

=head2 Example
# Example for get-state-hint

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-state-type

Queries the type of the state of C<$action>.

If the action is stateful (e.g. created with
g_simple_action_new_stateful()) then this function returns the
B<Gnome::Glib::N-VariantType> of the state.  This is the type of the initial value
given as the state. All calls to C<.change-state()> must give a
B<Gnome::Glib::N-Variant> of this type and C<.get-state()> will return a
B<Gnome::Glib::N-Variant> of the same type.

If the action is not stateful (e.g. created with g_simple_action_new())
then this function will return undefined. In that case, C<.get-state()>
will return undefined and you must not call C<.change-state()>.

=begin code
method get-state-type (--> CArray[N-VariantType] )
=end code

Return value; the state type, if the action is stateful. 

=begin comment

=head2 Example
# Example for get-state-type

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Functions]------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Functions
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 name-is-valid

Checks if C<$action_name> is valid.
 C<$action_name> is valid if it consists only of alphanumeric characters,
plus '-' and '.'.  The empty string is not a valid action name.

It is an error to call this function with a non-utf8 C<$action_name>. C<$action_name> must not be undefined.

=begin code
method name-is-valid ( Str $action-name --> Bool )
=end code

=item $action-name; a potential action name.

Return value; C<True> if C<$action_name> is valid. 

=begin comment

=head2 Example
# Example for name-is-valid

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 parse-detailed-name

Parses a detailed action name into its separate name and target
components.

Detailed action names can have three formats.

The first format is used to represent an action name with no target
value and consists of just an action name containing no whitespace
nor the characters ':', '(' or ')'.  For example: "app.action".

The second format is used to represent an action with a target value
that is a non-empty string consisting only of alphanumerics, plus '-'
and '.'.  In that case, the action name and target value are
separated by a double colon ("::").  For example:
"app.action::target".

The third format is used to represent an action with any type of
target value, including strings.  The target value follows the action
name, surrounded in parens.  For example: "app.action(42)".  The
target value is parsed using g_variant_parse().  If a tuple-typed
value is desired, it must be specified in the same way, resulting in
two sets of parens, for example: "app.action((1,2,3))".  A string
target can be specified this way as well: "app.action('target')".
For strings, this third format must be used if * target value is
empty or contains characters other than alphanumerics, '-' and '.'.

=begin code
method parse-detailed-name ( Str $detailed-name, Array[Str] $action-name, CArray[N-Variant] $target-value, CArray[N-Error] $err --> Bool )
=end code

=item $detailed-name; a detailed action name.
=item $action-name; (transfer ownership: full) the action name.
=item $target-value; (transfer ownership: full) the target value, or undefined for no target.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; C<True> if successful, else C<False> with C<$error> set. 

=begin comment

=head2 Example
# Example for parse-detailed-name

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 print-detailed-name

Formats a detailed action name from C<$action_name> and C<$target_value>.

It is an error to call this function with an invalid action name.

This function is the opposite of C<.parse-detailed-name()>.
It will produce a string that can be parsed back to the C<$action_name>
and C<$target_value> by that function.

See that function for the types of strings that will be printed by
this function.

=begin code
method print-detailed-name ( Str $action-name, CArray[N-Variant] $target-value --> Str )
=end code

=item $action-name; a valid action name.
=item $target-value; a B<Gnome::Glib::N-Variant> target value, or undefined.

Return value; a detailed format string. 

=begin comment

=head2 Example
# Example for print-detailed-name

=end comment

=end pod

