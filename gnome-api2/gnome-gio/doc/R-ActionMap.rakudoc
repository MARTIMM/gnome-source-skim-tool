=comment Package: Gio, C-Source: actionmap
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Gnome::Gio::R-ActionMap

=head1 Description

The GActionMap interface is implemented by B<Gnome::Gio::R-ActionGroup>
implementations that operate by containing a number of
named B<Gnome::Gio::R-Action> instances, such as B<Gnome::Gio::SimpleActionGroup>.

One useful application of this interface is to map the
names of actions from various action groups to unique,
prefixed names (e.g. by prepending "app." or "win.").
This is the motivation for the 'Map' part of the interface
name.

=begin comment

=head2 Uml Diagram
![](plantuml/â€¦.svg)

=end comment

=begin comment

=head2 Example
# Example use of module Gnome::Gio::ActionMap

=end comment

=end pod
#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 add-action

Adds an action to the C<$action_map>.

If the action map already contains an action with the same name
as C<$action> then the old action is dropped from the action map.

The action map takes its own reference on C<$action>.

=begin code
method add-action ( N-Object() $action )
=end code

=item $action; a B<Gnome::Gio::R-Action>.

=begin comment

=head2 Example
# Example for add-action

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 add-action-entries
This function is not yet available

A convenience function for creating multiple B<Gnome::Gio::SimpleAction> instances
and adding them to a B<Gnome::Gio::R-ActionMap>.

Each action is constructed as per one B<Gnome::Gio::N-ActionEntry>.

=begin comment
<!-- language="C" -->
static void
activate_quit (GSimpleAction *simple,
               GVariant      *parameter,
               gpointer       user_data)
{
  exit (0);
}

static void
activate_print_string (GSimpleAction *simple,
                       GVariant      *parameter,
                       gpointer       user_data)
{
  g_print ("%s\n", g_variant_get_string (parameter, NULL));
}

static GActionGroup *
create_action_group (void)
{
  const GActionEntry entries[] = {
    { "quit",         activate_quit              },
    { "print-string", activate_print_string, "s" }
  };
  GSimpleActionGroup *group;

  group = g_simple_action_group_new ();
  g_action_map_add_action_entries (G_ACTION_MAP (group), entries, G_N_ELEMENTS (entries), NULL);

  return G_ACTION_GROUP (group);
}

=end comment

=begin code
method add-action-entries ( CArray[N-ActionEntry]  $entries, Int() $n-entries, gpointer $user-data )
=end code

=item $entries; a pointer to
          the first item in an array of B<Gnome::Gio::N-ActionEntry> structs.
=item $n-entries; the length of C<$entries>, or -1 if C<$entries> is undefined-terminated.
=item $user-data; the user data for signal connections.

=begin comment

=head2 Example
# Example for add-action-entries

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 lookup-action

Looks up the action with the name C<$action_name> in C<$action_map>.

If no such action exists, returns undefined.

=begin code
method lookup-action ( Str $action-name --> N-Object )
=end code

=item $action-name; the name of an action.

Return value; a B<Gnome::Gio::R-Action>, or undefined. 

=begin comment

=head2 Example
# Example for lookup-action

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 remove-action

Removes the named action from the action map.

If no action of this name is in the map then nothing happens.

=begin code
method remove-action ( Str $action-name )
=end code

=item $action-name; the name of the action.

=begin comment

=head2 Example
# Example for remove-action

=end comment

=end pod

