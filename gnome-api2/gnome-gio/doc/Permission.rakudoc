=comment Package: Gio, C-Source: permission
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=TITLE Gnome::Gio::Permission
=head1 Description

A B<Gnome::Gio::Permission> represents the status of the caller’s permission to
perform a certain action.

You can query if the action is currently allowed and if it is
possible to acquire the permission so that the action will be allowed
in the future.

There is also an API to actually acquire the permission and one to
release it.

As an example, a B<Gnome::Gio::Permission> might represent the ability for the
user to write to a B<Gnome::Gio::Permission> object.  This B<Gnome::Gio::Permission> object
could then be used to decide if it is appropriate to show a “Click here to
unlock” button in a dialog and to provide the mechanism to invoke
when that button is clicked.

=head2 Uml Diagram
=for image :src<asset_files/images/plantuml/Permission.png> :width<50%> :class<inline>

=begin comment

=head2 Example
# Example use of module Gnome::Gio::Permission

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

=head2 new

=head3 :native-object

Create an object using a native object from elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object :$native-object! )

=end pod

#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 acquire

Attempts to acquire the permission represented by C<$permission>.

The precise method by which this happens depends on the permission
and the underlying authentication mechanism.  A simple example is
that a dialog may appear asking the user to enter their password.

You should check with C<.get-can-acquire()> before calling
this function.

If the permission is acquired then C<True> is returned.  Otherwise,
C<False> is returned and C<$error> is set appropriately.

This call is blocking, likely for a very long time (in the case that
user interaction is required).  See C<.acquire-async()> for
the non-blocking version.

=begin code
method acquire ( N-Object() $cancellable, CArray[N-Error] $err --> Bool )
=end code

=item $cancellable; a B<Gnome::Gio::Cancellable>, or undefined.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; C<True> if the permission was successfully acquired. 

=begin comment

=head2 Example
# Example for acquire

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 acquire-async

Attempts to acquire the permission represented by C<$permission>.

This is the first half of the asynchronous version of
C<.acquire()>.

=begin code
method acquire-async ( N-Object() $cancellable, GAsyncReadyCallback &callback, gpointer $user-data )
=end code

=item $cancellable; a B<Gnome::Gio::Cancellable>, or undefined.
=item GAsyncReadyCallback &callback; the B<Gnome::Gio::T-iotypes> to call when done. The function must be specified with the following signature; C<:( N-Object $source-object, N-Object $res, gpointer $data )>.
=item $user-data; the user data to pass to C<$callback>.

=begin comment

=head2 Example
# Example for acquire-async

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 acquire-finish

Collects the result of attempting to acquire the permission
represented by C<$permission>.

This is the second half of the asynchronous version of
C<.acquire()>.

=begin code
method acquire-finish ( N-Object() $result, CArray[N-Error] $err --> Bool )
=end code

=item $result; the B<Gnome::Gio::R-AsyncResult> given to the B<Gnome::Gio::T-iotypes>.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; C<True> if the permission was successfully acquired. 

=begin comment

=head2 Example
# Example for acquire-finish

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-allowed

Gets the value of the 'allowed' property.  This property is C<True> if
the caller currently has permission to perform the action that C<$permission> represents the permission to perform.

=begin code
method get-allowed (--> Bool )
=end code

Return value; the value of the 'allowed' property. 

=begin comment

=head2 Example
# Example for get-allowed

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-can-acquire

Gets the value of the 'can-acquire' property.  This property is C<True>
if it is generally possible to acquire the permission by calling
C<.acquire()>.

=begin code
method get-can-acquire (--> Bool )
=end code

Return value; the value of the 'can-acquire' property. 

=begin comment

=head2 Example
# Example for get-can-acquire

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-can-release

Gets the value of the 'can-release' property.  This property is C<True>
if it is generally possible to release the permission by calling
C<.release()>.

=begin code
method get-can-release (--> Bool )
=end code

Return value; the value of the 'can-release' property. 

=begin comment

=head2 Example
# Example for get-can-release

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 impl-update

This function is called by the B<Gnome::Gio::Permission> implementation to update
the properties of the permission.  You should never call this
function except from a B<Gnome::Gio::Permission> implementation.

GObject notify signals are generated, as appropriate.

=begin code
method impl-update ( Bool() $allowed, Bool() $can-acquire, Bool() $can-release )
=end code

=item $allowed; the new value for the 'allowed' property.
=item $can-acquire; the new value for the 'can-acquire' property.
=item $can-release; the new value for the 'can-release' property.

=begin comment

=head2 Example
# Example for impl-update

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 release

Attempts to release the permission represented by C<$permission>.

The precise method by which this happens depends on the permission
and the underlying authentication mechanism.  In most cases the
permission will be dropped immediately without further action.

You should check with C<.get-can-release()> before calling
this function.

If the permission is released then C<True> is returned.  Otherwise,
C<False> is returned and C<$error> is set appropriately.

This call is blocking, likely for a very long time (in the case that
user interaction is required).  See C<.release-async()> for
the non-blocking version.

=begin code
method release ( N-Object() $cancellable, CArray[N-Error] $err --> Bool )
=end code

=item $cancellable; a B<Gnome::Gio::Cancellable>, or undefined.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; C<True> if the permission was successfully released. 

=begin comment

=head2 Example
# Example for release

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 release-async

Attempts to release the permission represented by C<$permission>.

This is the first half of the asynchronous version of
C<.release()>.

=begin code
method release-async ( N-Object() $cancellable, GAsyncReadyCallback &callback, gpointer $user-data )
=end code

=item $cancellable; a B<Gnome::Gio::Cancellable>, or undefined.
=item GAsyncReadyCallback &callback; the B<Gnome::Gio::T-iotypes> to call when done. The function must be specified with the following signature; C<:( N-Object $source-object, N-Object $res, gpointer $data )>.
=item $user-data; the user data to pass to C<$callback>.

=begin comment

=head2 Example
# Example for release-async

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 release-finish

Collects the result of attempting to release the permission
represented by C<$permission>.

This is the second half of the asynchronous version of
C<.release()>.

=begin code
method release-finish ( N-Object() $result, CArray[N-Error] $err --> Bool )
=end code

=item $result; the B<Gnome::Gio::R-AsyncResult> given to the B<Gnome::Gio::T-iotypes>.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; C<True> if the permission was successfully released. 

=begin comment

=head2 Example
# Example for release-finish

=end comment

=end pod

