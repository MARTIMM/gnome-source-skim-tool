=comment Package: Gio, C-Source: io
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=TITLE Gnome::Gio::SimpleAction

=head1 Description

A B<Gnome::Gio::SimpleAction> is the obvious simple implementation of the B<Gnome::Gio::R-Action>
interface. This is the easiest way to create an action for purposes of
adding it to a B<Gnome::Gio::SimpleActionGroup>.

See also B<GtkAction>.

=head2 Uml Diagram
=for image :src<asset_files/images/plantuml/SimpleAction.png> :width<50%> :class<inline>

=begin comment

=head2 Example
# Example use of module Gnome::Gio::SimpleAction

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

=head2 new

=head3 :native-object

Create an object using a native object from elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object() :$native-object! )

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-simpleaction

Creates a new action.

The created action is stateless. See C<.new-stateful()> to create
an action that has state.

=begin code
method new-simpleaction ( Str $name, CArray[N-VariantType] $parameter-type --> Gnome::Gio::SimpleAction \)
=end code

=item $name; the name of the action.
=item $parameter-type; the type of parameter that will be passed to
  handlers for the  I<activate> signal, or undefined for no parameter.

=begin comment

=head2 Example
# Example for new-simpleaction

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-stateful

Creates a new stateful action.

All future state values must have the same B<Gnome::Glib::N-VariantType> as the initial C<$state>.

If the C<$state> B<Gnome::Glib::N-Variant> is floating, it is consumed.

=begin code
method new-stateful ( Str $name, CArray[N-VariantType] $parameter-type, CArray[N-Variant] $state --> Gnome::Gio::SimpleAction \)
=end code

=item $name; the name of the action.
=item $parameter-type; the type of the parameter that will be passed to
  handlers for the  I<activate> signal, or undefined for no parameter.
=item $state; the initial state of the action.

=begin comment

=head2 Example
# Example for new-stateful

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-enabled

Sets the action as enabled or not.

An action must be enabled in order to be activated or in order to
have its state changed from outside callers.

This should only be called by the implementor of the action.  Users
of the action should not attempt to modify its enabled flag.

=begin code
method set-enabled ( Bool() $enabled )
=end code

=item $enabled; whether the action is enabled.

=begin comment

=head2 Example
# Example for set-enabled

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-state

Sets the state of the action.

This directly updates the 'state' property to the given value.

This should only be called by the implementor of the action.  Users
of the action should not attempt to directly modify the 'state'
property.  Instead, they should call g_action_change_state() to
request the change.

If the C<$value> GVariant is floating, it is consumed.

=begin code
method set-state ( CArray[N-Variant] $value )
=end code

=item $value; the new B<Gnome::Glib::N-Variant> for the state.

=begin comment

=head2 Example
# Example for set-state

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-state-hint

Sets the state hint for the action.

See g_action_get_state_hint() for more information about
action state hints.

=begin code
method set-state-hint ( CArray[N-Variant] $state-hint )
=end code

=item $state-hint; a B<Gnome::Glib::N-Variant> representing the state hint.

=begin comment

=head2 Example
# Example for set-state-hint

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Signal Documentation]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Signals

=comment -----------------------------------------------------------------------
=head3 activate

Indicates that the action was just activated.
 C<$parameter> will always be of the expected type, i.e. the parameter type
specified when the action was created. If an incorrect type is given when
activating the action, this signal is not emitted.

Since GLib 2.40, if no handler is connected to this signal then the
default behaviour for boolean-stated actions with a undefined parameter
type is to toggle them via the  I<change-state> signal.
For stateful actions where the state type is equal to the parameter
type, the default is to forward them directly to
 I<change-state>.  This should allow almost all users
of B<Gnome::Gio::SimpleAction> to connect only one handler or the other.

=begin code
method handler (
  N-Object $parameter,
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gio::SimpleAction :$_widget,
  *C<user>-options
)
=end code

=item $parameter; the parameter to the activation, or undefined if it has
  no parameter. It is a native B<Gnome::Glib::Variant>.
=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gio::SimpleAction> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

=begin comment

=head2 Example
# Example for signal activate

=end comment

=comment -----------------------------------------------------------------------
=head3 change-state

Indicates that the action just received a request to change its
state.
 C<$value> will always be of the correct state type, i.e. the type of the
initial state passed to C<.new-stateful()>. If an incorrect
type is given when requesting to change the state, this signal is not
emitted.

If no handler is connected to this signal then the default
behaviour is to call C<.set-state()> to set the state
to the requested value. If you connect a signal handler then no
default action is taken. If the state should change then you must
call C<.set-state()> from the handler.

An example of a 'change-state' handler:
=begin comment
<!-- language="C" -->
static void
change_volume_state (GSimpleAction *action,
                     GVariant      *value,
                     gpointer       user_data)
{
  gint requested;

  requested = g_variant_get_int32 (value);

  // Volume only goes from 0 to 10
  if (0 <= requested && requested <= 10)
    g_simple_action_set_state (action, value);
}

=end comment

The handler need not set the state to the requested value.
It could set it to any value at all, or take some other action.

=begin code
method handler (
   $value,
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gio::SimpleAction :$_widget,
  *C<user>-options
)
=end code

=item $value; the requested value for the state.
=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gio::SimpleAction> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

=begin comment

=head2 Example
# Example for signal change-state

=end comment

=end pod

