=comment Package: Gio, C-Source: application
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Gnome::Gio::Application

=head1 Description

A B<Gnome::Gio::Application> is the foundation of an application.  It wraps some
low-level platform-specific services and is intended to act as the
foundation for higher-level application classes such as
B<GtkApplication> or #MxApplication.  In general, you should not use
this class outside of a higher level framework.

GApplication provides convenient life cycle management by maintaining
a "use count" for the primary application instance. The use count can
be changed using C<.hold()> and C<.release()>. If
it drops to zero, the application exits. Higher-level classes such as
B<GtkApplication> employ the use count to ensure that the application
stays alive as long as it has any opened windows.

Another feature that GApplication (optionally) provides is process
uniqueness. Applications can make use of this functionality by
providing a unique application ID. If given, only one application
with this ID can be running at a time per session. The session
concept is platform-dependent, but corresponds roughly to a graphical
desktop login. When your application is launched again, its
arguments are passed through platform communication to the already
running program. The already running instance of the program is
called the "primary instance"; for non-unique applications this is
always the current instance. On Linux, the D-Bus session bus
is used for communication.

The use of B<Gnome::Gio::Application> differs from some other commonly-used
uniqueness libraries (such as libunique) in important ways. The
application is not expected to manually register itself and check
if it is the primary instance. Instead, the main() function of a
B<Gnome::Gio::Application> should do very little more than instantiating the
application instance, possibly connecting signal handlers, then
calling C<.run()>. All checks for uniqueness are done
internally. If the application is the primary instance then the
startup signal is emitted and the mainloop runs. If the application
is not the primary instance then a signal is sent to the primary
instance and C<.run()> promptly returns. See the code
examples below.

If used, the expected form of an application identifier is the same as
that of of a
[D-Bus well-known bus name](https://dbus.freedesktop.org/doc/dbus-specification.html#message-protocol-names-bus).
Examples include: B<com.example.MyApp>, B<org.example.internal_apps.Calculator>,
B<org._7_zip.Archiver>.
For details on valid application identifiers, see C<.id-is-valid()>.

On Linux, the application identifier is claimed as a well-known bus name
on the user's session bus.  This means that the uniqueness of your
application is scoped to the current session.  It also means that your
application may provide additional services (through registration of other
object paths) at that bus name.  The registration of these object paths
should be done with the shared GDBus session bus.  Note that due to the
internal architecture of GDBus, method calls can be dispatched at any time
(even if a main loop is not running).  For this reason, you must ensure that
any object paths that you wish to register are registered before B<Gnome::Gio::Application>
attempts to acquire the bus name of your application (which happens in
C<.register()>).  Unfortunately, this means that you cannot use
C<.get-is-remote()> to decide if you want to register object paths.

GApplication also implements the B<Gnome::Gio::R-ActionGroup> and B<Gnome::Gio::R-ActionMap>
interfaces and lets you easily export actions by adding them with
g_action_map_add_action(). When invoking an action by calling
g_action_group_activate_action() on the application, it is always
invoked in the primary instance. The actions are also exported on
the session bus, and GIO provides the B<Gnome::Gio::DBusActionGroup> wrapper to
conveniently access them remotely. GIO provides a B<Gnome::Gio::DBusMenuModel> wrapper
for remote access to exported B<GMenuModels>.

There is a number of different entry points into a GApplication:

=item via 'Activate' (i.e. just starting the application)

=item via 'Open' (i.e. opening some files)

=item by handling a command-line

=item via activating an action

The  I<startup> signal lets you handle the application
initialization for all of these in a single place.

Regardless of which of these entry points is used to start the
application, GApplication passes some ‘platform data’ from the
launching instance to the primary instance, in the form of a
B<Gnome::Glib::N-Variant> dictionary mapping strings to variants. To use platform
data, override the C<$before_emit> or C<$after_emit> virtual functions
in your B<Gnome::Gio::Application> subclass. When dealing with
B<Gnome::Gio::ApplicationCommandLine> objects, the platform data is
directly available via C<.command-line-get-cwd()>,
C<.command-line-get-environ()> and
C<.command-line-get-platform-data()>.

As the name indicates, the platform data may vary depending on the
operating system, but it always includes the current directory (key
"cwd"), and optionally the environment (ie the set of environment
variables and their values) of the calling process (key "environ").
The environment is only added to the platform data if the
C<G_APPLICATION_SEND_ENVIRONMENT> flag is set. B<Gnome::Gio::Application> subclasses
can add their own platform data by overriding the C<$add_platform_data>
virtual function. For instance, B<GtkApplication> adds startup notification
data in this way.

To parse commandline arguments you may handle the
 I<command-line> signal or override the local_command_line()
vfunc, to parse them in either the primary instance or the local instance,
respectively.

For an example of opening files with a GApplication, see
[gapplication-example-open.c](https://gitlab.gnome.org/GNOME/glib/-/blob/HEAD/gio/tests/gapplication-example-open.c).

For an example of using actions with GApplication, see
[gapplication-example-actions.c](https://gitlab.gnome.org/GNOME/glib/-/blob/HEAD/gio/tests/gapplication-example-actions.c).

For an example of using extra D-Bus hooks with GApplication, see
[gapplication-example-dbushooks.c](https://gitlab.gnome.org/GNOME/glib/-/blob/HEAD/gio/tests/gapplication-example-dbushooks.c).

=begin comment

=head2 Uml Diagram
![](plantuml/….svg)

=end comment

=begin comment

=head2 Example
# Example use of module Gnome::Gio::Application

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

=head2 new

=head3 :native-object

Create an object using a native object from elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object :$native-object! )

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-application

Creates a new B<Gnome::Gio::Application> instance.

If non-undefined, the application id must be valid.  See
C<.id-is-valid()>.

If no application ID is given then some features of B<Gnome::Gio::Application>
(most notably application uniqueness) will be disabled.

=begin code
method new-application ( Str $application-id, UInt $flags --> Gnome::Gio::Application \)
=end code

=item $application-id; the application id.
=item $flags; the application flags.

=begin comment

=head2 Example
# Example for new-application

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 activate

Activates the application.

In essence, this results in the  I<activate> signal being
emitted in the primary instance.

The application must be registered before calling this function.

=begin code
method activate ( )
=end code

=begin comment

=head2 Example
# Example for activate

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 add-main-option
This function is not yet available

Add an option to be handled by C<$application>.

Calling this function is the equivalent of calling
C<.add-main-option-entries()> with a single B<Gnome::Glib::N-OptionEntry>
that has its arg_data member set to undefined.

The parsed arguments will be packed into a B<Gnome::Glib::N-VariantDict> which
is passed to  I<handle-local-options>. If
C<G_APPLICATION_HANDLES_COMMAND_LINE> is set, then it will also
be sent to the primary instance. See
C<.add-main-option-entries()> for more details.

See B<Gnome::Glib::N-OptionEntry> for more documentation of the arguments.

=begin code
method add-main-option ( Str $long-name, Int() $short-name, UInt $flags, GOptionArg  $arg, Str $description, Str $arg-description )
=end code

=item $long-name; the long name of an option used to specify it in a commandline.
=item $short-name; the short name of an option.
=item $flags; flags from B<Gnome::Glib::T-OptionEntry>.
=item $arg; the type of the option, as a B<Gnome::Glib::T-OptionEntry>.
=item $description; the description for the option in B<--help> output.
=item $arg-description; the placeholder to use for the extra argument
   parsed by the option in B<--help> output.

=begin comment

=head2 Example
# Example for add-main-option

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 add-main-option-entries
This function is not yet available

Adds main option entries to be handled by C<$application>.

This function is comparable to g_option_context_add_main_entries().

After the commandline arguments are parsed, the
 I<handle-local-options> signal will be emitted.  At this
point, the application can inspect the values pointed to by C<$arg_data>
in the given B<GOptionEntrys>.

Unlike B<GOptionContext>, B<Gnome::Gio::Application> supports giving a undefined C<$arg_data> for a non-callback B<Gnome::Glib::N-OptionEntry>.  This results in the
argument in question being packed into a B<Gnome::Glib::N-VariantDict> which is also
passed to  I<handle-local-options>, where it can be
inspected and modified.  If C<G_APPLICATION_HANDLES_COMMAND_LINE> is
set, then the resulting dictionary is sent to the primary instance,
where C<.command-line-get-options-dict()> will return it.
This "packing" is done according to the type of the argument --
booleans for normal flags, strings for strings, bytestrings for
filenames, etc.  The packing only occurs if the flag is given (ie: we
do not pack a "false" B<Gnome::Glib::N-Variant> in the case that a flag is missing).

In general, it is recommended that all commandline arguments are
parsed locally.  The options dictionary should then be used to
transmit the result of the parsing to the primary instance, where
g_variant_dict_lookup() can be used.  For local options, it is
possible to either use C<$arg_data> in the usual way, or to consult (and
potentially remove) the option from the options dictionary.

This function is new in GLib 2.40.  Before then, the only real choice
was to send all of the commandline arguments (options and all) to the
primary instance for handling.  B<Gnome::Gio::Application> ignored them completely
on the local side.  Calling this function "opts in" to the new
behaviour, and in particular, means that unrecognised options will be
treated as errors.  Unrecognised options have never been ignored when
C<G_APPLICATION_HANDLES_COMMAND_LINE> is unset.

If  I<handle-local-options> needs to see the list of
filenames, then the use of C<G_OPTION_REMAINING> is recommended.  If C<$arg_data> is undefined then C<G_OPTION_REMAINING> can be used as a key into
the options dictionary.  If you do use C<G_OPTION_REMAINING> then you
need to handle these arguments for yourself because once they are
consumed, they will no longer be visible to the default handling
(which treats them as filenames to be opened).

It is important to use the proper GVariant format when retrieving
the options with g_variant_dict_lookup():
=item for C<G_OPTION_ARG_NONE>, use B<b>
=item for C<G_OPTION_ARG_STRING>, use B<&s>
=item for C<G_OPTION_ARG_INT>, use B<i>
=item for %G_OPTION_ARG_INT64, use B<x>
=item for C<G_OPTION_ARG_DOUBLE>, use B<d>
=item for C<G_OPTION_ARG_FILENAME>, use B<^&ay>
=item for C<G_OPTION_ARG_STRING_ARRAY>, use B<^a&s>
=item for C<G_OPTION_ARG_FILENAME_ARRAY>, use B<^a&ay>

=begin code
method add-main-option-entries ( CArray[N-OptionEntry]  $entries )
=end code

=item $entries; a
          undefined-terminated list of B<GOptionEntrys>.

=begin comment

=head2 Example
# Example for add-main-option-entries

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 add-option-group
This function is not yet available

Adds a B<Gnome::Glib::N-OptionGroup> to the commandline handling of C<$application>.

This function is comparable to g_option_context_add_group().

Unlike C<.add-main-option-entries()>, this function does
not deal with undefined C<$arg_data> and never transmits options to the
primary instance.

The reason for that is because, by the time the options arrive at the
primary instance, it is typically too late to do anything with them.
Taking the GTK option group as an example: GTK will already have been
initialised by the time the  I<command-line> handler runs.
In the case that this is not the first-running instance of the
application, the existing instance may already have been running for
a very long time.

This means that the options from B<Gnome::Glib::N-OptionGroup> are only really usable
in the case that the instance of the application being run is the
first instance.  Passing options like B<--display=> or B<--gdk-debug=>
on future runs will have no effect on the existing primary instance.

Calling this function will cause the options in the supplied option
group to be parsed, but it does not cause you to be "opted in" to the
new functionality whereby unrecognised options are rejected even if
C<G_APPLICATION_HANDLES_COMMAND_LINE> was given.

=begin code
method add-option-group ( CArray[N-OptionGroup]  $group )
=end code

=item $group; (transfer ownership: full) a B<Gnome::Glib::N-OptionGroup>.

=begin comment

=head2 Example
# Example for add-option-group

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 bind-busy-property

Marks C<$application> as busy (see C<.mark-busy()>) while C<$property> on C<$object> is C<True>.

The binding holds a reference to C<$application> while it is active, but
not to C<$object>. Instead, the binding is destroyed when C<$object> is
finalized.

=begin code
method bind-busy-property ( gpointer $object, Str $property )
=end code

=item $object; a B<Gnome::GObject::Object>.
=item $property; the name of a boolean property of C<$object>.

=begin comment

=head2 Example
# Example for bind-busy-property

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-application-id

Gets the unique identifier for C<$application>.

=begin code
method get-application-id (--> Str )
=end code

Return value; the identifier for C<$application>, owned by C<$application>. 

=begin comment

=head2 Example
# Example for get-application-id

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-dbus-connection

Gets the B<Gnome::Gio::DBusConnection> being used by the application, or undefined.

If B<Gnome::Gio::Application> is using its D-Bus backend then this function will
return the B<Gnome::Gio::DBusConnection> being used for uniqueness and
communication with the desktop environment and other instances of the
application.

If B<Gnome::Gio::Application> is not using D-Bus then this function will return
undefined.  This includes the situation where the D-Bus backend would
normally be in use but we were unable to connect to the bus.

This function must not be called before the application has been
registered.  See C<.get-is-registered()>.

=begin code
method get-dbus-connection (--> N-Object )
=end code

Return value; a B<Gnome::Gio::DBusConnection>, or undefined. 

=begin comment

=head2 Example
# Example for get-dbus-connection

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-dbus-object-path

Gets the D-Bus object path being used by the application, or undefined.

If B<Gnome::Gio::Application> is using its D-Bus backend then this function will
return the D-Bus object path that B<Gnome::Gio::Application> is using.  If the
application is the primary instance then there is an object published
at this path.  If the application is not the primary instance then
the result of this function is undefined.

If B<Gnome::Gio::Application> is not using D-Bus then this function will return
undefined.  This includes the situation where the D-Bus backend would
normally be in use but we were unable to connect to the bus.

This function must not be called before the application has been
registered.  See C<.get-is-registered()>.

=begin code
method get-dbus-object-path (--> Str )
=end code

Return value; the object path, or undefined. 

=begin comment

=head2 Example
# Example for get-dbus-object-path

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-flags

Gets the flags for C<$application>.

See B<Gnome::Gio::T-Ioenums>.

=begin code
method get-flags (--> UInt )
=end code

Return value; the flags for C<$application>. 

=begin comment

=head2 Example
# Example for get-flags

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-inactivity-timeout

Gets the current inactivity timeout for the application.

This is the amount of time (in milliseconds) after the last call to
C<.release()> before the application stops running.

=begin code
method get-inactivity-timeout (--> UInt )
=end code

Return value; the timeout, in milliseconds. 

=begin comment

=head2 Example
# Example for get-inactivity-timeout

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-is-busy

Gets the application's current busy state, as set through
C<.mark-busy()> or C<.bind-busy-property()>.

=begin code
method get-is-busy (--> Bool )
=end code

Return value; C<True> if C<$application> is currently marked as busy. 

=begin comment

=head2 Example
# Example for get-is-busy

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-is-registered

Checks if C<$application> is registered.

An application is registered if C<.register()> has been
successfully called.

=begin code
method get-is-registered (--> Bool )
=end code

Return value; C<True> if C<$application> is registered. 

=begin comment

=head2 Example
# Example for get-is-registered

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-is-remote

Checks if C<$application> is remote.

If C<$application> is remote then it means that another instance of
application already exists (the 'primary' instance).  Calls to
perform actions on C<$application> will result in the actions being
performed by the primary instance.

The value of this property cannot be accessed before
C<.register()> has been called.  See
C<.get-is-registered()>.

=begin code
method get-is-remote (--> Bool )
=end code

Return value; C<True> if C<$application> is remote. 

=begin comment

=head2 Example
# Example for get-is-remote

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-resource-base-path

Gets the resource base path of C<$application>.

See C<.set-resource-base-path()> for more information.

=begin code
method get-resource-base-path (--> Str )
=end code

Return value; the base resource path, if one is set. 

=begin comment

=head2 Example
# Example for get-resource-base-path

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 hold

Increases the use count of C<$application>.

Use this function to indicate that the application has a reason to
continue to run.  For example, C<.hold()> is called by GTK+
when a toplevel window is on the screen.

To cancel the hold, call C<.release()>.

=begin code
method hold ( )
=end code

=begin comment

=head2 Example
# Example for hold

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 mark-busy

Increases the busy count of C<$application>.

Use this function to indicate that the application is busy, for instance
while a long running operation is pending.

The busy state will be exposed to other processes, so a session shell will
use that information to indicate the state to the user (e.g. with a
spinner).

To cancel the busy indication, use C<.unmark-busy()>.

The application must be registered before calling this function.

=begin code
method mark-busy ( )
=end code

=begin comment

=head2 Example
# Example for mark-busy

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 open

Opens the given files.

In essence, this results in the  I<open> signal being emitted
in the primary instance.
 C<$n_files> must be greater than zero.
 C<$hint> is simply passed through to the I<open> signal.  It is
intended to be used by applications that have multiple modes for
opening files (eg: "view" vs "edit", etc).  Unless you have a need
for this functionality, you should use "".

The application must be registered before calling this function
and it must have the C<G_APPLICATION_HANDLES_OPEN> flag set.

=begin code
method open ( N-Object() $files, Int() $n-files, Str $hint )
=end code

=item $files; an array of B<GFiles> to open.
=item $n-files; the length of the C<$files> array.
=item $hint; a hint (or ""), but never undefined.

=begin comment

=head2 Example
# Example for open

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 quit

Immediately quits the application.

Upon return to the mainloop, C<.run()> will return,
calling only the 'shutdown' function before doing so.

The hold count is ignored.
Take care if your code has called C<.hold()> on the application and
is therefore still expecting it to exist.
(Note that you may have called C<.hold()> indirectly, for example
through gtk_application_add_window().)

The result of calling C<.run()> again after it returns is
unspecified.

=begin code
method quit ( )
=end code

=begin comment

=head2 Example
# Example for quit

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 register

Attempts registration of the application.

This is the point at which the application discovers if it is the
primary instance or merely acting as a remote for an already-existing
primary instance.  This is implemented by attempting to acquire the
application identifier as a unique bus name on the session bus using
GDBus.

If there is no application ID or if C<G_APPLICATION_NON_UNIQUE> was
given, then this process will always become the primary instance.

Due to the internal architecture of GDBus, method calls can be
dispatched at any time (even if a main loop is not running).  For
this reason, you must ensure that any object paths that you wish to
register are registered before calling this function.

If the application has already been registered then C<True> is
returned with no work performed.

The  I<startup> signal is emitted if registration succeeds
and C<$application> is the primary instance (including the non-unique
case).

In the event of an error (such as C<$cancellable> being cancelled, or a
failure to connect to the session bus), C<False> is returned and C<$error>
is set appropriately.

Note: the return value of this function is not an indicator that this
instance is or is not the primary instance of the application.  See
C<.get-is-remote()> for that.

=begin code
method register ( N-Object() $cancellable, CArray[N-Error] $err --> Bool )
=end code

=item $cancellable; a B<Gnome::Gio::Cancellable>, or undefined.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; C<True> if registration succeeded. 

=begin comment

=head2 Example
# Example for register

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 release

Decrease the use count of C<$application>.

When the use count reaches zero, the application will stop running.

Never call this function except to cancel the effect of a previous
call to C<.hold()>.

=begin code
method release ( )
=end code

=begin comment

=head2 Example
# Example for release

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 run

Runs the application.

This function is intended to be run from main() and its return value
is intended to be returned by main(). Although you are expected to pass
the C<$argc>, C<$argv> parameters from main() to this function, it is possible
to pass undefined if C<$argv> is not available or commandline handling is not
required.  Note that on Windows, C<$argc> and C<$argv> are ignored, and
g_win32_get_command_line() is called internally (for proper support
of Unicode commandline arguments).

B<Gnome::Gio::Application> will attempt to parse the commandline arguments.  You
can add commandline flags to the list of recognised options by way of
C<.add-main-option-entries()>.  After this, the
 I<handle-local-options> signal is emitted, from which the
application can inspect the values of its B<GOptionEntrys>.

 I<handle-local-options> is a good place to handle options
such as B<--version>, where an immediate reply from the local process is
desired (instead of communicating with an already-running instance).
A  I<handle-local-options> handler can stop further processing
by returning a non-negative value, which then becomes the exit status of
the process.

What happens next depends on the flags: if
C<G_APPLICATION_HANDLES_COMMAND_LINE> was specified then the remaining
commandline arguments are sent to the primary instance, where a
 I<command-line> signal is emitted.  Otherwise, the
remaining commandline arguments are assumed to be a list of files.
If there are no files listed, the application is activated via the
 I<activate> signal.  If there are one or more files, and
C<G_APPLICATION_HANDLES_OPEN> was specified then the files are opened
via the  I<open> signal.

If you are interested in doing more complicated local handling of the
commandline then you should implement your own B<Gnome::Gio::Application> subclass
and override local_command_line(). In this case, you most likely want
to return C<True> from your local_command_line() implementation to
suppress the default handling. See gapplication-example-cmdline2.c
for an example.

If, after the above is done, the use count of the application is zero
then the exit status is returned immediately.  If the use count is
non-zero then the default main context is iterated until the use count
falls to zero, at which point 0 is returned.

If the C<G_APPLICATION_IS_SERVICE> flag is set, then the service will
run for as much as 10 seconds with a use count of zero while waiting
for the message that caused the activation to arrive.  After that,
if the use count falls to zero the application will exit immediately,
except in the case that C<.set-inactivity-timeout()> is in
use.

This function sets the prgname (g_set_prgname()), if not already set,
to the basename of argv[0].

Much like g_main_loop_run(), this function will acquire the main context
for the duration that the application is running.

Since 2.40, applications that are not explicitly flagged as services
or launchers (ie: neither C<G_APPLICATION_IS_SERVICE> or
C<G_APPLICATION_IS_LAUNCHER> are given as flags) will check (from the
default handler for local_command_line) if "--gapplication-service"
was given in the command line.  If this flag is present then normal
commandline processing is interrupted and the
C<G_APPLICATION_IS_SERVICE> flag is set.  This provides a "compromise"
solution whereby running an application directly from the commandline
will invoke it in the normal way (which can be useful for debugging)
while still allowing applications to be D-Bus activated in service
mode.  The D-Bus service file should invoke the executable with
"--gapplication-service" as the sole commandline argument.  This
approach is suitable for use by most graphical applications but
should not be used from applications like editors that need precise
control over when processes invoked via the commandline will exit and
what their exit status will be.

=begin code
method run ( Int() $argc, Array[Str] $argv --> Int )
=end code

=item $argc; the argc from main() (or 0 if C<$argv> is undefined).
=item $argv; 
    the argv from main(), or undefined.

Return value; the exit status. 

=begin comment

=head2 Example
# Example for run

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 send-notification

Sends a notification on behalf of C<$application> to the desktop shell.
There is no guarantee that the notification is displayed immediately,
or even at all.

Notifications may persist after the application exits. It will be
D-Bus-activated when the notification or one of its actions is
activated.

Modifying C<$notification> after this call has no effect. However, the
object can be reused for a later call to this function.
 C<$id> may be any string that uniquely identifies the event for the
application. It does not need to be in any special format. For
example, "new-message" might be appropriate for a notification about
new messages.

If a previous notification was sent with the same C<$id>, it will be
replaced with C<$notification> and shown again as if it was a new
notification. This works even for notifications sent from a previous
execution of the application, as long as C<$id> is the same string.
 C<$id> may be undefined, but it is impossible to replace or withdraw
notifications without an id.

If C<$notification> is no longer relevant, it can be withdrawn with
C<.withdraw-notification()>.

=begin code
method send-notification ( Str $id, N-Object() $notification )
=end code

=item $id; id of the notification, or undefined.
=item $notification; the B<Gnome::Gio::Notification> to send.

=begin comment

=head2 Example
# Example for send-notification

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-application-id

Sets the unique identifier for C<$application>.

The application id can only be modified if C<$application> has not yet
been registered.

If non-undefined, the application id must be valid.  See
C<.id-is-valid()>.

=begin code
method set-application-id ( Str $application-id )
=end code

=item $application-id; the identifier for C<$application>.

=begin comment

=head2 Example
# Example for set-application-id

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-default

Sets or unsets the default application for the process, as returned
by C<.get-default()>.

This function does not take its own reference on C<$application>.  If C<$application> is destroyed then the default application will revert
back to undefined.

=begin code
method set-default ( )
=end code

=begin comment

=head2 Example
# Example for set-default

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-flags

Sets the flags for C<$application>.

The flags can only be modified if C<$application> has not yet been
registered.

See B<Gnome::Gio::T-Ioenums>.

=begin code
method set-flags ( UInt $flags )
=end code

=item $flags; the flags for C<$application>.

=begin comment

=head2 Example
# Example for set-flags

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-inactivity-timeout

Sets the current inactivity timeout for the application.

This is the amount of time (in milliseconds) after the last call to
C<.release()> before the application stops running.

This call has no side effects of its own.  The value set here is only
used for next time C<.release()> drops the use count to
zero.  Any timeouts currently in progress are not impacted.

=begin code
method set-inactivity-timeout ( UInt() $inactivity-timeout )
=end code

=item $inactivity-timeout; the timeout, in milliseconds.

=begin comment

=head2 Example
# Example for set-inactivity-timeout

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-option-context-description

Adds a description to the C<$application> option context.

See g_option_context_set_description() for more information.

=begin code
method set-option-context-description ( Str $description )
=end code

=item $description; a string to be shown in B<--help> output
 after the list of options, or undefined.

=begin comment

=head2 Example
# Example for set-option-context-description

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-option-context-parameter-string

Sets the parameter string to be used by the commandline handling of C<$application>.

This function registers the argument to be passed to g_option_context_new()
when the internal B<GOptionContext> of C<$application> is created.

See g_option_context_new() for more information about C<$parameter_string>.

=begin code
method set-option-context-parameter-string ( Str $parameter-string )
=end code

=item $parameter-string; a string which is displayed
  in the first line of B<--help> output, after the usage summary B<programname [OPTION...]>..

=begin comment

=head2 Example
# Example for set-option-context-parameter-string

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-option-context-summary

Adds a summary to the C<$application> option context.

See g_option_context_set_summary() for more information.

=begin code
method set-option-context-summary ( Str $summary )
=end code

=item $summary; a string to be shown in B<--help> output
 before the list of options, or undefined.

=begin comment

=head2 Example
# Example for set-option-context-summary

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-resource-base-path

Sets (or unsets) the base resource path of C<$application>.

The path is used to automatically load various application
resources such as menu layouts and action descriptions.
The various types of resources will be found at fixed names relative
to the given base path.

By default, the resource base path is determined from the application
ID by prefixing '/' and replacing each '.' with '/'.  This is done at
the time that the B<Gnome::Gio::Application> object is constructed.  Changes to
the application ID after that point will not have an impact on the
resource base path.

As an example, if the application has an ID of "org.example.app" then
the default resource base path will be "/org/example/app".  If this
is a B<GtkApplication> (and you have not manually changed the path)
then Gtk will then search for the menus of the application at
"/org/example/app/gtk/menus.ui".

See B<Gnome::Gio::N-Resource> for more information about adding resources to your
application.

You can disable automatic resource loading functionality by setting
the path to undefined.

Changing the resource base path once the application is running is
not recommended.  The point at which the resource path is consulted
for forming paths for various purposes is unspecified.  When writing
a sub-class of B<Gnome::Gio::Application> you should either set the
B<Gnome::Gio::Application>:resource-base-path property at construction time, or call
this function during the instance initialization. Alternatively, you
can call this function in the B<GApplicationClass>.startup virtual function,
before chaining up to the parent implementation.

=begin code
method set-resource-base-path ( Str $resource-path )
=end code

=item $resource-path; the resource path to use.

=begin comment

=head2 Example
# Example for set-resource-base-path

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 unbind-busy-property

Destroys a binding between C<$property> and the busy state of C<$application> that was previously created with
C<.bind-busy-property()>.

=begin code
method unbind-busy-property ( gpointer $object, Str $property )
=end code

=item $object; a B<Gnome::GObject::Object>.
=item $property; the name of a boolean property of C<$object>.

=begin comment

=head2 Example
# Example for unbind-busy-property

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 unmark-busy

Decreases the busy count of C<$application>.

When the busy count reaches zero, the new state will be propagated
to other processes.

This function must only be called to cancel the effect of a previous
call to C<.mark-busy()>.

=begin code
method unmark-busy ( )
=end code

=begin comment

=head2 Example
# Example for unmark-busy

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 withdraw-notification

Withdraws a notification that was sent with
C<.send-notification()>.

This call does nothing if a notification with C<$id> doesn't exist or
the notification was never sent.

This function works even for notifications sent in previous
executions of this application, as long C<$id> is the same as it was for
the sent notification.

Note that notifications are dismissed when the user clicks on one
of the buttons in a notification or triggers its default action, so
there is no need to explicitly withdraw the notification in that case.

=begin code
method withdraw-notification ( Str $id )
=end code

=item $id; id of a previously sent notification.

=begin comment

=head2 Example
# Example for withdraw-notification

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Functions]------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Functions
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-default

Returns the default B<Gnome::Gio::Application> instance for this process.

Normally there is only one B<Gnome::Gio::Application> per process and it becomes
the default when it is created.  You can exercise more control over
this by using C<.set-default()>.

If there is no default application then undefined is returned.

=begin code
method get-default (--> N-Object )
=end code

Return value; the default application for this process, or undefined. 

=begin comment

=head2 Example
# Example for get-default

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 id-is-valid

Checks if C<$application_id> is a valid application identifier.

A valid ID is required for calls to C<.new-application()> and
C<.set-application-id()>.

Application identifiers follow the same format as
[D-Bus well-known bus names](https://dbus.freedesktop.org/doc/dbus-specification.html#message-protocol-names-bus).
For convenience, the restrictions on application identifiers are
reproduced here:

=item Application identifiers are composed of 1 or more elements separated by a
  period (B<.>) character. All elements must contain at least one character.

=item Each element must only contain the ASCII characters B<[A-Z][a-z][0-9]_->,
  with B<-> discouraged in new application identifiers. Each element must not
  begin with a digit.

=item Application identifiers must contain at least one B<.> (period) character
  (and thus at least two elements).

=item Application identifiers must not begin with a B<.> (period) character.

=item Application identifiers must not exceed 255 characters.

Note that the hyphen (B<->) character is allowed in application identifiers,
but is problematic or not allowed in various specifications and APIs that
refer to D-Bus, such as
[Flatpak application IDs](http://docs.flatpak.org/en/latest/introduction.html#identifiers),
the
[B<DBusActivatable> interface in the Desktop Entry Specification](https://specifications.freedesktop.org/desktop-entry-spec/desktop-entry-spec-latest.html#dbus),
and the convention that an application's "main" interface and object path
resemble its application identifier and bus name. To avoid situations that
require special-case handling, it is recommended that new application
identifiers consistently replace hyphens with underscores.

Like D-Bus interface names, application identifiers should start with the
reversed DNS domain name of the author of the interface (in lower-case), and
it is conventional for the rest of the application identifier to consist of
words run together, with initial capital letters.

As with D-Bus interface names, if the author's DNS domain name contains
hyphen/minus characters they should be replaced by underscores, and if it
contains leading digits they should be escaped by prepending an underscore.
For example, if the owner of 7-zip.org used an application identifier for an
archiving application, it might be named B<org._7_zip.Archiver>.

=begin code
method id-is-valid ( Str $application-id --> Bool )
=end code

=item $application-id; a potential application identifier.

Return value; C<True> if C<$application_id> is valid. 

=begin comment

=head2 Example
# Example for id-is-valid

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Signal Documentation]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Signals

=comment -----------------------------------------------------------------------
=head3 activate

The I<activate> signal is emitted on the primary instance when an
activation occurs. See C<.activate()>.

=begin code
method handler (
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gio::Application :$_widget,
  *C<user>-options
)
=end code

=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gio::Application> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

=begin comment

=head2 Example
# Example for signal activate

=end comment

=comment -----------------------------------------------------------------------
=head3 command-line

The I<command-line> signal is emitted on the primary instance when
a commandline is not handled locally. See C<.run()> and
the B<Gnome::Gio::ApplicationCommandLine> documentation for more information.

=begin code
method handler (
   $command-line,
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gio::Application :$_widget,
  *C<user>-options
  --> gint
)
=end code

=item $command-line; a B<Gnome::Gio::ApplicationCommandLine> representing the
    passed commandline.
=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gio::Application> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

Return value; An integer that is set as the exit status for the calling
  process. See C<.command-line-set-exit-status()>.

=begin comment

=head2 Example
# Example for signal command-line

=end comment

=comment -----------------------------------------------------------------------
=head3 handle-local-options

The I<handle-local-options> signal is emitted on the local instance
after the parsing of the commandline options has occurred.

You can add options to be recognised during commandline option
parsing using C<.add-main-option-entries()> and
C<.add-option-group()>.

Signal handlers can inspect C<$options> (along with values pointed to
from the C<$arg_data> of an installed B<GOptionEntrys>) in order to
decide to perform certain actions, including direct local handling
(which may be useful for options like --version).

In the event that the application is marked
C<G_APPLICATION_HANDLES_COMMAND_LINE> the "normal processing" will
send the C<$options> dictionary to the primary instance where it can be
read with C<.command-line-get-options-dict()>.  The signal
handler can modify the dictionary before returning, and the
modified dictionary will be sent.

In the event that C<G_APPLICATION_HANDLES_COMMAND_LINE> is not set,
"normal processing" will treat the remaining uncollected command
line arguments as filenames or URIs.  If there are no arguments,
the application is activated by C<.activate()>.  One or
more arguments results in a call to C<.open()>.

If you want to handle the local commandline arguments for yourself
by converting them to calls to C<.open()> or
g_action_group_activate_action() then you must be sure to register
the application first.  You should probably not call
C<.activate()> for yourself, however: just return -1 and
allow the default handler to do it for you.  This will ensure that
the B<--gapplication-service> switch works properly (i.e. no activation
in that case).

Note that this signal is emitted from the default implementation of
local_command_line().  If you override that function and don't
chain up then this signal will never be emitted.

You can override local_command_line() if you need more powerful
capabilities than what is provided here, but this should not
normally be required.

=begin code
method handler (
   $options,
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gio::Application :$_widget,
  *C<user>-options
  --> gint
)
=end code

=item $options; the options dictionary.
=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gio::Application> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

Return value; an exit code. If you have handled your options and want
to exit the process, return a non-negative option, 0 for success,
and a positive value for failure. To continue, return -1 to let
the default option processing continue.

=begin comment

=head2 Example
# Example for signal handle-local-options

=end comment

=comment -----------------------------------------------------------------------
=head3 name-lost

The I<name-lost> signal is emitted only on the registered primary instance
when a new instance has taken over. This can only happen if the application
is using the C<G_APPLICATION_ALLOW_REPLACEMENT> flag.

The default handler for this signal calls C<.quit()>.

=begin code
method handler (
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gio::Application :$_widget,
  *C<user>-options
  --> gboolean
)
=end code

=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gio::Application> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

Return value; C<True> if the signal has been handled

=begin comment

=head2 Example
# Example for signal name-lost

=end comment

=comment -----------------------------------------------------------------------
=head3 open

The I<open> signal is emitted on the primary instance when there are
files to open. See C<.open()> for more information.

=begin code
method handler (
  gpointer $files,
  gint $n-files,
  Str $hint,
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gio::Application :$_widget,
  *C<user>-options
)
=end code

=item $files; an array of B<GFiles>.
=item $n-files; the length of C<$files>.
=item $hint; a hint provided by the calling instance.
=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gio::Application> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

=begin comment

=head2 Example
# Example for signal open

=end comment

=comment -----------------------------------------------------------------------
=head3 shutdown

The I<shutdown> signal is emitted only on the registered primary instance
immediately after the main loop terminates.

=begin code
method handler (
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gio::Application :$_widget,
  *C<user>-options
)
=end code

=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gio::Application> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

=begin comment

=head2 Example
# Example for signal shutdown

=end comment

=comment -----------------------------------------------------------------------
=head3 startup

The I<startup> signal is emitted on the primary instance immediately
after registration. See C<.register()>.

=begin code
method handler (
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gio::Application :$_widget,
  *C<user>-options
)
=end code

=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gio::Application> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

=begin comment

=head2 Example
# Example for signal startup

=end comment

=end pod

