=comment Package: Gio, C-Source: file
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Gnome::Gio::File

=head1 Description

B<Gnome::Gio::File> is a high level abstraction for manipulating files on a
virtual file system. B<GFiles> are lightweight, immutable objects
that do no I/O upon creation. It is necessary to understand that
B<Gnome::Gio::File> objects do not represent files, merely an identifier for a
file. All file content I/O is implemented as streaming operations
(see B<Gnome::Gio::InputStream> and B<Gnome::Gio::OutputStream>).

To construct a B<Gnome::Gio::File>, you can use:
=item C<.new-for-path()> if you have a path.
=item C<.new-for-uri()> if you have a URI.
=item C<.new-for-commandline-arg()> for a command line argument.
=item C<.new-tmp()> to create a temporary file from a template.
=item C<.parse-name()> from a UTF-8 string gotten from C<.get-parse-name()>.
=item C<.new-build-filename()> to create a file from path elements.

One way to think of a B<Gnome::Gio::File> is as an abstraction of a pathname. For
normal files the system pathname is what is stored internally, but as
B<GFiles> are extensible it could also be something else that corresponds
to a pathname in a userspace implementation of a filesystem.

B<GFiles> make up hierarchies of directories and files that correspond to
the files on a filesystem. You can move through the file system with
B<Gnome::Gio::File> using C<.get-parent()> to get an identifier for the parent
directory, C<.get-child()> to get a child within a directory,
C<.resolve-relative-path()> to resolve a relative path between two
B<GFiles>. There can be multiple hierarchies, so you may not end up at
the same root if you repeatedly call C<.get-parent()> on two different
files.

All B<GFiles> have a basename (get with C<.get-basename()>). These names
are byte strings that are used to identify the file on the filesystem
(relative to its parent directory) and there is no guarantees that they
have any particular charset encoding or even make any sense at all. If
you want to use filenames in a user interface you should use the display
name that you can get by requesting the
C<G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME> attribute with C<.query-info()>.
This is guaranteed to be in UTF-8 and can be used in a user interface.
But always store the real basename or the B<Gnome::Gio::File> to use to actually
access the file, because there is no way to go from a display name to
the actual name.

Using B<Gnome::Gio::File> as an identifier has the same weaknesses as using a path
in that there may be multiple aliases for the same file. For instance,
hard or soft links may cause two different B<GFiles> to refer to the same
file. Other possible causes for aliases are: case insensitive filesystems,
short and long names on FAT/NTFS, or bind mounts in Linux. If you want to
check if two B<GFiles> point to the same file you can query for the
C<G_FILE_ATTRIBUTE_ID_FILE> attribute. Note that B<Gnome::Gio::File> does some trivial
canonicalization of pathnames passed in, so that trivial differences in
the path string used at creation (duplicated slashes, slash at end of
path, "." or ".." path segments, etc) does not create different B<GFiles>.

Many B<Gnome::Gio::File> operations have both synchronous and asynchronous versions
to suit your application. Asynchronous versions of synchronous functions
simply have _async() appended to their function names. The asynchronous
I/O functions call a B<Gnome::Gio::T-iotypes> which is then used to finalize
the operation, producing a GAsyncResult which is then passed to the
function's matching _finish() operation.

It is highly recommended to use asynchronous calls when running within a
shared main loop, such as in the main thread of an application. This avoids
I/O operations blocking other sources on the main loop from being dispatched.
Synchronous I/O operations should be performed from worker threads. See the introduction to asynchronous programming section for
more.

Some B<Gnome::Gio::File> operations almost always take a noticeable amount of time, and
so do not have synchronous analogs. Notable cases include:
=item C<.mount-mountable()> to mount a mountable file.
=item C<.unmount-mountable-with-operation()> to unmount a mountable file.
=item C<.eject-mountable-with-operation()> to eject a mountable file.

=head3 Entity Tags # {#gfile-etag}

One notable feature of B<GFiles> are entity tags, or "etags" for
short. Entity tags are somewhat like a more abstract version of the
traditional mtime, and can be used to quickly determine if the file
has been modified from the version on the file system. See the
HTTP 1.1
[specification](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html)
for HTTP Etag headers, which are a very similar concept.

=begin comment

=head2 Uml Diagram
![](plantuml/….svg)

=end comment

=begin comment

=head2 Example
# Example use of module Gnome::Gio::File

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

=head2 new

=head3 :native-object

Create an object using a native object from an object of the same type found elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object() :$native-object! )

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-build-filename
This function is not yet available

Constructs a B<Gnome::Gio::File> from a series of elements using the correct
separator for filenames.

Using this function is equivalent to calling g_build_filename(),
followed by C<.new-for-path()> on the result.

=begin code
method new-build-filename ( Str $first-element, … --> Gnome::Gio::File \)
=end code

=item $first-element; the first element in the path.
=item …; …. Note that each argument must be specified as a type followed by its value!

=begin comment

=head2 Example
# Example for new-build-filename

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-for-commandline-arg

Creates a B<Gnome::Gio::File> with the given argument from the command line.
The value of C<$arg> can be either a URI, an absolute path or a
relative path resolved relative to the current working directory.
This operation never fails, but the returned object might not
support any I/O operation if C<$arg> points to a malformed path.

Note that on Windows, this function expects its argument to be in
UTF-8 -- not the system code page.  This means that you
should not use this function with string from argv as it is passed
to main().  g_win32_get_command_line() will return a UTF-8 version of
the commandline.  B<Gnome::Gio::Application> also uses UTF-8 but
g_application_command_line_create_file_for_arg() may be more useful
for you there.  It is also always possible to use this function with
B<GOptionContext> arguments of type C<G_OPTION_ARG_FILENAME>.

=begin code
method new-for-commandline-arg ( Str $arg --> Gnome::Gio::File \)
=end code

=item $arg; a command line string.

=begin comment

=head2 Example
# Example for new-for-commandline-arg

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-for-commandline-arg-and-cwd

Creates a B<Gnome::Gio::File> with the given argument from the command line.

This function is similar to C<.new-for-commandline-arg()> except
that it allows for passing the current working directory as an
argument instead of using the current working directory of the
process.

This is useful if the commandline argument was given in a context
other than the invocation of the current process.

See also g_application_command_line_create_file_for_arg().

=begin code
method new-for-commandline-arg-and-cwd ( Str $arg, Str $cwd --> Gnome::Gio::File \)
=end code

=item $arg; a command line string.
=item $cwd; the current working directory of the commandline.

=begin comment

=head2 Example
# Example for new-for-commandline-arg-and-cwd

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-for-path

Constructs a B<Gnome::Gio::File> for a given path. This operation never
fails, but the returned object might not support any I/O
operation if C<$path> is malformed.

=begin code
method new-for-path ( Str $path --> Gnome::Gio::File \)
=end code

=item $path; a string containing a relative or absolute path.
  The string must be encoded in the glib filename encoding..

=begin comment

=head2 Example
# Example for new-for-path

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-for-uri

Constructs a B<Gnome::Gio::File> for a given URI. This operation never
fails, but the returned object might not support any I/O
operation if C<$uri> is malformed or if the uri type is
not supported.

=begin code
method new-for-uri ( Str $uri --> Gnome::Gio::File \)
=end code

=item $uri; a UTF-8 string containing a URI.

=begin comment

=head2 Example
# Example for new-for-uri

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-tmp

Opens a file in the preferred directory for temporary files (as
returned by g_get_tmp_dir()) and returns a B<Gnome::Gio::File> and
B<Gnome::Gio::FileIOStream> pointing to it.
 C<$tmpl> should be a string in the GLib file name encoding
containing a sequence of six 'X' characters, and containing no
directory components. If it is undefined, a default template is used.

Unlike the other B<Gnome::Gio::File> constructors, this will return undefined if
a temporary file could not be created.

=begin code
method new-tmp ( Str $tmpl, N-Object() $iostream, CArray[N-Error] $err --> Gnome::Gio::File \)
=end code

=item $tmpl; Template for the file
  name, as in C<.open-tmp()>, or undefined for a default template.
=item $iostream; (transfer ownership: full) on return, a B<Gnome::Gio::FileIOStream> for the created file.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

=begin comment

=head2 Example
# Example for new-tmp

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 parse-name

Constructs a B<Gnome::Gio::File> with the given C<$parse-name> (i.e. something
given by C<.get-parse-name()>). This operation never fails,
but the returned object might not support any I/O operation if
the C<$parse-name> cannot be parsed.

=begin code
method parse-name ( Str $parse-name --> Gnome::Gio::File \)
=end code

=item $parse-name; a file name or path to be parsed.

=begin comment

=head2 Example
# Example for parse-name

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 append-to
This function is not yet available

Gets an output stream for appending data to the file.
If the file doesn't already exist it is created.

By default files created are generally readable by everyone,
but if you pass C<G_FILE_CREATE_PRIVATE> in C<$flags> the file
will be made readable only to the current user, to the level that
is supported on the target filesystem.

If C<$cancellable> is defined, then the operation can be cancelled
by triggering the cancellable object from another thread. If the
operation was cancelled, the error C<G_IO_ERROR_CANCELLED> will be
returned.

Some file systems don't allow all file names, and may return an
C<G_IO_ERROR_INVALID_FILENAME> error. If the file is a directory the
C<G_IO_ERROR_IS_DIRECTORY> error will be returned. Other errors are
possible too, and depend on what kind of filesystem the file is on.

=begin code
method append-to ( UInt $flags, N-Object() $cancellable, CArray[N-Error] $err --> N-Object )
=end code

=item $flags; a set of B<Gnome::Gio::T-ioenums>.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; a B<Gnome::Gio::FileOutputStream>, or undefined on error.
  Free the returned object with g_object_unref().. 

=begin comment

=head2 Example
# Example for append-to

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 append-to-async
This function is not yet available

Asynchronously opens C<$file> for appending.

For more details, see C<.append-to()> which is
the synchronous version of this call.

When the operation is finished, C<$callback> will be called.
You can then call C<.append-to-finish()> to get the result
of the operation.

=begin code
method append-to-async ( UInt $flags, Int() $io-priority, N-Object() $cancellable, &callback, gpointer $user-data )
=end code

=item $flags; a set of B<Gnome::Gio::T-ioenums>.
=item $io-priority; the I/O priority of the request.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item &callback; a B<Gnome::Gio::T-iotypes> to call
  when the request is satisfied. Tthe function must be specified with following signature; C<:( N-Object $source-object, N-Object $res, gpointer $user-data )>.
=item $user-data; the data to pass to callback function.

=begin comment

=head2 Example
# Example for append-to-async

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 append-to-finish

Finishes an asynchronous file append operation started with
C<.append-to-async()>.

=begin code
method append-to-finish ( N-Object() $res, CArray[N-Error] $err --> N-Object )
=end code

=item $res; B<Gnome::Gio::R-AsyncResult>.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; a valid B<Gnome::Gio::FileOutputStream>
  or undefined on error.
  Free the returned object with g_object_unref().. 

=begin comment

=head2 Example
# Example for append-to-finish

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 build-attribute-list-for-copy
This function is not yet available

Prepares the file attribute query string for copying to C<$file>.

This function prepares an attribute query string to be
passed to C<.query-info()> to get a list of attributes
normally copied with the file (see C<.copy-attributes()>
for the detailed description). This function is used by the
implementation of C<.copy-attributes()> and is useful
when one needs to query and set the attributes in two
stages (e.g., for recursive move of a directory).

=begin code
method build-attribute-list-for-copy ( UInt $flags, N-Object() $cancellable, CArray[N-Error] $err --> Str )
=end code

=item $flags; a set of B<Gnome::Gio::T-ioenums>.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; an attribute query string for C<.query-info()>,
  or undefined if an error occurs.. 

=begin comment

=head2 Example
# Example for build-attribute-list-for-copy

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 copy
This function is not yet available

Copies the file C<$source> to the location specified by C<$destination>.
Can not handle recursive copies of directories.

If the flag C<G_FILE_COPY_OVERWRITE> is specified an already
existing C<$destination> file is overwritten.

If the flag C<G_FILE_COPY_NOFOLLOW_SYMLINKS> is specified then symlinks
will be copied as symlinks, otherwise the target of the C<$source> symlink will be copied.

If the flag C<G_FILE_COPY_ALL_METADATA> is specified then all the metadata
that is possible to copy is copied, not just the default subset (which,
for instance, does not include the owner, see B<Gnome::Gio::FileInfo>).

If C<$cancellable> is defined, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error C<G_IO_ERROR_CANCELLED> will be returned.

If C<$progress-callback> is defined, then the operation can be monitored
by setting this to a B<Gnome::Gio::T-iotypes> function. C<$progress-callback-data> will be passed to this function. It is guaranteed
that this callback will be called after all data has been transferred with
the total number of bytes copied during the operation.

If the C<$source> file does not exist, then the C<G_IO_ERROR_NOT_FOUND> error
is returned, independent on the status of the C<$destination>.

If C<G_FILE_COPY_OVERWRITE> is not specified and the target exists, then
the error C<G_IO_ERROR_EXISTS> is returned.

If trying to overwrite a file over a directory, the C<G_IO_ERROR_IS_DIRECTORY>
error is returned. If trying to overwrite a directory with a directory the
C<G_IO_ERROR_WOULD_MERGE> error is returned.

If the source is a directory and the target does not exist, or
C<G_FILE_COPY_OVERWRITE> is specified and the target is a file, then the
C<G_IO_ERROR_WOULD_RECURSE> error is returned.

If you are interested in copying the B<Gnome::Gio::File> object itself (not the on-disk
file), see C<.dup()>.

=begin code
method copy ( N-Object() $destination, UInt $flags, N-Object() $cancellable, &progress-callback, gpointer $progress-callback-data, CArray[N-Error] $err --> Bool )
=end code

=item $destination; destination B<Gnome::Gio::File>.
=item $flags; set of B<Gnome::Gio::T-ioenums>.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item &progress-callback; function to callback with
  progress information, or undefined if progress information is not needed. Tthe function must be specified with following signature; C<:(  $current-num-bytes,  $total-num-bytes, gpointer $user-data )>.
=item $progress-callback-data; user data to pass to C<$progress-callback>.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; C<True> on success, C<False> otherwise.. 

=begin comment

=head2 Example
# Example for copy

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 copy-async
This function is not yet available

Copies the file C<$source> to the location specified by C<$destination>
asynchronously. For details of the behaviour, see C<.copy()>.

If C<$progress-callback> is defined, then that function that will be called
just like in C<.copy()>. The callback will run in the default main context
of the thread calling C<.copy-async()> — the same context as C<$callback> is
run in.

When the operation is finished, C<$callback> will be called. You can then call
C<.copy-finish()> to get the result of the operation.

=begin code
method copy-async ( N-Object() $destination, UInt $flags, Int() $io-priority, N-Object() $cancellable, &progress-callback, gpointer $progress-callback-data, &callback, gpointer $user-data )
=end code

=item $destination; destination B<Gnome::Gio::File>.
=item $flags; set of B<Gnome::Gio::T-ioenums>.
=item $io-priority; the I/O priority of the request.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item &progress-callback; function to callback with progress
  information, or undefined if progress information is not needed. Tthe function must be specified with following signature; C<:(  $current-num-bytes,  $total-num-bytes, gpointer $user-data )>.
=item $progress-callback-data; user data to pass to C<$progress-callback>.
=item &callback; a B<Gnome::Gio::T-iotypes> to call when the request is satisfied. Tthe function must be specified with following signature; C<:( N-Object $source-object, N-Object $res, gpointer $user-data )>.
=item $user-data; the data to pass to callback function.

=begin comment

=head2 Example
# Example for copy-async

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 copy-attributes
This function is not yet available

Copies the file attributes from C<$source> to C<$destination>.

Normally only a subset of the file attributes are copied,
those that are copies in a normal file copy operation
(which for instance does not include e.g. owner). However
if C<G_FILE_COPY_ALL_METADATA> is specified in C<$flags>, then
all the metadata that is possible to copy is copied. This
is useful when implementing move by copy + delete source.

=begin code
method copy-attributes ( N-Object() $destination, UInt $flags, N-Object() $cancellable, CArray[N-Error] $err --> Bool )
=end code

=item $destination; a B<Gnome::Gio::File> to copy attributes to.
=item $flags; a set of B<Gnome::Gio::T-ioenums>.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; C<True> if the attributes were copied successfully,
  C<False> otherwise.. 

=begin comment

=head2 Example
# Example for copy-attributes

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 copy-finish

Finishes copying the file started with C<.copy-async()>.

=begin code
method copy-finish ( N-Object() $res, CArray[N-Error] $err --> Bool )
=end code

=item $res; a B<Gnome::Gio::R-AsyncResult>.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; a C<True> on success, C<False> on error.. 

=begin comment

=head2 Example
# Example for copy-finish

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 create
This function is not yet available

Creates a new file and returns an output stream for writing to it.
The file must not already exist.

By default files created are generally readable by everyone,
but if you pass C<G_FILE_CREATE_PRIVATE> in C<$flags> the file
will be made readable only to the current user, to the level
that is supported on the target filesystem.

If C<$cancellable> is defined, then the operation can be cancelled
by triggering the cancellable object from another thread. If the
operation was cancelled, the error C<G_IO_ERROR_CANCELLED> will be
returned.

If a file or directory with this name already exists the
C<G_IO_ERROR_EXISTS> error will be returned. Some file systems don't
allow all file names, and may return an C<G_IO_ERROR_INVALID_FILENAME>
error, and if the name is to long C<G_IO_ERROR_FILENAME_TOO_LONG> will
be returned. Other errors are possible too, and depend on what kind
of filesystem the file is on.

=begin code
method create ( UInt $flags, N-Object() $cancellable, CArray[N-Error] $err --> N-Object )
=end code

=item $flags; a set of B<Gnome::Gio::T-ioenums>.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; a B<Gnome::Gio::FileOutputStream> for the newly created
  file, or undefined on error.
  Free the returned object with g_object_unref().. 

=begin comment

=head2 Example
# Example for create

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 create-async
This function is not yet available

Asynchronously creates a new file and returns an output stream
for writing to it. The file must not already exist.

For more details, see C<.create()> which is
the synchronous version of this call.

When the operation is finished, C<$callback> will be called.
You can then call C<.create-finish()> to get the result
of the operation.

=begin code
method create-async ( UInt $flags, Int() $io-priority, N-Object() $cancellable, &callback, gpointer $user-data )
=end code

=item $flags; a set of B<Gnome::Gio::T-ioenums>.
=item $io-priority; the I/O priority of the request.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item &callback; a B<Gnome::Gio::T-iotypes> to call
  when the request is satisfied. Tthe function must be specified with following signature; C<:( N-Object $source-object, N-Object $res, gpointer $user-data )>.
=item $user-data; the data to pass to callback function.

=begin comment

=head2 Example
# Example for create-async

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 create-finish

Finishes an asynchronous file create operation started with
C<.create-async()>.

=begin code
method create-finish ( N-Object() $res, CArray[N-Error] $err --> N-Object )
=end code

=item $res; a B<Gnome::Gio::R-AsyncResult>.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; a B<Gnome::Gio::FileOutputStream> or undefined on error.
  Free the returned object with g_object_unref().. 

=begin comment

=head2 Example
# Example for create-finish

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 create-readwrite
This function is not yet available

Creates a new file and returns a stream for reading and
writing to it. The file must not already exist.

By default files created are generally readable by everyone,
but if you pass C<G_FILE_CREATE_PRIVATE> in C<$flags> the file
will be made readable only to the current user, to the level
that is supported on the target filesystem.

If C<$cancellable> is defined, then the operation can be cancelled
by triggering the cancellable object from another thread. If the
operation was cancelled, the error C<G_IO_ERROR_CANCELLED> will be
returned.

If a file or directory with this name already exists, the
C<G_IO_ERROR_EXISTS> error will be returned. Some file systems don't
allow all file names, and may return an C<G_IO_ERROR_INVALID_FILENAME>
error, and if the name is too long, C<G_IO_ERROR_FILENAME_TOO_LONG>
will be returned. Other errors are possible too, and depend on what
kind of filesystem the file is on.

Note that in many non-local file cases read and write streams are
not supported, so make sure you really need to do read and write
streaming, rather than just opening for reading or writing.

=begin code
method create-readwrite ( UInt $flags, N-Object() $cancellable, CArray[N-Error] $err --> N-Object )
=end code

=item $flags; a set of B<Gnome::Gio::T-ioenums>.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; a B<Gnome::Gio::FileIOStream> for the newly created
  file, or undefined on error.
  Free the returned object with g_object_unref().. 

=begin comment

=head2 Example
# Example for create-readwrite

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 create-readwrite-async
This function is not yet available

Asynchronously creates a new file and returns a stream
for reading and writing to it. The file must not already exist.

For more details, see C<.create-readwrite()> which is
the synchronous version of this call.

When the operation is finished, C<$callback> will be called.
You can then call C<.create-readwrite-finish()> to get
the result of the operation.

=begin code
method create-readwrite-async ( UInt $flags, Int() $io-priority, N-Object() $cancellable, &callback, gpointer $user-data )
=end code

=item $flags; a set of B<Gnome::Gio::T-ioenums>.
=item $io-priority; the I/O priority of the request.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item &callback; a B<Gnome::Gio::T-iotypes> to call
  when the request is satisfied. Tthe function must be specified with following signature; C<:( N-Object $source-object, N-Object $res, gpointer $user-data )>.
=item $user-data; the data to pass to callback function.

=begin comment

=head2 Example
# Example for create-readwrite-async

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 create-readwrite-finish

Finishes an asynchronous file create operation started with
C<.create-readwrite-async()>.

=begin code
method create-readwrite-finish ( N-Object() $res, CArray[N-Error] $err --> N-Object )
=end code

=item $res; a B<Gnome::Gio::R-AsyncResult>.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; a B<Gnome::Gio::FileIOStream> or undefined on error.
  Free the returned object with g_object_unref().. 

=begin comment

=head2 Example
# Example for create-readwrite-finish

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 delete

Deletes a file. If the C<$file> is a directory, it will only be
deleted if it is empty. This has the same semantics as g_unlink().

If C<$file> doesn’t exist, C<G_IO_ERROR_NOT_FOUND> will be returned. This allows
for deletion to be implemented avoiding
[time-of-check to time-of-use races](https://en.wikipedia.org/wiki/Time-of-check_to_time-of-use):
=begin comment

g_autoptr(GError) local_error = NULL;
if (!g_file_delete (my_file, my_cancellable, &local_error) &&
    !g_error_matches (local_error, G_IO_ERROR, G_IO_ERROR_NOT_FOUND))
  {
    // deletion failed for some reason other than the file not existing:
    // so report the error
    g_warning ("Failed to delete %s: %s",
               g_file_peek_path (my_file), local_error->message);
  }

=end comment

If C<$cancellable> is defined, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error C<G_IO_ERROR_CANCELLED> will be returned.

=begin code
method delete ( N-Object() $cancellable, CArray[N-Error] $err --> Bool )
=end code

=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; C<True> if the file was deleted. C<False> otherwise.. 

=begin comment

=head2 Example
# Example for delete

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 delete-async

Asynchronously delete a file. If the C<$file> is a directory, it will
only be deleted if it is empty.  This has the same semantics as
g_unlink().

=begin code
method delete-async ( Int() $io-priority, N-Object() $cancellable, &callback, gpointer $user-data )
=end code

=item $io-priority; the I/O priority of the request.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item &callback; a B<Gnome::Gio::T-iotypes> to call
  when the request is satisfied. Tthe function must be specified with following signature; C<:( N-Object $source-object, N-Object $res, gpointer $user-data )>.
=item $user-data; the data to pass to callback function.

=begin comment

=head2 Example
# Example for delete-async

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 delete-finish

Finishes deleting a file started with C<.delete-async()>.

=begin code
method delete-finish ( N-Object() $result, CArray[N-Error] $err --> Bool )
=end code

=item $result; a B<Gnome::Gio::R-AsyncResult>.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; C<True> if the file was deleted. C<False> otherwise.. 

=begin comment

=head2 Example
# Example for delete-finish

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 dup

Duplicates a B<Gnome::Gio::File> handle. This operation does not duplicate
the actual file or directory represented by the B<Gnome::Gio::File>; see
C<.copy()> if attempting to copy a file.

C<.dup()> is useful when a second handle is needed to the same underlying
file, for use in a separate thread (B<Gnome::Gio::File> is not thread-safe). For use
within the same thread, use g_object_ref() to increment the existing object’s
reference count.

This call does no blocking I/O.

=begin code
method dup (--> N-Object )
=end code

Return value; a new B<Gnome::Gio::File> that is a duplicate
  of the given B<Gnome::Gio::File>.. 

=begin comment

=head2 Example
# Example for dup

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 eject-mountable-with-operation
This function is not yet available

Starts an asynchronous eject on a mountable.
When this operation has completed, C<$callback> will be called with C<$user-user> data, and the operation can be finalized with
C<.eject-mountable-with-operation-finish()>.

If C<$cancellable> is defined, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error C<G_IO_ERROR_CANCELLED> will be returned.

=begin code
method eject-mountable-with-operation ( UInt $flags, N-Object() $mount-operation, N-Object() $cancellable, &callback, gpointer $user-data )
=end code

=item $flags; flags affecting the operation.
=item $mount-operation; a B<Gnome::Gio::MountOperation>,
  or undefined to avoid user interaction.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item &callback; a B<Gnome::Gio::T-iotypes> to call
  when the request is satisfied, or undefined. Tthe function must be specified with following signature; C<:( N-Object $source-object, N-Object $res, gpointer $user-data )>.
=item $user-data; the data to pass to callback function.

=begin comment

=head2 Example
# Example for eject-mountable-with-operation

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 eject-mountable-with-operation-finish

Finishes an asynchronous eject operation started by
C<.eject-mountable-with-operation()>.

=begin code
method eject-mountable-with-operation-finish ( N-Object() $result, CArray[N-Error] $err --> Bool )
=end code

=item $result; a B<Gnome::Gio::R-AsyncResult>.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; C<True> if the C<$file> was ejected successfully.
  C<False> otherwise.. 

=begin comment

=head2 Example
# Example for eject-mountable-with-operation-finish

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 enumerate-children
This function is not yet available

Gets the requested information about the files in a directory.
The result is a B<Gnome::Gio::FileEnumerator> object that will give out
B<Gnome::Gio::FileInfo> objects for all the files in the directory.

The C<$attributes> value is a string that specifies the file
attributes that should be gathered. It is not an error if
it's not possible to read a particular requested attribute
from a file - it just won't be set. C<$attributes> should
be a comma-separated list of attributes or attribute wildcards.
The wildcard "*" means all attributes, and a wildcard like
"standard::*" means all attributes in the standard namespace.
An example attribute query be "standard::*,owner::user".
The standard attributes are available as defines, like
C<G_FILE_ATTRIBUTE_STANDARD_NAME>. C<G_FILE_ATTRIBUTE_STANDARD_NAME> should
always be specified if you plan to call C<.enumerator-get-child()> or
C<.enumerator-iterate()> on the returned enumerator.

If C<$cancellable> is defined, then the operation can be cancelled
by triggering the cancellable object from another thread. If the
operation was cancelled, the error C<G_IO_ERROR_CANCELLED> will be
returned.

If the file does not exist, the C<G_IO_ERROR_NOT_FOUND> error will
be returned. If the file is not a directory, the C<G_IO_ERROR_NOT_DIRECTORY>
error will be returned. Other errors are possible too.

=begin code
method enumerate-children ( Str $attributes, UInt $flags, N-Object() $cancellable, CArray[N-Error] $err --> N-Object )
=end code

=item $attributes; an attribute query string.
=item $flags; a set of B<Gnome::Gio::T-ioenums>.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; A B<Gnome::Gio::FileEnumerator> if successful,
  undefined on error. Free the returned object with g_object_unref().. 

=begin comment

=head2 Example
# Example for enumerate-children

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 enumerate-children-async
This function is not yet available

Asynchronously gets the requested information about the files
in a directory. The result is a B<Gnome::Gio::FileEnumerator> object that will
give out B<Gnome::Gio::FileInfo> objects for all the files in the directory.

For more details, see C<.enumerate-children()> which is
the synchronous version of this call.

When the operation is finished, C<$callback> will be called. You can
then call C<.enumerate-children-finish()> to get the result of
the operation.

=begin code
method enumerate-children-async ( Str $attributes, UInt $flags, Int() $io-priority, N-Object() $cancellable, &callback, gpointer $user-data )
=end code

=item $attributes; an attribute query string.
=item $flags; a set of B<Gnome::Gio::T-ioenums>.
=item $io-priority; the I/O priority of the request.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item &callback; a B<Gnome::Gio::T-iotypes> to call when the
  request is satisfied. Tthe function must be specified with following signature; C<:( N-Object $source-object, N-Object $res, gpointer $user-data )>.
=item $user-data; the data to pass to callback function.

=begin comment

=head2 Example
# Example for enumerate-children-async

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 enumerate-children-finish

Finishes an async enumerate children operation.
See C<.enumerate-children-async()>.

=begin code
method enumerate-children-finish ( N-Object() $res, CArray[N-Error] $err --> N-Object )
=end code

=item $res; a B<Gnome::Gio::R-AsyncResult>.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; a B<Gnome::Gio::FileEnumerator> or undefined
  if an error occurred.
  Free the returned object with g_object_unref().. 

=begin comment

=head2 Example
# Example for enumerate-children-finish

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 equal

Checks if the two given B<GFiles> refer to the same file.

Note that two B<GFiles> that differ can still refer to the same
file on the filesystem due to various forms of filename
aliasing.

This call does no blocking I/O.

=begin code
method equal ( N-Object() $file2 --> Bool )
=end code

=item $file2; the second B<Gnome::Gio::File>.

Return value; C<True> if C<$file1> and C<$file2> are equal.. 

=begin comment

=head2 Example
# Example for equal

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 find-enclosing-mount

Gets a B<Gnome::Gio::R-Mount> for the B<Gnome::Gio::File>.

B<Gnome::Gio::R-Mount> is returned only for user interesting locations, see
B<Gnome::Gio::VolumeMonitor>. If the B<GFileIface> for C<$file> does not have a #mount, C<$error> will be set to C<G_IO_ERROR_NOT_FOUND> and undefined #will be returned.

If C<$cancellable> is defined, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error C<G_IO_ERROR_CANCELLED> will be returned.

=begin code
method find-enclosing-mount ( N-Object() $cancellable, CArray[N-Error] $err --> N-Object )
=end code

=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; a B<Gnome::Gio::R-Mount> where the C<$file> is located
  or undefined on error.
  Free the returned object with g_object_unref().. 

=begin comment

=head2 Example
# Example for find-enclosing-mount

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 find-enclosing-mount-async

Asynchronously gets the mount for the file.

For more details, see C<.find-enclosing-mount()> which is
the synchronous version of this call.

When the operation is finished, C<$callback> will be called.
You can then call C<.find-enclosing-mount-finish()> to
get the result of the operation.

=begin code
method find-enclosing-mount-async ( Int() $io-priority, N-Object() $cancellable, &callback, gpointer $user-data )
=end code

=item $io-priority; the I/O priority of the request.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item &callback; a B<Gnome::Gio::T-iotypes> to call
  when the request is satisfied. Tthe function must be specified with following signature; C<:( N-Object $source-object, N-Object $res, gpointer $user-data )>.
=item $user-data; the data to pass to callback function.

=begin comment

=head2 Example
# Example for find-enclosing-mount-async

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 find-enclosing-mount-finish

Finishes an asynchronous find mount request.
See C<.find-enclosing-mount-async()>.

=begin code
method find-enclosing-mount-finish ( N-Object() $res, CArray[N-Error] $err --> N-Object )
=end code

=item $res; a B<Gnome::Gio::R-AsyncResult>.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; B<Gnome::Gio::R-Mount> for given C<$file> or undefined on error.
  Free the returned object with g_object_unref().. 

=begin comment

=head2 Example
# Example for find-enclosing-mount-finish

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-basename

Gets the base name (the last component of the path) for a given B<Gnome::Gio::File>.

If called for the top level of a system (such as the filesystem root
or a uri like sftp://host/) it will return a single directory separator
(and on Windows, possibly a drive letter).

The base name is a byte string (not UTF-8). It has no defined encoding
or rules other than it may not contain zero bytes.  If you want to use
filenames in a user interface you should use the display name that you
can get by requesting the C<G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME>
attribute with C<.query-info()>.

This call does no blocking I/O.

=begin code
method get-basename (--> Str )
=end code

Return value; string containing the B<Gnome::Gio::File>'s
  base name, or undefined if given B<Gnome::Gio::File> is invalid. The returned string
  should be freed with g_free() when no longer needed.. 

=begin comment

=head2 Example
# Example for get-basename

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-child

Gets a child of C<$file> with basename equal to C<$name>.

Note that the file with that specific name might not exist, but
you can still have a B<Gnome::Gio::File> that points to it. You can use this
for instance to create that file.

This call does no blocking I/O.

=begin code
method get-child ( Str $name --> N-Object )
=end code

=item $name; string containing the child's basename.

Return value; a B<Gnome::Gio::File> to a child specified by C<$name>.
  Free the returned object with g_object_unref().. 

=begin comment

=head2 Example
# Example for get-child

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-child-for-display-name

Gets the child of C<$file> for a given C<$display-name> (i.e. a UTF-8
version of the name). If this function fails, it returns undefined
and C<$error> will be set. This is very useful when constructing a
B<Gnome::Gio::File> for a new file and the user entered the filename in the
user interface, for instance when you select a directory and
type a filename in the file selector.

This call does no blocking I/O.

=begin code
method get-child-for-display-name ( Str $display-name, CArray[N-Error] $err --> N-Object )
=end code

=item $display-name; string to a possible child.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; a B<Gnome::Gio::File> to the specified child, or
  undefined if the display name couldn't be converted.
  Free the returned object with g_object_unref().. 

=begin comment

=head2 Example
# Example for get-child-for-display-name

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-parent

Gets the parent directory for the C<$file>.
If the C<$file> represents the root directory of the
file system, then undefined will be returned.

This call does no blocking I/O.

=begin code
method get-parent (--> N-Object )
=end code

Return value; a B<Gnome::Gio::File> structure to the
  parent of the given B<Gnome::Gio::File> or undefined if there is no parent. Free
  the returned object with g_object_unref().. 

=begin comment

=head2 Example
# Example for get-parent

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-parse-name

Gets the parse name of the C<$file>.
A parse name is a UTF-8 string that describes the
file such that one can get the B<Gnome::Gio::File> back using
C<.parse-name()>.

This is generally used to show the B<Gnome::Gio::File> as a nice
full-pathname kind of string in a user interface,
like in a location entry.

For local files with names that can safely be converted
to UTF-8 the pathname is used, otherwise the IRI is used
(a form of URI that allows UTF-8 characters unescaped).

This call does no blocking I/O.

=begin code
method get-parse-name (--> Str )
=end code

Return value; a string containing the B<Gnome::Gio::File>'s parse name.
  The returned string should be freed with g_free()
  when no longer needed.. 

=begin comment

=head2 Example
# Example for get-parse-name

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-path

Gets the local pathname for B<Gnome::Gio::File>, if one exists. If non-undefined, this is
guaranteed to be an absolute, canonical path. It might contain symlinks.

This call does no blocking I/O.

=begin code
method get-path (--> Str )
=end code

Return value; string containing the B<Gnome::Gio::File>'s path,
  or undefined if no such path exists. The returned string should be freed
  with g_free() when no longer needed.. 

=begin comment

=head2 Example
# Example for get-path

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-relative-path

Gets the path for C<$descendant> relative to C<$parent>.

This call does no blocking I/O.

=begin code
method get-relative-path ( N-Object() $descendant --> Str )
=end code

=item $descendant; input B<Gnome::Gio::File>.

Return value; string with the relative path from
  C<$descendant> to C<$parent>, or undefined if C<$descendant> doesn't have C<$parent> as
  prefix. The returned string should be freed with g_free() when
  no longer needed.. 

=begin comment

=head2 Example
# Example for get-relative-path

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-uri

Gets the URI for the C<$file>.

This call does no blocking I/O.

=begin code
method get-uri (--> Str )
=end code

Return value; a string containing the B<Gnome::Gio::File>'s URI. If the B<Gnome::Gio::File> was constructed
  with an invalid URI, an invalid URI is returned.
  The returned string should be freed with g_free()
  when no longer needed.. 

=begin comment

=head2 Example
# Example for get-uri

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-uri-scheme

Gets the URI scheme for a B<Gnome::Gio::File>.
RFC 3986 decodes the scheme as:
=begin comment

URI = scheme ":" hier-part [ "?" query ] [ "#" fragment ]

=end comment

Common schemes include "file", "http", "ftp", etc.

The scheme can be different from the one used to construct the B<Gnome::Gio::File>,
in that it might be replaced with one that is logically equivalent to the B<Gnome::Gio::File>.

This call does no blocking I/O.

=begin code
method get-uri-scheme (--> Str )
=end code

Return value; a string containing the URI scheme for the given
  B<Gnome::Gio::File> or undefined if the B<Gnome::Gio::File> was constructed with an invalid URI. The
  returned string should be freed with g_free() when no longer needed.. 

=begin comment

=head2 Example
# Example for get-uri-scheme

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 has-parent

Checks if C<$file> has a parent, and optionally, if it is C<$parent>.

If C<$parent> is undefined then this function returns C<True> if C<$file> has any
parent at all.  If C<$parent> is non-undefined then C<True> is only returned
if C<$file> is an immediate child of C<$parent>.

=begin code
method has-parent ( N-Object() $parent --> Bool )
=end code

=item $parent; the parent to check for, or undefined.

Return value; C<True> if C<$file> is an immediate child of C<$parent> (or any parent in
  the case that C<$parent> is undefined).. 

=begin comment

=head2 Example
# Example for has-parent

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 has-prefix

Checks whether C<$file> has the prefix specified by C<$prefix>.

In other words, if the names of initial elements of C<$file>'s
pathname match C<$prefix>. Only full pathname elements are matched,
so a path like /foo is not considered a prefix of /foobar, only
of /foo/bar.

A B<Gnome::Gio::File> is not a prefix of itself. If you want to check for
equality, use C<.equal()>.

This call does no I/O, as it works purely on names. As such it can
sometimes return C<False> even if C<$file> is inside a C<$prefix> (from a
filesystem point of view), because the prefix of C<$file> is an alias
of C<$prefix>.

=begin code
method has-prefix ( N-Object() $prefix --> Bool )
=end code

=item $prefix; input B<Gnome::Gio::File>.

Return value; C<True> if the C<$file>'s parent, grandparent, etc is C<$prefix>,
  C<False> otherwise.. 

=begin comment

=head2 Example
# Example for has-prefix

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 has-uri-scheme

Checks to see if a B<Gnome::Gio::File> has a given URI scheme.

This call does no blocking I/O.

=begin code
method has-uri-scheme ( Str $uri-scheme --> Bool )
=end code

=item $uri-scheme; a string containing a URI scheme.

Return value; C<True> if B<Gnome::Gio::File>'s backend supports the
  given URI scheme, C<False> if URI scheme is undefined,
  not supported, or B<Gnome::Gio::File> is invalid.. 

=begin comment

=head2 Example
# Example for has-uri-scheme

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 hash

Creates a hash value for a B<Gnome::Gio::File>.

This call does no blocking I/O.

=begin code
method hash (--> UInt )
=end code

Return value; 0 if C<$file> is not a valid B<Gnome::Gio::File>, otherwise an
  integer that can be used as hash value for the B<Gnome::Gio::File>.
  This function is intended for easily hashing a B<Gnome::Gio::File> to
  add to a B<Gnome::Glib::N-HashTable> or similar data structure.. 

=begin comment

=head2 Example
# Example for hash

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 is-native

Checks to see if a file is native to the platform.

A native file is one expressed in the platform-native filename format,
e.g. "C:\Windows" or "/usr/bin/". This does not mean the file is local,
as it might be on a locally mounted remote filesystem.

On some systems non-native files may be available using the native
filesystem via a userspace filesystem (FUSE), in these cases this call
will return C<False>, but C<.get-path()> will still return a native path.

This call does no blocking I/O.

=begin code
method is-native (--> Bool )
=end code

Return value; C<True> if C<$file> is native. 

=begin comment

=head2 Example
# Example for is-native

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 load-bytes

Loads the contents of C<$file> and returns it as B<Gnome::Glib::N-Bytes>.

If C<$file> is a resource:// based URI, the resulting bytes will reference the
embedded resource instead of a copy. Otherwise, this is equivalent to calling
C<.load-contents()> and g_bytes_new_take().

For resources, C<$etag-out> will be set to undefined.

The data contained in the resulting B<Gnome::Glib::N-Bytes> is always zero-terminated, but
this is not included in the B<Gnome::Glib::N-Bytes> length. The resulting B<Gnome::Glib::N-Bytes> should be
freed with g_bytes_unref() when no longer in use.

=begin code
method load-bytes ( N-Object() $cancellable, Array[Str] $etag-out, CArray[N-Error] $err --> N-Object )
=end code

=item $cancellable; a B<Gnome::Gio::Cancellable> or undefined.
=item $etag-out; (transfer ownership: full) a location to place the current
  entity tag for the file, or undefined if the entity tag is not needed.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; a B<Gnome::Glib::N-Bytes> or undefined and C<$error> is set. 

=begin comment

=head2 Example
# Example for load-bytes

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 load-bytes-async

Asynchronously loads the contents of C<$file> as B<Gnome::Glib::N-Bytes>.

If C<$file> is a resource:// based URI, the resulting bytes will reference the
embedded resource instead of a copy. Otherwise, this is equivalent to calling
C<.load-contents-async()> and g_bytes_new_take().
 C<$callback> should call C<.load-bytes-finish()> to get the result of this
asynchronous operation.

See C<.load-bytes()> for more information.

=begin code
method load-bytes-async ( N-Object() $cancellable, &callback, gpointer $user-data )
=end code

=item $cancellable; a B<Gnome::Gio::Cancellable> or undefined.
=item &callback; a B<Gnome::Gio::T-iotypes> to call when the
  request is satisfied. Tthe function must be specified with following signature; C<:( N-Object $source-object, N-Object $res, gpointer $user-data )>.
=item $user-data; the data to pass to callback function.

=begin comment

=head2 Example
# Example for load-bytes-async

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 load-bytes-finish

Completes an asynchronous request to C<.load-bytes-async()>.

For resources, C<$etag-out> will be set to undefined.

The data contained in the resulting B<Gnome::Glib::N-Bytes> is always zero-terminated, but
this is not included in the B<Gnome::Glib::N-Bytes> length. The resulting B<Gnome::Glib::N-Bytes> should be
freed with g_bytes_unref() when no longer in use.

See C<.load-bytes()> for more information.

=begin code
method load-bytes-finish ( N-Object() $result, Array[Str] $etag-out, CArray[N-Error] $err --> N-Object )
=end code

=item $result; a B<Gnome::Gio::R-AsyncResult> provided to the callback.
=item $etag-out; (transfer ownership: full) a location to place the current
  entity tag for the file, or undefined if the entity tag is not needed.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; a B<Gnome::Glib::N-Bytes> or undefined and C<$error> is set. 

=begin comment

=head2 Example
# Example for load-bytes-finish

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 load-contents

Loads the content of the file into memory. The data is always
zero-terminated, but this is not included in the resultant C<$length>.
The returned C<$contents> should be freed with g_free() when no longer
needed.

If C<$cancellable> is defined, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error C<G_IO_ERROR_CANCELLED> will be returned.

=begin code
method load-contents ( N-Object() $cancellable, Array[Str] $contents, Array[gsize] $length, Array[Str] $etag-out, CArray[N-Error] $err --> Bool )
=end code

=item $cancellable; optional B<Gnome::Gio::Cancellable> object, undefined to ignore.
=item $contents; (transfer ownership: full) a location to place the contents of the file.
=item $length; (transfer ownership: full) a location to place the length of the contents of the file,
  or undefined if the length is not needed.
=item $etag-out; (transfer ownership: full) a location to place the current entity tag for the file,
  or undefined if the entity tag is not needed.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; C<True> if the C<$file>'s contents were successfully loaded.
  C<False> if there were errors.. 

=begin comment

=head2 Example
# Example for load-contents

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 load-contents-async

Starts an asynchronous load of the C<$file>'s contents.

For more details, see C<.load-contents()> which is
the synchronous version of this call.

When the load operation has completed, C<$callback> will be called
with C<$user> data. To finish the operation, call
C<.load-contents-finish()> with the B<Gnome::Gio::R-AsyncResult> returned by
the C<$callback>.

If C<$cancellable> is defined, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error C<G_IO_ERROR_CANCELLED> will be returned.

=begin code
method load-contents-async ( N-Object() $cancellable, &callback, gpointer $user-data )
=end code

=item $cancellable; optional B<Gnome::Gio::Cancellable> object, undefined to ignore.
=item &callback; a B<Gnome::Gio::T-iotypes> to call when the request is satisfied. Tthe function must be specified with following signature; C<:( N-Object $source-object, N-Object $res, gpointer $user-data )>.
=item $user-data; the data to pass to callback function.

=begin comment

=head2 Example
# Example for load-contents-async

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 load-contents-finish

Finishes an asynchronous load of the C<$file>'s contents.
The contents are placed in C<$contents>, and C<$length> is set to the
size of the C<$contents> string. The C<$contents> should be freed with
g_free() when no longer needed. If C<$etag-out> is present, it will be
set to the new entity tag for the C<$file>.

=begin code
method load-contents-finish ( N-Object() $res, Array[Str] $contents, Array[gsize] $length, Array[Str] $etag-out, CArray[N-Error] $err --> Bool )
=end code

=item $res; a B<Gnome::Gio::R-AsyncResult>.
=item $contents; (transfer ownership: full) a location to place the contents of the file.
=item $length; (transfer ownership: full) a location to place the length of the contents of the file,
  or undefined if the length is not needed.
=item $etag-out; (transfer ownership: full) a location to place the current entity tag for the file,
  or undefined if the entity tag is not needed.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; C<True> if the load was successful. If C<False> and C<$error> is
  present, it will be set appropriately.. 

=begin comment

=head2 Example
# Example for load-contents-finish

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 load-partial-contents-async

Reads the partial contents of a file. A B<Gnome::Gio::T-iotypes> should
be used to stop reading from the file when appropriate, else this
function will behave exactly as C<.load-contents-async()>. This
operation can be finished by C<.load-partial-contents-finish()>.

Users of this function should be aware that C<$user-data> is passed to
both the C<$read-more-callback> and the C<$callback>.

If C<$cancellable> is defined, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error C<G_IO_ERROR_CANCELLED> will be returned.

=begin code
method load-partial-contents-async ( N-Object() $cancellable, &read-more-callback, &callback, gpointer $user-data )
=end code

=item $cancellable; optional B<Gnome::Gio::Cancellable> object, undefined to ignore.
=item &read-more-callback; a
  B<Gnome::Gio::T-iotypes> to receive partial data
  and to specify whether further data should be read. Tthe function must be specified with following signature; C<:( Str $file-contents,  $file-size, gpointer $user-data --> gboolean )>.
=item &callback; a B<Gnome::Gio::T-iotypes> to call
  when the request is satisfied. Tthe function must be specified with following signature; C<:( N-Object $source-object, N-Object $res, gpointer $user-data )>.
=item $user-data; the data to pass to the callback functions.

=begin comment

=head2 Example
# Example for load-partial-contents-async

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 load-partial-contents-finish

Finishes an asynchronous partial load operation that was started
with C<.load-partial-contents-async()>. The data is always
zero-terminated, but this is not included in the resultant C<$length>.
The returned C<$contents> should be freed with g_free() when no longer
needed.

=begin code
method load-partial-contents-finish ( N-Object() $res, Array[Str] $contents, Array[gsize] $length, Array[Str] $etag-out, CArray[N-Error] $err --> Bool )
=end code

=item $res; a B<Gnome::Gio::R-AsyncResult>.
=item $contents; (transfer ownership: full) a location to place the contents of the file.
=item $length; (transfer ownership: full) a location to place the length of the contents of the file,
  or undefined if the length is not needed.
=item $etag-out; (transfer ownership: full) a location to place the current entity tag for the file,
  or undefined if the entity tag is not needed.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; C<True> if the load was successful. If C<False> and C<$error> is
  present, it will be set appropriately.. 

=begin comment

=head2 Example
# Example for load-partial-contents-finish

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 make-directory

Creates a directory. Note that this will only create a child directory
of the immediate parent directory of the path or URI given by the B<Gnome::Gio::File>.
To recursively create directories, see C<.make-directory-with-parents()>.
This function will fail if the parent directory does not exist, setting C<$error> to C<G_IO_ERROR_NOT_FOUND>. If the file system doesn't support
creating directories, this function will fail, setting C<$error> to
C<G_IO_ERROR_NOT_SUPPORTED>.

For a local B<Gnome::Gio::File> the newly created directory will have the default
(current) ownership and permissions of the current process.

If C<$cancellable> is defined, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error C<G_IO_ERROR_CANCELLED> will be returned.

=begin code
method make-directory ( N-Object() $cancellable, CArray[N-Error] $err --> Bool )
=end code

=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; C<True> on successful creation, C<False> otherwise.. 

=begin comment

=head2 Example
# Example for make-directory

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 make-directory-async

Asynchronously creates a directory.

=begin code
method make-directory-async ( Int() $io-priority, N-Object() $cancellable, &callback, gpointer $user-data )
=end code

=item $io-priority; the I/O priority of the request.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item &callback; a B<Gnome::Gio::T-iotypes> to call
  when the request is satisfied. Tthe function must be specified with following signature; C<:( N-Object $source-object, N-Object $res, gpointer $user-data )>.
=item $user-data; the data to pass to callback function.

=begin comment

=head2 Example
# Example for make-directory-async

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 make-directory-finish

Finishes an asynchronous directory creation, started with
C<.make-directory-async()>.

=begin code
method make-directory-finish ( N-Object() $result, CArray[N-Error] $err --> Bool )
=end code

=item $result; a B<Gnome::Gio::R-AsyncResult>.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; C<True> on successful directory creation, C<False> otherwise.. 

=begin comment

=head2 Example
# Example for make-directory-finish

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 make-directory-with-parents

Creates a directory and any parent directories that may not
exist similar to 'mkdir -p'. If the file system does not support
creating directories, this function will fail, setting C<$error> to
C<G_IO_ERROR_NOT_SUPPORTED>. If the directory itself already exists,
this function will fail setting C<$error> to C<G_IO_ERROR_EXISTS>, unlike
the similar g_mkdir_with_parents().

For a local B<Gnome::Gio::File> the newly created directories will have the default
(current) ownership and permissions of the current process.

If C<$cancellable> is defined, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error C<G_IO_ERROR_CANCELLED> will be returned.

=begin code
method make-directory-with-parents ( N-Object() $cancellable, CArray[N-Error] $err --> Bool )
=end code

=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; C<True> if all directories have been successfully created, C<False>
otherwise.. 

=begin comment

=head2 Example
# Example for make-directory-with-parents

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 make-symbolic-link

Creates a symbolic link named C<$file> which contains the string C<$symlink-value>.

If C<$cancellable> is defined, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error C<G_IO_ERROR_CANCELLED> will be returned.

=begin code
method make-symbolic-link ( Str $symlink-value, N-Object() $cancellable, CArray[N-Error] $err --> Bool )
=end code

=item $symlink-value; a string with the path for the target
  of the new symlink.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; C<True> on the creation of a new symlink, C<False> otherwise.. 

=begin comment

=head2 Example
# Example for make-symbolic-link

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 measure-disk-usage
This function is not yet available

Recursively measures the disk usage of C<$file>.

This is essentially an analog of the 'du' command, but it also
reports the number of directories and non-directory files encountered
(including things like symbolic links).

By default, errors are only reported against the toplevel file
itself.  Errors found while recursing are silently ignored, unless
C<G_FILE_MEASURE_REPORT_ANY_ERROR> is given in C<$flags>.

The returned size, C<$disk-usage>, is in bytes and should be formatted
with g_format_size() in order to get something reasonable for showing
in a user interface.
 C<$progress-callback> and C<$progress-data> can be given to request
periodic progress updates while scanning.  See the documentation for
B<Gnome::Gio::T-iotypes> for information about when and how the
callback will be invoked.

=begin code
method measure-disk-usage ( UInt $flags, N-Object() $cancellable, &progress-callback, gpointer $progress-data, Array[Int] $disk-usage, Array[Int] $num-dirs, Array[Int] $num-files, CArray[N-Error] $err --> Bool )
=end code

=item $flags; B<Gnome::Gio::T-ioenums>.
=item $cancellable; optional B<Gnome::Gio::Cancellable>.
=item &progress-callback; a B<Gnome::Gio::T-iotypes>. Tthe function must be specified with following signature; C<:( gboolean $reporting, guint64 $current-size, guint64 $num-dirs, guint64 $num-files, gpointer $user-data )>.
=item $progress-data; user_data for C<$progress-callback>.
=item $disk-usage; (transfer ownership: full) the number of bytes of disk space used.
=item $num-dirs; (transfer ownership: full) the number of directories encountered.
=item $num-files; (transfer ownership: full) the number of non-directories encountered.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; C<True> if successful, with the out parameters set.
  C<False> otherwise, with C<$error> set.. 

=begin comment

=head2 Example
# Example for measure-disk-usage

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 measure-disk-usage-async
This function is not yet available

Recursively measures the disk usage of C<$file>.

This is the asynchronous version of C<.measure-disk-usage()>.  See
there for more information.

=begin code
method measure-disk-usage-async ( UInt $flags, Int() $io-priority, N-Object() $cancellable, &progress-callback, gpointer $progress-data, &callback, gpointer $user-data )
=end code

=item $flags; B<Gnome::Gio::T-ioenums>.
=item $io-priority; the I/O priority of the request.
=item $cancellable; optional B<Gnome::Gio::Cancellable>.
=item &progress-callback; a B<Gnome::Gio::T-iotypes>. Tthe function must be specified with following signature; C<:( gboolean $reporting, guint64 $current-size, guint64 $num-dirs, guint64 $num-files, gpointer $user-data )>.
=item $progress-data; user_data for C<$progress-callback>.
=item &callback; a B<Gnome::Gio::T-iotypes> to call when complete. Tthe function must be specified with following signature; C<:( N-Object $source-object, N-Object $res, gpointer $user-data )>.
=item $user-data; the data to pass to callback function.

=begin comment

=head2 Example
# Example for measure-disk-usage-async

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 measure-disk-usage-finish

Collects the results from an earlier call to
C<.measure-disk-usage-async()>.  See C<.measure-disk-usage()> for
more information.

=begin code
method measure-disk-usage-finish ( N-Object() $result, Array[Int] $disk-usage, Array[Int] $num-dirs, Array[Int] $num-files, CArray[N-Error] $err --> Bool )
=end code

=item $result; the B<Gnome::Gio::R-AsyncResult> passed to your B<Gnome::Gio::T-iotypes>.
=item $disk-usage; (transfer ownership: full) the number of bytes of disk space used.
=item $num-dirs; (transfer ownership: full) the number of directories encountered.
=item $num-files; (transfer ownership: full) the number of non-directories encountered.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; C<True> if successful, with the out parameters set.
  C<False> otherwise, with C<$error> set.. 

=begin comment

=head2 Example
# Example for measure-disk-usage-finish

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 monitor
This function is not yet available

Obtains a file or directory monitor for the given file,
depending on the type of the file.

If C<$cancellable> is defined, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error C<G_IO_ERROR_CANCELLED> will be returned.

=begin code
method monitor ( UInt $flags, N-Object() $cancellable, CArray[N-Error] $err --> N-Object )
=end code

=item $flags; a set of B<Gnome::Gio::T-ioenums>.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; a B<Gnome::Gio::FileMonitor> for the given C<$file>,
  or undefined on error.
  Free the returned object with g_object_unref().. 

=begin comment

=head2 Example
# Example for monitor

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 monitor-directory
This function is not yet available

Obtains a directory monitor for the given file.
This may fail if directory monitoring is not supported.

If C<$cancellable> is defined, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error C<G_IO_ERROR_CANCELLED> will be returned.

It does not make sense for C<$flags> to contain
C<G_FILE_MONITOR_WATCH_HARD_LINKS>, since hard links can not be made to
directories.  It is not possible to monitor all the files in a
directory for changes made via hard links; if you want to do this then
you must register individual watches with C<.monitor()>.

=begin code
method monitor-directory ( UInt $flags, N-Object() $cancellable, CArray[N-Error] $err --> N-Object )
=end code

=item $flags; a set of B<Gnome::Gio::T-ioenums>.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; a B<Gnome::Gio::FileMonitor> for the given C<$file>,
  or undefined on error.
  Free the returned object with g_object_unref().. 

=begin comment

=head2 Example
# Example for monitor-directory

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 monitor-file
This function is not yet available

Obtains a file monitor for the given file. If no file notification
mechanism exists, then regular polling of the file is used.

If C<$cancellable> is defined, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error C<G_IO_ERROR_CANCELLED> will be returned.

If C<$flags> contains C<G_FILE_MONITOR_WATCH_HARD_LINKS> then the monitor
will also attempt to report changes made to the file via another
filename (ie, a hard link). Without this flag, you can only rely on
changes made through the filename contained in C<$file> to be
reported. Using this flag may result in an increase in resource
usage, and may not have any effect depending on the B<Gnome::Gio::FileMonitor>
backend and/or filesystem type.

=begin code
method monitor-file ( UInt $flags, N-Object() $cancellable, CArray[N-Error] $err --> N-Object )
=end code

=item $flags; a set of B<Gnome::Gio::T-ioenums>.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; a B<Gnome::Gio::FileMonitor> for the given C<$file>,
  or undefined on error.
  Free the returned object with g_object_unref().. 

=begin comment

=head2 Example
# Example for monitor-file

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 mount-enclosing-volume
This function is not yet available

Starts a C<$mount-operation>, mounting the volume that contains
the file C<$location>.

When this operation has completed, C<$callback> will be called with C<$user-user> data, and the operation can be finalized with
C<.mount-enclosing-volume-finish()>.

If C<$cancellable> is defined, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error C<G_IO_ERROR_CANCELLED> will be returned.

=begin code
method mount-enclosing-volume ( UInt $flags, N-Object() $mount-operation, N-Object() $cancellable, &callback, gpointer $user-data )
=end code

=item $flags; flags affecting the operation.
=item $mount-operation; a B<Gnome::Gio::MountOperation>
  or undefined to avoid user interaction.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item &callback; a B<Gnome::Gio::T-iotypes> to call
  when the request is satisfied, or undefined. Tthe function must be specified with following signature; C<:( N-Object $source-object, N-Object $res, gpointer $user-data )>.
=item $user-data; the data to pass to callback function.

=begin comment

=head2 Example
# Example for mount-enclosing-volume

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 mount-enclosing-volume-finish

Finishes a mount operation started by C<.mount-enclosing-volume()>.

=begin code
method mount-enclosing-volume-finish ( N-Object() $result, CArray[N-Error] $err --> Bool )
=end code

=item $result; a B<Gnome::Gio::R-AsyncResult>.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; C<True> if successful. If an error has occurred,
  this function will return C<False> and set C<$error>
  appropriately if present.. 

=begin comment

=head2 Example
# Example for mount-enclosing-volume-finish

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 mount-mountable
This function is not yet available

Mounts a file of type G_FILE_TYPE_MOUNTABLE.
Using C<$mount-operation>, you can request callbacks when, for instance,
passwords are needed during authentication.

If C<$cancellable> is defined, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error C<G_IO_ERROR_CANCELLED> will be returned.

When the operation is finished, C<$callback> will be called.
You can then call C<.mount-mountable-finish()> to get
the result of the operation.

=begin code
method mount-mountable ( UInt $flags, N-Object() $mount-operation, N-Object() $cancellable, &callback, gpointer $user-data )
=end code

=item $flags; flags affecting the operation.
=item $mount-operation; a B<Gnome::Gio::MountOperation>,
  or undefined to avoid user interaction.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item &callback; a B<Gnome::Gio::T-iotypes> to call
  when the request is satisfied, or undefined. Tthe function must be specified with following signature; C<:( N-Object $source-object, N-Object $res, gpointer $user-data )>.
=item $user-data; the data to pass to callback function.

=begin comment

=head2 Example
# Example for mount-mountable

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 mount-mountable-finish

Finishes a mount operation. See C<.mount-mountable()> for details.

Finish an asynchronous mount operation that was started
with C<.mount-mountable()>.

=begin code
method mount-mountable-finish ( N-Object() $result, CArray[N-Error] $err --> N-Object )
=end code

=item $result; a B<Gnome::Gio::R-AsyncResult>.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; a B<Gnome::Gio::File> or undefined on error.
  Free the returned object with g_object_unref().. 

=begin comment

=head2 Example
# Example for mount-mountable-finish

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 move
This function is not yet available

Tries to move the file or directory C<$source> to the location specified
by C<$destination>. If native move operations are supported then this is
used, otherwise a copy + delete fallback is used. The native
implementation may support moving directories (for instance on moves
inside the same filesystem), but the fallback code does not.

If the flag C<G_FILE_COPY_OVERWRITE> is specified an already
existing C<$destination> file is overwritten.

If C<$cancellable> is defined, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error C<G_IO_ERROR_CANCELLED> will be returned.

If C<$progress-callback> is defined, then the operation can be monitored
by setting this to a B<Gnome::Gio::T-iotypes> function. C<$progress-callback-data> will be passed to this function. It is
guaranteed that this callback will be called after all data has been
transferred with the total number of bytes copied during the operation.

If the C<$source> file does not exist, then the C<G_IO_ERROR_NOT_FOUND>
error is returned, independent on the status of the C<$destination>.

If C<G_FILE_COPY_OVERWRITE> is not specified and the target exists,
then the error C<G_IO_ERROR_EXISTS> is returned.

If trying to overwrite a file over a directory, the C<G_IO_ERROR_IS_DIRECTORY>
error is returned. If trying to overwrite a directory with a directory the
C<G_IO_ERROR_WOULD_MERGE> error is returned.

If the source is a directory and the target does not exist, or
C<G_FILE_COPY_OVERWRITE> is specified and the target is a file, then
the C<G_IO_ERROR_WOULD_RECURSE> error may be returned (if the native
move operation isn't available).

=begin code
method move ( N-Object() $destination, UInt $flags, N-Object() $cancellable, &progress-callback, gpointer $progress-callback-data, CArray[N-Error] $err --> Bool )
=end code

=item $destination; B<Gnome::Gio::File> pointing to the destination location.
=item $flags; set of B<Gnome::Gio::T-ioenums>.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item &progress-callback; B<Gnome::Gio::T-iotypes>
  function for updates. Tthe function must be specified with following signature; C<:(  $current-num-bytes,  $total-num-bytes, gpointer $user-data )>.
=item $progress-callback-data; gpointer to user data for
  the callback function.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; C<True> on successful move, C<False> otherwise.. 

=begin comment

=head2 Example
# Example for move

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 move-async
This function is not yet available

Asynchronously moves a file C<$source> to the location of C<$destination>. For details of the behaviour, see C<.move()>.

If C<$progress-callback> is defined, then that function that will be called
just like in C<.move()>. The callback will run in the default main context
of the thread calling C<.move-async()> — the same context as C<$callback> is
run in.

When the operation is finished, C<$callback> will be called. You can then call
C<.move-finish()> to get the result of the operation.

=begin code
method move-async ( N-Object() $destination, UInt $flags, Int() $io-priority, N-Object() $cancellable, &progress-callback, gpointer $progress-callback-data, &callback, gpointer $user-data )
=end code

=item $destination; B<Gnome::Gio::File> pointing to the destination location.
=item $flags; set of B<Gnome::Gio::T-ioenums>.
=item $io-priority; the I/O priority of the request.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item &progress-callback; B<Gnome::Gio::T-iotypes>
  function for updates. Tthe function must be specified with following signature; C<:(  $current-num-bytes,  $total-num-bytes, gpointer $user-data )>.
=item $progress-callback-data; gpointer to user data for
  the callback function.
=item &callback; a B<Gnome::Gio::T-iotypes> to call
  when the request is satisfied. Tthe function must be specified with following signature; C<:( N-Object $source-object, N-Object $res, gpointer $user-data )>.
=item $user-data; the data to pass to callback function.

=begin comment

=head2 Example
# Example for move-async

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 move-finish

Finishes an asynchronous file movement, started with
C<.move-async()>.

=begin code
method move-finish ( N-Object() $result, CArray[N-Error] $err --> Bool )
=end code

=item $result; a B<Gnome::Gio::R-AsyncResult>.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; C<True> on successful file move, C<False> otherwise.. 

=begin comment

=head2 Example
# Example for move-finish

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 open-readwrite

Opens an existing file for reading and writing. The result is
a B<Gnome::Gio::FileIOStream> that can be used to read and write the contents
of the file.

If C<$cancellable> is defined, then the operation can be cancelled
by triggering the cancellable object from another thread. If the
operation was cancelled, the error C<G_IO_ERROR_CANCELLED> will be
returned.

If the file does not exist, the C<G_IO_ERROR_NOT_FOUND> error will
be returned. If the file is a directory, the C<G_IO_ERROR_IS_DIRECTORY>
error will be returned. Other errors are possible too, and depend on
what kind of filesystem the file is on. Note that in many non-local
file cases read and write streams are not supported, so make sure you
really need to do read and write streaming, rather than just opening
for reading or writing.

=begin code
method open-readwrite ( N-Object() $cancellable, CArray[N-Error] $err --> N-Object )
=end code

=item $cancellable; a B<Gnome::Gio::Cancellable>.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; B<Gnome::Gio::FileIOStream> or undefined on error.
  Free the returned object with g_object_unref().. 

=begin comment

=head2 Example
# Example for open-readwrite

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 open-readwrite-async

Asynchronously opens C<$file> for reading and writing.

For more details, see C<.open-readwrite()> which is
the synchronous version of this call.

When the operation is finished, C<$callback> will be called.
You can then call C<.open-readwrite-finish()> to get
the result of the operation.

=begin code
method open-readwrite-async ( Int() $io-priority, N-Object() $cancellable, &callback, gpointer $user-data )
=end code

=item $io-priority; the I/O priority of the request.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item &callback; a B<Gnome::Gio::T-iotypes> to call
  when the request is satisfied. Tthe function must be specified with following signature; C<:( N-Object $source-object, N-Object $res, gpointer $user-data )>.
=item $user-data; the data to pass to callback function.

=begin comment

=head2 Example
# Example for open-readwrite-async

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 open-readwrite-finish

Finishes an asynchronous file read operation started with
C<.open-readwrite-async()>.

=begin code
method open-readwrite-finish ( N-Object() $res, CArray[N-Error] $err --> N-Object )
=end code

=item $res; a B<Gnome::Gio::R-AsyncResult>.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; a B<Gnome::Gio::FileIOStream> or undefined on error.
  Free the returned object with g_object_unref().. 

=begin comment

=head2 Example
# Example for open-readwrite-finish

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 peek-path

Exactly like C<.get-path()>, but caches the result via
g_object_set_qdata_full().  This is useful for example in C
applications which mix B<g_file_*> APIs with native ones.  It
also avoids an extra duplicated string when possible, so will be
generally more efficient.

This call does no blocking I/O.

=begin code
method peek-path (--> Str )
=end code

Return value; string containing the B<Gnome::Gio::File>'s path,
  or undefined if no such path exists. The returned string is owned by C<$file>.. 

=begin comment

=head2 Example
# Example for peek-path

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 poll-mountable

Polls a file of type C<G_FILE_TYPE_MOUNTABLE>.

If C<$cancellable> is defined, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error C<G_IO_ERROR_CANCELLED> will be returned.

When the operation is finished, C<$callback> will be called.
You can then call C<.mount-mountable-finish()> to get
the result of the operation.

=begin code
method poll-mountable ( N-Object() $cancellable, &callback, gpointer $user-data )
=end code

=item $cancellable; optional B<Gnome::Gio::Cancellable> object, undefined to ignore.
=item &callback; a B<Gnome::Gio::T-iotypes> to call
  when the request is satisfied, or undefined. Tthe function must be specified with following signature; C<:( N-Object $source-object, N-Object $res, gpointer $user-data )>.
=item $user-data; the data to pass to callback function.

=begin comment

=head2 Example
# Example for poll-mountable

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 poll-mountable-finish

Finishes a poll operation. See C<.poll-mountable()> for details.

Finish an asynchronous poll operation that was polled
with C<.poll-mountable()>.

=begin code
method poll-mountable-finish ( N-Object() $result, CArray[N-Error] $err --> Bool )
=end code

=item $result; a B<Gnome::Gio::R-AsyncResult>.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; C<True> if the operation finished successfully. C<False>
otherwise.. 

=begin comment

=head2 Example
# Example for poll-mountable-finish

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 query-default-handler

Returns the B<Gnome::Gio::R-AppInfo> that is registered as the default
application to handle the file specified by C<$file>.

If C<$cancellable> is defined, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error C<G_IO_ERROR_CANCELLED> will be returned.

=begin code
method query-default-handler ( N-Object() $cancellable, CArray[N-Error] $err --> N-Object )
=end code

=item $cancellable; optional B<Gnome::Gio::Cancellable> object, undefined to ignore.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; a B<Gnome::Gio::R-AppInfo> if the handle was found,
  undefined if there were errors.
  When you are done with it, release it with g_object_unref(). 

=begin comment

=head2 Example
# Example for query-default-handler

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 query-default-handler-async

Async version of C<.query-default-handler()>.

=begin code
method query-default-handler-async ( Int() $io-priority, N-Object() $cancellable, &callback, gpointer $user-data )
=end code

=item $io-priority; the I/O priority of the request.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object, undefined to ignore.
=item &callback; a B<Gnome::Gio::T-iotypes> to call when the request is done. Tthe function must be specified with following signature; C<:( N-Object $source-object, N-Object $res, gpointer $user-data )>.
=item $user-data; data to pass to C<$callback>.

=begin comment

=head2 Example
# Example for query-default-handler-async

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 query-default-handler-finish

Finishes a C<.query-default-handler-async()> operation.

=begin code
method query-default-handler-finish ( N-Object() $result, CArray[N-Error] $err --> N-Object )
=end code

=item $result; a B<Gnome::Gio::R-AsyncResult>.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; a B<Gnome::Gio::R-AppInfo> if the handle was found,
  undefined if there were errors.
  When you are done with it, release it with g_object_unref(). 

=begin comment

=head2 Example
# Example for query-default-handler-finish

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 query-exists

Utility function to check if a particular file exists. This is
implemented using C<.query-info()> and as such does blocking I/O.

Note that in many cases it is [racy to first check for file existence](https://en.wikipedia.org/wiki/Time_of_check_to_time_of_use)
and then execute something based on the outcome of that, because the
file might have been created or removed in between the operations. The
general approach to handling that is to not check, but just do the
operation and handle the errors as they come.

As an example of race-free checking, take the case of reading a file,
and if it doesn't exist, creating it. There are two racy versions: read
it, and on error create it; and: check if it exists, if not create it.
These can both result in two processes creating the file (with perhaps
a partially written file as the result). The correct approach is to
always try to create the file with C<.create()> which will either
atomically create the file or fail with a C<G_IO_ERROR_EXISTS> error.

However, in many cases an existence check is useful in a user interface,
for instance to make a menu item sensitive/insensitive, so that you don't
have to fool users that something is possible and then just show an error
dialog. If you do this, you should make sure to also handle the errors
that can happen due to races when you execute the operation.

=begin code
method query-exists ( N-Object() $cancellable --> Bool )
=end code

=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.

Return value; C<True> if the file exists (and can be detected without error),
  C<False> otherwise (or if cancelled).. 

=begin comment

=head2 Example
# Example for query-exists

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 query-file-type
This function is not yet available

Utility function to inspect the B<Gnome::Gio::T-ioenums> of a file. This is
implemented using C<.query-info()> and as such does blocking I/O.

The primary use case of this method is to check if a file is
a regular file, directory, or symlink.

=begin code
method query-file-type ( UInt $flags, N-Object() $cancellable --> GFileType  )
=end code

=item $flags; a set of B<Gnome::Gio::T-ioenums> passed to C<.query-info()>.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.

Return value; The B<Gnome::Gio::T-ioenums> of the file and C<G_FILE_TYPE_UNKNOWN>
  if the file does not exist. 

=begin comment

=head2 Example
# Example for query-file-type

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 query-filesystem-info

Similar to C<.query-info()>, but obtains information
about the filesystem the C<$file> is on, rather than the file itself.
For instance the amount of space available and the type of
the filesystem.

The C<$attributes> value is a string that specifies the attributes
that should be gathered. It is not an error if it's not possible
to read a particular requested attribute from a file - it just
won't be set. C<$attributes> should be a comma-separated list of
attributes or attribute wildcards. The wildcard "*" means all
attributes, and a wildcard like "filesystem::*" means all attributes
in the filesystem namespace. The standard namespace for filesystem
attributes is "filesystem". Common attributes of interest are
C<G_FILE_ATTRIBUTE_FILESYSTEM_SIZE> (the total size of the filesystem
in bytes), C<G_FILE_ATTRIBUTE_FILESYSTEM_FREE> (number of bytes available),
and C<G_FILE_ATTRIBUTE_FILESYSTEM_TYPE> (type of the filesystem).

If C<$cancellable> is defined, then the operation can be cancelled
by triggering the cancellable object from another thread. If the
operation was cancelled, the error C<G_IO_ERROR_CANCELLED> will be
returned.

If the file does not exist, the C<G_IO_ERROR_NOT_FOUND> error will
be returned. Other errors are possible too, and depend on what
kind of filesystem the file is on.

=begin code
method query-filesystem-info ( Str $attributes, N-Object() $cancellable, CArray[N-Error] $err --> N-Object )
=end code

=item $attributes; an attribute query string.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; a B<Gnome::Gio::FileInfo> or undefined if there was an error.
  Free the returned object with g_object_unref().. 

=begin comment

=head2 Example
# Example for query-filesystem-info

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 query-filesystem-info-async

Asynchronously gets the requested information about the filesystem
that the specified C<$file> is on. The result is a B<Gnome::Gio::FileInfo> object
that contains key-value attributes (such as type or size for the
file).

For more details, see C<.query-filesystem-info()> which is the
synchronous version of this call.

When the operation is finished, C<$callback> will be called. You can
then call C<.query-info-finish()> to get the result of the
operation.

=begin code
method query-filesystem-info-async ( Str $attributes, Int() $io-priority, N-Object() $cancellable, &callback, gpointer $user-data )
=end code

=item $attributes; an attribute query string.
=item $io-priority; the I/O priority of the request.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item &callback; a B<Gnome::Gio::T-iotypes> to call
  when the request is satisfied. Tthe function must be specified with following signature; C<:( N-Object $source-object, N-Object $res, gpointer $user-data )>.
=item $user-data; the data to pass to callback function.

=begin comment

=head2 Example
# Example for query-filesystem-info-async

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 query-filesystem-info-finish

Finishes an asynchronous filesystem info query.
See C<.query-filesystem-info-async()>.

=begin code
method query-filesystem-info-finish ( N-Object() $res, CArray[N-Error] $err --> N-Object )
=end code

=item $res; a B<Gnome::Gio::R-AsyncResult>.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; B<Gnome::Gio::FileInfo> for given C<$file>
  or undefined on error.
  Free the returned object with g_object_unref().. 

=begin comment

=head2 Example
# Example for query-filesystem-info-finish

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 query-info
This function is not yet available

Gets the requested information about specified C<$file>.
The result is a B<Gnome::Gio::FileInfo> object that contains key-value
attributes (such as the type or size of the file).

The C<$attributes> value is a string that specifies the file
attributes that should be gathered. It is not an error if
it's not possible to read a particular requested attribute
from a file - it just won't be set. C<$attributes> should be a
comma-separated list of attributes or attribute wildcards.
The wildcard "*" means all attributes, and a wildcard like
"standard::*" means all attributes in the standard namespace.
An example attribute query be "standard::*,owner::user".
The standard attributes are available as defines, like
C<G_FILE_ATTRIBUTE_STANDARD_NAME>.

If C<$cancellable> is defined, then the operation can be cancelled
by triggering the cancellable object from another thread. If the
operation was cancelled, the error C<G_IO_ERROR_CANCELLED> will be
returned.

For symlinks, normally the information about the target of the
symlink is returned, rather than information about the symlink
itself. However if you pass C<G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS>
in C<$flags> the information about the symlink itself will be returned.
Also, for symlinks that point to non-existing files the information
about the symlink itself will be returned.

If the file does not exist, the C<G_IO_ERROR_NOT_FOUND> error will be
returned. Other errors are possible too, and depend on what kind of
filesystem the file is on.

=begin code
method query-info ( Str $attributes, UInt $flags, N-Object() $cancellable, CArray[N-Error] $err --> N-Object )
=end code

=item $attributes; an attribute query string.
=item $flags; a set of B<Gnome::Gio::T-ioenums>.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; a B<Gnome::Gio::FileInfo> for the given C<$file>, or undefined
  on error. Free the returned object with g_object_unref().. 

=begin comment

=head2 Example
# Example for query-info

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 query-info-async
This function is not yet available

Asynchronously gets the requested information about specified C<$file>.
The result is a B<Gnome::Gio::FileInfo> object that contains key-value attributes
(such as type or size for the file).

For more details, see C<.query-info()> which is the synchronous
version of this call.

When the operation is finished, C<$callback> will be called. You can
then call C<.query-info-finish()> to get the result of the operation.

=begin code
method query-info-async ( Str $attributes, UInt $flags, Int() $io-priority, N-Object() $cancellable, &callback, gpointer $user-data )
=end code

=item $attributes; an attribute query string.
=item $flags; a set of B<Gnome::Gio::T-ioenums>.
=item $io-priority; the I/O priority of the request.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item &callback; a B<Gnome::Gio::T-iotypes> to call when the
  request is satisfied. Tthe function must be specified with following signature; C<:( N-Object $source-object, N-Object $res, gpointer $user-data )>.
=item $user-data; the data to pass to callback function.

=begin comment

=head2 Example
# Example for query-info-async

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 query-info-finish

Finishes an asynchronous file info query.
See C<.query-info-async()>.

=begin code
method query-info-finish ( N-Object() $res, CArray[N-Error] $err --> N-Object )
=end code

=item $res; a B<Gnome::Gio::R-AsyncResult>.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; B<Gnome::Gio::FileInfo> for given C<$file>
  or undefined on error. Free the returned object with
  g_object_unref().. 

=begin comment

=head2 Example
# Example for query-info-finish

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 query-settable-attributes

Obtain the list of settable attributes for the file.

Returns the type and full attribute name of all the attributes
that can be set on this file. This doesn't mean setting it will
always succeed though, you might get an access failure, or some
specific file may not support a specific attribute.

If C<$cancellable> is defined, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error C<G_IO_ERROR_CANCELLED> will be returned.

=begin code
method query-settable-attributes ( N-Object() $cancellable, CArray[N-Error] $err --> N-Object )
=end code

=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; a B<Gnome::Gio::N-FileAttributeInfoList> describing the settable attributes.
  When you are done with it, release it with
  C<.attribute-info-list-unref()>. 

=begin comment

=head2 Example
# Example for query-settable-attributes

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 query-writable-namespaces

Obtain the list of attribute namespaces where new attributes
can be created by a user. An example of this is extended
attributes (in the "xattr" namespace).

If C<$cancellable> is defined, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error C<G_IO_ERROR_CANCELLED> will be returned.

=begin code
method query-writable-namespaces ( N-Object() $cancellable, CArray[N-Error] $err --> N-Object )
=end code

=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; a B<Gnome::Gio::N-FileAttributeInfoList> describing the writable namespaces.
  When you are done with it, release it with
  C<.attribute-info-list-unref()>. 

=begin comment

=head2 Example
# Example for query-writable-namespaces

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 read

Opens a file for reading. The result is a B<Gnome::Gio::FileInputStream> that
can be used to read the contents of the file.

If C<$cancellable> is defined, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error C<G_IO_ERROR_CANCELLED> will be returned.

If the file does not exist, the C<G_IO_ERROR_NOT_FOUND> error will be
returned. If the file is a directory, the C<G_IO_ERROR_IS_DIRECTORY>
error will be returned. Other errors are possible too, and depend
on what kind of filesystem the file is on.

=begin code
method read ( N-Object() $cancellable, CArray[N-Error] $err --> N-Object )
=end code

=item $cancellable; a B<Gnome::Gio::Cancellable>.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; B<Gnome::Gio::FileInputStream> or undefined on error.
  Free the returned object with g_object_unref().. 

=begin comment

=head2 Example
# Example for read

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 read-async

Asynchronously opens C<$file> for reading.

For more details, see C<.read()> which is
the synchronous version of this call.

When the operation is finished, C<$callback> will be called.
You can then call C<.read-finish()> to get the result
of the operation.

=begin code
method read-async ( Int() $io-priority, N-Object() $cancellable, &callback, gpointer $user-data )
=end code

=item $io-priority; the I/O priority of the request.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item &callback; a B<Gnome::Gio::T-iotypes> to call
  when the request is satisfied. Tthe function must be specified with following signature; C<:( N-Object $source-object, N-Object $res, gpointer $user-data )>.
=item $user-data; the data to pass to callback function.

=begin comment

=head2 Example
# Example for read-async

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 read-finish

Finishes an asynchronous file read operation started with
C<.read-async()>.

=begin code
method read-finish ( N-Object() $res, CArray[N-Error] $err --> N-Object )
=end code

=item $res; a B<Gnome::Gio::R-AsyncResult>.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; a B<Gnome::Gio::FileInputStream> or undefined on error.
  Free the returned object with g_object_unref().. 

=begin comment

=head2 Example
# Example for read-finish

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 replace
This function is not yet available

Returns an output stream for overwriting the file, possibly
creating a backup copy of the file first. If the file doesn't exist,
it will be created.

This will try to replace the file in the safest way possible so
that any errors during the writing will not affect an already
existing copy of the file. For instance, for local files it
may write to a temporary file and then atomically rename over
the destination when the stream is closed.

By default files created are generally readable by everyone,
but if you pass C<G_FILE_CREATE_PRIVATE> in C<$flags> the file
will be made readable only to the current user, to the level that
is supported on the target filesystem.

If C<$cancellable> is defined, then the operation can be cancelled
by triggering the cancellable object from another thread. If the
operation was cancelled, the error C<G_IO_ERROR_CANCELLED> will be
returned.

If you pass in a non-undefined C<$etag> value and C<$file> already exists, then
this value is compared to the current entity tag of the file, and if
they differ an C<G_IO_ERROR_WRONG_ETAG> error is returned. This
generally means that the file has been changed since you last read
it. You can get the new etag from C<.output-stream-get-etag()>
after you've finished writing and closed the B<Gnome::Gio::FileOutputStream>. When
you load a new file you can use C<.input-stream-query-info()> to
get the etag of the file.

If C<$make-backup> is C<True>, this function will attempt to make a
backup of the current file before overwriting it. If this fails
a C<G_IO_ERROR_CANT_CREATE_BACKUP> error will be returned. If you
want to replace anyway, try again with C<$make-backup> set to C<False>.

If the file is a directory the C<G_IO_ERROR_IS_DIRECTORY> error will
be returned, and if the file is some other form of non-regular file
then a C<G_IO_ERROR_NOT_REGULAR_FILE> error will be returned. Some
file systems don't allow all file names, and may return an
C<G_IO_ERROR_INVALID_FILENAME> error, and if the name is to long
C<G_IO_ERROR_FILENAME_TOO_LONG> will be returned. Other errors are
possible too, and depend on what kind of filesystem the file is on.

=begin code
method replace ( Str $etag, Bool() $make-backup, UInt $flags, N-Object() $cancellable, CArray[N-Error] $err --> N-Object )
=end code

=item $etag; an optional entity tag
  for the current B<Gnome::Gio::File>, or #NULL to ignore.
=item $make-backup; C<True> if a backup should be created.
=item $flags; a set of B<Gnome::Gio::T-ioenums>.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; a B<Gnome::Gio::FileOutputStream> or undefined on error.
  Free the returned object with g_object_unref().. 

=begin comment

=head2 Example
# Example for replace

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 replace-async
This function is not yet available

Asynchronously overwrites the file, replacing the contents,
possibly creating a backup copy of the file first.

For more details, see C<.replace()> which is
the synchronous version of this call.

When the operation is finished, C<$callback> will be called.
You can then call C<.replace-finish()> to get the result
of the operation.

=begin code
method replace-async ( Str $etag, Bool() $make-backup, UInt $flags, Int() $io-priority, N-Object() $cancellable, &callback, gpointer $user-data )
=end code

=item $etag; an entity tag for the current B<Gnome::Gio::File>,
  or undefined to ignore.
=item $make-backup; C<True> if a backup should be created.
=item $flags; a set of B<Gnome::Gio::T-ioenums>.
=item $io-priority; the I/O priority of the request.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item &callback; a B<Gnome::Gio::T-iotypes> to call
  when the request is satisfied. Tthe function must be specified with following signature; C<:( N-Object $source-object, N-Object $res, gpointer $user-data )>.
=item $user-data; the data to pass to callback function.

=begin comment

=head2 Example
# Example for replace-async

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 replace-contents
This function is not yet available

Replaces the contents of C<$file> with C<$contents> of C<$length> bytes.

If C<$etag> is specified (defined), any existing file must have that etag,
or the error C<G_IO_ERROR_WRONG_ETAG> will be returned.

If C<$make-backup> is C<True>, this function will attempt to make a backup
of C<$file>. Internally, it uses C<.replace()>, so will try to replace the
file contents in the safest way possible. For example, atomic renames are
used when replacing local files’ contents.

If C<$cancellable> is defined, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error C<G_IO_ERROR_CANCELLED> will be returned.

The returned C<$new-etag> can be used to verify that the file hasn't
changed the next time it is saved over.

=begin code
method replace-contents ( Str $contents, Int() $length, Str $etag, Bool() $make-backup, UInt $flags, Array[Str] $new-etag, N-Object() $cancellable, CArray[N-Error] $err --> Bool )
=end code

=item $contents; a string containing the new contents for C<$file>.
=item $length; the length of C<$contents> in bytes.
=item $etag; the old entity-tag for the document,
  or undefined.
=item $make-backup; C<True> if a backup should be created.
=item $flags; a set of B<Gnome::Gio::T-ioenums>.
=item $new-etag; (transfer ownership: full) a location to a new entity tag
  for the document. This should be freed with g_free() when no longer
  needed, or undefined.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object, undefined to ignore.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; C<True> if successful. If an error has occurred, this function
  will return C<False> and set C<$error> appropriately if present.. 

=begin comment

=head2 Example
# Example for replace-contents

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 replace-contents-async
This function is not yet available

Starts an asynchronous replacement of C<$file> with the given C<$contents> of C<$length> bytes. C<$etag> will replace the document's
current entity tag.

When this operation has completed, C<$callback> will be called with C<$user-user> data, and the operation can be finalized with
C<.replace-contents-finish()>.

If C<$cancellable> is defined, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error C<G_IO_ERROR_CANCELLED> will be returned.

If C<$make-backup> is C<True>, this function will attempt to
make a backup of C<$file>.

Note that no copy of C<$contents> will be made, so it must stay valid
until C<$callback> is called. See C<.replace-contents-bytes-async()>
for a B<Gnome::Glib::N-Bytes> version that will automatically hold a reference to the
contents (without copying) for the duration of the call.

=begin code
method replace-contents-async ( Str $contents, Int() $length, Str $etag, Bool() $make-backup, UInt $flags, N-Object() $cancellable, &callback, gpointer $user-data )
=end code

=item $contents; string of contents to replace the file with.
=item $length; the length of C<$contents> in bytes.
=item $etag; a new entity tag for the C<$file>, or undefined.
=item $make-backup; C<True> if a backup should be created.
=item $flags; a set of B<Gnome::Gio::T-ioenums>.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object, undefined to ignore.
=item &callback; a B<Gnome::Gio::T-iotypes> to call when the request is satisfied. Tthe function must be specified with following signature; C<:( N-Object $source-object, N-Object $res, gpointer $user-data )>.
=item $user-data; the data to pass to callback function.

=begin comment

=head2 Example
# Example for replace-contents-async

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 replace-contents-bytes-async
This function is not yet available

Same as C<.replace-contents-async()> but takes a B<Gnome::Glib::N-Bytes> input instead.
This function will keep a ref on C<$contents> until the operation is done.
Unlike C<.replace-contents-async()> this allows forgetting about the
content without waiting for the callback.

When this operation has completed, C<$callback> will be called with C<$user-user> data, and the operation can be finalized with
C<.replace-contents-finish()>.

=begin code
method replace-contents-bytes-async ( N-Object $contents, Str $etag, Bool() $make-backup, UInt $flags, N-Object() $cancellable, &callback, gpointer $user-data )
=end code

=item $contents; a B<Gnome::Glib::N-Bytes>
=item $etag; a new entity tag for the C<$file>, or undefined.
=item $make-backup; C<True> if a backup should be created.
=item $flags; a set of B<Gnome::Gio::T-ioenums>.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object, undefined to ignore.
=item &callback; a B<Gnome::Gio::T-iotypes> to call when the request is satisfied. Tthe function must be specified with following signature; C<:( N-Object $source-object, N-Object $res, gpointer $user-data )>.
=item $user-data; the data to pass to callback function.

=begin comment

=head2 Example
# Example for replace-contents-bytes-async

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 replace-contents-finish

Finishes an asynchronous replace of the given C<$file>. See
C<.replace-contents-async()>. Sets C<$new-etag> to the new entity
tag for the document, if present.

=begin code
method replace-contents-finish ( N-Object() $res, Array[Str] $new-etag, CArray[N-Error] $err --> Bool )
=end code

=item $res; a B<Gnome::Gio::R-AsyncResult>.
=item $new-etag; (transfer ownership: full) a location of a new entity tag
  for the document. This should be freed with g_free() when it is no
  longer needed, or undefined.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; C<True> on success, C<False> on failure.. 

=begin comment

=head2 Example
# Example for replace-contents-finish

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 replace-finish

Finishes an asynchronous file replace operation started with
C<.replace-async()>.

=begin code
method replace-finish ( N-Object() $res, CArray[N-Error] $err --> N-Object )
=end code

=item $res; a B<Gnome::Gio::R-AsyncResult>.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; a B<Gnome::Gio::FileOutputStream>, or undefined on error.
  Free the returned object with g_object_unref().. 

=begin comment

=head2 Example
# Example for replace-finish

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 replace-readwrite
This function is not yet available

Returns an output stream for overwriting the file in readwrite mode,
possibly creating a backup copy of the file first. If the file doesn't
exist, it will be created.

For details about the behaviour, see C<.replace()> which does the
same thing but returns an output stream only.

Note that in many non-local file cases read and write streams are not
supported, so make sure you really need to do read and write streaming,
rather than just opening for reading or writing.

=begin code
method replace-readwrite ( Str $etag, Bool() $make-backup, UInt $flags, N-Object() $cancellable, CArray[N-Error] $err --> N-Object )
=end code

=item $etag; an optional entity tag
  for the current B<Gnome::Gio::File>, or #NULL to ignore.
=item $make-backup; C<True> if a backup should be created.
=item $flags; a set of B<Gnome::Gio::T-ioenums>.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; a B<Gnome::Gio::FileIOStream> or undefined on error.
  Free the returned object with g_object_unref().. 

=begin comment

=head2 Example
# Example for replace-readwrite

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 replace-readwrite-async
This function is not yet available

Asynchronously overwrites the file in read-write mode,
replacing the contents, possibly creating a backup copy
of the file first.

For more details, see C<.replace-readwrite()> which is
the synchronous version of this call.

When the operation is finished, C<$callback> will be called.
You can then call C<.replace-readwrite-finish()> to get
the result of the operation.

=begin code
method replace-readwrite-async ( Str $etag, Bool() $make-backup, UInt $flags, Int() $io-priority, N-Object() $cancellable, &callback, gpointer $user-data )
=end code

=item $etag; an entity tag for the current B<Gnome::Gio::File>,
  or undefined to ignore.
=item $make-backup; C<True> if a backup should be created.
=item $flags; a set of B<Gnome::Gio::T-ioenums>.
=item $io-priority; the I/O priority of the request.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item &callback; a B<Gnome::Gio::T-iotypes> to call
  when the request is satisfied. Tthe function must be specified with following signature; C<:( N-Object $source-object, N-Object $res, gpointer $user-data )>.
=item $user-data; the data to pass to callback function.

=begin comment

=head2 Example
# Example for replace-readwrite-async

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 replace-readwrite-finish

Finishes an asynchronous file replace operation started with
C<.replace-readwrite-async()>.

=begin code
method replace-readwrite-finish ( N-Object() $res, CArray[N-Error] $err --> N-Object )
=end code

=item $res; a B<Gnome::Gio::R-AsyncResult>.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; a B<Gnome::Gio::FileIOStream>, or undefined on error.
  Free the returned object with g_object_unref().. 

=begin comment

=head2 Example
# Example for replace-readwrite-finish

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 resolve-relative-path

Resolves a relative path for C<$file> to an absolute path.

This call does no blocking I/O.

If the C<$relative-path> is an absolute path name, the resolution
is done absolutely (without taking C<$file> path as base).

=begin code
method resolve-relative-path ( Str $relative-path --> N-Object )
=end code

=item $relative-path; a given relative path string.

Return value; a B<Gnome::Gio::File> for the resolved path.. 

=begin comment

=head2 Example
# Example for resolve-relative-path

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-attribute
This function is not yet available

Sets an attribute in the file with attribute name C<$attribute> to C<$value-p>.

Some attributes can be unset by setting C<$type> to
C<G_FILE_ATTRIBUTE_TYPE_INVALID> and C<$value-p> to undefined.

If C<$cancellable> is defined, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error C<G_IO_ERROR_CANCELLED> will be returned.

=begin code
method set-attribute ( Str $attribute, GFileAttributeType  $type, gpointer $value-p, UInt $flags, N-Object() $cancellable, CArray[N-Error] $err --> Bool )
=end code

=item $attribute; a string containing the attribute's name.
=item $type; The type of the attribute.
=item $value-p; a pointer to the value (or the pointer
  itself if the type is a pointer type).
=item $flags; a set of B<Gnome::Gio::T-ioenums>.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; C<True> if the attribute was set, C<False> otherwise.. 

=begin comment

=head2 Example
# Example for set-attribute

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-attribute-byte-string
This function is not yet available

Sets C<$attribute> of type C<G_FILE_ATTRIBUTE_TYPE_BYTE_STRING> to C<$value>.
If C<$attribute> is of a different type, this operation will fail,
returning C<False>.

If C<$cancellable> is defined, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error C<G_IO_ERROR_CANCELLED> will be returned.

=begin code
method set-attribute-byte-string ( Str $attribute, Str $value, UInt $flags, N-Object() $cancellable, CArray[N-Error] $err --> Bool )
=end code

=item $attribute; a string containing the attribute's name.
=item $value; a string containing the attribute's new value.
=item $flags; a B<Gnome::Gio::T-ioenums>.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; C<True> if the C<$attribute> was successfully set to C<$value>
  in the C<$file>, C<False> otherwise.. 

=begin comment

=head2 Example
# Example for set-attribute-byte-string

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-attribute-int32
This function is not yet available

Sets C<$attribute> of type %G_FILE_ATTRIBUTE_TYPE_INT32 to C<$value>.
If C<$attribute> is of a different type, this operation will fail.

If C<$cancellable> is defined, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error C<G_IO_ERROR_CANCELLED> will be returned.

=begin code
method set-attribute-int32 ( Str $attribute, Int() $value, UInt $flags, N-Object() $cancellable, CArray[N-Error] $err --> Bool )
=end code

=item $attribute; a string containing the attribute's name.
=item $value; a #gint32 containing the attribute's new value.
=item $flags; a B<Gnome::Gio::T-ioenums>.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; C<True> if the C<$attribute> was successfully set to C<$value>
  in the C<$file>, C<False> otherwise.. 

=begin comment

=head2 Example
# Example for set-attribute-int32

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-attribute-int64
This function is not yet available

Sets C<$attribute> of type %G_FILE_ATTRIBUTE_TYPE_INT64 to C<$value>.
If C<$attribute> is of a different type, this operation will fail.

If C<$cancellable> is defined, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error C<G_IO_ERROR_CANCELLED> will be returned.

=begin code
method set-attribute-int64 ( Str $attribute, Int() $value, UInt $flags, N-Object() $cancellable, CArray[N-Error] $err --> Bool )
=end code

=item $attribute; a string containing the attribute's name.
=item $value; a #guint64 containing the attribute's new value.
=item $flags; a B<Gnome::Gio::T-ioenums>.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; C<True> if the C<$attribute> was successfully set, C<False> otherwise.. 

=begin comment

=head2 Example
# Example for set-attribute-int64

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-attribute-string
This function is not yet available

Sets C<$attribute> of type C<G_FILE_ATTRIBUTE_TYPE_STRING> to C<$value>.
If C<$attribute> is of a different type, this operation will fail.

If C<$cancellable> is defined, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error C<G_IO_ERROR_CANCELLED> will be returned.

=begin code
method set-attribute-string ( Str $attribute, Str $value, UInt $flags, N-Object() $cancellable, CArray[N-Error] $err --> Bool )
=end code

=item $attribute; a string containing the attribute's name.
=item $value; a string containing the attribute's value.
=item $flags; B<Gnome::Gio::T-ioenums>.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; C<True> if the C<$attribute> was successfully set, C<False> otherwise.. 

=begin comment

=head2 Example
# Example for set-attribute-string

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-attribute-uint32
This function is not yet available

Sets C<$attribute> of type %G_FILE_ATTRIBUTE_TYPE_UINT32 to C<$value>.
If C<$attribute> is of a different type, this operation will fail.

If C<$cancellable> is defined, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error C<G_IO_ERROR_CANCELLED> will be returned.

=begin code
method set-attribute-uint32 ( Str $attribute, UInt() $value, UInt $flags, N-Object() $cancellable, CArray[N-Error] $err --> Bool )
=end code

=item $attribute; a string containing the attribute's name.
=item $value; a #guint32 containing the attribute's new value.
=item $flags; a B<Gnome::Gio::T-ioenums>.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; C<True> if the C<$attribute> was successfully set to C<$value>
  in the C<$file>, C<False> otherwise.. 

=begin comment

=head2 Example
# Example for set-attribute-uint32

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-attribute-uint64
This function is not yet available

Sets C<$attribute> of type %G_FILE_ATTRIBUTE_TYPE_UINT64 to C<$value>.
If C<$attribute> is of a different type, this operation will fail.

If C<$cancellable> is defined, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error C<G_IO_ERROR_CANCELLED> will be returned.

=begin code
method set-attribute-uint64 ( Str $attribute, UInt() $value, UInt $flags, N-Object() $cancellable, CArray[N-Error] $err --> Bool )
=end code

=item $attribute; a string containing the attribute's name.
=item $value; a #guint64 containing the attribute's new value.
=item $flags; a B<Gnome::Gio::T-ioenums>.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; C<True> if the C<$attribute> was successfully set to C<$value>
  in the C<$file>, C<False> otherwise.. 

=begin comment

=head2 Example
# Example for set-attribute-uint64

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-attributes-async
This function is not yet available

Asynchronously sets the attributes of C<$file> with C<$info>.

For more details, see C<.set-attributes-from-info()>,
which is the synchronous version of this call.

When the operation is finished, C<$callback> will be called.
You can then call C<.set-attributes-finish()> to get
the result of the operation.

=begin code
method set-attributes-async ( N-Object() $info, UInt $flags, Int() $io-priority, N-Object() $cancellable, &callback, gpointer $user-data )
=end code

=item $info; a B<Gnome::Gio::FileInfo>.
=item $flags; a B<Gnome::Gio::T-ioenums>.
=item $io-priority; the I/O priority of the request.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item &callback; a B<Gnome::Gio::T-iotypes>. Tthe function must be specified with following signature; C<:( N-Object $source-object, N-Object $res, gpointer $user-data )>.
=item $user-data; a #gpointer.

=begin comment

=head2 Example
# Example for set-attributes-async

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-attributes-finish

Finishes setting an attribute started in C<.set-attributes-async()>.

=begin code
method set-attributes-finish ( N-Object() $result, N-Object() $info, CArray[N-Error] $err --> Bool )
=end code

=item $result; a B<Gnome::Gio::R-AsyncResult>.
=item $info; (transfer ownership: full) a B<Gnome::Gio::FileInfo>.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; C<True> if the attributes were set correctly, C<False> otherwise.. 

=begin comment

=head2 Example
# Example for set-attributes-finish

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-attributes-from-info
This function is not yet available

Tries to set all attributes in the B<Gnome::Gio::FileInfo> on the target
values, not stopping on the first error.

If there is any error during this operation then C<$error> will
be set to the first error. Error on particular fields are flagged
by setting the "status" field in the attribute value to
C<G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING>, which means you can
also detect further errors.

If C<$cancellable> is defined, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error C<G_IO_ERROR_CANCELLED> will be returned.

=begin code
method set-attributes-from-info ( N-Object() $info, UInt $flags, N-Object() $cancellable, CArray[N-Error] $err --> Bool )
=end code

=item $info; a B<Gnome::Gio::FileInfo>.
=item $flags; B<Gnome::Gio::T-ioenums>.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; C<False> if there was any error, C<True> otherwise.. 

=begin comment

=head2 Example
# Example for set-attributes-from-info

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-display-name

Renames C<$file> to the specified display name.

The display name is converted from UTF-8 to the correct encoding
for the target filesystem if possible and the C<$file> is renamed to this.

If you want to implement a rename operation in the user interface the
edit name (C<G_FILE_ATTRIBUTE_STANDARD_EDIT_NAME>) should be used as the
initial value in the rename widget, and then the result after editing
should be passed to C<.set-display-name()>.

On success the resulting converted filename is returned.

If C<$cancellable> is defined, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error C<G_IO_ERROR_CANCELLED> will be returned.

=begin code
method set-display-name ( Str $display-name, N-Object() $cancellable, CArray[N-Error] $err --> N-Object )
=end code

=item $display-name; a string.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; a B<Gnome::Gio::File> specifying what C<$file> was renamed to,
  or undefined if there was an error.
  Free the returned object with g_object_unref().. 

=begin comment

=head2 Example
# Example for set-display-name

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-display-name-async

Asynchronously sets the display name for a given B<Gnome::Gio::File>.

For more details, see C<.set-display-name()> which is
the synchronous version of this call.

When the operation is finished, C<$callback> will be called.
You can then call C<.set-display-name-finish()> to get
the result of the operation.

=begin code
method set-display-name-async ( Str $display-name, Int() $io-priority, N-Object() $cancellable, &callback, gpointer $user-data )
=end code

=item $display-name; a string.
=item $io-priority; the I/O priority of the request.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item &callback; a B<Gnome::Gio::T-iotypes> to call
  when the request is satisfied. Tthe function must be specified with following signature; C<:( N-Object $source-object, N-Object $res, gpointer $user-data )>.
=item $user-data; the data to pass to callback function.

=begin comment

=head2 Example
# Example for set-display-name-async

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-display-name-finish

Finishes setting a display name started with
C<.set-display-name-async()>.

=begin code
method set-display-name-finish ( N-Object() $res, CArray[N-Error] $err --> N-Object )
=end code

=item $res; a B<Gnome::Gio::R-AsyncResult>.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; a B<Gnome::Gio::File> or undefined on error.
  Free the returned object with g_object_unref().. 

=begin comment

=head2 Example
# Example for set-display-name-finish

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 start-mountable
This function is not yet available

Starts a file of type C<G_FILE_TYPE_MOUNTABLE>.
Using C<$start-operation>, you can request callbacks when, for instance,
passwords are needed during authentication.

If C<$cancellable> is defined, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error C<G_IO_ERROR_CANCELLED> will be returned.

When the operation is finished, C<$callback> will be called.
You can then call C<.mount-mountable-finish()> to get
the result of the operation.

=begin code
method start-mountable ( UInt $flags, N-Object() $start-operation, N-Object() $cancellable, &callback, gpointer $user-data )
=end code

=item $flags; flags affecting the operation.
=item $start-operation; a B<Gnome::Gio::MountOperation>, or undefined to avoid user interaction.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object, undefined to ignore.
=item &callback; a B<Gnome::Gio::T-iotypes> to call when the request is satisfied, or undefined. Tthe function must be specified with following signature; C<:( N-Object $source-object, N-Object $res, gpointer $user-data )>.
=item $user-data; the data to pass to callback function.

=begin comment

=head2 Example
# Example for start-mountable

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 start-mountable-finish

Finishes a start operation. See C<.start-mountable()> for details.

Finish an asynchronous start operation that was started
with C<.start-mountable()>.

=begin code
method start-mountable-finish ( N-Object() $result, CArray[N-Error] $err --> Bool )
=end code

=item $result; a B<Gnome::Gio::R-AsyncResult>.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; C<True> if the operation finished successfully. C<False>
otherwise.. 

=begin comment

=head2 Example
# Example for start-mountable-finish

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 stop-mountable
This function is not yet available

Stops a file of type C<G_FILE_TYPE_MOUNTABLE>.

If C<$cancellable> is defined, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error C<G_IO_ERROR_CANCELLED> will be returned.

When the operation is finished, C<$callback> will be called.
You can then call C<.stop-mountable-finish()> to get
the result of the operation.

=begin code
method stop-mountable ( UInt $flags, N-Object() $mount-operation, N-Object() $cancellable, &callback, gpointer $user-data )
=end code

=item $flags; flags affecting the operation.
=item $mount-operation; a B<Gnome::Gio::MountOperation>,
  or undefined to avoid user interaction..
=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item &callback; a B<Gnome::Gio::T-iotypes> to call
  when the request is satisfied, or undefined. Tthe function must be specified with following signature; C<:( N-Object $source-object, N-Object $res, gpointer $user-data )>.
=item $user-data; the data to pass to callback function.

=begin comment

=head2 Example
# Example for stop-mountable

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 stop-mountable-finish

Finishes a stop operation, see C<.stop-mountable()> for details.

Finish an asynchronous stop operation that was started
with C<.stop-mountable()>.

=begin code
method stop-mountable-finish ( N-Object() $result, CArray[N-Error] $err --> Bool )
=end code

=item $result; a B<Gnome::Gio::R-AsyncResult>.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; C<True> if the operation finished successfully.
  C<False> otherwise.. 

=begin comment

=head2 Example
# Example for stop-mountable-finish

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 supports-thread-contexts

Checks if C<$file> supports thread-default contexts.
If this returns C<False>, you cannot perform asynchronous operations on C<$file> in a thread that has a thread-default context.

=begin code
method supports-thread-contexts (--> Bool )
=end code

Return value; Whether or not C<$file> supports thread-default contexts.. 

=begin comment

=head2 Example
# Example for supports-thread-contexts

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 trash

Sends C<$file> to the "Trashcan", if possible. This is similar to
deleting it, but the user can recover it before emptying the trashcan.
Not all file systems support trashing, so this call can return the
C<G_IO_ERROR_NOT_SUPPORTED> error. Since GLib 2.66, the B<x-gvfs-notrash> unix
mount option can be used to disable C<.trash()> support for certain
mounts, the C<G_IO_ERROR_NOT_SUPPORTED> error will be returned in that case.

If C<$cancellable> is defined, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error C<G_IO_ERROR_CANCELLED> will be returned.

=begin code
method trash ( N-Object() $cancellable, CArray[N-Error] $err --> Bool )
=end code

=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; C<True> on successful trash, C<False> otherwise.. 

=begin comment

=head2 Example
# Example for trash

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 trash-async

Asynchronously sends C<$file> to the Trash location, if possible.

=begin code
method trash-async ( Int() $io-priority, N-Object() $cancellable, &callback, gpointer $user-data )
=end code

=item $io-priority; the I/O priority of the request.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item &callback; a B<Gnome::Gio::T-iotypes> to call
  when the request is satisfied. Tthe function must be specified with following signature; C<:( N-Object $source-object, N-Object $res, gpointer $user-data )>.
=item $user-data; the data to pass to callback function.

=begin comment

=head2 Example
# Example for trash-async

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 trash-finish

Finishes an asynchronous file trashing operation, started with
C<.trash-async()>.

=begin code
method trash-finish ( N-Object() $result, CArray[N-Error] $err --> Bool )
=end code

=item $result; a B<Gnome::Gio::R-AsyncResult>.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; C<True> on successful trash, C<False> otherwise.. 

=begin comment

=head2 Example
# Example for trash-finish

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 unmount-mountable-with-operation
This function is not yet available

Unmounts a file of type C<G_FILE_TYPE_MOUNTABLE>.

If C<$cancellable> is defined, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error C<G_IO_ERROR_CANCELLED> will be returned.

When the operation is finished, C<$callback> will be called.
You can then call C<.unmount-mountable-finish()> to get
the result of the operation.

=begin code
method unmount-mountable-with-operation ( UInt $flags, N-Object() $mount-operation, N-Object() $cancellable, &callback, gpointer $user-data )
=end code

=item $flags; flags affecting the operation.
=item $mount-operation; a B<Gnome::Gio::MountOperation>,
  or undefined to avoid user interaction.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object,
  undefined to ignore.
=item &callback; a B<Gnome::Gio::T-iotypes> to call
  when the request is satisfied, or undefined. Tthe function must be specified with following signature; C<:( N-Object $source-object, N-Object $res, gpointer $user-data )>.
=item $user-data; the data to pass to callback function.

=begin comment

=head2 Example
# Example for unmount-mountable-with-operation

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 unmount-mountable-with-operation-finish

Finishes an unmount operation,
see C<.unmount-mountable-with-operation()> for details.

Finish an asynchronous unmount operation that was started
with C<.unmount-mountable-with-operation()>.

=begin code
method unmount-mountable-with-operation-finish ( N-Object() $result, CArray[N-Error] $err --> Bool )
=end code

=item $result; a B<Gnome::Gio::R-AsyncResult>.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; C<True> if the operation finished successfully.
  C<False> otherwise.. 

=begin comment

=head2 Example
# Example for unmount-mountable-with-operation-finish

=end comment

=end pod

