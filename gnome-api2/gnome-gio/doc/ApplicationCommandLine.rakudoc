=comment Package: Gio, C-Source: applicationcommandline
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Gnome::Gio::ApplicationCommandLine

=head1 Description

B<Gnome::Gio::ApplicationCommandLine> represents a command-line invocation of
an application.  It is created by B<Gnome::Gio::Application> and emitted
in the  I<command-line defined in Gnome::Gio::ApplicationCommandLine> signal and virtual function.

The class contains the list of arguments that the program was invoked
with.  It is also possible to query if the commandline invocation was
local (ie: the current process is running in direct response to the
invocation) or remote (ie: some other process forwarded the
commandline to this process).

The GApplicationCommandLine object can provide the C<$argc> and C<$argv>
parameters for use with the B<GOptionContext> command-line parsing API,
with the C<.get-arguments()> function. See gapplication-example-cmdline3.c
for an example.

The exit status of the originally-invoked process may be set and
messages can be printed to stdout or stderr of that process.  The
lifecycle of the originally-invoked process is tied to the lifecycle
of this object (ie: the process exits when the last reference is
dropped).

The main use for B<Gnome::Gio::ApplicationCommandLine> (and the
 I<command-line defined in Gnome::Gio::ApplicationCommandLine> signal) is 'Emacs server' like use cases:
You can set the B<EDITOR> environment variable to have e.g. git use
your favourite editor to edit commit messages, and if you already
have an instance of the editor running, the editing will happen
in the running instance, instead of opening a new one. An important
aspect of this use case is that the process that gets started by git
does not return until the editing is done.

Normally, the commandline is completely handled in the
 I<command-line defined in Gnome::Gio::ApplicationCommandLine> handler. The launching instance exits
once the signal handler in the primary instance has returned, and
the return value of the signal handler becomes the exit status
of the launching instance.
=begin comment
<!-- language="C" -->
static int
command_line (GApplication            *application,
              GApplicationCommandLine *cmdline)
{
  gchar **argv;
  gint argc;
  gint i;

  argv = g_application_command_line_get_arguments (cmdline, &argc);

  g_application_command_line_print (cmdline,
                                    "This text is written back\n"
                                    "to stdout of the caller\n");

  for (i = 0; i < argc; i++)
    g_print ("argument %d: %s\n", i, argv[i]);

  g_strfreev (argv);

  return 0;
}

=end comment

The complete example can be found here:
[gapplication-example-cmdline.c](https://gitlab.gnome.org/GNOME/glib/-/blob/HEAD/gio/tests/gapplication-example-cmdline.c)

In more complicated cases, the handling of the commandline can be
split between the launcher and the primary instance.
=begin comment
<!-- language="C" -->
static gboolean
 test_local_cmdline (GApplication   *application,
                     gchar        ***arguments,
                     gint           *exit_status)
{
  gint i, j;
  gchar **argv;

  argv = *arguments;

  if (argv[0] == NULL)
    {
      *exit_status = 0;
      return FALSE;
    }

  i = 1;
  while (argv[i])
    {
      if (g_str_has_prefix (argv[i], "--local-"))
        {
          g_print ("handling argument %s locally\n", argv[i]);
          g_free (argv[i]);
          for (j = i; argv[j]; j++)
            argv[j] = argv[j + 1];
        }
      else
        {
          g_print ("not handling argument %s locally\n", argv[i]);
          i++;
        }
    }

  *exit_status = 0;

  return FALSE;
}

static void
test_application_class_init (TestApplicationClass *class)
{
  G_APPLICATION_CLASS (class)->local_command_line = test_local_cmdline;

  ...
}

=end comment

In this example of split commandline handling, options that start
with B<--local-> are handled locally, all other options are passed
to the  I<command-line defined in Gnome::Gio::ApplicationCommandLine> handler which runs in the primary
instance.

The complete example can be found here:
[gapplication-example-cmdline2.c](https://gitlab.gnome.org/GNOME/glib/-/blob/HEAD/gio/tests/gapplication-example-cmdline2.c)

If handling the commandline requires a lot of work, it may
be better to defer it.
=begin comment
<!-- language="C" -->
static gboolean
my_cmdline_handler (gpointer data)
{
  GApplicationCommandLine *cmdline = data;

  // do the heavy lifting in an idle

  g_application_command_line_set_exit_status (cmdline, 0);
  g_object_unref (cmdline); // this releases the application

  return G_SOURCE_REMOVE;
}

static int
command_line (GApplication            *application,
              GApplicationCommandLine *cmdline)
{
  // keep the application running until we are done with this commandline
  g_application_hold (application);

  g_object_set_data_full (G_OBJECT (cmdline),
                          "application", application,
                          (GDestroyNotify)g_application_release);

  g_object_ref (cmdline);
  g_idle_add (my_cmdline_handler, cmdline);

  return 0;
}

=end comment

In this example the commandline is not completely handled before
the  I<command-line defined in Gnome::Gio::ApplicationCommandLine> handler returns. Instead, we keep
a reference to the B<Gnome::Gio::ApplicationCommandLine> object and handle it
later (in this example, in an idle). Note that it is necessary to
hold the application until you are done with the commandline.

The complete example can be found here:
[gapplication-example-cmdline3.c](https://gitlab.gnome.org/GNOME/glib/-/blob/HEAD/gio/tests/gapplication-example-cmdline3.c)

=begin comment

=head2 Uml Diagram
![](plantuml/â€¦.svg)

=end comment

=begin comment

=head2 Example
# Example use of module Gnome::Gio::ApplicationCommandLine

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

=head2 new

=head3 :native-object

Create an object using a native object from elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object :$native-object! )

=end pod

#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 create-file-for-arg

Creates a B<Gnome::Gio::File> corresponding to a filename that was given as part
of the invocation of C<$cmdline>.

This differs from g_file_new_for_commandline_arg() in that it
resolves relative pathnames using the current working directory of
the invoking process rather than the local process.

=begin code
method create-file-for-arg ( Str $arg --> N-Object )
=end code

=item $arg; an argument from C<$cmdline>.

Return value; a new B<Gnome::Gio::File>. 

=begin comment

=head2 Example
# Example for create-file-for-arg

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-arguments

Gets the list of arguments that was passed on the command line.

The strings in the array may contain non-UTF-8 data on UNIX (such as
filenames or arguments given in the system locale) but are always in
UTF-8 on Windows.

If you wish to use the return value with B<GOptionContext>, you must
use g_option_context_parse_strv().

The return value is undefined-terminated and should be freed using
g_strfreev().

=begin code
method get-arguments ( Array[Int] $argc --> Array[Str] )
=end code

=item $argc; (transfer ownership: full) the length of the arguments array, or undefined.

Return value; 
     the string array containing the arguments (the argv). 

=begin comment

=head2 Example
# Example for get-arguments

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-cwd

Gets the working directory of the command line invocation.
The string may contain non-utf8 data.

It is possible that the remote application did not send a working
directory, so this may be undefined.

The return value should not be modified or freed and is valid for as
long as C<$cmdline> exists.

=begin code
method get-cwd (--> Str )
=end code

Return value; the current directory, or undefined. 

=begin comment

=head2 Example
# Example for get-cwd

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-environ

Gets the contents of the 'environ' variable of the command line
invocation, as would be returned by g_get_environ(), ie as a
undefined-terminated list of strings in the form 'NAME=VALUE'.
The strings may contain non-utf8 data.

The remote application usually does not send an environment.  Use
C<G_APPLICATION_SEND_ENVIRONMENT> to affect that.  Even with this flag
set it is possible that the environment is still not available (due
to invocation messages from other applications).

The return value should not be modified or freed and is valid for as
long as C<$cmdline> exists.

See C<.getenv()> if you are only interested
in the value of a single environment variable.

=begin code
method get-environ (--> Array[Str] )
=end code

Return value; 
    the environment strings, or undefined if they were not sent. 

=begin comment

=head2 Example
# Example for get-environ

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-exit-status

Gets the exit status of C<$cmdline>.  See
C<.set-exit-status()> for more information.

=begin code
method get-exit-status (--> Int )
=end code

Return value; the exit status. 

=begin comment

=head2 Example
# Example for get-exit-status

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-is-remote

Determines if C<$cmdline> represents a remote invocation.

=begin code
method get-is-remote (--> Bool )
=end code

Return value; C<True> if the invocation was remote. 

=begin comment

=head2 Example
# Example for get-is-remote

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-options-dict

Gets the options there were passed to g_application_command_line().

If you did not override local_command_line() then these are the same
options that were parsed according to the B<GOptionEntrys> added to the
application with g_application_add_main_option_entries() and possibly
modified from your GApplication::handle-local-options handler.

If no options were sent then an empty dictionary is returned so that
you don't need to check for undefined.

=begin code
method get-options-dict (--> CArray[N-VariantDict] )
=end code

Return value; a B<Gnome::Glib::N-VariantDict> with the options. 

=begin comment

=head2 Example
# Example for get-options-dict

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-platform-data

Gets the platform data associated with the invocation of C<$cmdline>.

This is a B<Gnome::Glib::N-Variant> dictionary containing information about the
context in which the invocation occurred.  It typically contains
information like the current working directory and the startup
notification ID.

For local invocation, it will be undefined.

=begin code
method get-platform-data (--> CArray[N-Variant] )
=end code

Return value; the platform data, or undefined. 

=begin comment

=head2 Example
# Example for get-platform-data

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-stdin

Gets the stdin of the invoking process.

The B<Gnome::Gio::InputStream> can be used to read data passed to the standard
input of the invoking process.
This doesn't work on all platforms.  Presently, it is only available
on UNIX when using a D-Bus daemon capable of passing file descriptors.
If stdin is not available then undefined will be returned.  In the
future, support may be expanded to other platforms.

You must only call this function once per commandline invocation.

=begin code
method get-stdin (--> N-Object )
=end code

Return value; a B<Gnome::Gio::InputStream> for stdin. 

=begin comment

=head2 Example
# Example for get-stdin

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 getenv

Gets the value of a particular environment variable of the command
line invocation, as would be returned by g_getenv().  The strings may
contain non-utf8 data.

The remote application usually does not send an environment.  Use
C<G_APPLICATION_SEND_ENVIRONMENT> to affect that.  Even with this flag
set it is possible that the environment is still not available (due
to invocation messages from other applications).

The return value should not be modified or freed and is valid for as
long as C<$cmdline> exists.

=begin code
method getenv ( Str $name --> Str )
=end code

=item $name; the environment variable to get.

Return value; the value of the variable, or undefined if unset or unsent. 

=begin comment

=head2 Example
# Example for getenv

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 print
This function is not yet available

Formats a message and prints it using the stdout print handler in the
invoking process.

If C<$cmdline> is a local invocation then this is exactly equivalent to
g_print().  If C<$cmdline> is remote then this is equivalent to calling
g_print() in the invoking process.

=begin code
method print ( Str $format, â€¦ )
=end code

=item $format; a printf-style format string.
=item â€¦; â€¦. Note that each argument must be specified as a type followed by its value!

=begin comment

=head2 Example
# Example for print

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 printerr
This function is not yet available

Formats a message and prints it using the stderr print handler in the
invoking process.

If C<$cmdline> is a local invocation then this is exactly equivalent to
g_printerr().  If C<$cmdline> is remote then this is equivalent to
calling g_printerr() in the invoking process.

=begin code
method printerr ( Str $format, â€¦ )
=end code

=item $format; a printf-style format string.
=item â€¦; â€¦. Note that each argument must be specified as a type followed by its value!

=begin comment

=head2 Example
# Example for printerr

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-exit-status

Sets the exit status that will be used when the invoking process
exits.

The return value of the  I<command-line defined in Gnome::Gio::ApplicationCommandLine> signal is
passed to this function when the handler returns.  This is the usual
way of setting the exit status.

In the event that you want the remote invocation to continue running
and want to decide on the exit status in the future, you can use this
call.  For the case of a remote invocation, the remote process will
typically exit when the last reference is dropped on C<$cmdline>.  The
exit status of the remote process will be equal to the last value
that was set with this function.

In the case that the commandline invocation is local, the situation
is slightly more complicated.  If the commandline invocation results
in the mainloop running (ie: because the use-count of the application
increased to a non-zero value) then the application is considered to
have been 'successful' in a certain sense, and the exit status is
always zero.  If the application use count is zero, though, the exit
status of the local B<Gnome::Gio::ApplicationCommandLine> is used.

=begin code
method set-exit-status ( Int() $exit-status )
=end code

=item $exit-status; the exit status.

=begin comment

=head2 Example
# Example for set-exit-status

=end comment

=end pod

