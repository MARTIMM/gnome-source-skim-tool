=comment Package: Glib, C-Source: varianttype
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Gnome::Glib::N-VariantType

=head1 Description

This section introduces the GVariant type system. It is based, in
large part, on the D-Bus type system, with two major changes and
some minor lifting of restrictions. The
[D-Bus specification](http://dbus.freedesktop.org/doc/dbus-specification.html),
therefore, provides a significant amount of
information that is useful when working with GVariant.

The first major change with respect to the D-Bus type system is the
introduction of maybe (or "nullable") types.  Any type in GVariant can be
converted to a maybe type, in which case, "nothing" (or "null") becomes a
valid value.  Maybe types have been added by introducing the
character "m" to type strings.

The second major change is that the GVariant type system supports the
concept of "indefinite types" -- types that are less specific than
the normal types found in D-Bus.  For example, it is possible to speak
of "an array of any type" in GVariant, where the D-Bus type system
would require you to speak of "an array of integers" or "an array of
strings".  Indefinite types have been added by introducing the
characters "*", "?" and "r" to type strings.

Finally, all arbitrary restrictions relating to the complexity of
types are lifted along with the restriction that dictionary entries
may only appear nested inside of arrays.

Just as in D-Bus, GVariant types are described with strings ("type
strings").  Subject to the differences mentioned above, these strings
are of the same form as those found in D-Bus.  Note, however: D-Bus
always works in terms of messages and therefore individual type
strings appear nowhere in its interface.  Instead, "signatures"
are a concatenation of the strings of the type of each argument in a
message.  GVariant deals with single values directly so GVariant type
strings always describe the type of exactly one value.  This means
that a D-Bus signature string is generally not a valid GVariant type
string -- except in the case that it is the signature of a message
containing exactly one argument.

An indefinite type is similar in spirit to what may be called an
abstract type in other type systems.  No value can exist that has an
indefinite type as its type, but values can exist that have types
that are subtypes of indefinite types.  That is to say,
g_variant_get_type() will never return an indefinite type, but
calling g_variant_is_of_type() with an indefinite type may return
C<True>.  For example, you cannot have a value that represents "an
array of no particular type", but you can have an "array of integers"
which certainly matches the type of "an array of no particular type",
since "array of integers" is a subtype of "array of no particular
type".

This is similar to how instances of abstract classes may not
directly exist in other type systems, but instances of their
non-abstract subtypes may.  For example, in GTK, no object that has
the type of B<GtkBin> can exist (since B<GtkBin> is an abstract class),
but a B<GtkWindow> can certainly be instantiated, and you would say
that the B<GtkWindow> is a B<GtkBin> (since B<GtkWindow> is a subclass of
B<GtkBin>).

=head3 GVariant Type Strings

A GVariant type string can be any of the following:

=item any basic type string (listed below)

=item "v", "r" or "*"

=item one of the characters 'a' or 'm', followed by another type string

=item the character '(', followed by a concatenation of zero or more other
  type strings, followed by the character ')'

=item the character '{', followed by a basic type string (see below),
  followed by another type string, followed by the character '}'

A basic type string describes a basic type (as per
C<.is-basic()>) and is always a single character in length.
The valid basic type strings are "b", "y", "n", "q", "i", "u", "x", "t",
"h", "d", "s", "o", "g" and "?".

The above definition is recursive to arbitrary depth. "aaaaai" and
"(ui(nq((y)))s)" are both valid type strings, as is
"a(aa(ui)(qna{ya(yd)}))". In order to not hit memory limits, B<Gnome::Glib::N-Variant>
imposes a limit on recursion depth of 65 nested containers. This is the
limit in the D-Bus specification (64) plus one to allow a B<GDBusMessage> to
be nested in a top-level tuple.

The meaning of each of the characters is as follows:
=item B<b>: the type string of C<G_VARIANT_TYPE_BOOLEAN>; a boolean value.
=item B<y>: the type string of C<G_VARIANT_TYPE_BYTE>; a byte.
=item B<n>: the type string of %G_VARIANT_TYPE_INT16; a signed 16 bit integer.
=item B<q>: the type string of %G_VARIANT_TYPE_UINT16; an unsigned 16 bit integer.
=item B<i>: the type string of %G_VARIANT_TYPE_INT32; a signed 32 bit integer.
=item B<u>: the type string of %G_VARIANT_TYPE_UINT32; an unsigned 32 bit integer.
=item B<x>: the type string of %G_VARIANT_TYPE_INT64; a signed 64 bit integer.
=item B<t>: the type string of %G_VARIANT_TYPE_UINT64; an unsigned 64 bit integer.
=item B<h>: the type string of C<G_VARIANT_TYPE_HANDLE>; a signed 32 bit value
  that, by convention, is used as an index into an array of file
  descriptors that are sent alongside a D-Bus message.
=item B<d>: the type string of C<G_VARIANT_TYPE_DOUBLE>; a double precision
  floating point value.
=item B<s>: the type string of C<G_VARIANT_TYPE_STRING>; a string.
=item B<o>: the type string of C<G_VARIANT_TYPE_OBJECT_PATH>; a string in the form
  of a D-Bus object path.
=item B<g>: the type string of C<G_VARIANT_TYPE_SIGNATURE>; a string in the form of
  a D-Bus type signature.
=item B<?>: the type string of C<G_VARIANT_TYPE_BASIC>; an indefinite type that
  is a supertype of any of the basic types.
=item B<v>: the type string of C<G_VARIANT_TYPE_VARIANT>; a container type that
  contain any other type of value.
=item B<a>: used as a prefix on another type string to mean an array of that
  type; the type string "ai", for example, is the type of an array of
  signed 32-bit integers.
=item B<m>: used as a prefix on another type string to mean a "maybe", or
  "nullable", version of that type; the type string "ms", for example,
  is the type of a value that maybe contains a string, or maybe contains
  nothing.
=item B<()>: used to enclose zero or more other concatenated type strings to
  create a tuple type; the type string "(is)", for example, is the type of
  a pair of an integer and a string.
=item B<r>: the type string of C<G_VARIANT_TYPE_TUPLE>; an indefinite type that is
  a supertype of any tuple type, regardless of the number of items.
=item B<{}>: used to enclose a basic type string concatenated with another type
  string to create a dictionary entry type, which usually appears inside of
  an array to form a dictionary; the type string "a{sd}", for example, is
  the type of a dictionary that maps strings to double precision floating
  point values.

  The first type (the basic type) is the key type and the second type is
  the value type. The reason that the first type is restricted to being a
  basic type is so that it can easily be hashed.
=item B<*>: the type string of C<G_VARIANT_TYPE_ANY>; the indefinite type that is
  a supertype of all types.  Note that, as with all type strings, this
  character represents exactly one type. It cannot be used inside of tuples
  to mean "any number of items".

Any type string of a container that contains an indefinite type is,
itself, an indefinite type. For example, the type string "a*"
(corresponding to C<G_VARIANT_TYPE_ARRAY>) is an indefinite type
that is a supertype of every array type. "(*s)" is a supertype
of all tuples that contain exactly two items where the second
item is a string.

"a{?*}" is an indefinite type that is a supertype of all arrays
containing dictionary entries where the key is any basic type and
the value is any type at all.  This is, by definition, a dictionary,
so this type string corresponds to C<G_VARIANT_TYPE_DICTIONARY>. Note
that, due to the restriction that the key of a dictionary entry must
be a basic type, "{**}" is not a valid type string.

=begin comment

=head2 Example
# Example use of module Gnome::Glib::VariantType

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

=head2 new

=head3 :native-object

Create an object using a native object from an object of the same type found elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object() :$native-object! )

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-varianttype

Creates a new B<Gnome::Glib::N-VariantType> corresponding to the type string given
by C<$type-string>.  It is appropriate to call C<.free()> on
the return value.

It is a programmer error to call this function with an invalid type
string.  Use C<.string-is-valid()> if you are unsure.

=begin code
method new-varianttype ( Str $type-string --> Gnome::Glib::VariantType \)
=end code

=item $type-string; a valid GVariant type string.

=begin comment

=head2 Example
# Example for new-varianttype

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-array

Constructs the type corresponding to an array of elements of the
type C<$type>.

It is appropriate to call C<.free()> on the return value.

=begin code
method new-array ( N-Object $element --> Gnome::Glib::VariantType \)
=end code

=item $element; a B<Gnome::Glib::N-VariantType>

=begin comment

=head2 Example
# Example for new-array

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-dict-entry

Constructs the type corresponding to a dictionary entry with a key
of type C<$key> and a value of type C<$value>.

It is appropriate to call C<.free()> on the return value.

=begin code
method new-dict-entry ( N-Object $key, N-Object $value --> Gnome::Glib::VariantType \)
=end code

=item $key; a basic B<Gnome::Glib::N-VariantType>
=item $value; a B<Gnome::Glib::N-VariantType>

=begin comment

=head2 Example
# Example for new-dict-entry

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-maybe

Constructs the type corresponding to a maybe instance containing
type C<$type> or Nothing.

It is appropriate to call C<.free()> on the return value.

=begin code
method new-maybe ( N-Object $element --> Gnome::Glib::VariantType \)
=end code

=item $element; a B<Gnome::Glib::N-VariantType>

=begin comment

=head2 Example
# Example for new-maybe

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-tuple

Constructs a new tuple type, from C<$items>.
 C<$length> is the number of items in C<$items>, or -1 to indicate that C<$items> is undefined-terminated.

It is appropriate to call C<.free()> on the return value.

=begin code
method new-tuple ( N-Object $items, Int() $length --> Gnome::Glib::VariantType \)
=end code

=item $items; an array of B<GVariantTypes>, one for each item
=item $length; the length of C<$items>, or -1.

=begin comment

=head2 Example
# Example for new-tuple

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 copy

Makes a copy of a B<Gnome::Glib::N-VariantType>.  It is appropriate to call
C<.free()> on the return value.  C<$type> may not be undefined.

=begin code
method copy (--> N-Object )
=end code

Return value; a new B<Gnome::Glib::N-VariantType>

Since 2.24. 

=begin comment

=head2 Example
# Example for copy

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 dup-string

Returns a newly-allocated copy of the type string corresponding to C<$type>.  The returned string is nul-terminated.  It is appropriate to
call g_free() on the return value.

=begin code
method dup-string (--> Str )
=end code

Return value; the corresponding type string

Since 2.24. 

=begin comment

=head2 Example
# Example for dup-string

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 element

Determines the element type of an array or maybe type.

This function may only be used with array or maybe types.

=begin code
method element (--> N-Object )
=end code

Return value; the element type of C<$type>

Since 2.24. 

=begin comment

=head2 Example
# Example for element

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 equal

Compares C<$type1> and C<$type2> for equality.

Only returns C<True> if the types are exactly equal.  Even if one type
is an indefinite type and the other is a subtype of it, C<False> will
be returned if they are not exactly equal.  If you want to check for
subtypes, use C<.is-subtype-of()>.

The argument types of C<$type1> and C<$type2> are only #gconstpointer to
allow use with B<Gnome::Glib::N-HashTable> without function pointer casting.  For
both arguments, a valid B<Gnome::Glib::N-VariantType> must be provided.

=begin code
method equal ( gpointer $type2 --> Bool )
=end code

=item $type2; a B<Gnome::Glib::N-VariantType>.

Return value; C<True> if C<$type1> and C<$type2> are exactly equal

Since 2.24. 

=begin comment

=head2 Example
# Example for equal

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 first

Determines the first item type of a tuple or dictionary entry
type.

This function may only be used with tuple or dictionary entry types,
but must not be used with the generic tuple type
C<G_VARIANT_TYPE_TUPLE>.

In the case of a dictionary entry type, this returns the type of
the key.

undefined is returned in case of C<$type> being C<G_VARIANT_TYPE_UNIT>.

This call, together with C<.next()> provides an iterator
interface over tuple and dictionary entry types.

=begin code
method first (--> N-Object )
=end code

Return value; the first item type of C<$type>, or undefined

Since 2.24. 

=begin comment

=head2 Example
# Example for first

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 free

Frees a B<Gnome::Glib::N-VariantType> that was allocated with
C<.copy()>, C<.new-varianttype()> or one of the container
type constructor functions.

In the case that C<$type> is undefined, this function does nothing.

Since 2.24

=begin code
method free ( )
=end code

=begin comment

=head2 Example
# Example for free

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-string-length

Returns the length of the type string corresponding to the given C<$type>.  This function must be used to determine the valid extent of
the memory region returned by C<.peek-string()>.

=begin code
method get-string-length (--> Int )
=end code

Return value; the length of the corresponding type string

Since 2.24. 

=begin comment

=head2 Example
# Example for get-string-length

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 hash

Hashes C<$type>.

The argument type of C<$type> is only #gconstpointer to allow use with
B<Gnome::Glib::N-HashTable> without function pointer casting.  A valid
B<Gnome::Glib::N-VariantType> must be provided.

=begin code
method hash (--> UInt )
=end code

Return value; the hash value

Since 2.24. 

=begin comment

=head2 Example
# Example for hash

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 is-array

Determines if the given C<$type> is an array type.  This is true if the
type string for C<$type> starts with an 'a'.

This function returns C<True> for any indefinite type for which every
definite subtype is an array type -- C<G_VARIANT_TYPE_ARRAY>, for
example.

=begin code
method is-array (--> Bool )
=end code

Return value; C<True> if C<$type> is an array type

Since 2.24. 

=begin comment

=head2 Example
# Example for is-array

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 is-basic

Determines if the given C<$type> is a basic type.

Basic types are booleans, bytes, integers, doubles, strings, object
paths and signatures.

Only a basic type may be used as the key of a dictionary entry.

This function returns C<False> for all indefinite types except
C<G_VARIANT_TYPE_BASIC>.

=begin code
method is-basic (--> Bool )
=end code

Return value; C<True> if C<$type> is a basic type

Since 2.24. 

=begin comment

=head2 Example
# Example for is-basic

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 is-container

Determines if the given C<$type> is a container type.

Container types are any array, maybe, tuple, or dictionary
entry types plus the variant type.

This function returns C<True> for any indefinite type for which every
definite subtype is a container -- C<G_VARIANT_TYPE_ARRAY>, for
example.

=begin code
method is-container (--> Bool )
=end code

Return value; C<True> if C<$type> is a container type

Since 2.24. 

=begin comment

=head2 Example
# Example for is-container

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 is-definite

Determines if the given C<$type> is definite (ie: not indefinite).

A type is definite if its type string does not contain any indefinite
type characters ('*', '?', or 'r').

A B<Gnome::Glib::N-Variant> instance may not have an indefinite type, so calling
this function on the result of g_variant_get_type() will always
result in C<True> being returned.  Calling this function on an
indefinite type like C<G_VARIANT_TYPE_ARRAY>, however, will result in
C<False> being returned.

=begin code
method is-definite (--> Bool )
=end code

Return value; C<True> if C<$type> is definite

Since 2.24. 

=begin comment

=head2 Example
# Example for is-definite

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 is-dict-entry

Determines if the given C<$type> is a dictionary entry type.  This is
true if the type string for C<$type> starts with a '{'.

This function returns C<True> for any indefinite type for which every
definite subtype is a dictionary entry type --
C<G_VARIANT_TYPE_DICT_ENTRY>, for example.

=begin code
method is-dict-entry (--> Bool )
=end code

Return value; C<True> if C<$type> is a dictionary entry type

Since 2.24. 

=begin comment

=head2 Example
# Example for is-dict-entry

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 is-maybe

Determines if the given C<$type> is a maybe type.  This is true if the
type string for C<$type> starts with an 'm'.

This function returns C<True> for any indefinite type for which every
definite subtype is a maybe type -- C<G_VARIANT_TYPE_MAYBE>, for
example.

=begin code
method is-maybe (--> Bool )
=end code

Return value; C<True> if C<$type> is a maybe type

Since 2.24. 

=begin comment

=head2 Example
# Example for is-maybe

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 is-subtype-of

Checks if C<$type> is a subtype of C<$supertype>.

This function returns C<True> if C<$type> is a subtype of C<$supertype>.  All
types are considered to be subtypes of themselves.  Aside from that,
only indefinite types can have subtypes.

=begin code
method is-subtype-of ( N-Object $supertype --> Bool )
=end code

=item $supertype; a B<Gnome::Glib::N-VariantType>

Return value; C<True> if C<$type> is a subtype of C<$supertype>

Since 2.24. 

=begin comment

=head2 Example
# Example for is-subtype-of

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 is-tuple

Determines if the given C<$type> is a tuple type.  This is true if the
type string for C<$type> starts with a '(' or if C<$type> is
C<G_VARIANT_TYPE_TUPLE>.

This function returns C<True> for any indefinite type for which every
definite subtype is a tuple type -- C<G_VARIANT_TYPE_TUPLE>, for
example.

=begin code
method is-tuple (--> Bool )
=end code

Return value; C<True> if C<$type> is a tuple type

Since 2.24. 

=begin comment

=head2 Example
# Example for is-tuple

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 is-variant

Determines if the given C<$type> is the variant type.

=begin code
method is-variant (--> Bool )
=end code

Return value; C<True> if C<$type> is the variant type

Since 2.24. 

=begin comment

=head2 Example
# Example for is-variant

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 key

Determines the key type of a dictionary entry type.

This function may only be used with a dictionary entry type.  Other
than the additional restriction, this call is equivalent to
C<.first()>.

=begin code
method key (--> N-Object )
=end code

Return value; the key type of the dictionary entry

Since 2.24. 

=begin comment

=head2 Example
# Example for key

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 n-items

Determines the number of items contained in a tuple or
dictionary entry type.

This function may only be used with tuple or dictionary entry types,
but must not be used with the generic tuple type
C<G_VARIANT_TYPE_TUPLE>.

In the case of a dictionary entry type, this function will always
return 2.

=begin code
method n-items (--> Int )
=end code

Return value; the number of items in C<$type>

Since 2.24. 

=begin comment

=head2 Example
# Example for n-items

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 next

Determines the next item type of a tuple or dictionary entry
type.
 C<$type> must be the result of a previous call to
C<.first()> or C<.next()>.

If called on the key type of a dictionary entry then this call
returns the value type.  If called on the value type of a dictionary
entry then this call returns undefined.

For tuples, undefined is returned when C<$type> is the last item in a tuple.

=begin code
method next (--> N-Object )
=end code

Return value; the next B<Gnome::Glib::N-VariantType> after C<$type>, or undefined

Since 2.24. 

=begin comment

=head2 Example
# Example for next

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 peek-string

Returns the type string corresponding to the given C<$type>.  The
result is not nul-terminated; in order to determine its length you
must call C<.get-string-length()>.

To get a nul-terminated string, see C<.dup-string()>.

=begin code
method peek-string (--> Str )
=end code

Return value; the corresponding type string (not nul-terminated)

Since 2.24. 

=begin comment

=head2 Example
# Example for peek-string

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 value

Determines the value type of a dictionary entry type.

This function may only be used with a dictionary entry type.

=begin code
method value (--> N-Object )
=end code

Return value; the value type of the dictionary entry

Since 2.24. 

=begin comment

=head2 Example
# Example for value

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Functions]------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Functions
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 string-is-valid

Checks if C<$type-string> is a valid GVariant type string.  This call is
equivalent to calling C<.string-scan()> and confirming
that the following character is a nul terminator.

=begin code
method string-is-valid ( Str $type-string --> Bool )
=end code

=item $type-string; a pointer to any string.

Return value; C<True> if C<$type-string> is exactly one valid type string

Since 2.24. 

=begin comment

=head2 Example
# Example for string-is-valid

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 string-scan

Scan for a single complete and valid GVariant type string in C<$string>.
The memory pointed to by C<$limit> (or bytes beyond it) is never
accessed.

If a valid type string is found, C<$endptr> is updated to point to the
first character past the end of the string that was found and C<True>
is returned.

If there is no valid type string starting at C<$string>, or if the type
string does not end before C<$limit> then C<False> is returned.

For the simple case of checking if a string is a valid type string,
see C<.string-is-valid()>.

=begin code
method string-scan ( Str $string, Str $limit, Array[Str] $endptr --> Bool )
=end code

=item $string; a pointer to any string.
=item $limit; the end of C<$string>, or undefined.
=item $endptr; (transfer ownership: full) location to store the end pointer, or undefined.

Return value; C<True> if a valid type string was found. 

=begin comment

=head2 Example
# Example for string-scan

=end comment

=end pod

