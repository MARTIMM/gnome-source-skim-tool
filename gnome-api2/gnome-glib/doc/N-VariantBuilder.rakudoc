=comment Package: Glib, C-Source: variant
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Gnome::Glib::N-VariantBuilder

=head1 Description

A utility type for constructing container-type B<Gnome::Glib::N-Variant> instances.

This is an opaque structure and may only be accessed using the
following functions.

B<Gnome::Glib::N-VariantBuilder> is not threadsafe in any way.  Do not attempt to
access it from more than one thread.

=begin comment

=head2 Example
# Example use of module Gnome::Glib::VariantBuilder

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

=head2 new

=head3 :native-object

Create an object using a native object from elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object :$native-object! )

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-variantbuilder

Allocates and initialises a new B<Gnome::Glib::N-VariantBuilder>.

You should call C<.unref()> on the return value when it
is no longer needed.  The memory will not be automatically freed by
any other call.

In most cases it is easier to place a B<Gnome::Glib::N-VariantBuilder> directly on
the stack of the calling function and initialise it with
C<.init()>.

=begin code
method new-variantbuilder ( N-Object $type --> Gnome::Glib::VariantBuilder \)
=end code

=item $type; a container type

=begin comment

=head2 Example
# Example for new-variantbuilder

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 add
This function is not yet available

Adds to a B<Gnome::Glib::N-VariantBuilder>.

This call is a convenience wrapper that is exactly equivalent to
calling g_variant_new() followed by C<.add-value()>.

Note that the arguments must be of the correct width for their types
specified in C<$format-string>. This can be achieved by casting them. See
the GVariant varargs documentation.

This function might be used as follows:

=begin comment
<!-- language="C" -->
GVariant *
make_pointless_dictionary (void)
{
  GVariantBuilder builder;
  int i;

  g_variant_builder_init (&builder, G_VARIANT_TYPE_ARRAY);
  for (i = 0; i < 16; i++)
    {
      gchar buf[3];

      sprintf (buf, "%d", i);
      g_variant_builder_add (&builder, "{is}", i, buf);
    }

  return g_variant_builder_end (&builder);
}

=end comment

=begin code
method add ( Str $format-string, … )
=end code

=item $format-string; a B<Gnome::Glib::N-Variant> varargs format string.
=item …; …. Note that each argument must be specified as a type followed by its value!

=begin comment

=head2 Example
# Example for add

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 add-parsed
This function is not yet available

Adds to a B<Gnome::Glib::N-VariantBuilder>.

This call is a convenience wrapper that is exactly equivalent to
calling g_variant_new_parsed() followed by
C<.add-value()>.

Note that the arguments must be of the correct width for their types
specified in C<$format-string>. This can be achieved by casting them. See
the GVariant varargs documentation.

This function might be used as follows:

=begin comment
<!-- language="C" -->
GVariant *
make_pointless_dictionary (void)
{
  GVariantBuilder builder;
  int i;

  g_variant_builder_init (&builder, G_VARIANT_TYPE_ARRAY);
  g_variant_builder_add_parsed (&builder, "{'width', <%i>}", 600);
  g_variant_builder_add_parsed (&builder, "{'title', <%s>}", "foo");
  g_variant_builder_add_parsed (&builder, "{'transparency', <0.5>}");
  return g_variant_builder_end (&builder);
}

=end comment

=begin code
method add-parsed ( Str $format, … )
=end code

=item $format; a text format B<Gnome::Glib::N-Variant>.
=item …; …. Note that each argument must be specified as a type followed by its value!

=begin comment

=head2 Example
# Example for add-parsed

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 add-value

Adds C<$value> to C<$builder>.

It is an error to call this function in any way that would create an
inconsistent value to be constructed.  Some examples of this are
putting different types of items into an array, putting the wrong
types or number of items in a tuple, putting more than one value into
a variant, etc.

If C<$value> is a floating reference (see g_variant_ref_sink()),
the C<$builder> instance takes ownership of C<$value>.

=begin code
method add-value ( N-Object $value )
=end code

=item $value; a B<Gnome::Glib::N-Variant>

=begin comment

=head2 Example
# Example for add-value

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 clear

Releases all memory associated with a B<Gnome::Glib::N-VariantBuilder> without
freeing the B<Gnome::Glib::N-VariantBuilder> structure itself.

It typically only makes sense to do this on a stack-allocated
B<Gnome::Glib::N-VariantBuilder> if you want to abort building the value part-way
through.  This function need not be called if you call
C<.end()> and it also doesn't need to be called on
builders allocated with C<.new-variantbuilder()> (see
C<.unref()> for that).

This function leaves the B<Gnome::Glib::N-VariantBuilder> structure set to all-zeros.
It is valid to call this function on either an initialised
B<Gnome::Glib::N-VariantBuilder> or one that is set to all-zeros but it is not valid
to call this function on uninitialised memory.

=begin code
method clear ( )
=end code

=begin comment

=head2 Example
# Example for clear

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 close

Closes the subcontainer inside the given C<$builder> that was opened by
the most recent call to C<.open()>.

It is an error to call this function in any way that would create an
inconsistent value to be constructed (ie: too few values added to the
subcontainer).

=begin code
method close ( )
=end code

=begin comment

=head2 Example
# Example for close

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 end

Ends the builder process and returns the constructed value.

It is not permissible to use C<$builder> in any way after this call
except for reference counting operations (in the case of a
heap-allocated B<Gnome::Glib::N-VariantBuilder>) or by reinitialising it with
C<.init()> (in the case of stack-allocated). This
means that for the stack-allocated builders there is no need to
call C<.clear()> after the call to
C<.end()>.

It is an error to call this function in any way that would create an
inconsistent value to be constructed (ie: insufficient number of
items added to a container with a specific number of children
required).  It is also an error to call this function if the builder
was created with an indefinite array or maybe type and no children
have been added; in this case it is impossible to infer the type of
the empty array.

=begin code
method end (--> N-Object )
=end code

Return value; a new, floating, B<Gnome::Glib::N-Variant>. 

=begin comment

=head2 Example
# Example for end

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 init

Initialises a B<Gnome::Glib::N-VariantBuilder> structure.
 C<$type> must be non-undefined.  It specifies the type of container to
construct.  It can be an indefinite type such as
C<G_VARIANT_TYPE_ARRAY> or a definite type such as "as" or "(ii)".
Maybe, array, tuple, dictionary entry and variant-typed values may be
constructed.

After the builder is initialised, values are added using
C<.add-value()> or C<.add()>.

After all the child values are added, C<.end()> frees
the memory associated with the builder and returns the B<Gnome::Glib::N-Variant> that
was created.

This function completely ignores the previous contents of C<$builder>.
On one hand this means that it is valid to pass in completely
uninitialised memory.  On the other hand, this means that if you are
initialising over top of an existing B<Gnome::Glib::N-VariantBuilder> you need to
first call C<.clear()> in order to avoid leaking
memory.

You must not call C<.ref()> or
C<.unref()> on a B<Gnome::Glib::N-VariantBuilder> that was initialised
with this function.  If you ever pass a reference to a
B<Gnome::Glib::N-VariantBuilder> outside of the control of your own code then you
should assume that the person receiving that reference may try to use
reference counting; you should use C<.new-variantbuilder()> instead of
this function.

=begin code
method init ( N-Object $type )
=end code

=item $type; a container type

=begin comment

=head2 Example
# Example for init

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 open

Opens a subcontainer inside the given C<$builder>.  When done adding
items to the subcontainer, C<.close()> must be called. C<$type>
is the type of the container: so to build a tuple of several values, C<$type>
must include the tuple itself.

It is an error to call this function in any way that would cause an
inconsistent value to be constructed (ie: adding too many values or
a value of an incorrect type).

Example of building a nested variant:
=begin comment
<!-- language="C" -->
GVariantBuilder builder;
guint32 some_number = get_number ();
g_autoptr (GHashTable) some_dict = get_dict ();
GHashTableIter iter;
const gchar *key;
const GVariant *value;
g_autoptr (GVariant) output = NULL;

g_variant_builder_init (&builder, G_VARIANT_TYPE ("(ua{sv})"));
g_variant_builder_add (&builder, "u", some_number);
g_variant_builder_open (&builder, G_VARIANT_TYPE ("a{sv}"));

g_hash_table_iter_init (&iter, some_dict);
while (g_hash_table_iter_next (&iter, (gpointer *) &key, (gpointer *) &value))
  {
    g_variant_builder_open (&builder, G_VARIANT_TYPE ("{sv}"));
    g_variant_builder_add (&builder, "s", key);
    g_variant_builder_add (&builder, "v", value);
    g_variant_builder_close (&builder);
  }

g_variant_builder_close (&builder);

output = g_variant_builder_end (&builder);

=end comment

=begin code
method open ( N-Object $type )
=end code

=item $type; the B<Gnome::Glib::N-VariantType> of the container

=begin comment

=head2 Example
# Example for open

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 ref

Increases the reference count on C<$builder>.

Don't call this on stack-allocated B<Gnome::Glib::N-VariantBuilder> instances or bad
things will happen.

=begin code
method ref (--> N-Object )
=end code

Return value; a new reference to C<$builder>. 

=begin comment

=head2 Example
# Example for ref

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 unref

Decreases the reference count on C<$builder>.

In the event that there are no more references, releases all memory
associated with the B<Gnome::Glib::N-VariantBuilder>.

Don't call this on stack-allocated B<Gnome::Glib::N-VariantBuilder> instances or bad
things will happen.

=begin code
method unref ( )
=end code

=begin comment

=head2 Example
# Example for unref

=end comment

=end pod

