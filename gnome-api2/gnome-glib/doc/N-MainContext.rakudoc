=comment Package: Glib, C-Source: main
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Gnome::Glib::N-MainContext

=head1 Description

The B<Gnome::Glib::N-MainContext> struct is an opaque data
type representing a set of sources to be handled in a main loop.

=begin comment

=head2 Example
# Example use of module Gnome::Glib::MainContext

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

=head2 new

=head3 :native-object

Create an object using a native object from an object of the same type found elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object() :$native-object! )

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-maincontext

Creates a new B<Gnome::Glib::N-MainContext> structure.

=begin code
method new-maincontext ( --> Gnome::Glib::MainContext \)
=end code

=begin comment

=head2 Example
# Example for new-maincontext

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-with-flags

Creates a new B<Gnome::Glib::N-MainContext> structure.

=begin code
method new-with-flags ( UInt $flags --> Gnome::Glib::MainContext \)
=end code

=item $flags; a bitwise-OR combination of B<Gnome::Glib::T-main> flags that can only be
        set at creation time..

=begin comment

=head2 Example
# Example for new-with-flags

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 acquire

Tries to become the owner of the specified context.
If some other thread is the owner of the context,
returns C<False> immediately. Ownership is properly
recursive: the owner can require ownership again
and will release ownership when C<.release()>
is called as many times as C<.acquire()>.

You must be the owner of a context before you
can call C<.prepare()>, C<.query()>,
C<.check()>, C<.dispatch()>.

=begin code
method acquire (--> Bool )
=end code

Return value; C<True> if the operation succeeded, and
  this thread is now the owner of C<$context>.. 

=begin comment

=head2 Example
# Example for acquire

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 add-poll

Adds a file descriptor to the set of file descriptors polled for
this context. This will very seldom be used directly. Instead
a typical event source will use g_source_add_unix_fd() instead.

=begin code
method add-poll ( N-Object $fd, Int() $priority )
=end code

=item $fd; a B<Gnome::Glib::N-PollFD> structure holding information about a file
     descriptor to watch.
=item $priority; the priority for this file descriptor which should be
     the same as the priority used for g_source_attach() to ensure that the
     file descriptor is polled whenever the results may be needed..

=begin comment

=head2 Example
# Example for add-poll

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 check

Passes the results of polling back to the main loop. You should be
careful to pass C<$fds> and its length C<$n-fds> as received from
C<.query()>, as this functions relies on assumptions
on how C<$fds> is filled.

You must have successfully acquired the context with
C<.acquire()> before you may call this function.

=begin code
method check ( Int() $max-priority, N-Object $fds, Int() $n-fds --> Bool )
=end code

=item $max-priority; the maximum numerical priority of sources to check.
=item $fds; array of B<Gnome::Glib::N-PollFD>'s that was passed to
      the last call to C<.query()>
=item $n-fds; return value of C<.query()>.

Return value; C<True> if some sources are ready to be dispatched.. 

=begin comment

=head2 Example
# Example for check

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 dispatch

Dispatches all pending sources.

You must have successfully acquired the context with
C<.acquire()> before you may call this function.

=begin code
method dispatch ( )
=end code

=begin comment

=head2 Example
# Example for dispatch

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 find-source-by-funcs-user-data

Finds a source with the given source functions and user data.  If
multiple sources exist with the same source function and user data,
the first one found will be returned.

=begin code
method find-source-by-funcs-user-data ( N-Object $funcs, gpointer $user-data --> N-Object )
=end code

=item $funcs; the C<$source-funcs> passed to g_source_new().
=item $user-data; the user data from the callback..

Return value; the source, if one was found, otherwise undefined. 

=begin comment

=head2 Example
# Example for find-source-by-funcs-user-data

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 find-source-by-id

Finds a B<Gnome::Glib::N-Source> given a pair of context and ID.

It is a programmer error to attempt to look up a non-existent source.

More specifically: source IDs can be reissued after a source has been
destroyed and therefore it is never valid to use this function with a
source ID which may have already been removed.  An example is when
scheduling an idle to run in another thread with g_idle_add(): the
idle may already have run and been removed by the time this function
is called on its (now invalid) source ID.  This source ID may have
been reissued, leading to the operation being performed against the
wrong source.

=begin code
method find-source-by-id ( UInt() $source-id --> N-Object )
=end code

=item $source-id; the source ID, as returned by g_source_get_id()..

Return value; the B<Gnome::Glib::N-Source>. 

=begin comment

=head2 Example
# Example for find-source-by-id

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 find-source-by-user-data

Finds a source with the given user data for the callback.  If
multiple sources exist with the same user data, the first
one found will be returned.

=begin code
method find-source-by-user-data ( gpointer $user-data --> N-Object )
=end code

=item $user-data; the user_data for the callback..

Return value; the source, if one was found, otherwise undefined. 

=begin comment

=head2 Example
# Example for find-source-by-user-data

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-poll-func

Gets the poll function set by C<.set-poll-func()>.

=begin code
method get-poll-func (-->  )
=end code

Return value; the poll function. 

=begin comment

=head2 Example
# Example for get-poll-func

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 invoke

Invokes a function in such a way that C<$context> is owned during the
invocation of C<$function>.

If C<$context> is undefined then the global default main context — as
returned by C<.default()> — is used.

If C<$context> is owned by the current thread, C<$function> is called
directly.  Otherwise, if C<$context> is the thread-default main context
of the current thread and C<.acquire()> succeeds, then C<$function> is called and C<.release()> is called
afterwards.

In any other case, an idle source is created to call C<$function> and
that source is attached to C<$context> (presumably to be run in another
thread).  The idle source is attached with C<G_PRIORITY_DEFAULT>
priority.  If you want a different priority, use
C<.invoke-full()>.

Note that, as with normal idle functions, C<$function> should probably
return C<False>.  If it returns C<True>, it will be continuously run in a
loop (and may prevent this call from returning).

=begin code
method invoke ( &function, gpointer $data )
=end code

=item &function; function to call. Tthe function must be specified with following signature; C<:( gpointer $user-data --> gboolean )>.
=item $data; data to pass to C<$function>.

=begin comment

=head2 Example
# Example for invoke

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 invoke-full

Invokes a function in such a way that C<$context> is owned during the
invocation of C<$function>.

This function is the same as C<.invoke()> except that it
lets you specify the priority in case C<$function> ends up being
scheduled as an idle and also lets you give a B<Gnome::Glib::T-types> for C<$data>.
 C<$notify> should not assume that it is called from any particular
thread or with any particular context acquired.

=begin code
method invoke-full ( Int() $priority, &function, gpointer $data, &notify )
=end code

=item $priority; the priority at which to run C<$function>.
=item &function; function to call. Tthe function must be specified with following signature; C<:( gpointer $user-data --> gboolean )>.
=item $data; data to pass to C<$function>.
=item &notify; a function to call when C<$data> is no longer in use, or undefined.. Tthe function must be specified with following signature; C<:( gpointer $data )>.

=begin comment

=head2 Example
# Example for invoke-full

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 is-owner

Determines whether this thread holds the (recursive)
ownership of this B<Gnome::Glib::N-MainContext>. This is useful to
know before waiting on another thread that may be
blocking to get ownership of C<$context>.

=begin code
method is-owner (--> Bool )
=end code

Return value; C<True> if current thread is owner of C<$context>.. 

=begin comment

=head2 Example
# Example for is-owner

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 iteration

Runs a single iteration for the given main loop. This involves
checking to see if any event sources are ready to be processed,
then if no events sources are ready and C<$may-block> is C<True>, waiting
for a source to become ready, then dispatching the highest priority
events sources that are ready. Otherwise, if C<$may-block> is C<False>
sources are not waited to become ready, only those highest priority
events sources will be dispatched (if any), that are ready at this
given moment without further waiting.

Note that even when C<$may-block> is C<True>, it is still possible for
C<.iteration()> to return C<False>, since the wait may
be interrupted for other reasons than an event source becoming ready.

=begin code
method iteration ( Bool() $may-block --> Bool )
=end code

=item $may-block; whether the call may block..

Return value; C<True> if events were dispatched.. 

=begin comment

=head2 Example
# Example for iteration

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 pending

Checks if any sources have pending events for the given context.

=begin code
method pending (--> Bool )
=end code

Return value; C<True> if events are pending.. 

=begin comment

=head2 Example
# Example for pending

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 pop-thread-default

Pops C<$context> off the thread-default context stack (verifying that
it was on the top of the stack).

=begin code
method pop-thread-default ( )
=end code

=begin comment

=head2 Example
# Example for pop-thread-default

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 prepare

Prepares to poll sources within a main loop. The resulting information
for polling is determined by calling g_main_context_query ().

You must have successfully acquired the context with
C<.acquire()> before you may call this function.

=begin code
method prepare ( Array[Int] $priority --> Bool )
=end code

=item $priority; (transfer ownership: full) location to store priority of highest priority
           source already ready..

Return value; C<True> if some source is ready to be dispatched
              prior to polling.. 

=begin comment

=head2 Example
# Example for prepare

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 push-thread-default

Acquires C<$context> and sets it as the thread-default context for the
current thread. This will cause certain asynchronous operations
(such as most gio-based I/O) which are
started in this thread to run under C<$context> and deliver their
results to its main loop, rather than running under the global
default context in the main thread. Note that calling this function
changes the context returned by C<.get-thread-default()>,
not the one returned by C<.default()>, so it does not affect
the context used by functions like g_idle_add().

Normally you would call this function shortly after creating a new
thread, passing it a B<Gnome::Glib::N-MainContext> which will be run by a
B<Gnome::Glib::N-MainLoop> in that thread, to set a new default context for all
async operations in that thread. In this case you may not need to
ever call C<.pop-thread-default()>, assuming you want the
new B<Gnome::Glib::N-MainContext> to be the default for the whole lifecycle of the
thread.

If you don't have control over how the new thread was created (e.g.
in the new thread isn't newly created, or if the thread life
cycle is managed by a B<Gnome::Glib::N-ThreadPool>), it is always suggested to wrap
the logic that needs to use the new B<Gnome::Glib::N-MainContext> inside a
C<.push-thread-default()> / C<.pop-thread-default()>
pair, otherwise threads that are re-used will end up never explicitly
releasing the B<Gnome::Glib::N-MainContext> reference they hold.

In some cases you may want to schedule a single operation in a
non-default context, or temporarily use a non-default context in
the main thread. In that case, you can wrap the call to the
asynchronous operation inside a
C<.push-thread-default()> /
C<.pop-thread-default()> pair, but it is up to you to
ensure that no other asynchronous operations accidentally get
started while the non-default context is active.

Beware that libraries that predate this function may not correctly
handle being used from a thread with a thread-default context. Eg,
see g_file_supports_thread_contexts().

=begin code
method push-thread-default ( )
=end code

=begin comment

=head2 Example
# Example for push-thread-default

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 query

Determines information necessary to poll this main loop. You should
be careful to pass the resulting C<$fds> array and its length C<$n-fds>
as is when calling C<.check()>, as this function relies
on assumptions made when the array is filled.

You must have successfully acquired the context with
C<.acquire()> before you may call this function.

=begin code
method query ( Int() $max-priority, Array[Int] $timeout, N-Object $fds, Int() $n-fds --> Int )
=end code

=item $max-priority; maximum priority source to check.
=item $timeout; (transfer ownership: full) location to store timeout to be used in polling.
=item $fds; location to
      store B<Gnome::Glib::N-PollFD> records that need to be polled.
=item $n-fds; length of C<$fds>..

Return value; the number of records actually stored in C<$fds>,
  or, if more than C<$n-fds> records need to be stored, the number
  of records that need to be stored.. 

=begin comment

=head2 Example
# Example for query

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 ref

Increases the reference count on a B<Gnome::Glib::N-MainContext> object by one.

=begin code
method ref (--> N-Object )
=end code

Return value; the C<$context> that was passed in (since 2.6). 

=begin comment

=head2 Example
# Example for ref

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 release

Releases ownership of a context previously acquired by this thread
with C<.acquire()>. If the context was acquired multiple
times, the ownership will be released only when C<.release()>
is called as many times as it was acquired.

=begin code
method release ( )
=end code

=begin comment

=head2 Example
# Example for release

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 remove-poll

Removes file descriptor from the set of file descriptors to be
polled for a particular context.

=begin code
method remove-poll ( N-Object $fd )
=end code

=item $fd; a B<Gnome::Glib::N-PollFD> descriptor previously added with C<.add-poll()>

=begin comment

=head2 Example
# Example for remove-poll

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-poll-func

Sets the function to use to handle polling of file descriptors. It
will be used instead of the poll() system call
(or GLib's replacement function, which is used where
poll() isn't available).

This function could possibly be used to integrate the GLib event
loop with an external event loop.

=begin code
method set-poll-func ( &func )
=end code

=item &func; the function to call to poll all file descriptors. Tthe function must be specified with following signature; C<:( N-Object $ufds, guint $nfsd, gint $timeout --> gint )>.

=begin comment

=head2 Example
# Example for set-poll-func

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 unref

Decreases the reference count on a B<Gnome::Glib::N-MainContext> object by one. If
the result is zero, free the context and free all associated memory.

=begin code
method unref ( )
=end code

=begin comment

=head2 Example
# Example for unref

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 wakeup

If C<$context> is currently blocking in C<.iteration()>
waiting for a source to become ready, cause it to stop blocking
and return.  Otherwise, cause the next invocation of
C<.iteration()> to return without blocking.

This API is useful for low-level control over B<Gnome::Glib::N-MainContext>; for
example, integrating it with main loop implementations such as
B<Gnome::Glib::N-MainLoop>.

Another related use for this function is when implementing a main
loop with a termination condition, computed from multiple threads:

 
Then in a thread:

=begin code
method wakeup ( )
=end code

=begin comment

=head2 Example
# Example for wakeup

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Functions]------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Functions
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 default

Returns the global default main context. This is the main context
used for main loop functions when a main loop is not explicitly
specified, and corresponds to the "main" main loop. See also
C<.get-thread-default()>.

=begin code
method default (--> N-Object )
=end code

Return value; the global default main context.. 

=begin comment

=head2 Example
# Example for default

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-thread-default

Gets the thread-default B<Gnome::Glib::N-MainContext> for this thread. Asynchronous
operations that want to be able to be run in contexts other than
the default one should call this method or
C<.ref-thread-default()> to get a B<Gnome::Glib::N-MainContext> to add
their B<GSources> to. (Note that even in single-threaded
programs applications may sometimes want to temporarily push a
non-default context, so it is not safe to assume that this will
always return undefined if you are running in the default thread.)

If you need to hold a reference on the context, use
C<.ref-thread-default()> instead.

=begin code
method get-thread-default (--> N-Object )
=end code

Return value; the thread-default B<Gnome::Glib::N-MainContext>, or
undefined if the thread-default context is the global default context.. 

=begin comment

=head2 Example
# Example for get-thread-default

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 ref-thread-default

Gets the thread-default B<Gnome::Glib::N-MainContext> for this thread, as with
C<.get-thread-default()>, but also adds a reference to
it with C<.ref()>. In addition, unlike
C<.get-thread-default()>, if the thread-default context
is the global default context, this will return that B<Gnome::Glib::N-MainContext>
(with a ref added to it) rather than returning undefined.

=begin code
method ref-thread-default (--> N-Object )
=end code

Return value; the thread-default B<Gnome::Glib::N-MainContext>. Unref
    with C<.unref()> when you are done with it.. 

=begin comment

=head2 Example
# Example for ref-thread-default

=end comment

=end pod

