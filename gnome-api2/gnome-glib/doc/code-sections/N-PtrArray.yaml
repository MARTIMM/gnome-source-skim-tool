---
"____EXAMPLE____000": "=begin comment\n\n=head2 Example\n# Example use of module Gnome::Glib::PtrArray\n\n=end comment\n"
"____EXAMPLE____001": "=begin comment\n\n=head2 Example\n# Example for add\n\n=end comment\n"
"____EXAMPLE____002": "=begin comment\n\n=head2 Example\n# Example for copy\n\n=end comment\n"
"____EXAMPLE____003": "=begin comment\n\n=head2 Example\n# Example for extend\n\n=end comment\n"
"____EXAMPLE____004": "=begin comment\n\n=head2 Example\n# Example for extend-and-steal\n\n=end comment\n"
"____EXAMPLE____005": "=begin comment\n\n=head2 Example\n# Example for find\n\n=end comment\n"
"____EXAMPLE____006": "=begin comment\n\n=head2 Example\n# Example for find-with-equal-func\n\n=end comment\n"
"____EXAMPLE____007": "=begin comment\n\n=head2 Example\n# Example for foreach\n\n=end comment\n"
"____EXAMPLE____008": "=begin comment\n\n=head2 Example\n# Example for free\n\n=end comment\n"
"____EXAMPLE____009": "=begin comment\n\n=head2 Example\n# Example for insert\n\n=end comment\n"
"____EXAMPLE____010": "=begin comment\n\n=head2 Example\n# Example for new\n\n=end comment\n"
"____EXAMPLE____011": "=begin comment\n\n=head2 Example\n# Example for new-full\n\n=end comment\n"
"____EXAMPLE____012": "=begin comment\n\n=head2 Example\n# Example for new-with-free-func\n\n=end comment\n"
"____EXAMPLE____013": "=begin comment\n\n=head2 Example\n# Example for ref\n\n=end comment\n"
"____EXAMPLE____014": "=begin comment\n\n=head2 Example\n# Example for remove\n\n=end comment\n"
"____EXAMPLE____015": "=begin comment\n\n=head2 Example\n# Example for remove-fast\n\n=end comment\n"
"____EXAMPLE____016": "=begin comment\n\n=head2 Example\n# Example for remove-index\n\n=end comment\n"
"____EXAMPLE____017": "=begin comment\n\n=head2 Example\n# Example for remove-index-fast\n\n=end comment\n"
"____EXAMPLE____018": "=begin comment\n\n=head2 Example\n# Example for remove-range\n\n=end comment\n"
"____EXAMPLE____019": "=begin comment\n\n=head2 Example\n# Example for set-free-func\n\n=end comment\n"
"____EXAMPLE____020": "=begin comment\n\n=head2 Example\n# Example for set-size\n\n=end comment\n"
"____EXAMPLE____021": "=begin comment\n\n=head2 Example\n# Example for sized-new\n\n=end comment\n"
"____EXAMPLE____022": "=begin comment\n\n=head2 Example\n# Example for sort\n\n=end comment\n"
"____EXAMPLE____023": "=begin comment\n\n=head2 Example\n# Example for sort-with-data\n\n=end comment\n"
"____EXAMPLE____024": "=begin comment\n\n=head2 Example\n# Example for steal\n\n=end comment\n"
"____EXAMPLE____025": "=begin comment\n\n=head2 Example\n# Example for steal-index\n\n=end comment\n"
"____EXAMPLE____026": "=begin comment\n\n=head2 Example\n# Example for steal-index-fast\n\n=end comment\n"
"____EXAMPLE____027": "=begin comment\n\n=head2 Example\n# Example for unref\n\n=end comment\n"
"____EXAMPLE____028": "=begin comment\n<!-- language=\"C\" -->\ntypedef struct\n{\n  gchar *name;\n  gint size;\n} FileListEntry;\n\nstatic gint\nsort_filelist (gconstpointer a, gconstpointer b)\n{\n  const FileListEntry *entry1 = *((FileListEntry **) a);\n  const FileListEntry *entry2 = *((FileListEntry **) b);\n\n  return g_ascii_strcasecmp (entry1->name, entry2->name);\n}\n\n…\ng_autoptr (GPtrArray) file_list = NULL;\n\n// initialize file_list array and load with many FileListEntry entries\n...\n// now sort it with\ng_ptr_array_sort (file_list, sort_filelist);\n\n=end comment\n"
"____EXAMPLE____029": "=begin comment\n<!-- language=\"C\" -->\ntypedef enum { SORT_NAME, SORT_SIZE } SortMode;\n\ntypedef struct\n{\n  gchar *name;\n  gint size;\n} FileListEntry;\n\nstatic gint\nsort_filelist (gconstpointer a, gconstpointer b, gpointer user_data)\n{\n  gint order;\n  const SortMode sort_mode = GPOINTER_TO_INT (user_data);\n  const FileListEntry *entry1 = *((FileListEntry **) a);\n  const FileListEntry *entry2 = *((FileListEntry **) b);\n\n  switch (sort_mode)\n    {\n    case SORT_NAME:\n      order = g_ascii_strcasecmp (entry1->name, entry2->name);\n      break;\n    case SORT_SIZE:\n      order = entry1->size - entry2->size;\n      break;\n    default:\n      order = 0;\n      break;\n    }\n  return order;\n}\n\n...\ng_autoptr (GPtrArray) file_list = NULL;\nSortMode sort_mode;\n\n// initialize file_list array and load with many FileListEntry entries\n...\n// now sort it with\nsort_mode = SORT_NAME;\ng_ptr_array_sort_with_data (file_list,\n                            sort_filelist,\n                            GINT_TO_POINTER (sort_mode));\n\n=end comment\n"
"____EXAMPLE____030": "=begin comment\n<!-- language=\"C\" -->\ng_autoptr(GPtrArray) chunk_buffer = g_ptr_array_new_with_free_func (g_bytes_unref);\n\n// Some part of your application appends a number of chunks to the pointer array.\ng_ptr_array_add (chunk_buffer, g_bytes_new_static (\"hello\", 5));\ng_ptr_array_add (chunk_buffer, g_bytes_new_static (\"world\", 5));\n\n…\n\n// Periodically, the chunks need to be sent as an array-and-length to some\n// other part of the program.\nGBytes **chunks;\ngsize n_chunks;\n\nchunks = g_ptr_array_steal (chunk_buffer, &n_chunks);\nfor (gsize i = 0; i < n_chunks; i++)\n  {\n    // Do something with each chunk here, and then free them, since\n    // g_ptr_array_steal() transfers ownership of all the elements and the\n    // array to the caller.\n    …\n\n    g_bytes_unref (chunks[i]);\n  }\n\ng_free (chunks);\n\n// After calling g_ptr_array_steal(), the pointer array can be reused for the\n// next set of chunks.\ng_assert (chunk_buffer->len == 0);\n\n=end comment\n"
...