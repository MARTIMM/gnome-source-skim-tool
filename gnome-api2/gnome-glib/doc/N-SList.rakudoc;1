=comment Package: Glib, C-Source: slist
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Gnome::Glib::N-SList

=head1 Description

The B<Gnome::Glib::N-SList> struct is used for each element in the singly-linked
list.

=begin comment
=head2 Example
Example use of module Gnome::Glib::SList
=end comment

Note that this class is mainly used to get the data from a list returned by e.g. a widget.

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

=head2 new

=head3 :native-object

Create an object using a native object from elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object() :$native-object! )

=end pod

#-------------------------------------------------------------------------------
#--[Functions]------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Functions
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 alloc

Allocates space for one B<Gnome::Glib::N-SList> element. It is called by the
C<.append()>, C<.prepend()>, C<.insert()> and
C<.insert-sorted()> functions and so is rarely used on its own.

=begin code
method alloc (--> N-SList )
=end code

Return value; a pointer to the newly-allocated B<Gnome::Glib::N-SList> element.. 

=begin comment

=head2 Example
# Example for alloc

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 append

Adds a new element on to the end of the list.

The return value is the new start of the list, which may
have changed, so make sure you store the new value.

Note that C<.append()> has to traverse the entire list
to find the end, which is inefficient when adding multiple
elements. A common idiom to avoid the inefficiency is to prepend
the elements and reverse the list when all elements have been added.

=begin comment
<!-- language="C" -->
// Notice that these are initialized to the empty list.
GSList *list = NULL, *number_list = NULL;

// This is a list of strings.
list = g_slist_append (list, "first");
list = g_slist_append (list, "second");

// This is a list of integers.
number_list = g_slist_append (number_list, GINT_TO_POINTER (27));
number_list = g_slist_append (number_list, GINT_TO_POINTER (14));

=end comment

=begin code
method append ( N-SList() $list, gpointer $data --> N-SList )
=end code

=item $list; a B<Gnome::Glib::N-SList>.
=item $data; the data for the new element.

Return value; the new start of the B<Gnome::Glib::N-SList>. 

=begin comment

=head2 Example
# Example for append

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 concat

Adds the second B<Gnome::Glib::N-SList> onto the end of the first B<Gnome::Glib::N-SList>.
Note that the elements of the second B<Gnome::Glib::N-SList> are not copied.
They are used directly.

=begin code
method concat ( N-SList() $list1, N-SList() $list2 --> N-SList )
=end code

=item $list1; a B<Gnome::Glib::N-SList>.
=item $list2; the B<Gnome::Glib::N-SList> to add to the end of the first B<Gnome::Glib::N-SList>.

Return value; the start of the new B<Gnome::Glib::N-SList>. 

=begin comment

=head2 Example
# Example for concat

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 copy

Copies a B<Gnome::Glib::N-SList>.

Note that this is a "shallow" copy. If the list elements
consist of pointers to data, the pointers are copied but
the actual data isn't. See C<.copy-deep()> if you need
to copy the data as well.

=begin code
method copy ( N-SList() $list --> N-SList )
=end code

=item $list; a B<Gnome::Glib::N-SList>.

Return value; a copy of C<$list>. 

=begin comment

=head2 Example
# Example for copy

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 copy-deep

Makes a full (deep) copy of a B<Gnome::Glib::N-SList>.

In contrast with C<.copy()>, this function uses C<$func> to make a copy of
each list element, in addition to copying the list container itself.
 C<$func>, as a B<Gnome::Glib::T-types>, takes two arguments, the data to be copied
and a C<$user-data> pointer. On common processor architectures, it's safe to
pass undefined as C<$user-data> if the copy function takes only one argument. You
may get compiler warnings from this though if compiling with GCC’s
B<-Wcast-function-type> warning.

For instance, if C<$list> holds a list of GObjects, you can do:
=begin comment
<!-- language="C" -->
another_list = g_slist_copy_deep (list, (GCopyFunc) g_object_ref, NULL);

=end comment

And, to entirely free the new list, you could do:
=begin comment
<!-- language="C" -->
g_slist_free_full (another_list, g_object_unref);

=end comment

=begin code
method copy-deep ( N-SList() $list, &func, gpointer $user-data --> N-SList )
=end code

=item $list; a B<Gnome::Glib::N-SList>.
=item &func; a copy function used to copy every element in the list. Tthe function must be specified with following signature; C<:( gpointer $src, gpointer $data --> gpointer )>.
=item $user-data; user data passed to the copy function C<$func>, or #NULL.

Return value; a full copy of C<$list>, use C<.free-full()> to free it. 

=begin comment

=head2 Example
# Example for copy-deep

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 delete-link

Removes the node link_ from the list and frees it.
Compare this to C<.remove-link()> which removes the node
without freeing it.

Removing arbitrary nodes from a singly-linked list requires time
that is proportional to the length of the list (ie. O(n)). If you
find yourself using C<.delete-link()> frequently, you should
consider a different data structure, such as the doubly-linked
B<Gnome::Glib::N-List>.

=begin code
method delete-link ( N-SList() $list, N-SList() $link --> N-SList )
=end code

=item $list; a B<Gnome::Glib::N-SList>.
=item $link; node to delete.

Return value; the new head of C<$list>. 

=begin comment

=head2 Example
# Example for delete-link

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 find

Finds the element in a B<Gnome::Glib::N-SList> which
contains the given data.

=begin code
method find ( N-SList() $list, gpointer $data --> N-SList )
=end code

=item $list; a B<Gnome::Glib::N-SList>.
=item $data; the element data to find.

Return value; the found B<Gnome::Glib::N-SList> element,
    or undefined if it is not found. 

=begin comment

=head2 Example
# Example for find

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 find-custom

Finds an element in a B<Gnome::Glib::N-SList>, using a supplied function to
find the desired element. It iterates over the list, calling
the given function which should return 0 when the desired
element is found. The function takes two #gconstpointer arguments,
the B<Gnome::Glib::N-SList> element's data as the first argument and the
given user data.

=begin code
method find-custom ( N-SList() $list, gpointer $data, &func --> N-SList )
=end code

=item $list; a B<Gnome::Glib::N-SList>.
=item $data; user data passed to the function.
=item &func; the function to call for each element.
    It should return 0 when the desired element is found. Tthe function must be specified with following signature; C<:( gpointer $a, gpointer $b --> gint )>.

Return value; the found B<Gnome::Glib::N-SList> element, or undefined if it is not found. 

=begin comment

=head2 Example
# Example for find-custom

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 foreach

Calls a function for each element of a B<Gnome::Glib::N-SList>.

It is safe for C<$func> to remove the element from C<$list>, but it must
not modify any part of the list after that element.

=begin code
method foreach ( N-SList() $list, &func, gpointer $user-data )
=end code

=item $list; a B<Gnome::Glib::N-SList>.
=item &func; the function to call with each element's data. Tthe function must be specified with following signature; C<:( gpointer $data, gpointer $user-data )>.
=item $user-data; user data to pass to the function.

=begin comment

=head2 Example
# Example for foreach

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 free

Frees all of the memory used by a B<Gnome::Glib::N-SList>.
The freed elements are returned to the slice allocator.

If list elements contain dynamically-allocated memory,
you should either use C<.free-full()> or free them manually
first.

It can be combined with g_steal_pointer() to ensure the list head pointer
is not left dangling:
=begin comment
<!-- language="C" -->
GSList *list_of_borrowed_things = …;  /<!-- -->* (transfer container) *<!-- -->/
g_slist_free (g_steal_pointer (&list_of_borrowed_things));

=end comment

=begin code
method free ( N-SList() $list )
=end code

=item $list; the first link of a B<Gnome::Glib::N-SList>.

=begin comment

=head2 Example
# Example for free

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 free-full

Convenience method, which frees all the memory used by a B<Gnome::Glib::N-SList>, and
calls the specified destroy function on every element's data.
 C<$free-func> must not modify the list (eg, by removing the freed
element from it).

It can be combined with g_steal_pointer() to ensure the list head pointer
is not left dangling ­— this also has the nice property that the head pointer
is cleared before any of the list elements are freed, to prevent double frees
from C<$free-func>:
=begin comment
<!-- language="C" -->
GSList *list_of_owned_things = …;  /<!-- -->* (transfer full) (element-type GObject) *<!-- -->/
g_slist_free_full (g_steal_pointer (&list_of_owned_things), g_object_unref);

=end comment

=begin code
method free-full ( N-SList() $list, &free-func )
=end code

=item $list; the first link of a B<Gnome::Glib::N-SList>.
=item &free-func; the function to be called to free each element's data. Tthe function must be specified with following signature; C<:( gpointer $data )>.

=begin comment

=head2 Example
# Example for free-full

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 free1

Frees one B<Gnome::Glib::N-SList> element.
It is usually used after C<.remove-link()>.

=begin code
method free1 ( N-SList() $list )
=end code

=item $list; a B<Gnome::Glib::N-SList> element.

=begin comment

=head2 Example
# Example for free1

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 index

Gets the position of the element containing
the given data (starting from 0).

=begin code
method index ( N-SList() $list, gpointer $data --> Int )
=end code

=item $list; a B<Gnome::Glib::N-SList>.
=item $data; the data to find.

Return value; the index of the element containing the data,
    or -1 if the data is not found. 

=begin comment

=head2 Example
# Example for index

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 insert

Inserts a new element into the list at the given position.

=begin code
method insert ( N-SList() $list, gpointer $data, Int() $position --> N-SList )
=end code

=item $list; a B<Gnome::Glib::N-SList>.
=item $data; the data for the new element.
=item $position; the position to insert the element.
    If this is negative, or is larger than the number
    of elements in the list, the new element is added on
    to the end of the list..

Return value; the new start of the B<Gnome::Glib::N-SList>. 

=begin comment

=head2 Example
# Example for insert

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 insert-before

Inserts a node before C<$sibling> containing C<$data>.

=begin code
method insert-before ( N-SList() $slist, N-SList() $sibling, gpointer $data --> N-SList )
=end code

=item $slist; a B<Gnome::Glib::N-SList>.
=item $sibling; node to insert C<$data> before.
=item $data; data to put in the newly-inserted node.

Return value; the new head of the list.. 

=begin comment

=head2 Example
# Example for insert-before

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 insert-sorted

Inserts a new element into the list, using the given
comparison function to determine its position.

=begin code
method insert-sorted ( N-SList() $list, gpointer $data, &func --> N-SList )
=end code

=item $list; a B<Gnome::Glib::N-SList>.
=item $data; the data for the new element.
=item &func; the function to compare elements in the list.
    It should return a number > 0 if the first parameter
    comes after the second parameter in the sort order.. Tthe function must be specified with following signature; C<:( gpointer $a, gpointer $b --> gint )>.

Return value; the new start of the B<Gnome::Glib::N-SList>. 

=begin comment

=head2 Example
# Example for insert-sorted

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 insert-sorted-with-data

Inserts a new element into the list, using the given
comparison function to determine its position.

=begin code
method insert-sorted-with-data ( N-SList() $list, gpointer $data, &func, gpointer $user-data --> N-SList )
=end code

=item $list; a B<Gnome::Glib::N-SList>.
=item $data; the data for the new element.
=item &func; the function to compare elements in the list.
    It should return a number > 0 if the first parameter
    comes after the second parameter in the sort order.. Tthe function must be specified with following signature; C<:( gpointer $a, gpointer $b, gpointer $user-data --> gint )>.
=item $user-data; data to pass to comparison function.

Return value; the new start of the B<Gnome::Glib::N-SList>. 

=begin comment

=head2 Example
# Example for insert-sorted-with-data

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 last

Gets the last element in a B<Gnome::Glib::N-SList>.

This function iterates over the whole list.

=begin code
method last ( N-SList() $list --> N-SList )
=end code

=item $list; a B<Gnome::Glib::N-SList>.

Return value; the last element in the B<Gnome::Glib::N-SList>,
    or undefined if the B<Gnome::Glib::N-SList> has no elements. 

=begin comment

=head2 Example
# Example for last

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 length

Gets the number of elements in a B<Gnome::Glib::N-SList>.

This function iterates over the whole list to
count its elements. To check whether the list is non-empty, it is faster to
check C<$list> against undefined.

=begin code
method length ( N-SList() $list --> UInt )
=end code

=item $list; a B<Gnome::Glib::N-SList>.

Return value; the number of elements in the B<Gnome::Glib::N-SList>. 

=begin comment

=head2 Example
# Example for length

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 nth

Gets the element at the given position in a B<Gnome::Glib::N-SList>.

=begin code
method nth ( N-SList() $list, UInt() $n --> N-SList )
=end code

=item $list; a B<Gnome::Glib::N-SList>.
=item $n; the position of the element, counting from 0.

Return value; the element, or undefined if the position is off
    the end of the B<Gnome::Glib::N-SList>. 

=begin comment

=head2 Example
# Example for nth

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 nth-data

Gets the data of the element at the given position.

=begin code
method nth-data ( N-SList() $list, UInt() $n --> gpointer )
=end code

=item $list; a B<Gnome::Glib::N-SList>.
=item $n; the position of the element.

Return value; the element's data, or undefined if the position
    is off the end of the B<Gnome::Glib::N-SList>. 

=begin comment

=head2 Example
# Example for nth-data

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 position

Gets the position of the given element
in the B<Gnome::Glib::N-SList> (starting from 0).

=begin code
method position ( N-SList() $list, N-SList() $llink --> Int )
=end code

=item $list; a B<Gnome::Glib::N-SList>.
=item $llink; an element in the B<Gnome::Glib::N-SList>.

Return value; the position of the element in the B<Gnome::Glib::N-SList>,
    or -1 if the element is not found. 

=begin comment

=head2 Example
# Example for position

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 prepend

Adds a new element on to the start of the list.

The return value is the new start of the list, which
may have changed, so make sure you store the new value.

=begin comment
<!-- language="C" -->
// Notice that it is initialized to the empty list.
GSList *list = NULL;
list = g_slist_prepend (list, "last");
list = g_slist_prepend (list, "first");

=end comment

=begin code
method prepend ( N-SList() $list, gpointer $data --> N-SList )
=end code

=item $list; a B<Gnome::Glib::N-SList>.
=item $data; the data for the new element.

Return value; the new start of the B<Gnome::Glib::N-SList>. 

=begin comment

=head2 Example
# Example for prepend

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 remove

Removes an element from a B<Gnome::Glib::N-SList>.
If two elements contain the same data, only the first is removed.
If none of the elements contain the data, the B<Gnome::Glib::N-SList> is unchanged.

=begin code
method remove ( N-SList() $list, gpointer $data --> N-SList )
=end code

=item $list; a B<Gnome::Glib::N-SList>.
=item $data; the data of the element to remove.

Return value; the new start of the B<Gnome::Glib::N-SList>. 

=begin comment

=head2 Example
# Example for remove

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 remove-all

Removes all list nodes with data equal to C<$data>.
Returns the new head of the list. Contrast with
C<.remove()> which removes only the first node
matching the given data.

=begin code
method remove-all ( N-SList() $list, gpointer $data --> N-SList )
=end code

=item $list; a B<Gnome::Glib::N-SList>.
=item $data; data to remove.

Return value; new head of C<$list>. 

=begin comment

=head2 Example
# Example for remove-all

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 remove-link

Removes an element from a B<Gnome::Glib::N-SList>, without
freeing the element. The removed element's next
link is set to undefined, so that it becomes a
self-contained list with one element.

Removing arbitrary nodes from a singly-linked list
requires time that is proportional to the length of the list
(ie. O(n)). If you find yourself using C<.remove-link()>
frequently, you should consider a different data structure,
such as the doubly-linked B<Gnome::Glib::N-List>.

=begin code
method remove-link ( N-SList() $list, N-SList() $link --> N-SList )
=end code

=item $list; a B<Gnome::Glib::N-SList>.
=item $link; an element in the B<Gnome::Glib::N-SList>.

Return value; the new start of the B<Gnome::Glib::N-SList>, without the element. 

=begin comment

=head2 Example
# Example for remove-link

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 reverse

Reverses a B<Gnome::Glib::N-SList>.

=begin code
method reverse ( N-SList() $list --> N-SList )
=end code

=item $list; a B<Gnome::Glib::N-SList>.

Return value; the start of the reversed B<Gnome::Glib::N-SList>. 

=begin comment

=head2 Example
# Example for reverse

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 sort

Sorts a B<Gnome::Glib::N-SList> using the given comparison function. The algorithm
used is a stable sort.

=begin code
method sort ( N-SList() $list, &compare-func --> N-SList )
=end code

=item $list; a B<Gnome::Glib::N-SList>.
=item &compare-func; the comparison function used to sort the B<Gnome::Glib::N-SList>.
    This function is passed the data from 2 elements of the B<Gnome::Glib::N-SList>
    and should return 0 if they are equal, a negative value if the
    first element comes before the second, or a positive value if
    the first element comes after the second.. Tthe function must be specified with following signature; C<:( gpointer $a, gpointer $b --> gint )>.

Return value; the start of the sorted B<Gnome::Glib::N-SList>. 

=begin comment

=head2 Example
# Example for sort

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 sort-with-data

Like C<.sort()>, but the sort function accepts a user data argument.

=begin code
method sort-with-data ( N-SList() $list, &compare-func, gpointer $user-data --> N-SList )
=end code

=item $list; a B<Gnome::Glib::N-SList>.
=item &compare-func; comparison function. Tthe function must be specified with following signature; C<:( gpointer $a, gpointer $b, gpointer $user-data --> gint )>.
=item $user-data; data to pass to comparison function.

Return value; new head of the list. 

=begin comment

=head2 Example
# Example for sort-with-data

=end comment

=end pod

