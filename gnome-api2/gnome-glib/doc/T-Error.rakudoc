 use v6.d;

=begin pod
=head1 Gnome::Glib::T-Error
=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

=head2 new

Initialization of a type class is simple.

  method new ( )

=end pod
#-------------------------------------------------------------------------------
#--[Callback Functions]---------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Callback Functions
=head2 ErrorInitFunc

=head3 Signature
=begin code
:(  CArray[N-Error] $error  )
=end code

=item error; extended error

=head2 ErrorCopyFunc

=head3 Signature
=begin code
:(  CArray[N-Error] $src-error, CArray[N-Error] $dest-error  )
=end code

=item src-error; source extended error
=item dest-error; destination extended error

=head2 ErrorClearFunc

=head3 Signature
=begin code
:(  CArray[N-Error] $error  )
=end code

=item error; extended error to clear

=end pod
#-------------------------------------------------------------------------------
#--[Standalone Functions]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Standalone Functions
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 clear-error

If C<$err> is undefined, the function does nothing. Otherwise,
calls C<.free()> on C<$err[0]> and sets C<$err[0]> to C<Nil>.
method clear-error ( CArray[N-Error] $err )
=end code

=item $err; (transfer ownership: full) pointer to N-Error.

=begin comment

=head2 Example
# Example for clear-error


=begin code
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 prefix-error

Formats a string according to C<$format> and prefix it to an existing error message. If C<$err> is C<Nil> (ie: no error variable) then do nothing.

If * C<$err> is C<Nil> (ie: an error variable is present but there is no error condition) then also do nothing.


=begin code
method prefix-error ( CArray[N-Error] $err, Str $format, … )
=end code

=item $err; (transfer ownership: full) a return location for a B<N-Error>.
=item $format; printf()-style format string.
=item …; arguments to C<$format>. Note that each argument must be specified as a type followed by its value!

=head2 Example

=begin code
my Gnome::Glib::T-Error $t-error .= new;
my $e = CArray[N-Error].new(N-Error);
my $domain = 87600;
my $code = 7;
my $format = 'your %dnd error';
$l = $t-error.set-error( $e, $domain, $code, ", I did warn ye!");
$l = $t-error.prefix-error( $e, $format, gint32, 2);
note $l[0].message;   # "your 2nd error, I did warn ye!"
=end code

Note the use of the extra argument for the format specified as a type `gint32` and a value `2`.

Note that formatted strings are available in Raku and that above example can be done simpler with the C<sprinf()> function of Raku.

=begin code
$l = $t-error.prefix-error( $e, sprinf( $format, 2));
=end code

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 prefix-error-literal

Prefixes C<$prefix> to an existing error message. If C<$err> or * C<$err> is undefined (i.e.: no error variable) then do nothing.

=begin code
method prefix-error-literal ( CArray[N-Error] $err, Str $prefix )
=end code

=item $err; a return location for a B<N-Error>, or C<Nil>.
=item $prefix; string to prefix C<$err> with.

=begin comment

=head2 Example
# Example for prefix-error-literal

=end comment
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 propagate-error

If C<$dest> is C<Nil>, free C<$src>; otherwise, moves C<$src> into * C<$dest>.
The error variable C<$dest> points to must be C<Nil>.
 C<$src> must be non-C<Nil>.

Note that C<$src> is no longer valid after this call. If you want to keep using the same B<N-Error>*, you need to set it to C<Nil>
after calling this function on it.

=begin code
method propagate-error ( CArray[N-Error] $dest, CArray[N-Error] $src )
=end code

=item $dest; (transfer ownership: full) error return location.
=item $src; (transfer ownership: full) error to move into the return location.

=begin comment

=head2 Example
# Example for propagate-error

=end comment
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 propagate-prefixed-error

If C<$dest> is C<Nil>, free C<$src>; otherwise, moves C<$src> into * C<$dest>.
* C<$dest> must be C<Nil>. After the move, add a prefix as with g_prefix_error().

=begin code
method propagate-prefixed-error (
  CArray[N-Error] $dest, CArray[N-Error] $src, Str $format, …
)
=end code

=item $dest; error return location.
=item $src; error to move into the return location.
=item $format; printf()-style format string.
=item …; arguments to C<$format>. Note that each argument must be specified as a type followed by its value!

=begin comment

=head2 Example
# Example for propagate-prefixed-error

=end comment
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-error

Does nothing if C<$err> is C<Nil>; if C<$err> is non-C<Nil>, then * C<$err>
must be C<Nil>. A new B<N-Error> is created and assigned to * C<$err>.

=begin code
method set-error (
  CArray[N-Error] $err, UInt $domain, Int() $code, Str $format, …
)
=end code

=item $err; (transfer ownership: full) a return location for a B<N-Error>.
=item $domain; error domain.
=item $code; error code.
=item $format; printf()-style format.
=item …; args for C<$format>. Note that each argument must be specified as a type followed by its value!

=begin comment

=head2 Example
# Example for set-error

=end comment
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-error-literal

Does nothing if C<$err> is C<Nil>; if C<$err> is non-C<Nil>, then * C<$err>
must be C<Nil>. A new B<N-Error> is created and assigned to * C<$err>.
Unlike g_set_error(), C<$message> is not a printf()-style format string.
Use this function if C<$message> contains text you don't have control over,
that could include printf() escape sequences.

=begin code
method set-error-literal (
  CArray[N-Error] $err, UInt $domain, Int() $code, Str $message
)
=end code

=item $err; (transfer ownership: full) a return location for a B<N-Error>.
=item $domain; error domain.
=item $code; error code.
=item $message; error message.

=begin comment

=head2 Example
# Example for set-error-literal

=end comment
=end pod

