=comment Package: Glib, C-Source: quark
use v6.d;

=begin pod
=head1 Gnome::Glib::T-quark
=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

=head2 new

Initialization of a type class is simple and only needed when the standalone functions are used.

  method new ( )

=end pod
#-------------------------------------------------------------------------------
#--[Standalone Functions]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Standalone Functions
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 intern-static-string

Returns a canonical representation for C<$string>. Interned strings
can be compared for equality by comparing the pointers, instead of
using strcmp(). g_intern_static_string() does not copy the string,
therefore C<$string> must not be freed or modified.

This function must not be used before library constructors have finished
running. In particular, this means it cannot be used to initialize global
variables in C++.

=begin code
method intern-static-string ( Str $string --> Str )
=end code

=item $string; a static string.

Return value; a canonical representation for the string. 

=begin comment

=head2 Example
# Example for intern-static-string

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 intern-string

Returns a canonical representation for C<$string>. Interned strings
can be compared for equality by comparing the pointers, instead of
using strcmp().

This function must not be used before library constructors have finished
running. In particular, this means it cannot be used to initialize global
variables in C++.

=begin code
method intern-string ( Str $string --> Str )
=end code

=item $string; a string.

Return value; a canonical representation for the string. 

=begin comment

=head2 Example
# Example for intern-string

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 quark-from-static-string

Gets the B<Gnome::Glib::quark> identifying the given (static) string. If the
string does not currently have an associated B<Gnome::Glib::quark>, a new B<Gnome::Glib::quark>
is created, linked to the given string.

Note that this function is identical to C<.from-string()> except
that if a new B<Gnome::Glib::quark> is created the string itself is used rather
than a copy. This saves memory, but can only be used if the string
will continue to exist until the program terminates. It can be used
with statically allocated strings in the main program, but not with
statically allocated memory in dynamically loaded modules, if you
expect to ever unload the module again (e.g. do not use this
function in GTK theme engines).

This function must not be used before library constructors have finished
running. In particular, this means it cannot be used to initialize global
variables in C++.

=begin code
method quark-from-static-string ( Str $string --> UInt )
=end code

=item $string; a string.

Return value; the B<Gnome::Glib::quark> identifying the string, or 0 if C<$string> is undefined. 

=begin comment

=head2 Example
# Example for quark-from-static-string

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 quark-from-string

Gets the B<Gnome::Glib::quark> identifying the given string. If the string does
not currently have an associated B<Gnome::Glib::quark>, a new B<Gnome::Glib::quark> is created,
using a copy of the string.

This function must not be used before library constructors have finished
running. In particular, this means it cannot be used to initialize global
variables in C++.

=begin code
method quark-from-string ( Str $string --> UInt )
=end code

=item $string; a string.

Return value; the B<Gnome::Glib::quark> identifying the string, or 0 if C<$string> is undefined. 

=begin comment

=head2 Example
# Example for quark-from-string

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 quark-to-string

Gets the string associated with the given B<Gnome::Glib::quark>.

=begin code
method quark-to-string ( UInt $quark --> Str )
=end code

=item $quark; a B<Gnome::Glib::quark>..

Return value; the string associated with the B<Gnome::Glib::quark>. 

=begin comment

=head2 Example
# Example for quark-to-string

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 quark-try-string

Gets the B<Gnome::Glib::quark> associated with the given string, or 0 if string is
undefined or it has no associated B<Gnome::Glib::quark>.

If you want the GQuark to be created if it doesn't already exist,
use C<.from-string()> or C<.from-static-string()>.

This function must not be used before library constructors have finished
running.

=begin code
method quark-try-string ( Str $string --> UInt )
=end code

=item $string; a string.

Return value; the B<Gnome::Glib::quark> associated with the string, or 0 if C<$string> is
    undefined or there is no B<Gnome::Glib::quark> associated with it. 

=begin comment

=head2 Example
# Example for quark-try-string

=end comment

=end pod

