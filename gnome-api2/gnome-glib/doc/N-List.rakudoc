=comment Package: Glib, C-Source: list
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Gnome::Glib::N-List

=head1 Description

The B<N-List> struct is used for each element in a doubly-linked list.

=head2 Example
  my @keep = ();
  sub pack ( Int $n --> gpointer ) {
    my $o = CArray[gint].new($n);
    @keep.push: $o;
    nativecast( gpointer, $o)
  }

  my N-List $N-List;
  my N-List $nlist .= new;
  for ^10 -> $i {
    $N-List = $list.append( $N-List, pack($i));
  }

  say $list.length($N-List);                 # 10


Please note that data needs to be kept alive in Raku across function calls to prevent cleaning up by the garbage collection process. Here the C<CArray> is stored in C<@keep>. That said, this List class is only useful for Raku developers when list data is returned from other objects. An example of that is the method C<.get-windows()> defined in B<Gnome::Gtk4::Application>.

=end pod

#-------------------------------------------------------------------------------
#--[Record Structure Documentation]---------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Record N-List

  class N-List:auth<github:MARTIMM>:api<2> is export is repr('CStruct') {

    has gpointer $.data;
    has N-List $.next;
    has N-List $.prev;
  }

=item data; holds the element's data, which can be a pointer to any kind
 of data, or any integer value using the
 Type Conversion Macros
=item next; contains the link to the next element in the list
=item prev; contains the link to the previous element in the list

=end pod


#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

=head2 new

=head3 :native-object

Create an object using a native object from elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object() :$native-object! )


=end pod

#-------------------------------------------------------------------------------
#--[Functions]------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Functions
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 alloc

Allocates space for one B<N-List> element. It is called by C<.append()>, C<.prepend()>, C<.insert()> and C<.insert-sorted()> and so is rarely used on its own.

=begin code
method alloc (--> N-List )
=end code


Return value; a pointer to the newly-allocated B<N-List> element. 

=begin comment

=head2 Example
# Example for alloc

=end comment


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 append

Adds a new element on to the end of the list.

Note that the return value is the new start of the list,
if C<$list> was empty; make sure you store the new value.

C<.append()> has to traverse the entire list to find the end,
which is inefficient when adding multiple elements. A common idiom to avoid the inefficiency is to use C<.prepend()> and reverse the list with C<.reverse()> when all elements have been added.

=begin comment

// Notice that these are initialized to the empty list.
GList *string_list = NULL, *number_list = NULL;

// This is a list of strings.
string_list = g_list_append (string_list, "first");
string_list = g_list_append (string_list, "second");

// This is a list of integers.
number_list = g_list_append (number_list, GINT_TO_POINTER (27));
number_list = g_list_append (number_list, GINT_TO_POINTER (14));
=end comment


=begin code
method append ( N-List $list, gpointer $data --> N-List )
=end code

=item $list; a pointer to a B<N-List>.
=item $data; the data for the new element.

Return value; either C<$list> or the new start of the B<N-List> if C<$list> was C<Nil>. 


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 concat

Adds the second B<N-List> onto the end of the first B<N-List>.
Note that the elements of the second B<N-List> are not copied.
They are used directly.

This function is for example used to move an element in the list.
=begin comment
The following example moves an element to the top of the list:

list = g_list_remove_link (list, llink);
list = g_list_concat (llink, list);
=end comment


=begin code
method concat ( N-List $list1, N-List $list2 --> N-List )
=end code

=item $list1; a B<N-List>, this must point to the top of the list.
=item $list2; the B<N-List> to add to the end of the first B<N-List>,
 this must point to the top of the list.

Return value; the start of the new B<N-List>, which equals C<$list1> if not C<Nil>. 


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 copy

Copies a B<N-List>.

Note that this is a "shallow" copy. If the list elements consist of pointers to data, the pointers are copied but the actual data is not. See C<.copy-deep()> if you need to copy the data as well.

=begin code
method copy ( N-List $list --> N-List )
=end code

=item $list; a B<N-List>, this must point to the top of the list.

Return value; the start of the new list that holds the same data as C<$list>. 


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 copy-deep

Makes a full (deep) copy of a B<N-List>.

In contrast with C<.copy()>, this function uses C<$func> to make a copy of each list element, in addition to copying the list container itself.
 C<$func>, as a B<Gnome::Glib::T-DoubleIEEE754>, takes two arguments, the data to be copied and a C<$user_data> pointer. On common processor architectures, it's safe to pass C<Nil> as C<$user_data> if the copy function takes only one argument. You may get compiler warnings from this though if compiling with GCCâ€™s
`-Wcast-function-type` warning.

=begin comment
For instance, if C<$list> holds a list of GObjects, you can do:

another_list = g_list_copy_deep (list, (GCopyFunc) g_object_ref, NULL);
=end comment

And, to entirely free the new list, you could do:
=begin comment

g_list_free_full (another_list, g_object_unref);
=end comment


=begin code
method copy-deep ( N-List $list, &func, gpointer $user-data --> N-List )
=end code

=item $list; a B<N-List>, this must point to the top of the list.
=item &func; a copy function used to copy every element in the list. Tthe function must be specified with following signature; C<:( gpointer $src, gpointer $user-data --> gpointer )>.
=item $user-data; user data passed to the copy function C<$func>, or C<Nil>.

Return value; the start of the new list that holds a full copy of C<$list>,
 use C<.free-full()> to free it. 


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 delete-link

Removes the node link_ from the list and frees it.
Compare this to C<.remove-link()> which removes the node without freeing it.

=begin code
method delete-link ( N-List $list, N-List $link --> N-List )
=end code

=item $list; a B<N-List>, this must point to the top of the list.
=item $link; node to delete from C<$list>.

Return value; the (possibly changed) start of the B<N-List>. 


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 find

Finds the element in a B<N-List> which contains the given data.

=begin code
method find ( N-List $list, gpointer $data --> N-List )
=end code

=item $list; a B<N-List>, this must point to the top of the list.
=item $data; the element data to find.

Return value; the found B<N-List> element, or C<Nil> if it is not found. 


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 find-custom

Finds an element in a B<N-List>, using a supplied function to find the desired element. It iterates over the list, calling the given function which should return 0 when the desired element is found. The function takes two C<gconstpointer> arguments,
the B<N-List> element's data as the first argument and the given user data.

=begin code
method find-custom ( N-List $list, gpointer $data, &func --> N-List )
=end code

=item $list; a B<N-List>, this must point to the top of the list.
=item $data; user data passed to the function.
=item &func; the function to call for each element.
 It should return 0 when the desired element is found. Tthe function must be specified with following signature; C<:( gpointer $a, gpointer $b --> gint )>.

Return value; the found B<N-List> element, or C<Nil> if it is not found. 


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 first

Gets the first element in a B<N-List>.

=begin code
method first ( N-List $list --> N-List )
=end code

=item $list; any B<N-List> element.

Return value; the first element in the B<N-List>,
 or C<Nil> if the B<N-List> has no elements. 


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 foreach

Calls a function for each element of a B<N-List>.

It is safe for C<$func> to remove the element from C<$list>, but it must not modify any part of the list after that element.

=begin code
method foreach ( N-List $list, &func, gpointer $user-data )
=end code

=item $list; a B<N-List>, this must point to the top of the list.
=item &func; the function to call with each element's data. Tthe function must be specified with following signature; C<:( gpointer $data, gpointer $user-data )>.
=item $user-data; user data to pass to the function.

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 free

Frees all of the memory used by a B<N-List>.
The freed elements are returned to the slice allocator.

If list elements contain dynamically-allocated memory, you should either use C<.free-full()> or free them manually first.

=begin comment
It can be combined with g_steal_pointer() to ensure the list head pointer is not left dangling:

GList *list_of_borrowed_things = â€¦; /<!-- -->* (transfer container) *<!-- -->/
g_list_free (g_steal_pointer (&list_of_borrowed_things));
=end comment


=begin code
method free ( N-List $list )
=end code

=item $list; the first link of a B<N-List>.

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 free-full

Convenience method, which frees all the memory used by a B<N-List>,
and calls C<$free_func> on every element's data.
 C<$free_func> must not modify the list (eg, by removing the freed element from it).

It can be combined with g_steal_pointer() to ensure the list head pointer is not left dangling Â­â€” this also has the nice property that the head pointer is cleared before any of the list elements are freed, to prevent double frees from C<$free_func>:
=begin comment

GList *list_of_owned_things = â€¦; /<!-- -->* (transfer full) (element-type GObject) *<!-- -->/
g_list_free_full (g_steal_pointer (&list_of_owned_things), g_object_unref);
=end comment


=begin code
method free-full ( N-List $list, &free-func )
=end code

=item $list; the first link of a B<N-List>.
=item &free-func; the function to be called to free each element's data. Tthe function must be specified with following signature; C<:( gpointer $data )>.

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 free1

Frees one B<N-List> element, but does not update links from the next and previous elements in the list, so you should not call this function on an element that is currently part of a list.

It is usually used after C<.remove-link()>.

=begin code
method free1 ( N-List $list )
=end code

=item $list; a B<N-List> element.

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 index

Gets the position of the element containing the given data (starting from 0).

=begin code
method index ( N-List $list, gpointer $data --> Int )
=end code

=item $list; a B<N-List>, this must point to the top of the list.
=item $data; the data to find.

Return value; the index of the element containing the data,
 or -1 if the data is not found. 


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 insert

Inserts a new element into the list at the given position.

=begin code
method insert ( N-List $list, gpointer $data, Int() $position --> N-List )
=end code

=item $list; a pointer to a B<N-List>, this must point to the top of the list.
=item $data; the data for the new element.
=item $position; the position to insert the element. If this is
 negative, or is larger than the number of elements in the
 list, the new element is added on to the end of the list..

Return value; the (possibly changed) start of the B<N-List>. 


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 insert-before

Inserts a new element into the list before the given position.

=begin code
method insert-before ( N-List $list, N-List $sibling, gpointer $data --> N-List )
=end code

=item $list; a pointer to a B<N-List>, this must point to the top of the list.
=item $sibling; the list element before which the new element
 is inserted or C<Nil> to insert at the end of the list.
=item $data; the data for the new element.

Return value; the (possibly changed) start of the B<N-List>. 


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 insert-before-link

Inserts C<$link_> into the list before the given position.

=begin code
method insert-before-link ( N-List $list, N-List $sibling, N-List $link --> N-List )
=end code

=item $list; a pointer to a B<N-List>, this must point to the top of the list.
=item $sibling; the list element before which the new element
 is inserted or C<Nil> to insert at the end of the list.
=item $link; the list element to be added, which must not be part of
 any other list.

Return value; the (possibly changed) start of the B<N-List>. 


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 insert-sorted

Inserts a new element into the list, using the given comparison function to determine its position.

If you are adding many new elements to a list, and the number of new elements is much larger than the length of the list, use C<.prepend()> to add the new items and sort the list afterwards with C<.sort()>.

=begin code
method insert-sorted ( N-List $list, gpointer $data, &func --> N-List )
=end code

=item $list; a pointer to a B<N-List>, this must point to the top of the
 already sorted list.
=item $data; the data for the new element.
=item &func; the function to compare elements in the list. It should
 return a number > 0 if the first parameter comes after the
 second parameter in the sort order.. Tthe function must be specified with following signature; C<:( gpointer $a, gpointer $b --> gint )>.

Return value; the (possibly changed) start of the B<N-List>. 


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 insert-sorted-with-data

Inserts a new element into the list, using the given comparison function to determine its position.

If you are adding many new elements to a list, and the number of new elements is much larger than the length of the list, use C<.prepend()> to add the new items and sort the list afterwards with C<.sort()>.

=begin code
method insert-sorted-with-data ( N-List $list, gpointer $data, &func, gpointer $user-data --> N-List )
=end code

=item $list; a pointer to a B<N-List>, this must point to the top of the
 already sorted list.
=item $data; the data for the new element.
=item &func; the function to compare elements in the list. It should
 return a number > 0 if the first parameter comes after the
 second parameter in the sort order.. Tthe function must be specified with following signature; C<:( gpointer $a, gpointer $b, gpointer $user-data --> gint )>.
=item $user-data; user data to pass to comparison function.

Return value; the (possibly changed) start of the B<N-List>. 


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 last

Gets the last element in a B<N-List>.

=begin code
method last ( N-List $list --> N-List )
=end code

=item $list; any B<N-List> element.

Return value; the last element in the B<N-List>,
 or C<Nil> if the B<N-List> has no elements. 


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 length

Gets the number of elements in a B<N-List>.

This function iterates over the whole list to count its elements.
Use a B<Gnome::Glib::N-Queue> instead of a B<N-List> if you regularly need the number of items. To check whether the list is non-empty, it is faster to check C<$list> against C<Nil>.

=begin code
method length ( N-List $list --> UInt )
=end code

=item $list; a B<N-List>, this must point to the top of the list.

Return value; the number of elements in the B<N-List>. 


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 nth

Gets the element at the given position in a B<N-List>.

This iterates over the list until it reaches the C<$n>-th position. If you intend to iterate over every element, it is better to use a for-loop as described in the B<N-List> introduction.

=begin code
method nth ( N-List $list, UInt() $n --> N-List )
=end code

=item $list; a B<N-List>, this must point to the top of the list.
=item $n; the position of the element, counting from 0.

Return value; the element, or C<Nil> if the position is off
 the end of the B<N-List>. 


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 nth-data

Gets the data of the element at the given position.

This iterates over the list until it reaches the C<$n>-th position. If you intend to iterate over every element, it is better to use a for-loop as described in the B<N-List> introduction.

=begin code
method nth-data ( N-List $list, UInt() $n --> gpointer )
=end code

=item $list; a B<N-List>, this must point to the top of the list.
=item $n; the position of the element.

Return value; the element's data, or C<Nil> if the position
 is off the end of the B<N-List>. 


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 nth-prev

Gets the element C<$n> places before C<$list>.

=begin code
method nth-prev ( N-List $list, UInt() $n --> N-List )
=end code

=item $list; a B<N-List>.
=item $n; the position of the element, counting from 0.

Return value; the element, or C<Nil> if the position is
 off the end of the B<N-List>. 


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 position

Gets the position of the given element in the B<N-List> (starting from 0).

=begin code
method position ( N-List $list, N-List $llink --> Int )
=end code

=item $list; a B<N-List>, this must point to the top of the list.
=item $llink; an element in the B<N-List>.

Return value; the position of the element in the B<N-List>,
 or -1 if the element is not found. 


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 prepend

Prepends a new element on to the start of the list.

Note that the return value is the new start of the list,
which will have changed, so make sure you store the new value.

=begin comment

// Notice that it is initialized to the empty list.
GList *list = NULL;

list = g_list_prepend (list, "last");
list = g_list_prepend (list, "first");
=end comment

Do not use this function to prepend a new element to a different element than the start of the list. Use C<.insert-before()> instead.

=begin code
method prepend ( N-List $list, gpointer $data --> N-List )
=end code

=item $list; a pointer to a B<N-List>, this must point to the top of the list.
=item $data; the data for the new element.

Return value; a pointer to the newly prepended element, which is the new
 start of the B<N-List>. 


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 remove

Removes an element from a B<N-List>.
If two elements contain the same data, only the first is removed.
If none of the elements contain the data, the B<N-List> is unchanged.

=begin code
method remove ( N-List $list, gpointer $data --> N-List )
=end code

=item $list; a B<N-List>, this must point to the top of the list.
=item $data; the data of the element to remove.

Return value; the (possibly changed) start of the B<N-List>. 


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 remove-all

Removes all list nodes with data equal to C<$data>.
Returns the new head of the list. Contrast with C<.remove()> which removes only the first node matching the given data.

=begin code
method remove-all ( N-List $list, gpointer $data --> N-List )
=end code

=item $list; a B<N-List>, this must point to the top of the list.
=item $data; data to remove.

Return value; the (possibly changed) start of the B<N-List>. 


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 remove-link

Removes an element from a B<N-List>, without freeing the element.
The removed element's prev and next links are set to C<Nil>, so that it becomes a self-contained list with one element.

This function is for example used to move an element in the list
(see the example for C<.concat()>) or to remove an element in the list before freeing its data:
=begin comment

list = g_list_remove_link (list, llink);
free_some_data_that_may_access_the_list_again (llink->data);
g_list_free (llink);
=end comment


=begin code
method remove-link ( N-List $list, N-List $llink --> N-List )
=end code

=item $list; a B<N-List>, this must point to the top of the list.
=item $llink; an element in the B<N-List>.

Return value; the (possibly changed) start of the B<N-List>. 


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 reverse

Reverses a B<N-List>.
It simply switches the next and prev pointers of each element.

=begin code
method reverse ( N-List $list --> N-List )
=end code

=item $list; a B<N-List>, this must point to the top of the list.

Return value; the start of the reversed B<N-List>. 


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 sort

Sorts a B<N-List> using the given comparison function. The algorithm used is a stable sort.

=begin code
method sort ( N-List $list, &compare-func --> N-List )
=end code

=item $list; a B<N-List>, this must point to the top of the list.
=item &compare-func; the comparison function used to sort the B<N-List>.
 This function is passed the data from 2 elements of the B<N-List>
 and should return 0 if they are equal, a negative value if the
 first element comes before the second, or a positive value if
 the first element comes after the second.. Tthe function must be specified with following signature; C<:( gpointer $a, gpointer $b --> gint )>.

Return value; the (possibly changed) start of the B<N-List>. 


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 sort-with-data

Like C<.sort()>, but the comparison function accepts a user data argument.

=begin code
method sort-with-data ( N-List $list, &compare-func, gpointer $user-data --> N-List )
=end code

=item $list; a B<N-List>, this must point to the top of the list.
=item &compare-func; comparison function. Tthe function must be specified with following signature; C<:( gpointer $a, gpointer $b, gpointer $user-data --> gint )>.
=item $user-data; user data to pass to comparison function.

Return value; the (possibly changed) start of the B<N-List>. 


=end pod

