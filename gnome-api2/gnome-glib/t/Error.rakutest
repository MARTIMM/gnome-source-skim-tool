# Command to generate: gnome-source-skim-tool.raku -t Glib error

#TL:1:Gnome::Glib::Error:
#-------------------------------------------------------------------------------
#--[Module Imports]-------------------------------------------------------------
#-------------------------------------------------------------------------------

use Test;

use Gnome::N::X;
use Gnome::N::GlibToRakuTypes;
use Gnome::N::N-GObject;
use Gnome::N::NativeLib;

use Gnome::Glib::Error:api<2>;
use Gnome::Glib::N-GError:api<2>;

#-------------------------------------------------------------------------------
#--[Test init]------------------------------------------------------------------
#-------------------------------------------------------------------------------

#Gnome::N::debug(:on);
my Gnome::Glib::Error $error;

#-------------------------------------------------------------------------------
#--[Class init tests]-----------------------------------------------------------
#-------------------------------------------------------------------------------

subtest 'ISA test', {
  #TB:1:new-error
  my GQuark $domain = 45444;
  my Int $code = 1012342;
  my Str $message = 'my error';

  $error .= new-error( $domain, $code, $message);
  ok $error.is-valid, '.new-error( $domain, $code, $message)';
  my N-GError $ne = $error._get-native-object-no-reffing;
  is $ne.domain, $domain, "domain; $domain";

  $message = 'my error %d from file %s';
  $error .= new-error( $domain, $code, $message, gint, 2, Str, 'log.txt');
  ok $error.is-valid, '.new-error( $domain, $code, $message, …)';
  $ne = $error._get-native-object-no-reffing;
  is $ne.message, sprintf( $message, 2, 'log.txt'), "message; $ne.message()";

  #TB:1:new-literal
  $error .= new-literal( $domain, $code, $message);
  ok $error.is-valid, '.new-literal( $domain, $code, $message)';
  $ne = $error._get-native-object-no-reffing;
  is $ne.code, $code, "code; $code";

  #TB:0:new( :valist(…), :code(…), :format(…), :args(…))
  #$error .= new( :valist(…), :code(…), :format(…), :args(…));
  #ok $error.is-valid, '.new( :valist(…), :code(…), :format(…), :args(…))';

};

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# set environment variable 'raku-test-all' if rest must be tested too.
unless %*ENV<raku_test_all>:exists {
  done-testing;
  exit;
}

#-------------------------------------------------------------------------------
subtest 'Method tests', {
  with $error {
    my Int() $code;
    my UInt $domain;


#`{{
    #TB:0:matches()
    ok .matches( $domain, $code), …, '.matches()';

    #TB:0:free()
    ok .free(), …, '.free()';

    #TB:0:copy()
    ok .copy(), …, '.copy()';

}}
  }
};

#-------------------------------------------------------------------------------
done-testing;

=finish
