# Command to generate: gnome-source-skim-tool.raku -t Glib error

#TL:1:Gnome::Glib::Error:
#-------------------------------------------------------------------------------
#--[Module Imports]-------------------------------------------------------------
#-------------------------------------------------------------------------------

use Test;

use Gnome::N::X;
use Gnome::N::GlibToRakuTypes;
use Gnome::N::N-GObject;
use Gnome::N::NativeLib;

use Gnome::Glib::Error:api<2>;
use Gnome::Glib::N-GError:api<2>;

#-------------------------------------------------------------------------------
#--[Test init]------------------------------------------------------------------
#-------------------------------------------------------------------------------

#Gnome::N::debug(:on);
my Gnome::Glib::Error $error;

#-------------------------------------------------------------------------------
#--[Class init tests]-----------------------------------------------------------
#-------------------------------------------------------------------------------

subtest 'ISA test', {
  #TB:1:new( :(…), :code(…), :format(…), :...(…))
  my GQuark $domain = 45444;
  my Int $code = 1012342;
  my Str $message = 'my error';

  $error .= new( $domain, $code, $message);
  ok $error.is-valid, '.new( $domain, $code, $message)';
  my N-GError $ne = $error._get-native-object-no-reffing;
  is $ne.domain, $domain, "domain; $domain";

  $message = 'my error %d from file %s';
  $error .= new( $domain, $code, $message, [ gint, 2], [ Str, 'log.txt']);
  ok $error.is-valid, '.new( $domain, $code, $message, …)';
  $ne = $error._get-native-object-no-reffing;
  is $ne.message, sprintf( $message, 2, 'log.txt'), "message; $ne.message()";

  #TB:1:new( :literal(…), :code(…), :message(…))
  #$error .= new( :literal(…), :code(…), :message(…));
  #ok $error.is-valid, '.new( :literal(…), :code(…), :message(…))';

  #TB:1:new( :valist(…), :code(…), :format(…), :args(…))
  #$error .= new( :valist(…), :code(…), :format(…), :args(…));
  #ok $error.is-valid, '.new( :valist(…), :code(…), :format(…), :args(…))';

};

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# set environment variable 'raku-test-all' if rest must be tested too.
unless %*ENV<raku_test_all>:exists {
  done-testing;
  exit;
}

#-------------------------------------------------------------------------------
subtest 'Method tests', {
  with $error {
    my Int() $code;
    my UInt $domain;


#`{{
    #TB:0:matches()
    ok .matches( $domain, $code), …, '.matches()';

    #TB:0:free()
    ok .free(), …, '.free()';

    #TB:0:copy()
    ok .copy(), …, '.copy()';

}}
  }
};

#-------------------------------------------------------------------------------
done-testing;

=finish

#-------------------------------------------------------------------------------
subtest 'Signals …', {
  use Gnome::Gtk3::Main;

  my Gnome::Gtk3::Main $main .= new;

  class SignalHandlers {
    has Bool $!signal-processed = False;

    method … (
      'any-args',
      Gnome::Glib::Error() :$_native-object, gulong :$_handler-id
      # --> …
    ) {

      isa-ok $_native-object, Gnome::Glib::Error;
      $!signal-processed = True;
    }

    method signal-emitter ( Gnome::Glib::Error :$_widget --> Str ) {

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      $_widget.emit-by-name(
        'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      );
      is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      #$!signal-processed = False;
      #$_widget.emit-by-name(
      #  'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      #);
      #is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }
      sleep(0.4);
      $main.gtk-main-quit;

      'done'
    }
  }

  my Gnome::Glib::Error $error .= new;

  #my Gnome::Gtk3::Window $w .= new;
  #$w.add($m);

  my SignalHandlers $sh .= new;
  $error.register-signal( $sh, 'method', 'signal');

  my Promise $p = $i.start-thread(
    $sh, 'signal-emitter',
    # :!new-context,
    # :start-time(now + 1)
  );

  is $main.gtk-main-level, 0, "loop level 0";
  $main.gtk-main;
  #is $main.gtk-main-level, 0, "loop level is 0 again";

  is $p.result, 'done', 'emitter finished';
}

