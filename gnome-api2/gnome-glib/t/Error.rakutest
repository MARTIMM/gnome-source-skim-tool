# Command to generate: generate.raku -t Glib error
use v6.d;

#TL:1:Gnome::Glib::N-Error:
#-------------------------------------------------------------------------------
#--[Module Imports]-------------------------------------------------------------
#-------------------------------------------------------------------------------

use Test;
use NativeCall;


use Gnome::Glib::N-Error:api<2>;
use Gnome::Glib::Error:api<2>;
use Gnome::N::GlibToRakuTypes:api<2>;
use Gnome::N::N-Object:api<2>;
use Gnome::N::NativeLib:api<2>;
use Gnome::N::X:api<2>;

#-------------------------------------------------------------------------------
#--[Test preparation]-----------------------------------------------------------
#-------------------------------------------------------------------------------

#Gnome::N::debug(:on);
my N-Error $n-error;
my Gnome::Glib::Error $error;
#-------------------------------------------------------------------------------
#--[Class init tests]-----------------------------------------------------------
#-------------------------------------------------------------------------------

subtest 'ISA test', {
  given $error {
#    my  $args;
    my Str $format;

  #TB:1:new-error
  my GQuark $domain = 45444;
  my Int $code = 1012342;
  my Str $message = 'my error';

  $error .= new-error( $domain, $code, $message);
  ok $error.is-valid, '.new-error( $domain, $code, $message)';
  my N-Error $ne = nativecast( N-Error, $error._get-native-object-no-reffing);
  is $ne.domain, $domain, "domain; $domain";

  $message = 'my error %d from file %s';
  $error .= new-error( $domain, $code, $message, gint, 2, Str, 'log.txt');
  ok $error.is-valid, '.new-error( $domain, $code, $message, …)';
  $ne = nativecast( N-Error, $error._get-native-object-no-reffing);
  is $ne.message, sprintf( $message, 2, 'log.txt'), "message; $ne.message()";

  #TB:1:new-literal
  $error .= new-literal( $domain, $code, $message);
  ok $error.is-valid, '.new-literal( $domain, $code, $message)';
  $ne = nativecast( N-Error, $error._get-native-object-no-reffing);
  is $ne.code, $code, "code; $code";

  #TB:0:new( :valist(…), :code(…), :format(…), :args(…))
  #$error .= new( :valist(…), :code(…), :format(…), :args(…));
  #ok $error.is-valid, '.new( :valist(…), :code(…), :format(…), :args(…))';

#`{{
    #TC:0:new-valist()
    $domain = '…';
    $code = -42;
    $format = 'text';
    $args = '…';
    $error .= new-valist( $domain, $code, $format, $args);
    ok .is-valid, '.new-valist( $domain, $code, $format, $args)';

}}
  }
};

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# set environment variable 'raku-test-all' if rest must be tested too.
unless %*ENV<raku_test_all>:exists {
  done-testing;
  exit;
}

#-------------------------------------------------------------------------------
subtest 'Method tests', {
  with $error {
    my Int() $code;
    my UInt $domain;


#`{{
    #TM:0:matches()
    ok .matches( $domain, $code), '.matches()';

    #TM:0:free()
    ok .free(), '.free()';

    #TM:0:copy()
    ok .copy(), '.copy()';

}}
  }
};

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# set environment variable 'raku-test-all' if rest must be tested too.
unless %*ENV<raku_test_all>:exists {
  done-testing;
  exit;
}

#-------------------------------------------------------------------------------
subtest 'Method tests', {
  with $error {
    my Int() $error-type-private-size;
    sub error-type-copy ( N-Error $src-error, N-Error $dest-error ) {}
    sub error-type-init ( N-Error $error ) {}
    sub error-type-clear ( N-Error $error ) {}


#`{{
    #TM:0:domain-register-static()
    ok .domain-register-static( $error-type-private-size, $error-type-init, $error-type-copy, $error-type-clear), '.domain-register-static()';

    #TM:0:domain-register()
    ok .domain-register( $error-type-private-size, $error-type-init, $error-type-copy, $error-type-clear), '.domain-register()';

}}
  }
};

#-------------------------------------------------------------------------------
done-testing;

=finish

