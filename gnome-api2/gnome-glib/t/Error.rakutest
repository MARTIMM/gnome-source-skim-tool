# Command to generate: generate.raku -t -c Glib error
use v6.d;

#TL:1:Gnome::Glib::N-Error:
#-------------------------------------------------------------------------------
#--[Module Imports]-------------------------------------------------------------
#-------------------------------------------------------------------------------

use NativeCall;
use Test;


use Gnome::Glib::N-Error:api<2>;
use Gnome::N::GlibToRakuTypes:api<2>;
use Gnome::N::N-GObject:api<2>;
use Gnome::N::NativeLib:api<2>;
use Gnome::N::X:api<2>;

#-------------------------------------------------------------------------------
#--[Test preparation]-----------------------------------------------------------
#-------------------------------------------------------------------------------

#Gnome::N::debug(:on);
my Gnome::Glib::N-Error $error;

#-------------------------------------------------------------------------------
#--[Class init tests]-----------------------------------------------------------
#-------------------------------------------------------------------------------

subtest 'ISA test', {
  given $error {
    my GQuark $domain;
    my … $...;
    my Str $format;
    my Int() $code;
    my  $args;
    my Str $message;

#`{{
    #TC:0:new-error()
    $domain = '…';
    $code = -42;
    $format = 'text';
    $... = '…';
    $error .= new-error( $domain, $code, $format, $...);
    ok .is-valid, '.new-error( $domain, $code, $format, $...)';

    #TC:0:new-literal()
    $domain = '…';
    $code = -42;
    $message = 'text';
    $error .= new-literal( $domain, $code, $message);
    ok .is-valid, '.new-literal( $domain, $code, $message)';

    #TC:0:new-valist()
    $domain = '…';
    $code = -42;
    $format = 'text';
    $args = '…';
    $error .= new-valist( $domain, $code, $format, $args);
    ok .is-valid, '.new-valist( $domain, $code, $format, $args)';

}}
  }
};

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# set environment variable 'raku-test-all' if rest must be tested too.
unless %*ENV<raku_test_all>:exists {
  done-testing;
  exit;
}

#-------------------------------------------------------------------------------
subtest 'Method tests', {
  with $error {
    my Int() $code;
    my UInt $domain;


#`{{
    #TM:0:matches()
    ok .matches( $domain, $code), '.matches()';

    #TM:0:free()
    ok .free(), '.free()';

    #TM:0:copy()
    ok .copy(), '.copy()';

}}
  }
};

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# set environment variable 'raku-test-all' if rest must be tested too.
unless %*ENV<raku_test_all>:exists {
  done-testing;
  exit;
}

#-------------------------------------------------------------------------------
subtest 'Method tests', {
  with $error {
    sub error-type-init ( N-GError ) {
    }
    sub error-type-copy ( N-GError, N-GError ) {
    }
    my Int() $error-type-private-size;
    sub error-type-clear ( N-GError ) {
    }


#`{{
    #TM:0:domain-register-static()
    ok .domain-register-static( $error-type-private-size, $error-type-init, $error-type-copy, $error-type-clear), '.domain-register-static()';

    #TM:0:domain-register()
    ok .domain-register( $error-type-private-size, $error-type-init, $error-type-copy, $error-type-clear), '.domain-register()';

}}
  }
};

#-------------------------------------------------------------------------------
done-testing;

=finish

