# Command to generate: generate.raku -t -c Glib error
use v6.d;

#TL:1:Gnome::Glib::T-Error:
#-------------------------------------------------------------------------------
#--[Module Imports]-------------------------------------------------------------
#-------------------------------------------------------------------------------

use NativeCall;
use Test;


use Gnome::Glib::N-Error:api<2>;
use Gnome::Glib::T-Error:api<2>;
use Gnome::N::GlibToRakuTypes:api<2>;
use Gnome::N::N-GObject:api<2>;
use Gnome::N::NativeLib:api<2>;
use Gnome::N::X:api<2>;




my Gnome::Glib::T-Error $error .= new;
#-------------------------------------------------------------------------------
subtest 'Method tests', {
  with $error {
    my CArray[N-GError] $err;
    my Str $message;
    my Str $prefix;
    my GQuark $domain;
    my gint $code;
    my CArray[N-GError] $dest;
    my … $...;
    my Str $format;
    my N-GError $src;


#`{{
    #TM:0:set-error-literal()
    $err = '…';
    $domain = '…';
    $code = '…';
    $message = 'text';
    .set-error-literal( $err, $domain, $code, $message);
    ok True, '.set-error-literal()';

    #TM:0:set-error()
    $err = '…';
    $domain = '…';
    $code = '…';
    $format = 'text';
    $... = '…';
    .set-error( $err, $domain, $code, $format, $...);
    ok True, '.set-error()';

    #TM:0:propagate-prefixed-error()
    ok .propagate-prefixed-error( $dest, $src, $format, $...), '.propagate-prefixed-error()';

    #TM:0:propagate-error()
    ok .propagate-error( $dest, $src), '.propagate-error()';

    #TM:0:prefix-error-literal()
    ok .prefix-error-literal( $err, $prefix), '.prefix-error-literal()';

    #TM:0:prefix-error()
    ok .prefix-error( $err, $format, $...), '.prefix-error()';

    #TM:0:clear-error()
    ok .clear-error(), '.clear-error()';

}}
  }
};



#-------------------------------------------------------------------------------
done-testing;
=finish

