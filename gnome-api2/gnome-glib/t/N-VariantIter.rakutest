=comment Package: Glib, C-Source: variant
use v6.d;

#TL:1:Gnome::Glib::N-VariantIter:
#-------------------------------------------------------------------------------
#--[Module Imports]-------------------------------------------------------------
#-------------------------------------------------------------------------------

use NativeCall;
use Test;


use Gnome::Glib::N-Variant:api<2>;
use Gnome::Glib::N-VariantIter:api<2>;
use Gnome::N::GlibToRakuTypes:api<2>;
use Gnome::N::N-Object:api<2>;
use Gnome::N::NativeLib:api<2>;
use Gnome::N::X:api<2>;

#-------------------------------------------------------------------------------
#--[Test preparation]-----------------------------------------------------------
#-------------------------------------------------------------------------------

#Gnome::N::debug(:on);
#my N-VariantIter $variantiter;

enum VFlags ( :AAA(1), :BBB(2), :CCC(4), :DDD(8));
my GFlag $some-flags = AAA +| DDD;
my $some-strings = CArray[Str].new( 'a', 'b', 'c', Str);

# t: the type string of G_VARIANT_TYPE_UINT64; an unsigned 64 bit integer.
my Gnome::Glib::N-Variant $variant .= new-variant(
  '(t^as)', GFlag, $some-flags, CArray[Str], $some-strings
);

my Gnome::Glib::N-VariantIter $variantiter .= new(
  :native-object($variant.iter-new)
);
ok $variantiter.is-valid, '.iter-new()';

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# set environment variable 'raku-test-all' if rest must be tested too.
unless %*ENV<raku_test_all>:exists {
  done-testing;
  exit;
}

#-------------------------------------------------------------------------------
subtest 'Method tests', {
  with $variantiter {
    my CArray[N-Variant] $value;
    my Str $format-string;


#`{{
    #TM:0:copy()
    ok .copy(), '.copy()';

    #TM:0:free()
    ok .free(), '.free()';
}}

    #TM:1:init()
    is $variantiter.init($variant), 2, '.init()';

#`{{
    #TM:0:loop()
    ok .loop( $format-string), '.loop()';
}}

    #TM:1:n-children()
    is .n-children(), 2, '.n-children()';

#`{{
    #TM:0:next()
    ok .next( $format-string), '.next()';
}}

    #TM:1:next-value()
    my Gnome::Glib::N-Variant $v .= new(:native-object(.next-value));
    is $v.get-uint64, $some-flags, '.next-value()';

#    $v .= new(:native-object(.next-value));
#    is $v.get-uint64, $some-flags, '.next-value()';

    #, '.next-value()';
  }
};

#-------------------------------------------------------------------------------
subtest 'Function tests', {
  with $variantiter {


#`{{
}}
  }
};

#-------------------------------------------------------------------------------
done-testing;

=finish

