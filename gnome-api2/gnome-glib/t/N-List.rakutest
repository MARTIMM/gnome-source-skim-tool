# Command to generate: generate.raku -v -t Glib list record
use v6.d;

#TL:1:Gnome::Glib::List:
#-------------------------------------------------------------------------------
#--[Module Imports]-------------------------------------------------------------
#-------------------------------------------------------------------------------

use NativeCall;
use Test;


use Gnome::Glib::N-List:api<2>;
use Gnome::N::GlibToRakuTypes:api<2>;
use Gnome::N::N-Object:api<2>;
use Gnome::N::NativeLib:api<2>;
use Gnome::N::X:api<2>;

#-------------------------------------------------------------------------------
#--[Test preparation]-----------------------------------------------------------
#-------------------------------------------------------------------------------

#Gnome::N::debug(:on);
my Gnome::Glib::N-List $list .= new;

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# set environment variable 'raku-test-all' if rest must be tested too.
unless %*ENV<raku_test_all>:exists {
  done-testing;
  exit;
}

#-------------------------------------------------------------------------------
#subtest 'Function tests', {
  with $list {
    my  $free-func;
    my N-List() $list2;
    my  $func;
    my N-List() $link;
    my  $compare-func;
    my UInt() $n;
    my N-List() $llink;
    my N-List() $sibling;
    my gpointer $user-data;

    my gpointer $data;
    my Int() $position;
    my N-List $N-List;

    $data = Pointer[gint].new(101);

    #TM:1:append
    for ^10 -> $i {
      $N-List = .append( $N-List, Pointer[int].new($i));
    }

    #TM:1:length
    is .length($N-List), 10, '.length() / .append()';

    #TB:1:last()
    #TB:1:position()
    my N-List $l = .last($N-List);
    is .position( $N-List, $l), 9, '.last() / .position()';

#`{{
    #TB:0:sort-with-data()
    ok .sort-with-data( $compare-func, $user-data), '.sort-with-data()';

    #TB:0:sort()
    ok .sort( $compare-func), '.sort()';

    #TB:0:reverse()
    ok .reverse(), '.reverse()';

    #TB:0:remove-link()
    ok .remove-link( $llink), '.remove-link()';

    #TB:0:remove-all()
    ok .remove-all( $data), '.remove-all()';

    #TB:0:remove()
    ok .remove( $data), '.remove()';
}}

#TODO prepend is a method defined in Any. It is found before FALLBACK can
    #TB:1:prepend()
    $N-List = .prepend( $N-List, $data);
    is .length($N-List), 11, '.prepend()';

#`{{
    #TB:0:nth-prev()
    ok .nth-prev( $n), '.nth-prev()';

    #TB:0:nth-data()
    note .nth-data( $N-List, 5).gist;
    my Pointer[int] $p = nativecast( Pointer[int], .nth-data( $N-List, 5));
    note $p.gist();
    is $p[0], 5, '.nth-data()';
}}

    #TB:1:nth()
    $l = .nth( $N-List, 5);
    is .position( $N-List, $l), 5, '.nth()';

#`{{
    #TB:0:insert-sorted-with-data()
    ok .insert-sorted-with-data( $data, $func, $user-data), '.insert-sorted-with-data()';

    #TB:0:insert-sorted()
    ok .insert-sorted( $data, $func), '.insert-sorted()';

    #TB:0:insert-before-link()
    ok .insert-before-link( $sibling, $link-), '.insert-before-link()';

    #TB:0:insert-before()
    ok .insert-before( $sibling, $data), '.insert-before()';
}}

    $data = Pointer[gint].new(102);

    #TB:1:insert()
    $N-List = .insert( $N-List, $data, 0);
    $N-List = .insert( $N-List, $data, 1);
    is .length($N-List), 13, '.insert()';

#`{{
    #TB:0:index()
    ok .index( $data), '.index()';

    #TB:0:free-full()
    ok .free-full( $free-func), '.free-full()';

    #TB:0:free-one()
    ok .free-one(), '.free-one()';

    #TB:0:free()
    ok .free(), '.free()';

    #TB:0:foreach()
    ok .foreach( $func, $user-data), '.foreach()';

    #TB:0:first()
    ok .first(), '.first()';

    #TB:0:find-custom()
    ok .find-custom( $data, $func), '.find-custom()';

    #TB:0:find()
    ok .find( $data), '.find()';

    #TB:0:delete-link()
    ok .delete-link( $link-), '.delete-link()';

    #TB:0:copy-deep()
    ok .copy-deep( $func, $user-data), '.copy-deep()';

    #TB:0:copy()
    ok .copy(), '.copy()';

    #TB:0:concat()
    ok .concat( $list2), '.concat()';

    #TB:0:alloc()
    ok .alloc(), '.alloc()';

}}
  }
#};

#-------------------------------------------------------------------------------
done-testing;

=finish

