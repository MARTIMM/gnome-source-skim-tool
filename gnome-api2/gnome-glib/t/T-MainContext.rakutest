# Command to generate: generate.raku -t Glib main
use v6.d;

#TL:1:Gnome::Glib::T-MainContext:
#-------------------------------------------------------------------------------
#--[Module Imports]-------------------------------------------------------------
#-------------------------------------------------------------------------------

use NativeCall;
use Test;


use Gnome::Glib::MainContext:api<2>;
use Gnome::Glib::N-MainContext:api<2>;
#use Gnome::Glib::N-PollFD:api<2>;
#use Gnome::Glib::N-Source:api<2>;
use Gnome::Glib::T-MainContext:api<2>;
use Gnome::N::GlibToRakuTypes:api<2>;
use Gnome::N::N-GObject:api<2>;
use Gnome::N::NativeLib:api<2>;
use Gnome::N::X:api<2>;



#-------------------------------------------------------------------------------
#--[Bitfields]------------------------------------------------------------------
#-------------------------------------------------------------------------------
#TE:1:GMainContextFlags
subtest 'GMainContextFlags', {
  is G_MAIN_CONTEXT_FLAGS_NONE.value, 0, 'bitfield G_MAIN_CONTEXT_FLAGS_NONE = 0';

  is G_MAIN_CONTEXT_FLAGS_OWNERLESS_POLLING.value, 1, 'bitfield G_MAIN_CONTEXT_FLAGS_OWNERLESS_POLLING = 1';

};


my Gnome::Glib::T-MainContext $main .= new;
#-------------------------------------------------------------------------------
subtest 'Method tests', {
  with $main {
    my gpointer $data;
    my  $pid;
#    my Callable $handler ( guint ) $clear-func;
#    my Callable $handler ( gpointer ) $notify;
    my gint-ptr $tag-ptr;
#    my Callable $handler ( , gint, gpointer ) $function;
    my gint $priority;
    my guint $interval;


#`{{
    #TM:0:timeout-source-new-seconds()
    ok .timeout-source-new-seconds( $interval), '.timeout-source-new-seconds()';

    #TM:0:timeout-source-new()
    ok .timeout-source-new( $interval), '.timeout-source-new()';

    #TM:0:timeout-add-seconds-full()
    ok .timeout-add-seconds-full( $priority, $interval, $function, $data, $notify), '.timeout-add-seconds-full()';

    #TM:0:timeout-add-seconds()
    ok .timeout-add-seconds( $interval, $function, $data), '.timeout-add-seconds()';

    #TM:0:timeout-add-full()
    ok .timeout-add-full( $priority, $interval, $function, $data, $notify), '.timeout-add-full()';

    #TM:0:timeout-add()
    ok .timeout-add( $interval, $function, $data), '.timeout-add()';
}}

    #TM::main-depth()
    is .main-depth(), 0, '.main-depth()';

#`{{
    #TM:0:main-current-source()
    ok .main-current-source(), '.main-current-source()';

    #TM:0:idle-source-new()
    ok .idle-source-new(), '.idle-source-new()';

    #TM:0:idle-remove-by-data()
    ok .idle-remove-by-data( $data), '.idle-remove-by-data()';

    #TM:0:idle-add-full()
    ok .idle-add-full( $priority, $function, $data, $notify), '.idle-add-full()';

    #TM:0:idle-add()
    ok .idle-add( $function, $data), '.idle-add()';

    #TM:0:get-real-time()
     .get-real-time(), '…', '.get-real-time()';

    #TM:0:get-monotonic-time()
     .get-monotonic-time(), '…', '.get-monotonic-time()';

    #TM:0:clear-handle-id()
    ok .clear-handle-id( $tag-ptr, $clear-func), '.clear-handle-id()';

    #TM:0:child-watch-source-new()
    ok .child-watch-source-new( $pid), '.child-watch-source-new()';

    #TM:0:child-watch-add-full()
    ok .child-watch-add-full( $priority, $pid, $function, $data, $notify), '.child-watch-add-full()';

    #TM:0:child-watch-add()
    ok .child-watch-add( $pid, $function, $data), '.child-watch-add()';

}}
  }
};

#-------------------------------------------------------------------------------
#--[Constants]------------------------------------------------------------------
#-------------------------------------------------------------------------------

subtest 'constants', {
#TE:1:G_PRIORITY_HIGH
is G_PRIORITY_HIGH, -100, "constant G_PRIORITY_HIGH = -100";

#TE:1:G_SOURCE_REMOVE
is G_SOURCE_REMOVE, false, "constant G_SOURCE_REMOVE = false";

#TE:1:G_SOURCE_CONTINUE
is G_SOURCE_CONTINUE, true, "constant G_SOURCE_CONTINUE = true";

#TE:1:G_PRIORITY_DEFAULT_IDLE
is G_PRIORITY_DEFAULT_IDLE, 200, "constant G_PRIORITY_DEFAULT_IDLE = 200";

#TE:1:G_PRIORITY_DEFAULT
is G_PRIORITY_DEFAULT, 0, "constant G_PRIORITY_DEFAULT = 0";

#TE:1:G_PRIORITY_HIGH_IDLE
is G_PRIORITY_HIGH_IDLE, 100, "constant G_PRIORITY_HIGH_IDLE = 100";

#TE:1:G_PRIORITY_LOW
is G_PRIORITY_LOW, 300, "constant G_PRIORITY_LOW = 300";

};



#-------------------------------------------------------------------------------
done-testing;
=finish

