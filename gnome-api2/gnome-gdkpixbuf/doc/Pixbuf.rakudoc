=comment Package: GdkPixbuf, C-Source: gdk-pixbuf
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Gnome::GdkPixbuf::Pixbuf

=head1 Description

A pixel buffer.

B<Gnome::GdkPixbuf::Pixbuf> contains information about an image's pixel data,
its color space, bits per sample, width and height, and the
rowstride (the number of bytes between the start of one row
and the start of the next).

=head3 Creating new B<Gnome::GdkPixbuf::Pixbuf>

The most basic way to create a pixbuf is to wrap an existing pixel
buffer with a B<Gnome::GdkPixbuf::Pixbuf> instance. You can use the
[B<ctor C<$GdkPixbuf>.Pixbuf.new_from_data>] function to do this.

Every time you create a new B<Gnome::GdkPixbuf::Pixbuf> instance for some data, you
will need to specify the destroy notification function that will be
called when the data buffer needs to be freed; this will happen when
a B<Gnome::GdkPixbuf::Pixbuf> is finalized by the reference counting functions. If
you have a chunk of static data compiled into your application, you
can pass in undefined as the destroy notification function so that the
data will not be freed.

The [B<ctor C<$GdkPixbuf>.Pixbuf.new>] constructor function can be used
as a convenience to create a pixbuf with an empty buffer; this is
equivalent to allocating a data buffer using B<malloc()> and then
wrapping it with B<C<.new-from-data()>>. The B<C<.new-pixbuf()>>
function will compute an optimal rowstride so that rendering can be
performed with an efficient algorithm.

As a special case, you can use the [B<ctor C<$GdkPixbuf>.Pixbuf.new_from_xpm_data>]
function to create a pixbuf from inline XPM image data.

You can also copy an existing pixbuf with the [method C<$Pixbuf>.copy]
function. This is not the same as just acquiring a reference to
the old pixbuf instance: the copy function will actually duplicate
the pixel data in memory and create a new B<Pixbuf> instance
for it.

=head3 Reference counting

B<Gnome::GdkPixbuf::Pixbuf> structures are reference counted. This means that an
application can share a single pixbuf among many parts of the
code. When a piece of the program needs to use a pixbuf, it should
acquire a reference to it by calling B<g_object_ref()>; when it no
longer needs the pixbuf, it should release the reference it acquired
by calling B<g_object_unref()>. The resources associated with a
B<Gnome::GdkPixbuf::Pixbuf> will be freed when its reference count drops to zero.
Newly-created B<Gnome::GdkPixbuf::Pixbuf> instances start with a reference count
of one.

=head3 Image Data

Image data in a pixbuf is stored in memory in an uncompressed,
packed format. Rows in the image are stored top to bottom, and
in each row pixels are stored from left to right.

There may be padding at the end of a row.

The "rowstride" value of a pixbuf, as returned by [B<method C<$GdkPixbuf>.Pixbuf.get_rowstride>],
indicates the number of bytes between rows.

**NOTE**: If you are copying raw pixbuf data with B<memcpy()> note that the
last row in the pixbuf may not be as wide as the full rowstride, but rather
just as wide as the pixel data needs to be; that is: it is unsafe to do
B<memcpy (dest, pixels, rowstride * height)> to copy a whole pixbuf. Use
C<.copy() in class Gnome::GdkPixbuf::Pixbuf> instead, or compute the width in bytes of the
last row as:

=begin comment
last_row = width * ((n_channels * bits_per_sample + 7) / 8);

=end comment

The same rule applies when iterating over each row of a B<Gnome::GdkPixbuf::Pixbuf> pixels
array.

The following code illustrates a simple B<put_pixel()>
function for RGB pixbufs with 8 bits per channel with an alpha
channel.

=begin comment
static void
put_pixel (GdkPixbuf *pixbuf,
           int x,
	   int y,
	   guchar red,
	   guchar green,
	   guchar blue,
	   guchar alpha)
{
  int n_channels = gdk_pixbuf_get_n_channels (pixbuf);

  // Ensure that the pixbuf is valid
  g_assert (gdk_pixbuf_get_colorspace (pixbuf) == GDK_COLORSPACE_RGB);
  g_assert (gdk_pixbuf_get_bits_per_sample (pixbuf) == 8);
  g_assert (gdk_pixbuf_get_has_alpha (pixbuf));
  g_assert (n_channels == 4);

  int width = gdk_pixbuf_get_width (pixbuf);
  int height = gdk_pixbuf_get_height (pixbuf);

  // Ensure that the coordinates are in a valid range
  g_assert (x >= 0 && x < width);
  g_assert (y >= 0 && y < height);

  int rowstride = gdk_pixbuf_get_rowstride (pixbuf);

  // The pixel buffer in the GdkPixbuf instance
  guchar *pixels = gdk_pixbuf_get_pixels (pixbuf);

  // The pixel we wish to modify
  guchar *p = pixels + y * rowstride + x * n_channels;
  p[0] = red;
  p[1] = green;
  p[2] = blue;
  p[3] = alpha;
}

=end comment

=head3 Loading images

The B<GdkPixBuf> class provides a simple mechanism for loading
an image from a file in synchronous and asynchronous fashion.

For GUI applications, it is recommended to use the asynchronous
stream API to avoid blocking the control flow of the application.

Additionally, B<Gnome::GdkPixbuf::Pixbuf> provides the B<Gnome::GdkPixbuf::Pixbuf>
API for progressive image loading.

=head3 Saving images

The >GdkPixbufB< class provides methods for saving image data in
a number of file formats. The formatted data can be written to a
file or to a memory buffer. >GdkPixbufB< can also call a user-defined
callback on the data, which allows to e.g. write the image
to a socket or store it in a database.

=begin comment

=head2 Example
# Example use of module Gnome::GdkPixbuf::Pixbuf

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

=head2 new

=head3 :native-object

Create an object using a native object from elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object() :$native-object! )

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-gdkpixbuf

Creates a new >GdkPixbufB< structure and allocates a buffer for it.

If the allocation of the buffer failed, this function will return undefined.

The buffer has an optimal rowstride. Note that the buffer is not cleared;
you will have to fill it completely yourself.

=begin code
method new-gdkpixbuf ( GdkColorspace $colorspace, Bool() $has-alpha, Int() $bits-per-sample, Int() $width, Int() $height --> Gnome::GdkPixbuf::Pixbuf \)
=end code

=item $colorspace; Color space for image.
=item $has-alpha; Whether the image should have transparency information.
=item $bits-per-sample; Number of bits per color sample.
=item $width; Width of image in pixels, must be > 0.
=item $height; Height of image in pixels, must be > 0.

=begin comment

=head2 Example
# Example for new-gdkpixbuf

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-from-bytes

Creates a new B<Gnome::GdkPixbuf::Pixbuf> out of in-memory readonly image data.

Currently only RGB images with 8 bits per sample are supported.

This is the >GBytesB< variant of C<.new-from-data()>, useful
for language bindings.

=begin code
method new-from-bytes ( N-Object $data, GdkColorspace $colorspace, Bool() $has-alpha, Int() $bits-per-sample, Int() $width, Int() $height, Int() $rowstride --> Gnome::GdkPixbuf::Pixbuf \)
=end code

=item $data; Image data in 8-bit/sample packed format inside a B<Gnome::Glib::N-Bytes>
=item $colorspace; Colorspace for the image data.
=item $has-alpha; Whether the data has an opacity channel.
=item $bits-per-sample; Number of bits per sample.
=item $width; Width of the image in pixels, must be > 0.
=item $height; Height of the image in pixels, must be > 0.
=item $rowstride; Distance in bytes between row starts.

=begin comment

=head2 Example
# Example for new-from-bytes

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-from-data

Creates a new B<Gnome::GdkPixbuf::Pixbuf> out of in-memory image data.

Currently only RGB images with 8 bits per sample are supported.

Since you are providing a pre-allocated pixel buffer, you must also
specify a way to free that data.  This is done with a function of
type >GdkPixbufDestroyNotifyB<.  When a pixbuf created with is
finalized, your destroy notification function will be called, and
it is its responsibility to free the pixel array.

See also: C<.new-from-bytes() in class Gnome::GdkPixbuf::Pixbuf>

=begin code
method new-from-data ( Str $data, GdkColorspace $colorspace, Bool() $has-alpha, Int() $bits-per-sample, Int() $width, Int() $height, Int() $rowstride, &destroy-fn, gpointer $destroy-fn-data --> Gnome::GdkPixbuf::Pixbuf \)
=end code

=item $data; Image data in 8-bit/sample packed format.
=item $colorspace; Colorspace for the image data.
=item $has-alpha; Whether the data has an opacity channel.
=item $bits-per-sample; Number of bits per sample.
=item $width; Width of the image in pixels, must be > 0.
=item $height; Height of the image in pixels, must be > 0.
=item $rowstride; Distance in bytes between row starts.
=item &destroy-fn; Function used to free the data when the pixbuf's reference count
drops to zero, or undefined if the data should not be freed. Tthe function must be specified with following signature; C<:( Str $pixels, gpointer $data )>.
=item $destroy-fn-data; Closure data to pass to the destroy notification function.

=begin comment

=head2 Example
# Example for new-from-data

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-from-file

Creates a new pixbuf by loading an image from a file.

The file format is detected automatically.

If undefined is returned, then C<$error> will be set. Possible errors are:

=item the file could not be opened
=item there is no loader for the file's format
=item there is not enough memory to allocate the image buffer
=item the image buffer contains invalid data

The error domains are >GDK_PIXBUF_ERRORB< and >G_FILE_ERRORB<.

=begin code
method new-from-file ( Str $filename, CArray[N-Error] $err --> Gnome::GdkPixbuf::Pixbuf \)
=end code

=item $filename; Name of file to load, in the GLib file
  name encoding.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

=begin comment

=head2 Example
# Example for new-from-file

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-from-file-at-scale

Creates a new pixbuf by loading an image from a file.

The file format is detected automatically.

If undefined is returned, then C<$error> will be set. Possible errors are:

=item the file could not be opened
=item there is no loader for the file's format
=item there is not enough memory to allocate the image buffer
=item the image buffer contains invalid data

The error domains are >GDK_PIXBUF_ERRORB< and >G_FILE_ERRORB<.

The image will be scaled to fit in the requested size, optionally preserving
the image's aspect ratio.

When preserving the aspect ratio, a >widthB< of -1 will cause the image
to be scaled to the exact given height, and a >heightB< of -1 will cause
the image to be scaled to the exact given width. When not preserving
aspect ratio, a >widthB< or >heightB< of -1 means to not scale the image
at all in that dimension. Negative values for >widthB< and >heightB< are
allowed since 2.8.

=begin code
method new-from-file-at-scale ( Str $filename, Int() $width, Int() $height, Bool() $preserve-aspect-ratio, CArray[N-Error] $err --> Gnome::GdkPixbuf::Pixbuf \)
=end code

=item $filename; Name of file to load, in the GLib file
    name encoding.
=item $width; The width the image should have or -1 to not constrain the width.
=item $height; The height the image should have or -1 to not constrain the height.
=item $preserve-aspect-ratio; C<True> to preserve the image's aspect ratio.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

=begin comment

=head2 Example
# Example for new-from-file-at-scale

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-from-file-at-size

Creates a new pixbuf by loading an image from a file.

The file format is detected automatically.

If undefined is returned, then C<$error> will be set. Possible errors are:

=item the file could not be opened
=item there is no loader for the file's format
=item there is not enough memory to allocate the image buffer
=item the image buffer contains invalid data

The error domains are >GDK_PIXBUF_ERRORB< and >G_FILE_ERRORB<.

The image will be scaled to fit in the requested size, preserving
the image's aspect ratio. Note that the returned pixbuf may be smaller
than >widthB< x >heightB<, if the aspect ratio requires it. To load
and image at the requested size, regardless of aspect ratio, use
C<.new-from-file-at-scale() in class Gnome::GdkPixbuf::Pixbuf>.

=begin code
method new-from-file-at-size ( Str $filename, Int() $width, Int() $height, CArray[N-Error] $err --> Gnome::GdkPixbuf::Pixbuf \)
=end code

=item $filename; Name of file to load, in the GLib file
    name encoding.
=item $width; The width the image should have or -1 to not constrain the width.
=item $height; The height the image should have or -1 to not constrain the height.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

=begin comment

=head2 Example
# Example for new-from-file-at-size

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-from-resource

Creates a new pixbuf by loading an image from an resource.

The file format is detected automatically. If undefined is returned, then C<$error> will be set.

=begin code
method new-from-resource ( Str $resource-path, CArray[N-Error] $err --> Gnome::GdkPixbuf::Pixbuf \)
=end code

=item $resource-path; the path of the resource file.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

=begin comment

=head2 Example
# Example for new-from-resource

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-from-resource-at-scale

Creates a new pixbuf by loading an image from an resource.

The file format is detected automatically. If undefined is returned, then C<$error> will be set.

The image will be scaled to fit in the requested size, optionally
preserving the image's aspect ratio. When preserving the aspect ratio,
a C<$width> of -1 will cause the image to be scaled to the exact given
height, and a C<$height> of -1 will cause the image to be scaled to the
exact given width. When not preserving aspect ratio, a C<$width> or C<$height> of -1 means to not scale the image at all in that dimension.

The stream is not closed.

=begin code
method new-from-resource-at-scale ( Str $resource-path, Int() $width, Int() $height, Bool() $preserve-aspect-ratio, CArray[N-Error] $err --> Gnome::GdkPixbuf::Pixbuf \)
=end code

=item $resource-path; the path of the resource file.
=item $width; The width the image should have or -1 to not constrain the width.
=item $height; The height the image should have or -1 to not constrain the height.
=item $preserve-aspect-ratio; C<True> to preserve the image's aspect ratio.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

=begin comment

=head2 Example
# Example for new-from-resource-at-scale

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-from-stream

Creates a new pixbuf by loading an image from an input stream.

The file format is detected automatically.

If undefined is returned, then >errorB< will be set.

The >cancellableB< can be used to abort the operation from another thread.
If the operation was cancelled, the error >G_IO_ERROR_CANCELLEDB< will be
returned. Other possible errors are in the >GDK_PIXBUF_ERRORB< and
>G_IO_ERRORB< domains.

The stream is not closed.

=begin code
method new-from-stream ( N-Object() $stream, N-Object() $cancellable, CArray[N-Error] $err --> Gnome::GdkPixbuf::Pixbuf \)
=end code

=item $stream; a >GInputStreamB< to load the pixbuf from.
=item $cancellable; optional >GCancellableB< object, undefined to ignore.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

=begin comment

=head2 Example
# Example for new-from-stream

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-from-stream-at-scale

Creates a new pixbuf by loading an image from an input stream.

The file format is detected automatically. If undefined is returned, then C<$error> will be set. The C<$cancellable> can be used to abort the operation
from another thread. If the operation was cancelled, the error
>G_IO_ERROR_CANCELLEDB< will be returned. Other possible errors are in
the >GDK_PIXBUF_ERRORB< and >G_IO_ERRORB< domains.

The image will be scaled to fit in the requested size, optionally
preserving the image's aspect ratio.

When preserving the aspect ratio, a >widthB< of -1 will cause the image to be
scaled to the exact given height, and a >heightB< of -1 will cause the image
to be scaled to the exact given width. If both >widthB< and >heightB< are
given, this function will behave as if the smaller of the two values
is passed as -1.

When not preserving aspect ratio, a >widthB< or >heightB< of -1 means to not
scale the image at all in that dimension.

The stream is not closed.

=begin code
method new-from-stream-at-scale ( N-Object() $stream, Int() $width, Int() $height, Bool() $preserve-aspect-ratio, N-Object() $cancellable, CArray[N-Error] $err --> Gnome::GdkPixbuf::Pixbuf \)
=end code

=item $stream; a >GInputStreamB< to load the pixbuf from.
=item $width; The width the image should have or -1 to not constrain the width.
=item $height; The height the image should have or -1 to not constrain the height.
=item $preserve-aspect-ratio; C<True> to preserve the image's aspect ratio.
=item $cancellable; optional >GCancellableB< object, undefined to ignore.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

=begin comment

=head2 Example
# Example for new-from-stream-at-scale

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-from-stream-finish

Finishes an asynchronous pixbuf creation operation started with
C<.new-from-stream-async()>.

=begin code
method new-from-stream-finish ( N-Object() $async-result, CArray[N-Error] $err --> Gnome::GdkPixbuf::Pixbuf \)
=end code

=item $async-result; a >GAsyncResultB<.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

=begin comment

=head2 Example
# Example for new-from-stream-finish

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-from-xpm-data

Creates a new pixbuf by parsing XPM data in memory.

This data is commonly the result of including an XPM file into a
program's C source.

=begin code
method new-from-xpm-data ( Array[Str] $data --> Gnome::GdkPixbuf::Pixbuf \)
=end code

=item $data; Pointer to inline XPM data..

=begin comment

=head2 Example
# Example for new-from-xpm-data

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 add-alpha

Takes an existing pixbuf and adds an alpha channel to it.

If the existing pixbuf already had an alpha channel, the channel
values are copied from the original; otherwise, the alpha channel
is initialized to 255 (full opacity).

If >substitute_colorB< is C<True>, then the color specified by the
(>rB<, >gB<, >bB<) arguments will be assigned zero opacity. That is,
if you pass >(255, 255, 255)B< for the substitute color, all white
pixels will become fully transparent.

If >substitute_colorB< is C<False>, then the (>rB<, >gB<, >bB<) arguments
will be ignored.

=begin code
method add-alpha ( Bool() $substitute-color, UInt() $r, UInt() $g, UInt() $b --> N-Object )
=end code

=item $substitute-color; Whether to set a color to zero opacity..
=item $r; Red value to substitute..
=item $g; Green value to substitute..
=item $b; Blue value to substitute..

Return value; A newly-created pixbuf. 

=begin comment

=head2 Example
# Example for add-alpha

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 apply-embedded-orientation

Takes an existing pixbuf and checks for the presence of an
associated "orientation" option.

The orientation option may be provided by the JPEG loader (which
reads the exif orientation tag) or the TIFF loader (which reads
the TIFF orientation tag, and compensates it for the partial
transforms performed by libtiff).

If an orientation option/tag is present, the appropriate transform
will be performed so that the pixbuf is oriented correctly.

=begin code
method apply-embedded-orientation (--> N-Object )
=end code

Return value; A newly-created pixbuf. 

=begin comment

=head2 Example
# Example for apply-embedded-orientation

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 composite
This function is not yet available

Creates a transformation of the source image C<$src> by scaling by C<$scale-x> and C<$scale-y> then translating by C<$offset-x> and C<$offset-y>.

This gives an image in the coordinates of the destination pixbuf.
The rectangle ( C<$dest-x>, C<$dest-y>, C<$dest-width>, C<$dest-height>)
is then alpha blended onto the corresponding rectangle of the
original destination image.

When the destination rectangle contains parts not in the source
image, the data at the edges of the source image is replicated
to infinity.

![](composite.png)

=begin code
method composite ( N-Object() $dest, Int() $dest-x, Int() $dest-y, Int() $dest-width, Int() $dest-height, Num() $offset-x, Num() $offset-y, Num() $scale-x, Num() $scale-y, GdkInterpType  $interp-type, Int() $overall-alpha )
=end code

=item $dest; the B<Gnome::GdkPixbuf::Pixbuf> into which to render the results.
=item $dest-x; the left coordinate for region to render.
=item $dest-y; the top coordinate for region to render.
=item $dest-width; the width of the region to render.
=item $dest-height; the height of the region to render.
=item $offset-x; the offset in the X direction (currently rounded to an integer).
=item $offset-y; the offset in the Y direction (currently rounded to an integer).
=item $scale-x; the scale factor in the X direction.
=item $scale-y; the scale factor in the Y direction.
=item $interp-type; the interpolation type for the transformation..
=item $overall-alpha; overall alpha for source image (0..255).

=begin comment

=head2 Example
# Example for composite

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 composite-color
This function is not yet available

Creates a transformation of the source image C<$src> by scaling by C<$scale-x> and C<$scale-y> then translating by C<$offset-x> and C<$offset-y>,
then alpha blends the rectangle ( C<$dest-x> , C<$dest-y>, C<$dest-width>, C<$dest-height>) of the resulting image with a checkboard of the
colors C<$color1> and C<$color2> and renders it onto the destination
image.

If the source image has no alpha channel, and C<$overall-alpha> is 255, a fast
path is used which omits the alpha blending and just performs the scaling.

See C<.composite-color-simple()> for a simpler variant of this
function suitable for many tasks.

=begin code
method composite-color ( N-Object() $dest, Int() $dest-x, Int() $dest-y, Int() $dest-width, Int() $dest-height, Num() $offset-x, Num() $offset-y, Num() $scale-x, Num() $scale-y, GdkInterpType  $interp-type, Int() $overall-alpha, Int() $check-x, Int() $check-y, Int() $check-size, UInt() $color1, UInt() $color2 )
=end code

=item $dest; the B<Gnome::GdkPixbuf::Pixbuf> into which to render the results.
=item $dest-x; the left coordinate for region to render.
=item $dest-y; the top coordinate for region to render.
=item $dest-width; the width of the region to render.
=item $dest-height; the height of the region to render.
=item $offset-x; the offset in the X direction (currently rounded to an integer).
=item $offset-y; the offset in the Y direction (currently rounded to an integer).
=item $scale-x; the scale factor in the X direction.
=item $scale-y; the scale factor in the Y direction.
=item $interp-type; the interpolation type for the transformation..
=item $overall-alpha; overall alpha for source image (0..255).
=item $check-x; the X offset for the checkboard (origin of checkboard is at - C<$check-x>, - C<$check-y>).
=item $check-y; the Y offset for the checkboard.
=item $check-size; the size of checks in the checkboard (must be a power of two).
=item $color1; the color of check at upper left.
=item $color2; the color of the other check.

=begin comment

=head2 Example
# Example for composite-color

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 composite-color-simple
This function is not yet available

Creates a new pixbuf by scaling >srcB< to >dest_widthB< x >dest_heightB<
and alpha blending the result with a checkboard of colors >color1B<
and >color2B<.

=begin code
method composite-color-simple ( Int() $dest-width, Int() $dest-height, GdkInterpType  $interp-type, Int() $overall-alpha, Int() $check-size, UInt() $color1, UInt() $color2 --> N-Object )
=end code

=item $dest-width; the width of destination image.
=item $dest-height; the height of destination image.
=item $interp-type; the interpolation type for the transformation..
=item $overall-alpha; overall alpha for source image (0..255).
=item $check-size; the size of checks in the checkboard (must be a power of two).
=item $color1; the color of check at upper left.
=item $color2; the color of the other check.

Return value; the new pixbuf. 

=begin comment

=head2 Example
# Example for composite-color-simple

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 copy

Creates a new >GdkPixbufB< with a copy of the information in the specified
>pixbufB<.

Note that this does not copy the options set on the original >GdkPixbufB<,
use C<.copy-options()> for this.

=begin code
method copy (--> N-Object )
=end code

Return value; A newly-created pixbuf. 

=begin comment

=head2 Example
# Example for copy

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 copy-area

Copies a rectangular area from >src_pixbufB< to >dest_pixbufB<.

Conversion of pixbuf formats is done automatically.

If the source rectangle overlaps the destination rectangle on the
same pixbuf, it will be overwritten during the copy operation.
Therefore, you can not use this function to scroll a pixbuf.

=begin code
method copy-area ( Int() $src-x, Int() $src-y, Int() $width, Int() $height, N-Object() $dest-pixbuf, Int() $dest-x, Int() $dest-y )
=end code

=item $src-x; Source X coordinate within C<$src-pixbuf>..
=item $src-y; Source Y coordinate within C<$src-pixbuf>..
=item $width; Width of the area to copy..
=item $height; Height of the area to copy..
=item $dest-pixbuf; Destination pixbuf..
=item $dest-x; X coordinate within C<$dest-pixbuf>..
=item $dest-y; Y coordinate within C<$dest-pixbuf>..

=begin comment

=head2 Example
# Example for copy-area

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 copy-options

Copies the key/value pair options attached to a >GdkPixbufB< to another
>GdkPixbufB<.

This is useful to keep original metadata after having manipulated
a file. However be careful to remove metadata which you've already
applied, such as the "orientation" option after rotating the image.

=begin code
method copy-options ( N-Object() $dest-pixbuf --> Bool )
=end code

=item $dest-pixbuf; the destination pixbuf.

Return value; C<True> on success.. 

=begin comment

=head2 Example
# Example for copy-options

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 fill

Clears a pixbuf to the given RGBA value, converting the RGBA value into
the pixbuf's pixel format.

The alpha component will be ignored if the pixbuf doesn't have an alpha
channel.

=begin code
method fill ( UInt() $pixel )
=end code

=item $pixel; RGBA pixel to used to clear (>0xffffffffB< is opaque white,
  >0x00000000B< transparent black).

=begin comment

=head2 Example
# Example for fill

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 flip

Flips a pixbuf horizontally or vertically and returns the
result in a new pixbuf.

=begin code
method flip ( Bool() $horizontal --> N-Object )
=end code

=item $horizontal; C<True> to flip horizontally, C<False> to flip vertically.

Return value; the new pixbuf. 

=begin comment

=head2 Example
# Example for flip

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-bits-per-sample

Queries the number of bits per color sample in a pixbuf.

=begin code
method get-bits-per-sample (--> Int )
=end code

Return value; Number of bits per color sample.. 

=begin comment

=head2 Example
# Example for get-bits-per-sample

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-byte-length

Returns the length of the pixel data, in bytes.

=begin code
method get-byte-length (--> Int )
=end code

Return value; The length of the pixel data.. 

=begin comment

=head2 Example
# Example for get-byte-length

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-colorspace

Queries the color space of a pixbuf.

=begin code
method get-colorspace (--> GdkColorspace )
=end code

Return value; Color space.. 

=begin comment

=head2 Example
# Example for get-colorspace

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-has-alpha

Queries whether a pixbuf has an alpha channel (opacity information).

=begin code
method get-has-alpha (--> Bool )
=end code

Return value; C<True> if it has an alpha channel, C<False> otherwise.. 

=begin comment

=head2 Example
# Example for get-has-alpha

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-height

Queries the height of a pixbuf.

=begin code
method get-height (--> Int )
=end code

Return value; Height in pixels.. 

=begin comment

=head2 Example
# Example for get-height

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-n-channels

Queries the number of channels of a pixbuf.

=begin code
method get-n-channels (--> Int )
=end code

Return value; Number of channels.. 

=begin comment

=head2 Example
# Example for get-n-channels

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-option

Looks up C<$key> in the list of options that may have been attached to the C<$pixbuf> when it was loaded, or that may have been attached by another
function using C<.set-option()>.

For instance, the ANI loader provides "Title" and "Artist" options.
The ICO, XBM, and XPM loaders provide "x_hot" and "y_hot" hot-spot
options for cursor definitions. The PNG loader provides the tEXt ancillary
chunk key/value pairs as options. Since 2.12, the TIFF and JPEG loaders
return an "orientation" option string that corresponds to the embedded
TIFF/Exif orientation tag (if present). Since 2.32, the TIFF loader sets
the "multipage" option string to "yes" when a multi-page TIFF is loaded.
Since 2.32 the JPEG and PNG loaders set "x-dpi" and "y-dpi" if the file
contains image density information in dots per inch.
Since 2.36.6, the JPEG loader sets the "comment" option with the comment
EXIF tag.

=begin code
method get-option ( Str $key --> Str )
=end code

=item $key; a nul-terminated string..

Return value; the value associated with >keyB<. 

=begin comment

=head2 Example
# Example for get-option

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-options

Returns a >GHashTableB< with a list of all the options that may have been
attached to the >pixbufB< when it was loaded, or that may have been
attached by another function using C<.set-option() in class Gnome::GdkPixbuf::Pixbuf>.

=begin code
method get-options (--> N-Object )
=end code

Return value; a B<Gnome::Glib::N-HashTable>
  of key/values pairs. 

=begin comment

=head2 Example
# Example for get-options

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-pixels

Queries a pointer to the pixel data of a pixbuf.

This function will cause an implicit copy of the pixbuf data if the
pixbuf was created from read-only data.

Please see the section on [image data](class.Pixbuf.html#image-data) for information
about how the pixel data is stored in memory.

=begin code
method get-pixels (--> Str )
=end code

Return value; A pointer to the pixbuf's pixel data.. 

=begin comment

=head2 Example
# Example for get-pixels

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-pixels-with-length

Queries a pointer to the pixel data of a pixbuf.

This function will cause an implicit copy of the pixbuf data if the
pixbuf was created from read-only data.

Please see the section on [image data](class.Pixbuf.html#image-data) for information
about how the pixel data is stored in memory.

=begin code
method get-pixels-with-length ( Array[Int] $length --> Str )
=end code

=item $length; (transfer ownership: full) The length of the binary data..

Return value; A pointer to the pixbuf's
pixel data.. 

=begin comment

=head2 Example
# Example for get-pixels-with-length

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-rowstride

Queries the rowstride of a pixbuf, which is the number of bytes between
the start of a row and the start of the next row.

=begin code
method get-rowstride (--> Int )
=end code

Return value; Distance between row starts.. 

=begin comment

=head2 Example
# Example for get-rowstride

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-width

Queries the width of a pixbuf.

=begin code
method get-width (--> Int )
=end code

Return value; Width in pixels.. 

=begin comment

=head2 Example
# Example for get-width

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-subpixbuf

Creates a new pixbuf which represents a sub-region of >src_pixbufB<.

The new pixbuf shares its pixels with the original pixbuf, so
writing to one affects both.  The new pixbuf holds a reference to
>src_pixbufB<, so >src_pixbufB< will not be finalized until the new
pixbuf is finalized.

Note that if >src_pixbufB< is read-only, this function will force it
to be mutable.

=begin code
method new-subpixbuf ( Int() $src-x, Int() $src-y, Int() $width, Int() $height --> N-Object )
=end code

=item $src-x; X coord in C<$src-pixbuf>.
=item $src-y; Y coord in C<$src-pixbuf>.
=item $width; width of region in C<$src-pixbuf>.
=item $height; height of region in C<$src-pixbuf>.

Return value; a new pixbuf. 

=begin comment

=head2 Example
# Example for new-subpixbuf

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 read-pixel-bytes

Provides a B<Gnome::Glib::N-Bytes> buffer containing the raw pixel data; the data
must not be modified.

This function allows skipping the implicit copy that must be made
if C<.get-pixels()> is called on a read-only pixbuf.

=begin code
method read-pixel-bytes (--> N-Object )
=end code

Return value; A new reference to a read-only copy of
  the pixel data.  Note that for mutable pixbufs, this function will
  incur a one-time copy of the pixel data for conversion into the
  returned B<Gnome::Glib::N-Bytes>.. 

=begin comment

=head2 Example
# Example for read-pixel-bytes

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 read-pixels

Provides a read-only pointer to the raw pixel data.

This function allows skipping the implicit copy that must be made
if C<.get-pixels()> is called on a read-only pixbuf.

=begin code
method read-pixels (--> Array[Int] )
=end code

Return value; a read-only pointer to the raw pixel data. 

=begin comment

=head2 Example
# Example for read-pixels

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 remove-option

Removes the key/value pair option attached to a >GdkPixbufB<.

=begin code
method remove-option ( Str $key --> Bool )
=end code

=item $key; a nul-terminated string representing the key to remove..

Return value; C<True> if an option was removed, C<False> if not.. 

=begin comment

=head2 Example
# Example for remove-option

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 rotate-simple
This function is not yet available

Rotates a pixbuf by a multiple of 90 degrees, and returns the
result in a new pixbuf.

If >angleB< is 0, this function will return a copy of >srcB<.

=begin code
method rotate-simple ( GdkPixbufRotation  $angle --> N-Object )
=end code

=item $angle; the angle to rotate by.

Return value; the new pixbuf. 

=begin comment

=head2 Example
# Example for rotate-simple

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 saturate-and-pixelate

Modifies saturation and optionally pixelates >srcB<, placing the result in
>destB<.

The >srcB< and >destB< pixbufs must have the same image format, size, and
rowstride.

The >srcB< and >destB< arguments may be the same pixbuf with no ill effects.

If >saturationB< is 1.0 then saturation is not changed. If it's less than 1.0,
saturation is reduced (the image turns toward grayscale); if greater than
1.0, saturation is increased (the image gets more vivid colors).

If >pixelateB< is C<True>, then pixels are faded in a checkerboard pattern to
create a pixelated image.

=begin code
method saturate-and-pixelate ( N-Object() $dest, Num() $saturation, Bool() $pixelate )
=end code

=item $dest; place to write modified version of C<$src>.
=item $saturation; saturation factor.
=item $pixelate; whether to pixelate.

=begin comment

=head2 Example
# Example for saturate-and-pixelate

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 save
This function is not yet available

Saves pixbuf to a file in format C<$type>. By default, "jpeg", "png", "ico"
and "bmp" are possible file formats to save in, but more formats may be
installed. The list of all writable formats can be determined in the
following way:

=begin comment
void add_if_writable (GdkPixbufFormat *data, GSList **list)
{
  if (gdk_pixbuf_format_is_writable (data))
    *list = g_slist_prepend (*list, data);
}

GSList *formats = gdk_pixbuf_get_formats ();
GSList *writable_formats = NULL;
g_slist_foreach (formats, add_if_writable, &writable_formats);
g_slist_free (formats);

=end comment

If >errorB< is set, C<False> will be returned. Possible errors include
those in the >GDK_PIXBUF_ERRORB< domain and those in the >G_FILE_ERRORB<
domain.

The variable argument list should be undefined-terminated; if not empty,
it should contain pairs of strings that modify the save
parameters. For example:

=begin comment
gdk_pixbuf_save (pixbuf, handle, "jpeg", &error, "quality", "100", NULL);

=end comment

Currently only few parameters exist.

JPEG images can be saved with a "quality" parameter; its value should be
in the range >[0, 100]B<. JPEG and PNG density can be set by setting the
"x-dpi" and "y-dpi" parameters to the appropriate values in dots per inch.

Text chunks can be attached to PNG images by specifying parameters of
the form "tEXt::key", where key is an ASCII string of length 1-79.
The values are UTF-8 encoded strings. The PNG compression level can
be specified using the "compression" parameter; it's value is in an
integer in the range of >[0, 9]B<.

ICC color profiles can also be embedded into PNG, JPEG and TIFF images.
The "icc-profile" value should be the complete ICC profile encoded
into base64.

=begin comment
char *contents;
gsize length;

// icm_path is set elsewhere
g_file_get_contents (icm_path, &contents, &length, NULL);

char *contents_encode = g_base64_encode ((const guchar *) contents, length);

gdk_pixbuf_save (pixbuf, handle, "png", &error, "icc-profile", contents_encode, NULL);

=end comment

TIFF images recognize:

 1. a "bits-per-sample" option (integer) which can be either 1 for saving
    bi-level CCITTFAX4 images, or 8 for saving 8-bits per sample
 2. a "compression" option (integer) which can be 1 for no compression,
    2 for Huffman, 5 for LZW, 7 for JPEG and 8 for DEFLATE (see the libtiff
    documentation and tiff.h for all supported codec values)
 3. an "icc-profile" option (zero-terminated string) containing a base64
    encoded ICC color profile.

ICO images can be saved in depth 16, 24, or 32, by using the "depth"
parameter. When the ICO saver is given "x_hot" and "y_hot" parameters,
it produces a CUR instead of an ICO.

=begin code
method save ( Str $filename, Str $type, N-Object $error, … --> Bool )
=end code

=item $filename; name of file to save..
=item $type; name of file format..
=item $error; return location for error
=item …; …. Note that each argument must be specified as a type followed by its value!

Return value; C<True> on success, and C<False> otherwise. 

=begin comment

=head2 Example
# Example for save

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 save-to-buffer
This function is not yet available

Saves pixbuf to a new buffer in format >typeB<, which is currently "jpeg",
"png", "tiff", "ico" or "bmp".

This is a convenience function that uses >C<.save-to-callback()>B<
to do the real work.

Note that the buffer is not >NULB<-terminated and may contain embedded >NULB<
characters.

If C<$error> is set, C<False> will be returned and C<$buffer> will be set to
undefined. Possible errors include those in the >GDK_PIXBUF_ERRORB<
domain.

See >C<.save()>B< for more details.

=begin code
method save-to-buffer ( Array[Str] $buffer, Array[gsize] $buffer-size, Str $type, N-Object $error, … --> Bool )
=end code

=item $buffer; (transfer ownership: full) location to receive a pointer
  to the new buffer..
=item $buffer-size; (transfer ownership: full) location to receive the size of the new buffer..
=item $type; name of file format..
=item $error; return location for error, or undefined
=item …; …. Note that each argument must be specified as a type followed by its value!

Return value; whether an error was set. 

=begin comment

=head2 Example
# Example for save-to-buffer

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 save-to-bufferv

Vector version of >C<.save-to-buffer()>B<.

Saves pixbuf to a new buffer in format C<$type>, which is currently "jpeg",
"tiff", "png", "ico" or "bmp".

See C<.save-to-buffer() in class Gnome::GdkPixbuf::Pixbuf> for more details.

=begin code
method save-to-bufferv ( Array[Str] $buffer, Array[gsize] $buffer-size, Str $type, Array[Str] $option-keys, Array[Str] $option-values, CArray[N-Error] $err --> Bool )
=end code

=item $buffer; (transfer ownership: full) 
  location to receive a pointer to the new buffer..
=item $buffer-size; (transfer ownership: full) location to receive the size of the new buffer..
=item $type; name of file format..
=item $option-keys; name of options to set.
=item $option-values; values for named options.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; whether an error was set. 

=begin comment

=head2 Example
# Example for save-to-bufferv

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 save-to-callback
This function is not yet available

Saves pixbuf in format >typeB< by feeding the produced data to a
callback.

This function can be used when you want to store the image to something
other than a file, such as an in-memory buffer or a socket.

If C<$error> is set, C<False> will be returned. Possible errors
include those in the >GDK_PIXBUF_ERRORB< domain and whatever the save
function generates.

See C<.save() in class Gnome::GdkPixbuf::Pixbuf> for more details.

=begin code
method save-to-callback ( &save-func, gpointer $user-data, Str $type, N-Object $error, … --> Bool )
=end code

=item &save-func; a function that is called to save each block of data that
  the save routine generates.. Tthe function must be specified with following signature; C<:( Str $buf, gsize $count, N-Object $error, gpointer $data --> gboolean )>.
=item $user-data; user data to pass to the save function..
=item $type; name of file format..
=item $error; return location for error, or undefined
=item …; …. Note that each argument must be specified as a type followed by its value!

Return value; whether an error was set. 

=begin comment

=head2 Example
# Example for save-to-callback

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 save-to-callbackv

Vector version of >C<.save-to-callback()>B<.

Saves pixbuf to a callback in format C<$type>, which is currently "jpeg",
"png", "tiff", "ico" or "bmp".

If C<$error> is set, C<False> will be returned.

See C<.save-to-callback() in class Gnome::GdkPixbuf::Pixbuf> for more details.

=begin code
method save-to-callbackv ( &save-func, gpointer $user-data, Str $type, Array[Str] $option-keys, Array[Str] $option-values, CArray[N-Error] $err --> Bool )
=end code

=item &save-func; a function that is called to save each block of data that
  the save routine generates.. Tthe function must be specified with following signature; C<:( Str $buf, gsize $count, N-Object $error, gpointer $data --> gboolean )>.
=item $user-data; user data to pass to the save function..
=item $type; name of file format..
=item $option-keys; name of options to set.
=item $option-values; values for named options.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; whether an error was set. 

=begin comment

=head2 Example
# Example for save-to-callbackv

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 save-to-stream
This function is not yet available

Saves >pixbufB< to an output stream.

Supported file formats are currently "jpeg", "tiff", "png", "ico" or
"bmp". See >C<.save-to-buffer()>B< for more details.

The >cancellableB< can be used to abort the operation from another
thread. If the operation was cancelled, the error >G_IO_ERROR_CANCELLEDB<
will be returned. Other possible errors are in the >GDK_PIXBUF_ERRORB<
and >G_IO_ERRORB< domains.

The stream is not closed at the end of this call.

=begin code
method save-to-stream ( N-Object() $stream, Str $type, N-Object() $cancellable, N-Object $error, … --> Bool )
=end code

=item $stream; a >GOutputStreamB< to save the pixbuf to.
=item $type; name of file format.
=item $cancellable; optional >GCancellableB< object, undefined to ignore.
=item $error; return location for error, or undefined
=item …; …. Note that each argument must be specified as a type followed by its value!

Return value; C<True> if the pixbuf was saved successfully, C<False> if an
  error was set.. 

=begin comment

=head2 Example
# Example for save-to-stream

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 save-to-stream-async
This function is not yet available

Saves >pixbufB< to an output stream asynchronously.

For more details see C<.save-to-stream()>, which is the synchronous
version of this function.

When the operation is finished, >callbackB< will be called in the main thread.

You can then call C<.save-to-stream-finish()> to get the result of
the operation.

=begin code
method save-to-stream-async ( N-Object() $stream, Str $type, N-Object() $cancellable, …, gpointer $user-data, … )
=end code

=item $stream; a >GOutputStreamB< to which to save the pixbuf.
=item $type; name of file format.
=item $cancellable; optional >GCancellableB< object, undefined to ignore.
=item callback; a >GAsyncReadyCallbackB< to call when the pixbuf is saved. Note that each argument must be specified as a type followed by its value!
=item $user-data; the data to pass to the callback function.
=item …; …. Note that each argument must be specified as a type followed by its value!

=begin comment

=head2 Example
# Example for save-to-stream-async

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 save-to-streamv

Saves >pixbufB< to an output stream.

Supported file formats are currently "jpeg", "tiff", "png", "ico" or
"bmp".

See C<.save-to-stream() in class Gnome::GdkPixbuf::Pixbuf> for more details.

=begin code
method save-to-streamv ( N-Object() $stream, Str $type, Array[Str] $option-keys, Array[Str] $option-values, N-Object() $cancellable, CArray[N-Error] $err --> Bool )
=end code

=item $stream; a >GOutputStreamB< to save the pixbuf to.
=item $type; name of file format.
=item $option-keys; name of options to set.
=item $option-values; values for named options.
=item $cancellable; optional >GCancellableB< object, undefined to ignore.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; C<True> if the pixbuf was saved successfully, C<False> if an
  error was set.. 

=begin comment

=head2 Example
# Example for save-to-streamv

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 save-to-streamv-async
This function is not yet available

Saves >pixbufB< to an output stream asynchronously.

For more details see C<.save-to-streamv()>, which is the synchronous
version of this function.

When the operation is finished, >callbackB< will be called in the main thread.

You can then call C<.save-to-stream-finish()> to get the result of
the operation.

=begin code
method save-to-streamv-async ( N-Object() $stream, Str $type, Array[Str] $option-keys, Array[Str] $option-values, N-Object() $cancellable, …, gpointer $user-data )
=end code

=item $stream; a >GOutputStreamB< to which to save the pixbuf.
=item $type; name of file format.
=item $option-keys; name of options to set.
=item $option-values; values for named options.
=item $cancellable; optional >GCancellableB< object, undefined to ignore.
=item callback; a >GAsyncReadyCallbackB< to call when the pixbuf is saved. Note that each argument must be specified as a type followed by its value!
=item $user-data; the data to pass to the callback function.

=begin comment

=head2 Example
# Example for save-to-streamv-async

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 savev

Vector version of >C<.save()>B<.

Saves pixbuf to a file in >typeB<, which is currently "jpeg", "png", "tiff", "ico" or "bmp".

If C<$error> is set, C<False> will be returned.

See C<.save() in class Gnome::GdkPixbuf::Pixbuf> for more details.

=begin code
method savev ( Str $filename, Str $type, Array[Str] $option-keys, Array[Str] $option-values, CArray[N-Error] $err --> Bool )
=end code

=item $filename; name of file to save..
=item $type; name of file format..
=item $option-keys; name of options to set.
=item $option-values; values for named options.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; whether an error was set. 

=begin comment

=head2 Example
# Example for savev

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 scale
This function is not yet available

Creates a transformation of the source image C<$src> by scaling by C<$scale-x> and C<$scale-y> then translating by C<$offset-x> and C<$offset-y>,
then renders the rectangle ( C<$dest-x>, C<$dest-y>, C<$dest-width>, C<$dest-height>) of the resulting image onto the destination image
replacing the previous contents.

Try to use C<.scale-simple()> first; this function is
the industrial-strength power tool you can fall back to, if
C<.scale-simple()> isn't powerful enough.

If the source rectangle overlaps the destination rectangle on the
same pixbuf, it will be overwritten during the scaling which
results in rendering artifacts.

=begin code
method scale ( N-Object() $dest, Int() $dest-x, Int() $dest-y, Int() $dest-width, Int() $dest-height, Num() $offset-x, Num() $offset-y, Num() $scale-x, Num() $scale-y, GdkInterpType  $interp-type )
=end code

=item $dest; the B<Gnome::GdkPixbuf::Pixbuf> into which to render the results.
=item $dest-x; the left coordinate for region to render.
=item $dest-y; the top coordinate for region to render.
=item $dest-width; the width of the region to render.
=item $dest-height; the height of the region to render.
=item $offset-x; the offset in the X direction (currently rounded to an integer).
=item $offset-y; the offset in the Y direction (currently rounded to an integer).
=item $scale-x; the scale factor in the X direction.
=item $scale-y; the scale factor in the Y direction.
=item $interp-type; the interpolation type for the transformation..

=begin comment

=head2 Example
# Example for scale

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 scale-simple
This function is not yet available

Create a new pixbuf containing a copy of >srcB< scaled to
>dest_widthB< x >dest_heightB<.

This function leaves >srcB< unaffected.

The >interp_typeB< should be >GDK_INTERP_NEARESTB< if you want maximum
speed (but when scaling down >GDK_INTERP_NEARESTB< is usually unusably
ugly). The default >interp_typeB< should be >GDK_INTERP_BILINEARB< which
offers reasonable quality and speed.

You can scale a sub-portion of >srcB< by creating a sub-pixbuf
pointing into >srcB<; see C<.new-subpixbuf() in class Gnome::GdkPixbuf::Pixbuf>.

If >dest_widthB< and >dest_heightB< are equal to the width and height of
>srcB<, this function will return an unscaled copy of >srcB<.

For more complicated scaling/alpha blending see C<.scale() in class Gnome::GdkPixbuf::Pixbuf>
and C<.composite() in class Gnome::GdkPixbuf::Pixbuf>.

=begin code
method scale-simple ( Int() $dest-width, Int() $dest-height, GdkInterpType  $interp-type --> N-Object )
=end code

=item $dest-width; the width of destination image.
=item $dest-height; the height of destination image.
=item $interp-type; the interpolation type for the transformation..

Return value; the new pixbuf. 

=begin comment

=head2 Example
# Example for scale-simple

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-option

Attaches a key/value pair as an option to a >GdkPixbufB<.

If >keyB< already exists in the list of options attached to the >pixbufB<,
the new value is ignored and C<False> is returned.

=begin code
method set-option ( Str $key, Str $value --> Bool )
=end code

=item $key; a nul-terminated string..
=item $value; a nul-terminated string..

Return value; C<True> on success. 

=begin comment

=head2 Example
# Example for set-option

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Functions]------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Functions
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 calculate-rowstride

Calculates the rowstride that an image created with those values would
have.

This function is useful for front-ends and backends that want to check
image values without needing to create a >GdkPixbufB<.

=begin code
method calculate-rowstride ( GdkColorspace $colorspace, Bool() $has-alpha, Int() $bits-per-sample, Int() $width, Int() $height --> Int )
=end code

=item $colorspace; Color space for image.
=item $has-alpha; Whether the image should have transparency information.
=item $bits-per-sample; Number of bits per color sample.
=item $width; Width of image in pixels, must be > 0.
=item $height; Height of image in pixels, must be > 0.

Return value; the rowstride for the given values, or -1 in case of error.. 

=begin comment

=head2 Example
# Example for calculate-rowstride

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-file-info

Parses an image file far enough to determine its format and size.

=begin code
method get-file-info ( Str $filename, Array[Int] $width, Array[Int] $height --> N-Object )
=end code

=item $filename; The name of the file to identify..
=item $width; (transfer ownership: full) Return location for the width of the image.
=item $height; (transfer ownership: full) Return location for the height of the image.

Return value; A >GdkPixbufFormatB< describing
  the image format of the file. 

=begin comment

=head2 Example
# Example for get-file-info

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-file-info-async
This function is not yet available

Asynchronously parses an image file far enough to determine its
format and size.

For more details see C<.get-file-info()>, which is the synchronous
version of this function.

When the operation is finished, C<$callback> will be called in the
main thread. You can then call C<.get-file-info-finish()> to
get the result of the operation.

=begin code
method get-file-info-async ( Str $filename, N-Object() $cancellable, …, gpointer $user-data )
=end code

=item $filename; The name of the file to identify.
=item $cancellable; optional >GCancellableB< object, undefined to ignore.
=item callback; a >GAsyncReadyCallbackB< to call when the file info is available. Note that each argument must be specified as a type followed by its value!
=item $user-data; the data to pass to the callback function.

=begin comment

=head2 Example
# Example for get-file-info-async

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-file-info-finish

Finishes an asynchronous pixbuf parsing operation started with
C<.get-file-info-async()>.

=begin code
method get-file-info-finish ( N-Object() $async-result, Array[Int] $width, Array[Int] $height, CArray[N-Error] $err --> N-Object )
=end code

=item $async-result; a >GAsyncResultB<.
=item $width; (transfer ownership: full) Return location for the width of the image, or undefined.
=item $height; (transfer ownership: full) Return location for the height of the image, or undefined.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; A >GdkPixbufFormatB< describing the
  image format of the file. 

=begin comment

=head2 Example
# Example for get-file-info-finish

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-formats

Obtains the available information about the image formats supported
by GdkPixbuf.

=begin code
method get-formats (--> N-SList )
=end code

Return value; A list of
  support image formats.. 

=begin comment

=head2 Example
# Example for get-formats

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 init-modules

Initalizes the gdk-pixbuf loader modules referenced by the >loaders.cacheB<
file present inside that directory.

This is to be used by applications that want to ship certain loaders
in a different location from the system ones.

This is needed when the OS or runtime ships a minimal number of loaders
so as to reduce the potential attack surface of carefully crafted image
files, especially for uncommon file types. Applications that require
broader image file types coverage, such as image viewers, would be
expected to ship the gdk-pixbuf modules in a separate location, bundled
with the application in a separate directory from the OS or runtime-
provided modules.

=begin code
method init-modules ( Str $path, CArray[N-Error] $err --> Bool )
=end code

=item $path; Path to directory where the >loaders.cacheB< is installed.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; No documentation about its value and use. 

=begin comment

=head2 Example
# Example for init-modules

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-from-stream-async
This function is not yet available

Creates a new pixbuf by asynchronously loading an image from an input stream.

For more details see C<.new-from-stream()>, which is the synchronous
version of this function.

When the operation is finished, C<$callback> will be called in the main thread.
You can then call C<.new-from-stream-finish()> to get the result of
the operation.

=begin code
method new-from-stream-async ( N-Object() $stream, N-Object() $cancellable, …, gpointer $user-data )
=end code

=item $stream; a >GInputStreamB< from which to load the pixbuf.
=item $cancellable; optional >GCancellableB< object, undefined to ignore.
=item callback; a >GAsyncReadyCallbackB< to call when the pixbuf is loaded. Note that each argument must be specified as a type followed by its value!
=item $user-data; the data to pass to the callback function.

=begin comment

=head2 Example
# Example for new-from-stream-async

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-from-stream-at-scale-async
This function is not yet available

Creates a new pixbuf by asynchronously loading an image from an input stream.

For more details see C<.new-from-stream-at-scale()>, which is the synchronous
version of this function.

When the operation is finished, C<$callback> will be called in the main thread.
You can then call C<.new-from-stream-finish()> to get the result of the operation.

=begin code
method new-from-stream-at-scale-async ( N-Object() $stream, Int() $width, Int() $height, Bool() $preserve-aspect-ratio, N-Object() $cancellable, …, gpointer $user-data )
=end code

=item $stream; a >GInputStreamB< from which to load the pixbuf.
=item $width; the width the image should have or -1 to not constrain the width.
=item $height; the height the image should have or -1 to not constrain the height.
=item $preserve-aspect-ratio; C<True> to preserve the image's aspect ratio.
=item $cancellable; optional >GCancellableB< object, undefined to ignore.
=item callback; a >GAsyncReadyCallbackB< to call when the pixbuf is loaded. Note that each argument must be specified as a type followed by its value!
=item $user-data; the data to pass to the callback function.

=begin comment

=head2 Example
# Example for new-from-stream-at-scale-async

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 save-to-stream-finish

Finishes an asynchronous pixbuf save operation started with
C<.save-to-stream-async()>.

=begin code
method save-to-stream-finish ( N-Object() $async-result, CArray[N-Error] $err --> Bool )
=end code

=item $async-result; a >GAsyncResult`.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; C<True> if the pixbuf was saved successfully, C<False> if an error was set.. 

=begin comment

=head2 Example
# Example for save-to-stream-finish

=end comment

=end pod

