=comment Package: Gtk4, C-Source: video
use v6.d;

#TL:1:Gnome::Gtk4::Video:
#-------------------------------------------------------------------------------
#--[Module Imports]-------------------------------------------------------------
#-------------------------------------------------------------------------------

use Test;
use NativeCall;


use Gnome::Gtk4::Video:api<2>;
use Gnome::N::GlibToRakuTypes:api<2>;
use Gnome::N::N-Object:api<2>;
use Gnome::N::NativeLib:api<2>;
use Gnome::N::X:api<2>;

#-------------------------------------------------------------------------------
#--[Test preparation]-----------------------------------------------------------
#-------------------------------------------------------------------------------

#Gnome::N::debug(:on);
my Gnome::Gtk4::Video $video;

#-------------------------------------------------------------------------------
#--[Class init tests]-----------------------------------------------------------
#-------------------------------------------------------------------------------

subtest 'ISA test', {
  given $video {
    my N-Object $file;
    my N-Object $stream;
    my Str $resource-path;
    my Str $filename;

#`{{
    #TC:0:new-video()

    $video .= new-video();
    ok .is-valid, '.new-video()';

    #TC:0:new-for-file()
    $file = …;
    $video .= new-for-file( $file);
    ok .is-valid, '.new-for-file( $file)';

    #TC:0:new-for-filename()
    $filename = 'text';
    $video .= new-for-filename( $filename);
    ok .is-valid, '.new-for-filename( $filename)';

    #TC:0:new-for-media-stream()
    $stream = …;
    $video .= new-for-media-stream( $stream);
    ok .is-valid, '.new-for-media-stream( $stream)';

    #TC:0:new-for-resource()
    $resource-path = 'text';
    $video .= new-for-resource( $resource-path);
    ok .is-valid, '.new-for-resource( $resource-path)';

}}
  }
};

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# set environment variable 'raku-test-all' if rest must be tested too.
unless %*ENV<raku_test_all>:exists {
  done-testing;
  exit;
}

#-------------------------------------------------------------------------------
subtest 'Method tests', {
  with $video {
    my gboolean $autoplay;
    my Str $filename;
    my Str $resource-path;
    my N-Object $stream;
    my gboolean $loop;
    my N-Object $file;


#`{{
    #TM:0:set-autoplay()
    $autoplay = '…';
    .set-autoplay( $autoplay);
    #TM:0:get-autoplay()
    is .get-autoplay(),  $autoplay, '.set-autoplay() / .get-autoplay()';

    #TM:0:set-file()
    $file = …;
    .set-file( $file);
    #TM:0:get-file()
    is .get-file(),  $file, '.set-file() / .get-file()';

    #TM:0:set-filename()
    $filename = 'text';
    .set-filename( $filename);
    ok True, '.set-filename()';

    #TM:0:set-loop()
    $loop = '…';
    .set-loop( $loop);
    #TM:0:get-loop()
    is .get-loop(),  $loop, '.set-loop() / .get-loop()';

    #TM:0:set-media-stream()
    $stream = …;
    .set-media-stream( $stream);
    #TM:0:get-media-stream()
    is .get-media-stream(),  $stream, '.set-media-stream() / .get-media-stream()';

    #TM:0:set-resource()
    $resource-path = 'text';
    .set-resource( $resource-path);
    ok True, '.set-resource()';

}}
  }
};

#-------------------------------------------------------------------------------
subtest 'Function tests', {
  with $video {


#`{{
}}
  }
};

#-------------------------------------------------------------------------------
done-testing;

=finish

#-------------------------------------------------------------------------------
subtest 'Signals …', {
  use Gnome::Gtk3::Main;

  my Gnome::Gtk3::Main $main .= new;

  class SignalHandlers {
    has Bool $!signal-processed = False;

    method … (
      'any-args',
      Gnome::Gtk4::Video() :$_native-object, gulong :$_handler-id
      # --> …
    ) {

      isa-ok $_native-object, Gnome::Gtk4::Video;
      $!signal-processed = True;
    }

    method signal-emitter ( Gnome::Gtk4::Video :$_widget --> Str ) {

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      $_widget.emit-by-name(
        'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      );
      is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      #$!signal-processed = False;
      #$_widget.emit-by-name(
      #  'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      #);
      #is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }
      sleep(0.4);
      $main.gtk-main-quit;

      'done'
    }
  }

  my Gnome::Gtk4::Video $video .= new;

  #my Gnome::Gtk3::Window $w .= new;
  #$w.add($m);

  my SignalHandlers $sh .= new;
  $video.register-signal( $sh, 'method', 'signal');

  my Promise $p = $i.start-thread(
    $sh, 'signal-emitter',
    # :!new-context,
    # :start-time(now + 1)
  );

  is $main.gtk-main-level, 0, "loop level 0";
  $main.gtk-main;
  #is $main.gtk-main-level, 0, "loop level is 0 again";

  is $p.result, 'done', 'emitter finished';
}

