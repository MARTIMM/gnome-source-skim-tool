=comment Package: Gtk4, C-Source: treemodelfilter
use v6.d;

#TL:1:Gnome::Gtk4::TreeModelFilter:
#-------------------------------------------------------------------------------
#--[Module Imports]-------------------------------------------------------------
#-------------------------------------------------------------------------------

use Test;
use NativeCall;


use Gnome::GObject::N-Value:api<2>;
use Gnome::Gtk4::N-TreeIter:api<2>;
use Gnome::Gtk4::N-TreePath:api<2>;
use Gnome::Gtk4::TreeModelFilter:api<2>;
use Gnome::N::GlibToRakuTypes:api<2>;
use Gnome::N::N-Object:api<2>;
use Gnome::N::NativeLib:api<2>;
use Gnome::N::X:api<2>;

#-------------------------------------------------------------------------------
#--[Test preparation]-----------------------------------------------------------
#-------------------------------------------------------------------------------

#Gnome::N::debug(:on);
my Gnome::Gtk4::TreeModelFilter $tree-model-filter;

#-------------------------------------------------------------------------------
#--[Class init tests]-----------------------------------------------------------
#-------------------------------------------------------------------------------

subtest 'ISA test', {
  given $tree-model-filter {

#`{{
}}
  }
};

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# set environment variable 'raku-test-all' if rest must be tested too.
unless %*ENV<raku_test_all>:exists {
  done-testing;
  exit;
}

#-------------------------------------------------------------------------------
subtest 'Method tests', {
  with $tree-model-filter {
    my gpointer $data;
    my  $destroy;
    sub func ( N-Object $model, N-TreeIter $iter, gpointer $data --> gboolean ) {}
    my N-TreePath $filter-path;
    my gint $n-columns;
    my N-TreePath $child-path;
    my gint $column;
    my N-TreeIter $filter-iter;
    my  $types;
    my N-TreeIter $child-iter;


#`{{
    #TM:0:clear-cache()
    ok .clear-cache(), '.clear-cache()';

    #TM:0:convert-child-iter-to-iter()
    ok .convert-child-iter-to-iter( $filter-iter, $child-iter), '.convert-child-iter-to-iter()';

    #TM:0:convert-child-path-to-path()
    ok .convert-child-path-to-path( $child-path), '.convert-child-path-to-path()';

    #TM:0:convert-iter-to-child-iter()
    ok .convert-iter-to-child-iter( $child-iter, $filter-iter), '.convert-iter-to-child-iter()';

    #TM:0:convert-path-to-child-path()
    ok .convert-path-to-child-path( $filter-path), '.convert-path-to-child-path()';

    #TM:0:get-model()
     .get-model(), '…', '.get-model()';

    #TM:0:refilter()
    ok .refilter(), '.refilter()';

    #TM:0:set-modify-func()
    $n-columns = '…';
    $types = '…';
    $func = …;
    $data = '…';
    $destroy = '…';
    .set-modify-func( $n-columns, $types, $func, $data, $destroy);
    ok True, '.set-modify-func()';

    #TM:0:set-visible-column()
    $column = '…';
    .set-visible-column( $column);
    ok True, '.set-visible-column()';

    #TM:0:set-visible-func()
    $func = …;
    $data = '…';
    $destroy = '…';
    .set-visible-func( $func, $data, $destroy);
    ok True, '.set-visible-func()';

}}
  }
};

#-------------------------------------------------------------------------------
subtest 'Function tests', {
  with $tree-model-filter {


#`{{
}}
  }
};

#-------------------------------------------------------------------------------
done-testing;

=finish

#-------------------------------------------------------------------------------
subtest 'Signals …', {
  use Gnome::Gtk3::Main;

  my Gnome::Gtk3::Main $main .= new;

  class SignalHandlers {
    has Bool $!signal-processed = False;

    method … (
      'any-args',
      Gnome::Gtk4::TreeModelFilter() :$_native-object, gulong :$_handler-id
      # --> …
    ) {

      isa-ok $_native-object, Gnome::Gtk4::TreeModelFilter;
      $!signal-processed = True;
    }

    method signal-emitter ( Gnome::Gtk4::TreeModelFilter :$_widget --> Str ) {

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      $_widget.emit-by-name(
        'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      );
      is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      #$!signal-processed = False;
      #$_widget.emit-by-name(
      #  'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      #);
      #is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }
      sleep(0.4);
      $main.gtk-main-quit;

      'done'
    }
  }

  my Gnome::Gtk4::TreeModelFilter $tree-model-filter .= new;

  #my Gnome::Gtk3::Window $w .= new;
  #$w.add($m);

  my SignalHandlers $sh .= new;
  $tree-model-filter.register-signal( $sh, 'method', 'signal');

  my Promise $p = $i.start-thread(
    $sh, 'signal-emitter',
    # :!new-context,
    # :start-time(now + 1)
  );

  is $main.gtk-main-level, 0, "loop level 0";
  $main.gtk-main;
  #is $main.gtk-main-level, 0, "loop level is 0 again";

  is $p.result, 'done', 'emitter finished';
}

