=comment Package: Gtk4, C-Source: calendar
use v6.d;

#TL:1:Gnome::Gtk4::Calendar:
#-------------------------------------------------------------------------------
#--[Module Imports]-------------------------------------------------------------
#-------------------------------------------------------------------------------

use NativeCall;
use Test;


#use Gnome::Glib::N-DateTime:api<2>;
use Gnome::Gtk4::Calendar:api<2>;
use Gnome::N::GlibToRakuTypes:api<2>;
use Gnome::N::N-Object:api<2>;
use Gnome::N::NativeLib:api<2>;
use Gnome::N::X:api<2>;

#-------------------------------------------------------------------------------
#--[Test preparation]-----------------------------------------------------------
#-------------------------------------------------------------------------------

#Gnome::N::debug(:on);
my Gnome::Gtk4::Calendar $calendar;

#-------------------------------------------------------------------------------
#--[Class init tests]-----------------------------------------------------------
#-------------------------------------------------------------------------------

subtest 'ISA test', {
  given $calendar {

    #TC:1:new-calendar()
    $calendar .= new-calendar();
    ok .is-valid, '.new-calendar()';
  }
};

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# set environment variable 'raku-test-all' if rest must be tested too.
unless %*ENV<raku_test_all>:exists {
  done-testing;
  exit;
}

#-------------------------------------------------------------------------------
subtest 'Method tests', {
  with $calendar {
    my guint $day;
    my gboolean $value;
#    my N-DateTime  $date;


#`{{
    #TM:0:clear-marks()
    ok .clear-marks(), '.clear-marks()';

    #TM:0:get-date()
     .get-date(), '…', '.get-date()';

    #TM:0:get-day-is-marked()
    is .get-day-is-marked( $day), '…', '.get-day-is-marked()';

    #TM:0:mark-day()
    ok .mark-day( $day), '.mark-day()';

    #TM:0:select-day()
    ok .select-day( $date), '.select-day()';

    #TM:0:set-show-day-names()
    $value = '…';
    .set-show-day-names( $value);
    #TM:0:get-show-day-names()
    is .get-show-day-names(),  $value, '.set-show-day-names() / .get-show-day-names()';

    #TM:0:set-show-heading()
    $value = '…';
    .set-show-heading( $value);
    #TM:0:get-show-heading()
    is .get-show-heading(),  $value, '.set-show-heading() / .get-show-heading()';

    #TM:0:set-show-week-numbers()
    $value = '…';
    .set-show-week-numbers( $value);
    #TM:0:get-show-week-numbers()
    is .get-show-week-numbers(),  $value, '.set-show-week-numbers() / .get-show-week-numbers()';

    #TM:0:unmark-day()
    ok .unmark-day( $day), '.unmark-day()';

}}
  }
};

#-------------------------------------------------------------------------------
subtest 'Function tests', {
  with $calendar {


#`{{
}}
  }
};

#-------------------------------------------------------------------------------
done-testing;

=finish

#-------------------------------------------------------------------------------
subtest 'Signals …', {
  use Gnome::Gtk3::Main;

  my Gnome::Gtk3::Main $main .= new;

  class SignalHandlers {
    has Bool $!signal-processed = False;

    method … (
      'any-args',
      Gnome::Gtk4::Calendar() :$_native-object, gulong :$_handler-id
      # --> …
    ) {

      isa-ok $_native-object, Gnome::Gtk4::Calendar;
      $!signal-processed = True;
    }

    method signal-emitter ( Gnome::Gtk4::Calendar :$_widget --> Str ) {

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      $_widget.emit-by-name(
        'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      );
      is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      #$!signal-processed = False;
      #$_widget.emit-by-name(
      #  'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      #);
      #is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }
      sleep(0.4);
      $main.gtk-main-quit;

      'done'
    }
  }

  my Gnome::Gtk4::Calendar $calendar .= new;

  #my Gnome::Gtk3::Window $w .= new;
  #$w.add($m);

  my SignalHandlers $sh .= new;
  $calendar.register-signal( $sh, 'method', 'signal');

  my Promise $p = $i.start-thread(
    $sh, 'signal-emitter',
    # :!new-context,
    # :start-time(now + 1)
  );

  is $main.gtk-main-level, 0, "loop level 0";
  $main.gtk-main;
  #is $main.gtk-main-level, 0, "loop level is 0 again";

  is $p.result, 'done', 'emitter finished';
}

