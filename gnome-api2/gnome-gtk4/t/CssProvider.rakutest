=comment Package: Gtk4, C-Source: CssProvider
use v6.d;

#TL:1:Gnome::Gtk4::CssProvider:
#-------------------------------------------------------------------------------
#--[Module Imports]-------------------------------------------------------------
#-------------------------------------------------------------------------------

use NativeCall;
use Test;


use Gnome::Gtk4::CssProvider:api<2>;
use Gnome::N::GlibToRakuTypes:api<2>;
use Gnome::N::N-Object:api<2>;
use Gnome::N::NativeLib:api<2>;
use Gnome::N::X:api<2>;

#-------------------------------------------------------------------------------
#--[Test preparation]-----------------------------------------------------------
#-------------------------------------------------------------------------------

#Gnome::N::debug(:on);
my Gnome::Gtk4::CssProvider $cssprovider;

#-------------------------------------------------------------------------------
#--[Class init tests]-----------------------------------------------------------
#-------------------------------------------------------------------------------

subtest 'ISA test', {
  given $cssprovider {

#`{{
    #TC:0:new-cssprovider()

    $cssprovider .= new-cssprovider();
    ok .is-valid, '.new-cssprovider()';

}}
  }
};

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# set environment variable 'raku-test-all' if rest must be tested too.
unless %*ENV<raku_test_all>:exists {
  done-testing;
  exit;
}

#-------------------------------------------------------------------------------
subtest 'Method tests', {
  with $cssprovider {
    my N-Object $file;
    my Str $variant;
    my Str $resource-path;
    my Str $name;
    my Str $path;
    my Str $data;
    my gssize $length;


#`{{
    #TM:0:load-from-data()
    ok .load-from-data( $data, $length), '.load-from-data()';

    #TM:0:load-from-file()
    ok .load-from-file( $file), '.load-from-file()';

    #TM:0:load-from-path()
    ok .load-from-path( $path), '.load-from-path()';

    #TM:0:load-from-resource()
    ok .load-from-resource( $resource-path), '.load-from-resource()';

    #TM:0:load-named()
    ok .load-named( $name, $variant), '.load-named()';

    #TM:0:to-string()
    ok .to-string(), '.to-string()';

}}
  }
};

#-------------------------------------------------------------------------------
subtest 'Function tests', {
  with $cssprovider {


#`{{
}}
  }
};

#-------------------------------------------------------------------------------
done-testing;

=finish

#-------------------------------------------------------------------------------
subtest 'Signals …', {
  use Gnome::Gtk3::Main;

  my Gnome::Gtk3::Main $main .= new;

  class SignalHandlers {
    has Bool $!signal-processed = False;

    method … (
      'any-args',
      Gnome::Gtk4::CssProvider() :$_native-object, gulong :$_handler-id
      # --> …
    ) {

      isa-ok $_native-object, Gnome::Gtk4::CssProvider;
      $!signal-processed = True;
    }

    method signal-emitter ( Gnome::Gtk4::CssProvider :$_widget --> Str ) {

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      $_widget.emit-by-name(
        'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      );
      is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      #$!signal-processed = False;
      #$_widget.emit-by-name(
      #  'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      #);
      #is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }
      sleep(0.4);
      $main.gtk-main-quit;

      'done'
    }
  }

  my Gnome::Gtk4::CssProvider $cssprovider .= new;

  #my Gnome::Gtk3::Window $w .= new;
  #$w.add($m);

  my SignalHandlers $sh .= new;
  $cssprovider.register-signal( $sh, 'method', 'signal');

  my Promise $p = $i.start-thread(
    $sh, 'signal-emitter',
    # :!new-context,
    # :start-time(now + 1)
  );

  is $main.gtk-main-level, 0, "loop level 0";
  $main.gtk-main;
  #is $main.gtk-main-level, 0, "loop level is 0 again";

  is $p.result, 'done', 'emitter finished';
}

