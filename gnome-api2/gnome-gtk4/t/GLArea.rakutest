=comment Package: Gtk4, C-Source: glarea
use v6.d;

#TL:1:Gnome::Gtk4::GLArea:
#-------------------------------------------------------------------------------
#--[Module Imports]-------------------------------------------------------------
#-------------------------------------------------------------------------------

use Test;
use NativeCall;


#use Gnome::Gdk4::T-glcontext:api<2>;
use Gnome::Glib::N-Error:api<2>;
use Gnome::Glib::T-error:api<2>;
use Gnome::Gtk4::GLArea:api<2>;
use Gnome::N::GlibToRakuTypes:api<2>;
use Gnome::N::N-Object:api<2>;
use Gnome::N::NativeLib:api<2>;
use Gnome::N::X:api<2>;

#-------------------------------------------------------------------------------
#--[Test preparation]-----------------------------------------------------------
#-------------------------------------------------------------------------------

#Gnome::N::debug(:on);
my Gnome::Gtk4::GLArea $glarea;

#-------------------------------------------------------------------------------
#--[Class init tests]-----------------------------------------------------------
#-------------------------------------------------------------------------------

subtest 'ISA test', {
  given $glarea {

#`{{
    #TC:0:new-glarea()

    $glarea .= new-glarea();
    ok .is-valid, '.new-glarea()';

}}
  }
};

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# set environment variable 'raku-test-all' if rest must be tested too.
unless %*ENV<raku_test_all>:exists {
  done-testing;
  exit;
}

#-------------------------------------------------------------------------------
subtest 'Method tests', {
  with $glarea {
    my gboolean $has-stencil-buffer;
    my gboolean $has-depth-buffer;
    my gint $major;
    my gint $minor;
    my GFlag $apis;
    my N-Object $error;
    my gboolean $use-es;
    my gboolean $auto-render;


#`{{
    #TM:0:attach-buffers()
    ok .attach-buffers(), '.attach-buffers()';

    #TM:0:get-api()
     .get-api(), '…', '.get-api()';

    #TM:0:get-context()
     .get-context(), '…', '.get-context()';

    #TM:0:make-current()
    ok .make-current(), '.make-current()';

    #TM:0:queue-render()
    ok .queue-render(), '.queue-render()';

    #TM:0:set-allowed-apis()
    $apis = …;
    .set-allowed-apis( $apis);
    #TM:0:get-allowed-apis()
    is .get-allowed-apis(),  $apis, '.set-allowed-apis() / .get-allowed-apis()';

    #TM:0:set-auto-render()
    $auto-render = '…';
    .set-auto-render( $auto-render);
    #TM:0:get-auto-render()
    is .get-auto-render(),  $auto-render, '.set-auto-render() / .get-auto-render()';

    #TM:0:set-error()
    $error = …;
    .set-error( $error);
    #TM:0:get-error()
    is .get-error(),  $error, '.set-error() / .get-error()';

    #TM:0:set-has-depth-buffer()
    $has-depth-buffer = '…';
    .set-has-depth-buffer( $has-depth-buffer);
    #TM:0:get-has-depth-buffer()
    is .get-has-depth-buffer(),  $has-depth-buffer, '.set-has-depth-buffer() / .get-has-depth-buffer()';

    #TM:0:set-has-stencil-buffer()
    $has-stencil-buffer = '…';
    .set-has-stencil-buffer( $has-stencil-buffer);
    #TM:0:get-has-stencil-buffer()
    is .get-has-stencil-buffer(),  $has-stencil-buffer, '.set-has-stencil-buffer() / .get-has-stencil-buffer()';

    #TM:0:set-required-version()
    $major = '…';
    $minor = '…';
    .set-required-version( $major, $minor);
    #TM:0:get-required-version()
    is .get-required-version(),  $major, $minor, '.set-required-version() / .get-required-version()';

    #TM:0:set-use-es()
    $use-es = '…';
    .set-use-es( $use-es);
    #TM:0:get-use-es()
    is .get-use-es(),  $use-es, '.set-use-es() / .get-use-es()';

}}
  }
};

#-------------------------------------------------------------------------------
subtest 'Function tests', {
  with $glarea {


#`{{
}}
  }
};

#-------------------------------------------------------------------------------
done-testing;

=finish

#-------------------------------------------------------------------------------
subtest 'Signals …', {
  use Gnome::Gtk3::Main;

  my Gnome::Gtk3::Main $main .= new;

  class SignalHandlers {
    has Bool $!signal-processed = False;

    method … (
      'any-args',
      Gnome::Gtk4::GLArea() :$_native-object, gulong :$_handler-id
      # --> …
    ) {

      isa-ok $_native-object, Gnome::Gtk4::GLArea;
      $!signal-processed = True;
    }

    method signal-emitter ( Gnome::Gtk4::GLArea :$_widget --> Str ) {

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      $_widget.emit-by-name(
        'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      );
      is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      #$!signal-processed = False;
      #$_widget.emit-by-name(
      #  'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      #);
      #is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }
      sleep(0.4);
      $main.gtk-main-quit;

      'done'
    }
  }

  my Gnome::Gtk4::GLArea $glarea .= new;

  #my Gnome::Gtk3::Window $w .= new;
  #$w.add($m);

  my SignalHandlers $sh .= new;
  $glarea.register-signal( $sh, 'method', 'signal');

  my Promise $p = $i.start-thread(
    $sh, 'signal-emitter',
    # :!new-context,
    # :start-time(now + 1)
  );

  is $main.gtk-main-level, 0, "loop level 0";
  $main.gtk-main;
  #is $main.gtk-main-level, 0, "loop level is 0 again";

  is $p.result, 'done', 'emitter finished';
}

