=comment Package: Gtk4, C-Source: adjustment
use v6.d;

#TL:1:Gnome::Gtk4::Adjustment:
#-------------------------------------------------------------------------------
#--[Module Imports]-------------------------------------------------------------
#-------------------------------------------------------------------------------

use Test;
use NativeCall;


use Gnome::Gtk4::Adjustment:api<2>;
use Gnome::N::GlibToRakuTypes:api<2>;
use Gnome::N::N-Object:api<2>;
use Gnome::N::NativeLib:api<2>;
use Gnome::N::X:api<2>;

#-------------------------------------------------------------------------------
#--[Test preparation]-----------------------------------------------------------
#-------------------------------------------------------------------------------

#Gnome::N::debug(:on);
my Gnome::Gtk4::Adjustment $adjustment;

#-------------------------------------------------------------------------------
#--[Class init tests]-----------------------------------------------------------
#-------------------------------------------------------------------------------

subtest 'ISA test', {
  given $adjustment {
    my gdouble $lower;
    my gdouble $page-increment;
    my gdouble $value;
    my gdouble $step-increment;
    my gdouble $page-size;
    my gdouble $upper;

#`{{
    #TC:0:new-adjustment()
    $value = '…';
    $lower = '…';
    $upper = '…';
    $step-increment = '…';
    $page-increment = '…';
    $page-size = '…';
    $adjustment .= new-adjustment( $value, $lower, $upper, $step-increment, $page-increment, $page-size);
    ok .is-valid, '.new-adjustment( $value, $lower, $upper, $step-increment, $page-increment, $page-size)';

}}
  }
};

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# set environment variable 'raku-test-all' if rest must be tested too.
unless %*ENV<raku_test_all>:exists {
  done-testing;
  exit;
}

#-------------------------------------------------------------------------------
subtest 'Method tests', {
  with $adjustment {
    my gdouble $upper;
    my gdouble $page-size;
    my gdouble $value;
    my gdouble $lower;
    my gdouble $page-increment;
    my gdouble $step-increment;


#`{{
    #TM:0:clamp-page()
    ok .clamp-page( $lower, $upper), '.clamp-page()';

    #TM:0:configure()
    ok .configure( $value, $lower, $upper, $step-increment, $page-increment, $page-size), '.configure()';

    #TM:0:get-minimum-increment()
     .get-minimum-increment(), '…', '.get-minimum-increment()';

    #TM:0:set-lower()
    $lower = '…';
    .set-lower( $lower);
    #TM:0:get-lower()
    is .get-lower(),  $lower, '.set-lower() / .get-lower()';

    #TM:0:set-page-increment()
    $page-increment = '…';
    .set-page-increment( $page-increment);
    #TM:0:get-page-increment()
    is .get-page-increment(),  $page-increment, '.set-page-increment() / .get-page-increment()';

    #TM:0:set-page-size()
    $page-size = '…';
    .set-page-size( $page-size);
    #TM:0:get-page-size()
    is .get-page-size(),  $page-size, '.set-page-size() / .get-page-size()';

    #TM:0:set-step-increment()
    $step-increment = '…';
    .set-step-increment( $step-increment);
    #TM:0:get-step-increment()
    is .get-step-increment(),  $step-increment, '.set-step-increment() / .get-step-increment()';

    #TM:0:set-upper()
    $upper = '…';
    .set-upper( $upper);
    #TM:0:get-upper()
    is .get-upper(),  $upper, '.set-upper() / .get-upper()';

    #TM:0:set-value()
    $value = '…';
    .set-value( $value);
    #TM:0:get-value()
    is .get-value(),  $value, '.set-value() / .get-value()';

}}
  }
};

#-------------------------------------------------------------------------------
subtest 'Function tests', {
  with $adjustment {


#`{{
}}
  }
};

#-------------------------------------------------------------------------------
done-testing;

=finish

#-------------------------------------------------------------------------------
subtest 'Signals …', {
  use Gnome::Gtk3::Main;

  my Gnome::Gtk3::Main $main .= new;

  class SignalHandlers {
    has Bool $!signal-processed = False;

    method … (
      'any-args',
      Gnome::Gtk4::Adjustment() :$_native-object, gulong :$_handler-id
      # --> …
    ) {

      isa-ok $_native-object, Gnome::Gtk4::Adjustment;
      $!signal-processed = True;
    }

    method signal-emitter ( Gnome::Gtk4::Adjustment :$_widget --> Str ) {

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      $_widget.emit-by-name(
        'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      );
      is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      #$!signal-processed = False;
      #$_widget.emit-by-name(
      #  'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      #);
      #is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }
      sleep(0.4);
      $main.gtk-main-quit;

      'done'
    }
  }

  my Gnome::Gtk4::Adjustment $adjustment .= new;

  #my Gnome::Gtk3::Window $w .= new;
  #$w.add($m);

  my SignalHandlers $sh .= new;
  $adjustment.register-signal( $sh, 'method', 'signal');

  my Promise $p = $i.start-thread(
    $sh, 'signal-emitter',
    # :!new-context,
    # :start-time(now + 1)
  );

  is $main.gtk-main-level, 0, "loop level 0";
  $main.gtk-main;
  #is $main.gtk-main-level, 0, "loop level is 0 again";

  is $p.result, 'done', 'emitter finished';
}

