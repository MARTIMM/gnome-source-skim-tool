=comment Package: Gtk4, C-Source: entrycompletion
use v6.d;

#TL:1:Gnome::Gtk4::EntryCompletion:
#-------------------------------------------------------------------------------
#--[Module Imports]-------------------------------------------------------------
#-------------------------------------------------------------------------------

use Test;
use NativeCall;


use Gnome::Gtk4::EntryCompletion:api<2>;
use Gnome::Gtk4::N-TreeIter:api<2>;
use Gnome::N::GlibToRakuTypes:api<2>;
use Gnome::N::N-Object:api<2>;
use Gnome::N::NativeLib:api<2>;
use Gnome::N::X:api<2>;

#-------------------------------------------------------------------------------
#--[Test preparation]-----------------------------------------------------------
#-------------------------------------------------------------------------------

#Gnome::N::debug(:on);
my Gnome::Gtk4::EntryCompletion $entry-completion .= new-entrycompletion;

#-------------------------------------------------------------------------------
#--[Class init tests]-----------------------------------------------------------
#-------------------------------------------------------------------------------

subtest 'ISA test', {
  given $entry-completion {
    my N-Object $area;

#`{{
    #TC:0:new-entrycompletion()

    $entry-completion .= new-entrycompletion();
    ok .is-valid, '.new-entrycompletion()';

    #TC:0:new-with-area()
    $area = …;
    $entry-completion .= new-with-area( $area);
    ok .is-valid, '.new-with-area( $area)';

}}
  }
};

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# set environment variable 'raku-test-all' if rest must be tested too.
unless %*ENV<raku_test_all>:exists {
  done-testing;
  exit;
}

#-------------------------------------------------------------------------------
subtest 'Method tests', {
  with $entry-completion {
    my gboolean $popup-single-match;
    my N-Object $model;
    my gboolean $popup-set-width;
    my gint $column;
    my gboolean $inline-selection;
    sub func ( N-Object $completion, Str $key, N-TreeIter $iter, gpointer $user-data --> gboolean ) {}
    my  $func-notify;
    my gpointer $func-data;
    my gboolean $inline-completion;
    my gboolean $popup-completion;
    my gint $length;
    my Str $key;


#`{{
    #TM:0:complete()
    ok .complete(), '.complete()';

    #TM:0:compute-prefix()
    ok .compute-prefix( $key), '.compute-prefix()';

    #TM:0:get-completion-prefix()
     .get-completion-prefix(), '…', '.get-completion-prefix()';

    #TM:0:get-entry()
     .get-entry(), '…', '.get-entry()';

    #TM:0:insert-prefix()
    ok .insert-prefix(), '.insert-prefix()';

    #TM:0:set-inline-completion()
    $inline-completion = '…';
    .set-inline-completion( $inline-completion);
    #TM:0:get-inline-completion()
    is .get-inline-completion(),  $inline-completion, '.set-inline-completion() / .get-inline-completion()';

    #TM:0:set-inline-selection()
    $inline-selection = '…';
    .set-inline-selection( $inline-selection);
    #TM:0:get-inline-selection()
    is .get-inline-selection(),  $inline-selection, '.set-inline-selection() / .get-inline-selection()';

    #TM:0:set-match-func()
    $func = …;
    $func-data = '…';
    $func-notify = '…';
    .set-match-func( $func, $func-data, $func-notify);
    ok True, '.set-match-func()';

    #TM:0:set-minimum-key-length()
    $length = '…';
    .set-minimum-key-length( $length);
    #TM:0:get-minimum-key-length()
    is .get-minimum-key-length(),  $length, '.set-minimum-key-length() / .get-minimum-key-length()';

    #TM:0:set-model()
    $model = …;
    .set-model( $model);
    #TM:0:get-model()
    is .get-model(),  $model, '.set-model() / .get-model()';

    #TM:0:set-popup-completion()
    $popup-completion = '…';
    .set-popup-completion( $popup-completion);
    #TM:0:get-popup-completion()
    is .get-popup-completion(),  $popup-completion, '.set-popup-completion() / .get-popup-completion()';

    #TM:0:set-popup-set-width()
    $popup-set-width = '…';
    .set-popup-set-width( $popup-set-width);
    #TM:0:get-popup-set-width()
    is .get-popup-set-width(),  $popup-set-width, '.set-popup-set-width() / .get-popup-set-width()';

    #TM:0:set-popup-single-match()
    $popup-single-match = '…';
    .set-popup-single-match( $popup-single-match);
    #TM:0:get-popup-single-match()
    is .get-popup-single-match(),  $popup-single-match, '.set-popup-single-match() / .get-popup-single-match()';

    #TM:0:set-text-column()
    $column = '…';
    .set-text-column( $column);
    #TM:0:get-text-column()
    is .get-text-column(),  $column, '.set-text-column() / .get-text-column()';

}}
  }
};

#-------------------------------------------------------------------------------
subtest 'Function tests', {
  with $entry-completion {


#`{{
}}
  }
};

#-------------------------------------------------------------------------------
done-testing;

=finish

#-------------------------------------------------------------------------------
subtest 'Signals …', {
  use Gnome::Gtk3::Main;

  my Gnome::Gtk3::Main $main .= new;

  class SignalHandlers {
    has Bool $!signal-processed = False;

    method … (
      'any-args',
      Gnome::Gtk4::EntryCompletion() :$_native-object, gulong :$_handler-id
      # --> …
    ) {

      isa-ok $_native-object, Gnome::Gtk4::EntryCompletion;
      $!signal-processed = True;
    }

    method signal-emitter ( Gnome::Gtk4::EntryCompletion :$_widget --> Str ) {

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      $_widget.emit-by-name(
        'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      );
      is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      #$!signal-processed = False;
      #$_widget.emit-by-name(
      #  'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      #);
      #is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }
      sleep(0.4);
      $main.gtk-main-quit;

      'done'
    }
  }

  my Gnome::Gtk4::EntryCompletion $entry-completion .= new;

  #my Gnome::Gtk3::Window $w .= new;
  #$w.add($m);

  my SignalHandlers $sh .= new;
  $entry-completion.register-signal( $sh, 'method', 'signal');

  my Promise $p = $i.start-thread(
    $sh, 'signal-emitter',
    # :!new-context,
    # :start-time(now + 1)
  );

  is $main.gtk-main-level, 0, "loop level 0";
  $main.gtk-main;
  #is $main.gtk-main-level, 0, "loop level is 0 again";

  is $p.result, 'done', 'emitter finished';
}

