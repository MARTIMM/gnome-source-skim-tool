# Command to generate: generate.raku -c -t Gtk4 window
use v6.d;

#TL:1:Gnome::Gtk4::Window:
#-------------------------------------------------------------------------------
#--[Module Imports]-------------------------------------------------------------
#-------------------------------------------------------------------------------

use Test;
use NativeCall;


use Gnome::Gtk4::Window:api<2>;
use Gnome::N::GlibToRakuTypes:api<2>;
use Gnome::N::N-Object:api<2>;
use Gnome::N::NativeLib:api<2>;
use Gnome::N::X:api<2>;

#-------------------------------------------------------------------------------
#--[Test preparation]-----------------------------------------------------------
#-------------------------------------------------------------------------------

#Gnome::N::debug(:on);
my Gnome::Gtk4::Window $window;

#-------------------------------------------------------------------------------
#--[Class init tests]-----------------------------------------------------------
#-------------------------------------------------------------------------------

subtest 'ISA test', {
  given $window {

    #TC:1:new-window()
    $window .= new-window();
    ok .is-valid, '.new-window()';
  }
};

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# set environment variable 'raku-test-all' if rest must be tested too.
unless %*ENV<raku_test_all>:exists {
  done-testing;
  exit;
}

#-------------------------------------------------------------------------------
subtest 'Method tests', {
  with $window {
    my UInt() $timestamp;
    my N-Object() $application;
    my Str $title;
    my N-Object() $parent;
    my N-Object() $focus;
    my N-Object() $display;
    my Int() $width;
    my Int() $height;
    my Bool() $handle-menubar-accel;
    my Str $name;
    my N-Object() $child;
    my N-Object() $default-widget;
    my Bool() $resizable;
    my N-Object() $titlebar;
    my Bool() $modal;
    my Bool() $setting;
    my Str $startup-id;
    my N-Object() $monitor;


#`{{
    #TM:0:close()
    ok .close(), '.close()';

    #TM:0:destroy()
    ok .destroy(), '.destroy()';

    #TM:0:fullscreen()
    ok .fullscreen(), '.fullscreen()';

    #TM:0:fullscreen-on-monitor()
    ok .fullscreen-on-monitor( $monitor), '.fullscreen-on-monitor()';

    #TM:0:get-group()
     .get-group(), '…', '.get-group()';

    #TM:0:has-group()
    ok .has-group(), '.has-group()';

    #TM:0:is-active()
    ok .is-active(), '.is-active()';

    #TM:0:is-fullscreen()
    ok .is-fullscreen(), '.is-fullscreen()';

    #TM:0:is-maximized()
    ok .is-maximized(), '.is-maximized()';

    #TM:0:maximize()
    ok .maximize(), '.maximize()';

    #TM:0:minimize()
    ok .minimize(), '.minimize()';

    #TM:0:present()
    ok .present(), '.present()';

    #TM:0:present-with-time()
    ok .present-with-time( $timestamp), '.present-with-time()';

    #TM:0:set-application()
    $application = …;  # a native object
    .set-application( $application);
    #TM:0:get-application()
    is .get-application(),  $application, '.set-application() / .get-application()';

    #TM:0:set-child()
    $child = …;  # a native object
    .set-child( $child);
    #TM:0:get-child()
    is .get-child(),  $child, '.set-child() / .get-child()';

    #TM:0:set-decorated()
    $setting = True;
    .set-decorated( $setting);
    #TM:0:get-decorated()
    is .get-decorated(),  $setting, '.set-decorated() / .get-decorated()';

    #TM:0:set-default-size()
    $width = -42;
    $height = -42;
    .set-default-size( $width, $height);
    #TM:0:get-default-size()
    is .get-default-size(),  $width, $height, '.set-default-size() / .get-default-size()';

    #TM:0:set-default-widget()
    $default-widget = …;  # a native object
    .set-default-widget( $default-widget);
    #TM:0:get-default-widget()
    is .get-default-widget(),  $default-widget, '.set-default-widget() / .get-default-widget()';

    #TM:0:set-deletable()
    $setting = True;
    .set-deletable( $setting);
    #TM:0:get-deletable()
    is .get-deletable(),  $setting, '.set-deletable() / .get-deletable()';

    #TM:0:set-destroy-with-parent()
    $setting = True;
    .set-destroy-with-parent( $setting);
    #TM:0:get-destroy-with-parent()
    is .get-destroy-with-parent(),  $setting, '.set-destroy-with-parent() / .get-destroy-with-parent()';

    #TM:0:set-display()
    $display = …;  # a native object
    .set-display( $display);
    ok True, '.set-display()';

    #TM:0:set-focus()
    $focus = …;  # a native object
    .set-focus( $focus);
    #TM:0:get-focus()
    is .get-focus(),  $focus, '.set-focus() / .get-focus()';

    #TM:0:set-focus-visible()
    $setting = True;
    .set-focus-visible( $setting);
    #TM:0:get-focus-visible()
    is .get-focus-visible(),  $setting, '.set-focus-visible() / .get-focus-visible()';

    #TM:0:set-handle-menubar-accel()
    $handle-menubar-accel = True;
    .set-handle-menubar-accel( $handle-menubar-accel);
    #TM:0:get-handle-menubar-accel()
    is .get-handle-menubar-accel(),  $handle-menubar-accel, '.set-handle-menubar-accel() / .get-handle-menubar-accel()';

    #TM:0:set-hide-on-close()
    $setting = True;
    .set-hide-on-close( $setting);
    #TM:0:get-hide-on-close()
    is .get-hide-on-close(),  $setting, '.set-hide-on-close() / .get-hide-on-close()';

    #TM:0:set-icon-name()
    $name = 'text';
    .set-icon-name( $name);
    #TM:0:get-icon-name()
    is .get-icon-name(),  $name, '.set-icon-name() / .get-icon-name()';

    #TM:0:set-mnemonics-visible()
    $setting = True;
    .set-mnemonics-visible( $setting);
    #TM:0:get-mnemonics-visible()
    is .get-mnemonics-visible(),  $setting, '.set-mnemonics-visible() / .get-mnemonics-visible()';

    #TM:0:set-modal()
    $modal = True;
    .set-modal( $modal);
    #TM:0:get-modal()
    is .get-modal(),  $modal, '.set-modal() / .get-modal()';

    #TM:0:set-resizable()
    $resizable = True;
    .set-resizable( $resizable);
    #TM:0:get-resizable()
    is .get-resizable(),  $resizable, '.set-resizable() / .get-resizable()';

    #TM:0:set-startup-id()
    $startup-id = 'text';
    .set-startup-id( $startup-id);
    ok True, '.set-startup-id()';
}}

    #TM:1:set-title()
    $title = 'text';
    .set-title($title);
    #TM:1:get-title()
    is .get-title(),  $title, '.set-title() / .get-title()';

#`{{

    #TM:0:set-titlebar()
    $titlebar = …;  # a native object
    .set-titlebar( $titlebar);
    #TM:0:get-titlebar()
    is .get-titlebar(),  $titlebar, '.set-titlebar() / .get-titlebar()';

    #TM:0:set-transient-for()
    $parent = …;  # a native object
    .set-transient-for( $parent);
    #TM:0:get-transient-for()
    is .get-transient-for(),  $parent, '.set-transient-for() / .get-transient-for()';

    #TM:0:unfullscreen()
    ok .unfullscreen(), '.unfullscreen()';

    #TM:0:unmaximize()
    ok .unmaximize(), '.unmaximize()';

    #TM:0:unminimize()
    ok .unminimize(), '.unminimize()';

}}
  }
};

#-------------------------------------------------------------------------------
subtest 'Function tests', {
  with $window {
    #TM:1:set-default-icon-name()
    .set-default-icon-name('bookmarks');
    #TM:1:get-default-icon-name()
    is .get-default-icon-name, 'bookmarks', '.set-default-icon-name() / .get-default-icon-name()';
  }
}

#-------------------------------------------------------------------------------
done-testing;

=finish

#-------------------------------------------------------------------------------
subtest 'Signals …', {
  use Gnome::Gtk3::Main;

  my Gnome::Gtk3::Main $main .= new;

  class SignalHandlers {
    has Bool $!signal-processed = False;

    method … (
      'any-args',
      Gnome::Gtk4::Window() :$_native-object, gulong :$_handler-id
      # --> …
    ) {

      isa-ok $_native-object, Gnome::Gtk4::Window;
      $!signal-processed = True;
    }

    method signal-emitter ( Gnome::Gtk4::Window :$_widget --> Str ) {

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      $_widget.emit-by-name(
        'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      );
      is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      #$!signal-processed = False;
      #$_widget.emit-by-name(
      #  'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      #);
      #is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }
      sleep(0.4);
      $main.gtk-main-quit;

      'done'
    }
  }

  my Gnome::Gtk4::Window $window .= new;

  #my Gnome::Gtk3::Window $w .= new;
  #$w.add($m);

  my SignalHandlers $sh .= new;
  $window.register-signal( $sh, 'method', 'signal');

  my Promise $p = $i.start-thread(
    $sh, 'signal-emitter',
    # :!new-context,
    # :start-time(now + 1)
  );

  is $main.gtk-main-level, 0, "loop level 0";
  $main.gtk-main;
  #is $main.gtk-main-level, 0, "loop level is 0 again";

  is $p.result, 'done', 'emitter finished';
}

