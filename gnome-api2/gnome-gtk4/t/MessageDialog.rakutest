# Command to generate: generate.raku -c -t Gtk4 messagedialog
use v6.d;

#TL:1:Gnome::Gtk4::MessageDialog:
#-------------------------------------------------------------------------------
#--[Module Imports]-------------------------------------------------------------
#-------------------------------------------------------------------------------

use NativeCall;
use Test;


use Gnome::Gtk4::MessageDialog:api<2>;
use Gnome::Gtk4::T-Dialog:api<2>;
use Gnome::Gtk4::T-Enums:api<2>;
use Gnome::Gtk4::T-Messagedialog:api<2>;
use Gnome::Gtk4::Window:api<2>;

use Gnome::N::GlibToRakuTypes:api<2>;
use Gnome::N::N-Object:api<2>;
use Gnome::N::NativeLib:api<2>;
use Gnome::N::X:api<2>;

#-------------------------------------------------------------------------------
#--[Test preparation]-----------------------------------------------------------
#-------------------------------------------------------------------------------

#Gnome::N::debug(:on);
my Gnome::Gtk4::MessageDialog $messagedialog;

#-------------------------------------------------------------------------------
#--[Class init tests]-----------------------------------------------------------
#-------------------------------------------------------------------------------

subtest 'ISA test', {
  given $messagedialog {
    my Str $message-format;
    my Gnome::Gtk4::Window $parent;
    my UInt $flags;
    my GtkButtonsType $buttons;
    my GtkMessageType $type;

    #TC:1:new-messagedialog()
    $parent .= new-window;
    $flags = GTK_DIALOG_MODAL +| GTK_DIALOG_DESTROY_WITH_PARENT;
    $type = GTK_MESSAGE_ERROR;
    $buttons = GTK_BUTTONS_CLOSE;
    $message-format = 'Error from app %s';
    $messagedialog .= new-messagedialog(
      $parent, $flags, $type, $buttons,
      $message-format, Str, 'my-app'
    );
    ok .is-valid, '.new-messagedialog( $parent, $flags, $type, $buttons, $message-format)';
    .clear-object;

    #TC:1:new-with-markup()
    $message-format = 'Error from <span foreground="blue">app</span> %s';
    $messagedialog .= new-with-markup( $parent, $flags, $type, $buttons, $message-format);
    ok .is-valid, '.new-with-markup( $parent, $flags, $type, $buttons, $message-format)';
  }
};

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# set environment variable 'raku-test-all' if rest must be tested too.
unless %*ENV<raku_test_all>:exists {
  done-testing;
  exit;
}

#-------------------------------------------------------------------------------
subtest 'Method tests', {
  with $messagedialog {
    my Str $message-format;
    my Str $str;


#`{{
    #TM:0:format-secondary-markup()
    ok .format-secondary-markup( $message-format), '.format-secondary-markup()';

    #TM:0:format-secondary-text()
    ok .format-secondary-text( $message-format), '.format-secondary-text()';

    #TM:0:get-message-area()
     .get-message-area(), '…', '.get-message-area()';

    #TM:0:set-markup()
    $str = 'text';
    .set-markup( $str);
    ok True, '.set-markup()';

}}
  }
};

#-------------------------------------------------------------------------------
done-testing;

=finish

#-------------------------------------------------------------------------------
subtest 'Signals …', {
  use Gnome::Gtk3::Main;

  my Gnome::Gtk3::Main $main .= new;

  class SignalHandlers {
    has Bool $!signal-processed = False;

    method … (
      'any-args',
      Gnome::Gtk4::MessageDialog() :$_native-object, gulong :$_handler-id
      # --> …
    ) {

      isa-ok $_native-object, Gnome::Gtk4::MessageDialog;
      $!signal-processed = True;
    }

    method signal-emitter ( Gnome::Gtk4::MessageDialog :$_widget --> Str ) {

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      $_widget.emit-by-name(
        'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      );
      is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      #$!signal-processed = False;
      #$_widget.emit-by-name(
      #  'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      #);
      #is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }
      sleep(0.4);
      $main.gtk-main-quit;

      'done'
    }
  }

  my Gnome::Gtk4::MessageDialog $messagedialog .= new;

  #my Gnome::Gtk3::Window $w .= new;
  #$w.add($m);

  my SignalHandlers $sh .= new;
  $messagedialog.register-signal( $sh, 'method', 'signal');

  my Promise $p = $i.start-thread(
    $sh, 'signal-emitter',
    # :!new-context,
    # :start-time(now + 1)
  );

  is $main.gtk-main-level, 0, "loop level 0";
  $main.gtk-main;
  #is $main.gtk-main-level, 0, "loop level is 0 again";

  is $p.result, 'done', 'emitter finished';
}

