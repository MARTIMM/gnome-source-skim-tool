=comment Package: Gtk4, C-Source: printunixdialog
use v6.d;

#TL:1:Gnome::Gtk4::PrintUnixDialog:
#-------------------------------------------------------------------------------
#--[Module Imports]-------------------------------------------------------------
#-------------------------------------------------------------------------------

use Test;
use NativeCall;


use Gnome::Gtk4::PrintUnixDialog:api<2>;
#use Gnome::Gtk4::T-printer:api<2>;
use Gnome::N::GlibToRakuTypes:api<2>;
use Gnome::N::N-Object:api<2>;
use Gnome::N::NativeLib:api<2>;
use Gnome::N::X:api<2>;

#-------------------------------------------------------------------------------
#--[Test preparation]-----------------------------------------------------------
#-------------------------------------------------------------------------------

#Gnome::N::debug(:on);
my Gnome::Gtk4::PrintUnixDialog $printunixdialog;

#-------------------------------------------------------------------------------
#--[Class init tests]-----------------------------------------------------------
#-------------------------------------------------------------------------------

subtest 'ISA test', {
  given $printunixdialog {
    my Str $title;
    my N-Object $parent;

#`{{
    #TC:0:new-printunixdialog()
    $title = 'text';
    $parent = …;
    $printunixdialog .= new-printunixdialog( $title, $parent);
    ok .is-valid, '.new-printunixdialog( $title, $parent)';

}}
  }
};

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# set environment variable 'raku-test-all' if rest must be tested too.
unless %*ENV<raku_test_all>:exists {
  done-testing;
  exit;
}

#-------------------------------------------------------------------------------
subtest 'Method tests', {
  with $printunixdialog {
    my N-Object $page-setup;
    my N-Object $tab-label;
    my N-Object $child;
    my gboolean $embed;
    my gboolean $has-selection;
    my gboolean $support-selection;
    my gint $current-page;
    my N-Object $settings;
    my GFlag $capabilities;


#`{{
    #TM:0:add-custom-tab()
    ok .add-custom-tab( $child, $tab-label), '.add-custom-tab()';

    #TM:0:get-page-setup-set()
     .get-page-setup-set(), '…', '.get-page-setup-set()';

    #TM:0:get-selected-printer()
     .get-selected-printer(), '…', '.get-selected-printer()';

    #TM:0:set-current-page()
    $current-page = '…';
    .set-current-page( $current-page);
    #TM:0:get-current-page()
    is .get-current-page(),  $current-page, '.set-current-page() / .get-current-page()';

    #TM:0:set-embed-page-setup()
    $embed = '…';
    .set-embed-page-setup( $embed);
    #TM:0:get-embed-page-setup()
    is .get-embed-page-setup(),  $embed, '.set-embed-page-setup() / .get-embed-page-setup()';

    #TM:0:set-has-selection()
    $has-selection = '…';
    .set-has-selection( $has-selection);
    #TM:0:get-has-selection()
    is .get-has-selection(),  $has-selection, '.set-has-selection() / .get-has-selection()';

    #TM:0:set-manual-capabilities()
    $capabilities = …;
    .set-manual-capabilities( $capabilities);
    #TM:0:get-manual-capabilities()
    is .get-manual-capabilities(),  $capabilities, '.set-manual-capabilities() / .get-manual-capabilities()';

    #TM:0:set-page-setup()
    $page-setup = …;
    .set-page-setup( $page-setup);
    #TM:0:get-page-setup()
    is .get-page-setup(),  $page-setup, '.set-page-setup() / .get-page-setup()';

    #TM:0:set-settings()
    $settings = …;
    .set-settings( $settings);
    #TM:0:get-settings()
    is .get-settings(),  $settings, '.set-settings() / .get-settings()';

    #TM:0:set-support-selection()
    $support-selection = '…';
    .set-support-selection( $support-selection);
    #TM:0:get-support-selection()
    is .get-support-selection(),  $support-selection, '.set-support-selection() / .get-support-selection()';

}}
  }
};

#-------------------------------------------------------------------------------
subtest 'Function tests', {
  with $printunixdialog {


#`{{
}}
  }
};

#-------------------------------------------------------------------------------
done-testing;

=finish

#-------------------------------------------------------------------------------
subtest 'Signals …', {
  use Gnome::Gtk3::Main;

  my Gnome::Gtk3::Main $main .= new;

  class SignalHandlers {
    has Bool $!signal-processed = False;

    method … (
      'any-args',
      Gnome::Gtk4::PrintUnixDialog() :$_native-object, gulong :$_handler-id
      # --> …
    ) {

      isa-ok $_native-object, Gnome::Gtk4::PrintUnixDialog;
      $!signal-processed = True;
    }

    method signal-emitter ( Gnome::Gtk4::PrintUnixDialog :$_widget --> Str ) {

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      $_widget.emit-by-name(
        'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      );
      is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      #$!signal-processed = False;
      #$_widget.emit-by-name(
      #  'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      #);
      #is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }
      sleep(0.4);
      $main.gtk-main-quit;

      'done'
    }
  }

  my Gnome::Gtk4::PrintUnixDialog $printunixdialog .= new;

  #my Gnome::Gtk3::Window $w .= new;
  #$w.add($m);

  my SignalHandlers $sh .= new;
  $printunixdialog.register-signal( $sh, 'method', 'signal');

  my Promise $p = $i.start-thread(
    $sh, 'signal-emitter',
    # :!new-context,
    # :start-time(now + 1)
  );

  is $main.gtk-main-level, 0, "loop level 0";
  $main.gtk-main;
  #is $main.gtk-main-level, 0, "loop level is 0 again";

  is $p.result, 'done', 'emitter finished';
}

