# Command to generate: generate.raku -c -t Gtk4 box
use v6.d;

#TL:1:Gnome::Gtk4::Box:
#-------------------------------------------------------------------------------
#--[Module Imports]-------------------------------------------------------------
#-------------------------------------------------------------------------------

use NativeCall;
use Test;


use Gnome::Gtk4::Box:api<2>;
use Gnome::Gtk4::T-enums:api<2>;
use Gnome::N::GlibToRakuTypes:api<2>;
use Gnome::N::N-Object:api<2>;
use Gnome::N::NativeLib:api<2>;
use Gnome::N::X:api<2>;

#-------------------------------------------------------------------------------
#--[Test preparation]-----------------------------------------------------------
#-------------------------------------------------------------------------------

#Gnome::N::debug(:on);
my Gnome::Gtk4::Box $box;

#-------------------------------------------------------------------------------
#--[Class init tests]-----------------------------------------------------------
#-------------------------------------------------------------------------------

subtest 'ISA test', {
  given $box {
    my GtkOrientation $orientation;
    my Int() $spacing;

    #TC:1:new-box()
    $orientation = GTK_ORIENTATION_VERTICAL;
    $spacing = 2;
    $box .= new-box( $orientation, $spacing);
    ok .is-valid, '.new-box( $orientation, $spacing)';

#`{{
}}
  }
};

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# set environment variable 'raku-test-all' if rest must be tested too.
unless %*ENV<raku_test_all>:exists {
  done-testing;
  exit;
}

#-------------------------------------------------------------------------------
subtest 'Method tests', {
  with $box {
    my Int() $spacing;
    my N-Object() $child;
    my N-Object() $sibling;
    my Bool() $homogeneous;
    my GtkBaselinePosition $position;


#`{{
    #TM:0:append()
    ok .append( $child), '.append()';

    #TM:0:insert-child-after()
    ok .insert-child-after( $child, $sibling), '.insert-child-after()';

    #TM:0:prepend()
    ok .prepend( $child), '.prepend()';

    #TM:0:remove()
    ok .remove( $child), '.remove()';

    #TM:0:reorder-child-after()
    ok .reorder-child-after( $child, $sibling), '.reorder-child-after()';

    #TM:0:set-baseline-position()
    $position = …;
    .set-baseline-position( $position);
    #TM:0:get-baseline-position()
    is .get-baseline-position(),  $position, '.set-baseline-position() / .get-baseline-position()';

    #TM:0:set-homogeneous()
    $homogeneous = True;
    .set-homogeneous( $homogeneous);
    #TM:0:get-homogeneous()
    is .get-homogeneous(),  $homogeneous, '.set-homogeneous() / .get-homogeneous()';
}}

    #TM:1:set-spacing()
    $spacing = 42;
    .set-spacing( $spacing);
    #TM:1:get-spacing()
    is .get-spacing(),  $spacing, '.set-spacing() / .get-spacing()';
  }
};

#-------------------------------------------------------------------------------
done-testing;

=finish

#-------------------------------------------------------------------------------
subtest 'Signals …', {
  use Gnome::Gtk3::Main;

  my Gnome::Gtk3::Main $main .= new;

  class SignalHandlers {
    has Bool $!signal-processed = False;

    method … (
      'any-args',
      Gnome::Gtk4::Box() :$_native-object, gulong :$_handler-id
      # --> …
    ) {

      isa-ok $_native-object, Gnome::Gtk4::Box;
      $!signal-processed = True;
    }

    method signal-emitter ( Gnome::Gtk4::Box :$_widget --> Str ) {

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      $_widget.emit-by-name(
        'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      );
      is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      #$!signal-processed = False;
      #$_widget.emit-by-name(
      #  'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      #);
      #is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }
      sleep(0.4);
      $main.gtk-main-quit;

      'done'
    }
  }

  my Gnome::Gtk4::Box $box .= new;

  #my Gnome::Gtk3::Window $w .= new;
  #$w.add($m);

  my SignalHandlers $sh .= new;
  $box.register-signal( $sh, 'method', 'signal');

  my Promise $p = $i.start-thread(
    $sh, 'signal-emitter',
    # :!new-context,
    # :start-time(now + 1)
  );

  is $main.gtk-main-level, 0, "loop level 0";
  $main.gtk-main;
  #is $main.gtk-main-level, 0, "loop level is 0 again";

  is $p.result, 'done', 'emitter finished';
}

