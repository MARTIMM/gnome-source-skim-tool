=comment Package: Gtk4, C-Source: cellview
use v6.d;

#TL:1:Gnome::Gtk4::CellView:
#-------------------------------------------------------------------------------
#--[Module Imports]-------------------------------------------------------------
#-------------------------------------------------------------------------------

use Test;
use NativeCall;


use Gnome::Gtk4::CellView:api<2>;
use Gnome::Gtk4::N-TreePath:api<2>;
use Gnome::N::GlibToRakuTypes:api<2>;
use Gnome::N::N-Object:api<2>;
use Gnome::N::NativeLib:api<2>;
use Gnome::N::X:api<2>;

#-------------------------------------------------------------------------------
#--[Test preparation]-----------------------------------------------------------
#-------------------------------------------------------------------------------

#Gnome::N::debug(:on);
my Gnome::Gtk4::CellView $cellview;

#-------------------------------------------------------------------------------
#--[Class init tests]-----------------------------------------------------------
#-------------------------------------------------------------------------------

subtest 'ISA test', {
  given $cellview {
    my Str $markup;
    my N-Object $context;
    my N-Object $area;
    my Str $text;
    my N-Object $texture;

#`{{
    #TC:0:new-cellview()

    $cellview .= new-cellview();
    ok .is-valid, '.new-cellview()';

    #TC:0:new-with-context()
    $area = …;
    $context = …;
    $cellview .= new-with-context( $area, $context);
    ok .is-valid, '.new-with-context( $area, $context)';

    #TC:0:new-with-markup()
    $markup = 'text';
    $cellview .= new-with-markup( $markup);
    ok .is-valid, '.new-with-markup( $markup)';

    #TC:0:new-with-text()
    $text = 'text';
    $cellview .= new-with-text( $text);
    ok .is-valid, '.new-with-text( $text)';

    #TC:0:new-with-texture()
    $texture = …;
    $cellview .= new-with-texture( $texture);
    ok .is-valid, '.new-with-texture( $texture)';

}}
  }
};

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# set environment variable 'raku-test-all' if rest must be tested too.
unless %*ENV<raku_test_all>:exists {
  done-testing;
  exit;
}

#-------------------------------------------------------------------------------
subtest 'Method tests', {
  with $cellview {
    my N-Object $model;
    my N-TreePath $path;
    my gboolean $fit-model;
    my gboolean $draw-sensitive;


#`{{
    #TM:0:set-displayed-row()
    $path = '…';
    .set-displayed-row( $path);
    #TM:0:get-displayed-row()
    is .get-displayed-row(),  $path, '.set-displayed-row() / .get-displayed-row()';

    #TM:0:set-draw-sensitive()
    $draw-sensitive = '…';
    .set-draw-sensitive( $draw-sensitive);
    #TM:0:get-draw-sensitive()
    is .get-draw-sensitive(),  $draw-sensitive, '.set-draw-sensitive() / .get-draw-sensitive()';

    #TM:0:set-fit-model()
    $fit-model = '…';
    .set-fit-model( $fit-model);
    #TM:0:get-fit-model()
    is .get-fit-model(),  $fit-model, '.set-fit-model() / .get-fit-model()';

    #TM:0:set-model()
    $model = …;
    .set-model( $model);
    #TM:0:get-model()
    is .get-model(),  $model, '.set-model() / .get-model()';

}}
  }
};

#-------------------------------------------------------------------------------
subtest 'Function tests', {
  with $cellview {


#`{{
}}
  }
};

#-------------------------------------------------------------------------------
done-testing;

=finish

#-------------------------------------------------------------------------------
subtest 'Signals …', {
  use Gnome::Gtk3::Main;

  my Gnome::Gtk3::Main $main .= new;

  class SignalHandlers {
    has Bool $!signal-processed = False;

    method … (
      'any-args',
      Gnome::Gtk4::CellView() :$_native-object, gulong :$_handler-id
      # --> …
    ) {

      isa-ok $_native-object, Gnome::Gtk4::CellView;
      $!signal-processed = True;
    }

    method signal-emitter ( Gnome::Gtk4::CellView :$_widget --> Str ) {

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      $_widget.emit-by-name(
        'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      );
      is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      #$!signal-processed = False;
      #$_widget.emit-by-name(
      #  'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      #);
      #is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }
      sleep(0.4);
      $main.gtk-main-quit;

      'done'
    }
  }

  my Gnome::Gtk4::CellView $cellview .= new;

  #my Gnome::Gtk3::Window $w .= new;
  #$w.add($m);

  my SignalHandlers $sh .= new;
  $cellview.register-signal( $sh, 'method', 'signal');

  my Promise $p = $i.start-thread(
    $sh, 'signal-emitter',
    # :!new-context,
    # :start-time(now + 1)
  );

  is $main.gtk-main-level, 0, "loop level 0";
  $main.gtk-main;
  #is $main.gtk-main-level, 0, "loop level is 0 again";

  is $p.result, 'done', 'emitter finished';
}

