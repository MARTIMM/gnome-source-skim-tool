=comment Package: Gtk4, C-Source: selectionmodel
use v6.d;

#TL:1:Gnome::Gtk4::R-SelectionModel:
#-------------------------------------------------------------------------------
#--[Module Imports]-------------------------------------------------------------
#-------------------------------------------------------------------------------

use Test;
use NativeCall;


#use Gnome::Gtk4::N-Bitset:api<2>;
#use Gnome::Gtk4::SelectionModel:api<2>;
use Gnome::N::GlibToRakuTypes:api<2>;
use Gnome::N::N-Object:api<2>;
use Gnome::N::NativeLib:api<2>;
use Gnome::N::X:api<2>;

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# set environment variable 'raku-test-all' if rest must be tested too.
unless %*ENV<raku_test_all>:exists {
  done-testing;
  exit;
}

#-------------------------------------------------------------------------------
subtest 'Method tests', {
  with $selectionmodel {
    my guint $n-items;
    my guint $position;
    my N-Bitset  $mask;
    my N-Bitset  $selected;
    my gboolean $unselect-rest;


#`{{
    #TM:0:get-selection-in-range()
    is .get-selection-in-range( $position, $n-items), '…', '.get-selection-in-range()';

    #TM:0:is-selected()
    ok .is-selected( $position), '.is-selected()';

    #TM:0:select-all()
    ok .select-all(), '.select-all()';

    #TM:0:select-item()
    ok .select-item( $position, $unselect-rest), '.select-item()';

    #TM:0:select-range()
    ok .select-range( $position, $n-items, $unselect-rest), '.select-range()';

    #TM:0:selection-changed()
    ok .selection-changed( $position, $n-items), '.selection-changed()';

    #TM:0:set-selection()
    $selected = '…';
    $mask = '…';
    .set-selection( $selected, $mask);
    #TM:0:get-selection()
    is .get-selection(),  $selected, $mask, '.set-selection() / .get-selection()';

    #TM:0:unselect-all()
    ok .unselect-all(), '.unselect-all()';

    #TM:0:unselect-item()
    ok .unselect-item( $position), '.unselect-item()';

    #TM:0:unselect-range()
    ok .unselect-range( $position, $n-items), '.unselect-range()';

}}
  }
};

#-------------------------------------------------------------------------------
done-testing;

=finish

#-------------------------------------------------------------------------------
subtest 'Signals …', {
  use Gnome::Gtk3::Main;

  my Gnome::Gtk3::Main $main .= new;

  class SignalHandlers {
    has Bool $!signal-processed = False;

    method … (
      'any-args',
      Gnome::Gtk4::SelectionModel() :$_native-object, gulong :$_handler-id
      # --> …
    ) {

      isa-ok $_native-object, Gnome::Gtk4::SelectionModel;
      $!signal-processed = True;
    }

    method signal-emitter ( Gnome::Gtk4::SelectionModel :$_widget --> Str ) {

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      $_widget.emit-by-name(
        'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      );
      is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      #$!signal-processed = False;
      #$_widget.emit-by-name(
      #  'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      #);
      #is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }
      sleep(0.4);
      $main.gtk-main-quit;

      'done'
    }
  }

  my Gnome::Gtk4::SelectionModel $selectionmodel .= new;

  #my Gnome::Gtk3::Window $w .= new;
  #$w.add($m);

  my SignalHandlers $sh .= new;
  $selectionmodel.register-signal( $sh, 'method', 'signal');

  my Promise $p = $i.start-thread(
    $sh, 'signal-emitter',
    # :!new-context,
    # :start-time(now + 1)
  );

  is $main.gtk-main-level, 0, "loop level 0";
  $main.gtk-main;
  #is $main.gtk-main-level, 0, "loop level is 0 again";

  is $p.result, 'done', 'emitter finished';
}

