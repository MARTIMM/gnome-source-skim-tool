=comment Package: Gtk4, C-Source: expander
use v6.d;

#TL:1:Gnome::Gtk4::Expander:
#-------------------------------------------------------------------------------
#--[Module Imports]-------------------------------------------------------------
#-------------------------------------------------------------------------------

use Test;
use NativeCall;


use Gnome::Gtk4::Expander:api<2>;
use Gnome::N::GlibToRakuTypes:api<2>;
use Gnome::N::N-Object:api<2>;
use Gnome::N::NativeLib:api<2>;
use Gnome::N::X:api<2>;

#-------------------------------------------------------------------------------
#--[Test preparation]-----------------------------------------------------------
#-------------------------------------------------------------------------------

#Gnome::N::debug(:on);
my Gnome::Gtk4::Expander $expander;

#-------------------------------------------------------------------------------
#--[Class init tests]-----------------------------------------------------------
#-------------------------------------------------------------------------------

subtest 'ISA test', {
  given $expander {
    my Str $label;

#`{{
    #TC:0:new-expander()
    $label = 'text';
    $expander .= new-expander( $label);
    ok .is-valid, '.new-expander( $label)';

    #TC:0:new-with-mnemonic()
    $label = 'text';
    $expander .= new-with-mnemonic( $label);
    ok .is-valid, '.new-with-mnemonic( $label)';

}}
  }
};

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# set environment variable 'raku-test-all' if rest must be tested too.
unless %*ENV<raku_test_all>:exists {
  done-testing;
  exit;
}

#-------------------------------------------------------------------------------
subtest 'Method tests', {
  with $expander {
    my N-Object $child;
    my gboolean $use-markup;
    my gboolean $use-underline;
    my N-Object $label-widget;
    my Str $label;
    my gboolean $expanded;
    my gboolean $resize-toplevel;


#`{{
    #TM:0:set-child()
    $child = …;
    .set-child( $child);
    #TM:0:get-child()
    is .get-child(),  $child, '.set-child() / .get-child()';

    #TM:0:set-expanded()
    $expanded = '…';
    .set-expanded( $expanded);
    #TM:0:get-expanded()
    is .get-expanded(),  $expanded, '.set-expanded() / .get-expanded()';

    #TM:0:set-label()
    $label = 'text';
    .set-label( $label);
    #TM:0:get-label()
    is .get-label(),  $label, '.set-label() / .get-label()';

    #TM:0:set-label-widget()
    $label-widget = …;
    .set-label-widget( $label-widget);
    #TM:0:get-label-widget()
    is .get-label-widget(),  $label-widget, '.set-label-widget() / .get-label-widget()';

    #TM:0:set-resize-toplevel()
    $resize-toplevel = '…';
    .set-resize-toplevel( $resize-toplevel);
    #TM:0:get-resize-toplevel()
    is .get-resize-toplevel(),  $resize-toplevel, '.set-resize-toplevel() / .get-resize-toplevel()';

    #TM:0:set-use-markup()
    $use-markup = '…';
    .set-use-markup( $use-markup);
    #TM:0:get-use-markup()
    is .get-use-markup(),  $use-markup, '.set-use-markup() / .get-use-markup()';

    #TM:0:set-use-underline()
    $use-underline = '…';
    .set-use-underline( $use-underline);
    #TM:0:get-use-underline()
    is .get-use-underline(),  $use-underline, '.set-use-underline() / .get-use-underline()';

}}
  }
};

#-------------------------------------------------------------------------------
subtest 'Function tests', {
  with $expander {


#`{{
}}
  }
};

#-------------------------------------------------------------------------------
done-testing;

=finish

#-------------------------------------------------------------------------------
subtest 'Signals …', {
  use Gnome::Gtk3::Main;

  my Gnome::Gtk3::Main $main .= new;

  class SignalHandlers {
    has Bool $!signal-processed = False;

    method … (
      'any-args',
      Gnome::Gtk4::Expander() :$_native-object, gulong :$_handler-id
      # --> …
    ) {

      isa-ok $_native-object, Gnome::Gtk4::Expander;
      $!signal-processed = True;
    }

    method signal-emitter ( Gnome::Gtk4::Expander :$_widget --> Str ) {

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      $_widget.emit-by-name(
        'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      );
      is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      #$!signal-processed = False;
      #$_widget.emit-by-name(
      #  'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      #);
      #is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }
      sleep(0.4);
      $main.gtk-main-quit;

      'done'
    }
  }

  my Gnome::Gtk4::Expander $expander .= new;

  #my Gnome::Gtk3::Window $w .= new;
  #$w.add($m);

  my SignalHandlers $sh .= new;
  $expander.register-signal( $sh, 'method', 'signal');

  my Promise $p = $i.start-thread(
    $sh, 'signal-emitter',
    # :!new-context,
    # :start-time(now + 1)
  );

  is $main.gtk-main-level, 0, "loop level 0";
  $main.gtk-main;
  #is $main.gtk-main-level, 0, "loop level is 0 again";

  is $p.result, 'done', 'emitter finished';
}

