=comment Package: Gtk4, C-Source: celllayout
use v6.d;

#TL:1:Gnome::Gtk4::R-CellLayout:
#-------------------------------------------------------------------------------
#--[Module Imports]-------------------------------------------------------------
#-------------------------------------------------------------------------------

# load test
use Test;
use Gnome::Gtk4::R-CellLayout:api<2>;
done-testing;
exit;

=finish

use NativeCall;
use Test;


use Gnome::Glib::N-List:api<2>;
#use Gnome::Gtk4::CellLayout:api<2>;
use Gnome::Gtk4::N-TreeIter:api<2>;
use Gnome::N::GlibToRakuTypes:api<2>;
use Gnome::N::N-Object:api<2>;
use Gnome::N::NativeLib:api<2>;
use Gnome::N::X:api<2>;

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# set environment variable 'raku-test-all' if rest must be tested too.
unless %*ENV<raku_test_all>:exists {
  done-testing;
  exit;
}

#-------------------------------------------------------------------------------
subtest 'Method tests', {
  with $celllayout {
    my gint $position;
    my gpointer $func-data;
    my gint $column;
    my Str $attribute;
    sub func ( N-Object $cell-layout, N-Object $cell, N-Object $tree-model, N-TreeIter $iter, gpointer $data ) {}
    my  $destroy;
    my gboolean $expand;
    my N-Object $cell;


#`{{
    #TM:0:add-attribute()
    ok .add-attribute( $cell, $attribute, $column), '.add-attribute()';

    #TM:0:clear()
    ok .clear(), '.clear()';

    #TM:0:clear-attributes()
    ok .clear-attributes( $cell), '.clear-attributes()';

    #TM:0:get-area()
     .get-area(), '…', '.get-area()';

    #TM:0:get-cells()
     .get-cells(), '…', '.get-cells()';

    #TM:0:pack-end()
    ok .pack-end( $cell, $expand), '.pack-end()';

    #TM:0:pack-start()
    ok .pack-start( $cell, $expand), '.pack-start()';

    #TM:0:reorder()
    ok .reorder( $cell, $position), '.reorder()';

    #TM:0:set-attributes()
    $cell = …;
    .set-attributes( $cell);
    ok True, '.set-attributes()';

    #TM:0:set-cell-data-func()
    $cell = …;
    $func = …;
    $func-data = '…';
    $destroy = '…';
    .set-cell-data-func( $cell, $func, $func-data, $destroy);
    ok True, '.set-cell-data-func()';

}}
  }
};

#-------------------------------------------------------------------------------
done-testing;

=finish

#-------------------------------------------------------------------------------
subtest 'Signals …', {
  use Gnome::Gtk3::Main;

  my Gnome::Gtk3::Main $main .= new;

  class SignalHandlers {
    has Bool $!signal-processed = False;

    method … (
      'any-args',
      Gnome::Gtk4::CellLayout() :$_native-object, gulong :$_handler-id
      # --> …
    ) {

      isa-ok $_native-object, Gnome::Gtk4::CellLayout;
      $!signal-processed = True;
    }

    method signal-emitter ( Gnome::Gtk4::CellLayout :$_widget --> Str ) {

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      $_widget.emit-by-name(
        'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      );
      is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      #$!signal-processed = False;
      #$_widget.emit-by-name(
      #  'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      #);
      #is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }
      sleep(0.4);
      $main.gtk-main-quit;

      'done'
    }
  }

  my Gnome::Gtk4::CellLayout $celllayout .= new;

  #my Gnome::Gtk3::Window $w .= new;
  #$w.add($m);

  my SignalHandlers $sh .= new;
  $celllayout.register-signal( $sh, 'method', 'signal');

  my Promise $p = $i.start-thread(
    $sh, 'signal-emitter',
    # :!new-context,
    # :start-time(now + 1)
  );

  is $main.gtk-main-level, 0, "loop level 0";
  $main.gtk-main;
  #is $main.gtk-main-level, 0, "loop level is 0 again";

  is $p.result, 'done', 'emitter finished';
}

