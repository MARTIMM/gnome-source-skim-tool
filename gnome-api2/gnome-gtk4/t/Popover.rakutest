=comment Package: Gtk4, C-Source: popover
use v6.d;

#TL:1:Gnome::Gtk4::Popover:
#-------------------------------------------------------------------------------
#--[Module Imports]-------------------------------------------------------------
#-------------------------------------------------------------------------------

use Test;
use NativeCall;


use Gnome::Gdk4::N-Rectangle:api<2>;
use Gnome::Gdk4::T-types:api<2>;
use Gnome::Gtk4::Popover:api<2>;
use Gnome::Gtk4::T-enums:api<2>;
use Gnome::N::GlibToRakuTypes:api<2>;
use Gnome::N::N-Object:api<2>;
use Gnome::N::NativeLib:api<2>;
use Gnome::N::X:api<2>;

#-------------------------------------------------------------------------------
#--[Test preparation]-----------------------------------------------------------
#-------------------------------------------------------------------------------

#Gnome::N::debug(:on);
my Gnome::Gtk4::Popover $popover;

#-------------------------------------------------------------------------------
#--[Class init tests]-----------------------------------------------------------
#-------------------------------------------------------------------------------

subtest 'ISA test', {
  given $popover {

#`{{
    #TC:0:new-popover()

    $popover .= new-popover();
    ok .is-valid, '.new-popover()';

}}
  }
};

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# set environment variable 'raku-test-all' if rest must be tested too.
unless %*ENV<raku_test_all>:exists {
  done-testing;
  exit;
}

#-------------------------------------------------------------------------------
subtest 'Method tests', {
  with $popover {
    my gboolean $mnemonics-visible;
    my gboolean $cascade-popdown;
    my gboolean $has-arrow;
    my gint $y-offset;
    my GtkPositionType $position;
    my N-Object $widget;
    my N-Object $rect;
    my gint $x-offset;
    my N-Object $child;
    my gboolean $autohide;


#`{{
    #TM:0:popdown()
    ok .popdown(), '.popdown()';

    #TM:0:popup()
    ok .popup(), '.popup()';

    #TM:0:present()
    ok .present(), '.present()';

    #TM:0:set-autohide()
    $autohide = '…';
    .set-autohide( $autohide);
    #TM:0:get-autohide()
    is .get-autohide(),  $autohide, '.set-autohide() / .get-autohide()';

    #TM:0:set-cascade-popdown()
    $cascade-popdown = '…';
    .set-cascade-popdown( $cascade-popdown);
    #TM:0:get-cascade-popdown()
    is .get-cascade-popdown(),  $cascade-popdown, '.set-cascade-popdown() / .get-cascade-popdown()';

    #TM:0:set-child()
    $child = …;
    .set-child( $child);
    #TM:0:get-child()
    is .get-child(),  $child, '.set-child() / .get-child()';

    #TM:0:set-default-widget()
    $widget = …;
    .set-default-widget( $widget);
    ok True, '.set-default-widget()';

    #TM:0:set-has-arrow()
    $has-arrow = '…';
    .set-has-arrow( $has-arrow);
    #TM:0:get-has-arrow()
    is .get-has-arrow(),  $has-arrow, '.set-has-arrow() / .get-has-arrow()';

    #TM:0:set-mnemonics-visible()
    $mnemonics-visible = '…';
    .set-mnemonics-visible( $mnemonics-visible);
    #TM:0:get-mnemonics-visible()
    is .get-mnemonics-visible(),  $mnemonics-visible, '.set-mnemonics-visible() / .get-mnemonics-visible()';

    #TM:0:set-offset()
    $x-offset = '…';
    $y-offset = '…';
    .set-offset( $x-offset, $y-offset);
    #TM:0:get-offset()
    is .get-offset(),  $x-offset, $y-offset, '.set-offset() / .get-offset()';

    #TM:0:set-pointing-to()
    $rect = …;
    .set-pointing-to( $rect);
    #TM:0:get-pointing-to()
    is .get-pointing-to(),  $rect, '.set-pointing-to() / .get-pointing-to()';

    #TM:0:set-position()
    $position = …;
    .set-position( $position);
    #TM:0:get-position()
    is .get-position(),  $position, '.set-position() / .get-position()';

}}
  }
};

#-------------------------------------------------------------------------------
subtest 'Function tests', {
  with $popover {


#`{{
}}
  }
};

#-------------------------------------------------------------------------------
done-testing;

=finish

#-------------------------------------------------------------------------------
subtest 'Signals …', {
  use Gnome::Gtk3::Main;

  my Gnome::Gtk3::Main $main .= new;

  class SignalHandlers {
    has Bool $!signal-processed = False;

    method … (
      'any-args',
      Gnome::Gtk4::Popover() :$_native-object, gulong :$_handler-id
      # --> …
    ) {

      isa-ok $_native-object, Gnome::Gtk4::Popover;
      $!signal-processed = True;
    }

    method signal-emitter ( Gnome::Gtk4::Popover :$_widget --> Str ) {

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      $_widget.emit-by-name(
        'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      );
      is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      #$!signal-processed = False;
      #$_widget.emit-by-name(
      #  'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      #);
      #is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }
      sleep(0.4);
      $main.gtk-main-quit;

      'done'
    }
  }

  my Gnome::Gtk4::Popover $popover .= new;

  #my Gnome::Gtk3::Window $w .= new;
  #$w.add($m);

  my SignalHandlers $sh .= new;
  $popover.register-signal( $sh, 'method', 'signal');

  my Promise $p = $i.start-thread(
    $sh, 'signal-emitter',
    # :!new-context,
    # :start-time(now + 1)
  );

  is $main.gtk-main-level, 0, "loop level 0";
  $main.gtk-main;
  #is $main.gtk-main-level, 0, "loop level is 0 again";

  is $p.result, 'done', 'emitter finished';
}

