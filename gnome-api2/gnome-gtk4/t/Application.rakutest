# Command to generate: generate.raku -v -t -c Gtk4 Application

#TL:1:Gnome::Gtk4::Application:
#-------------------------------------------------------------------------------
#--[Module Imports]-------------------------------------------------------------
#-------------------------------------------------------------------------------

use Test;
use NativeCall;


use Gnome::Gio::T-ioenums:api<2>;

use Gnome::Gtk4::Application:api<2>;
use Gnome::Gtk4::T-application:api<2>;

use Gnome::N::GlibToRakuTypes:api<2>;
use Gnome::N::N-Object:api<2>;
#use Gnome::N::NativeLib:api<2>;
use Gnome::N::X:api<2>;

#-------------------------------------------------------------------------------
#--[Test preparation]-----------------------------------------------------------
#-------------------------------------------------------------------------------

#Gnome::N::debug(:on);
my Gnome::Gtk4::Application $application;

#-------------------------------------------------------------------------------
#--[Class init tests]-----------------------------------------------------------
#-------------------------------------------------------------------------------

subtest 'ISA test', {
  given $application {
#    say .id-is-valid('io.github.martimm.gio');
#    say .id-is-valid('io.mt.xyz');

    my Str $application-id;
    my UInt $flags;

    #TC:1:new-application()
    $application-id = 'io.mt.xyz';
    $flags = G_APPLICATION_DEFAULT_FLAGS;
    $application .= new-application( $application-id, $flags);
    ok .is-valid, '.new-application( $application-id, $flags)';
  }
};

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# set environment variable 'raku-test-all' if rest must be tested too.
unless %*ENV<raku_test_all>:exists {
  done-testing;
  exit;
}

#-------------------------------------------------------------------------------
subtest 'Method tests', {
  with $application {
    my Str $id;
    my Array[Str] $accels;
    my GtkApplicationInhibitFlags $flags;
    my Str $accel;
    my N-Object() $window;
    my Str $detailed-action-name;
    my UInt() $cookie;
    my Str $reason;
    my N-Object() $menubar;


#`{{
    #TM:0:add-window()
    ok .add-window( $window), '.add-window()';

    #TM:0:get-actions-for-accel()
    is .get-actions-for-accel( $accel), '…', '.get-actions-for-accel()';

    #TM:0:get-active-window()
     .get-active-window(), '…', '.get-active-window()';

    #TM:0:get-menu-by-id()
    is .get-menu-by-id( $id), '…', '.get-menu-by-id()';

    #TM:0:get-window-by-id()
    is .get-window-by-id( $id), '…', '.get-window-by-id()';

    #TM:0:get-windows()
     .get-windows(), '…', '.get-windows()';

    #TM:0:inhibit()
    ok .inhibit( $window, $flags, $reason), '.inhibit()';

    #TM:0:list-action-descriptions()
    ok .list-action-descriptions(), '.list-action-descriptions()';

    #TM:0:remove-window()
    ok .remove-window( $window), '.remove-window()';

    #TM:0:set-accels-for-action()
    $detailed-action-name = 'text';
    $accels = '…';
    .set-accels-for-action( $detailed-action-name, $accels);
    #TM:0:get-accels-for-action()
    is .get-accels-for-action(),  $detailed-action-name, $accels, '.set-accels-for-action() / .get-accels-for-action()';

    #TM:0:set-menubar()
    $menubar = …;  # a native object
    .set-menubar( $menubar);
    #TM:0:get-menubar()
    is .get-menubar(),  $menubar, '.set-menubar() / .get-menubar()';

    #TM:0:uninhibit()
    ok .uninhibit( $cookie), '.uninhibit()';
}}
  }
};

#-------------------------------------------------------------------------------
done-testing;

=finish

#-------------------------------------------------------------------------------
subtest 'Signals …', {
  use Gnome::Gtk3::Main;

  my Gnome::Gtk3::Main $main .= new;

  class SignalHandlers {
    has Bool $!signal-processed = False;

    method … (
      'any-args',
      Gnome::Gtk4::Application() :$_native-object, gulong :$_handler-id
      # --> …
    ) {

      isa-ok $_native-object, Gnome::Gtk4::Application;
      $!signal-processed = True;
    }

    method signal-emitter ( Gnome::Gtk4::Application :$_widget --> Str ) {

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      $_widget.emit-by-name(
        'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      );
      is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      #$!signal-processed = False;
      #$_widget.emit-by-name(
      #  'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      #);
      #is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }
      sleep(0.4);
      $main.gtk-main-quit;

      'done'
    }
  }

  my Gnome::Gtk4::Application $application .= new;

  #my Gnome::Gtk3::Window $w .= new;
  #$w.add($m);

  my SignalHandlers $sh .= new;
  $application.register-signal( $sh, 'method', 'signal');

  my Promise $p = $i.start-thread(
    $sh, 'signal-emitter',
    # :!new-context,
    # :start-time(now + 1)
  );

  is $main.gtk-main-level, 0, "loop level 0";
  $main.gtk-main;
  #is $main.gtk-main-level, 0, "loop level is 0 again";

  is $p.result, 'done', 'emitter finished';
}

