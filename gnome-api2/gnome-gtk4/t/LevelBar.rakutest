=comment Package: Gtk4, C-Source: levelbar
use v6.d;

#TL:1:Gnome::Gtk4::LevelBar:
#-------------------------------------------------------------------------------
#--[Module Imports]-------------------------------------------------------------
#-------------------------------------------------------------------------------

use Test;
use NativeCall;


use Gnome::Gtk4::LevelBar:api<2>;
use Gnome::Gtk4::T-Enums:api<2>;
use Gnome::N::GlibToRakuTypes:api<2>;
use Gnome::N::N-Object:api<2>;
use Gnome::N::NativeLib:api<2>;
use Gnome::N::X:api<2>;

#-------------------------------------------------------------------------------
#--[Test preparation]-----------------------------------------------------------
#-------------------------------------------------------------------------------

#Gnome::N::debug(:on);
my Gnome::Gtk4::LevelBar $level-bar;

#-------------------------------------------------------------------------------
#--[Class init tests]-----------------------------------------------------------
#-------------------------------------------------------------------------------

subtest 'ISA test', {
  given $level-bar {
    my gdouble $max-value;
    my gdouble $min-value;

#`{{
    #TC:0:new-levelbar()

    $level-bar .= new-levelbar();
    ok .is-valid, '.new-levelbar()';

    #TC:0:new-for-interval()
    $min-value = '…';
    $max-value = '…';
    $level-bar .= new-for-interval( $min-value, $max-value);
    ok .is-valid, '.new-for-interval( $min-value, $max-value)';

}}
  }
};

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# set environment variable 'raku-test-all' if rest must be tested too.
unless %*ENV<raku_test_all>:exists {
  done-testing;
  exit;
}

#-------------------------------------------------------------------------------
subtest 'Method tests', {
  with $level-bar {
    my gdouble $value;
    my gboolean $inverted;
    my GtkLevelBarMode $mode;
    my Str $name;


#`{{
    #TM:0:add-offset-value()
    ok .add-offset-value( $name, $value), '.add-offset-value()';

    #TM:0:get-offset-value()
    is .get-offset-value( $name, $value), '…', '.get-offset-value()';

    #TM:0:remove-offset-value()
    ok .remove-offset-value( $name), '.remove-offset-value()';

    #TM:0:set-inverted()
    $inverted = '…';
    .set-inverted( $inverted);
    #TM:0:get-inverted()
    is .get-inverted(),  $inverted, '.set-inverted() / .get-inverted()';

    #TM:0:set-max-value()
    $value = '…';
    .set-max-value( $value);
    #TM:0:get-max-value()
    is .get-max-value(),  $value, '.set-max-value() / .get-max-value()';

    #TM:0:set-min-value()
    $value = '…';
    .set-min-value( $value);
    #TM:0:get-min-value()
    is .get-min-value(),  $value, '.set-min-value() / .get-min-value()';

    #TM:0:set-mode()
    $mode = …;
    .set-mode( $mode);
    #TM:0:get-mode()
    is .get-mode(),  $mode, '.set-mode() / .get-mode()';

    #TM:0:set-value()
    $value = '…';
    .set-value( $value);
    #TM:0:get-value()
    is .get-value(),  $value, '.set-value() / .get-value()';

}}
  }
};

#-------------------------------------------------------------------------------
subtest 'Function tests', {
  with $level-bar {


#`{{
}}
  }
};

#-------------------------------------------------------------------------------
done-testing;

=finish

#-------------------------------------------------------------------------------
subtest 'Signals …', {
  use Gnome::Gtk3::Main;

  my Gnome::Gtk3::Main $main .= new;

  class SignalHandlers {
    has Bool $!signal-processed = False;

    method … (
      'any-args',
      Gnome::Gtk4::LevelBar() :$_native-object, gulong :$_handler-id
      # --> …
    ) {

      isa-ok $_native-object, Gnome::Gtk4::LevelBar;
      $!signal-processed = True;
    }

    method signal-emitter ( Gnome::Gtk4::LevelBar :$_widget --> Str ) {

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      $_widget.emit-by-name(
        'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      );
      is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      #$!signal-processed = False;
      #$_widget.emit-by-name(
      #  'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      #);
      #is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }
      sleep(0.4);
      $main.gtk-main-quit;

      'done'
    }
  }

  my Gnome::Gtk4::LevelBar $level-bar .= new;

  #my Gnome::Gtk3::Window $w .= new;
  #$w.add($m);

  my SignalHandlers $sh .= new;
  $level-bar.register-signal( $sh, 'method', 'signal');

  my Promise $p = $i.start-thread(
    $sh, 'signal-emitter',
    # :!new-context,
    # :start-time(now + 1)
  );

  is $main.gtk-main-level, 0, "loop level 0";
  $main.gtk-main;
  #is $main.gtk-main-level, 0, "loop level is 0 again";

  is $p.result, 'done', 'emitter finished';
}

