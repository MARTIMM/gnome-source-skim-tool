# Command to generate: generate.raku -c -t Gtk4 Dialog
use v6.d;

#TL:1:Gnome::Gtk4::Dialog:
#-------------------------------------------------------------------------------
#--[Module Imports]-------------------------------------------------------------
#-------------------------------------------------------------------------------

use NativeCall;
use Test;


use Gnome::Gtk4::Dialog:api<2>;
use Gnome::Gtk4::T-Dialog:api<2>;
use Gnome::Gtk4::Window:api<2>;

use Gnome::N::GlibToRakuTypes:api<2>;
use Gnome::N::N-GObject:api<2>;
use Gnome::N::NativeLib:api<2>;
use Gnome::N::X:api<2>;

#-------------------------------------------------------------------------------
#--[Test preparation]-----------------------------------------------------------
#-------------------------------------------------------------------------------

#Gnome::N::debug(:on);
my Gnome::Gtk4::Dialog $dialog;

#-------------------------------------------------------------------------------
#--[Class init tests]-----------------------------------------------------------
#-------------------------------------------------------------------------------

subtest 'ISA test', {
  given $dialog {
    my Gnome::Gtk4::Window $parent;
    #my N-GObject() $parent;
    my Str $title;
    my UInt $flags;

    #TC:1:new-dialog()
    $dialog .= new-dialog();
    ok .is-valid, '.new-dialog()';

    #TC:1:new-with-buttons()
    $title = 'my dialog';
    $parent .= new-window;
    $flags = GTK_DIALOG_MODAL +| GTK_DIALOG_DESTROY_WITH_PARENT;
    $dialog .= new-with-buttons(
      $title, $parent, $flags,
      'Ok', GEnum, GTK_RESPONSE_ACCEPT,
      Str, 'Cancel', GEnum, GTK_RESPONSE_REJECT
    );
    ok .is-valid, '.new-with-buttons( $title, $parent, $flags, $first-button-text, "…")';

#`{{
}}
  }
};

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# set environment variable 'raku-test-all' if rest must be tested too.
unless %*ENV<raku_test_all>:exists {
  done-testing;
  exit;
}

#-------------------------------------------------------------------------------
subtest 'Method tests', {
  with $dialog {
    my N-GObject() $widget;
    my Bool() $setting;
    my Str $first-button-text;
    my Str $button-text;
    my Int() $response-id;
    my N-GObject() $child;


#`{{
    #TM:0:add-action-widget()
    ok .add-action-widget( $child, $response-id), '.add-action-widget()';

    #TM:0:add-button()
    ok .add-button( $button-text, $response-id), '.add-button()';

    #TM:0:add-buttons()
    ok .add-buttons( $first-button-text), '.add-buttons()';

    #TM:0:get-content-area()
     .get-content-area(), '…', '.get-content-area()';

    #TM:0:get-header-bar()
     .get-header-bar(), '…', '.get-header-bar()';

    #TM:0:get-response-for-widget()
    is .get-response-for-widget( $widget), '…', '.get-response-for-widget()';

    #TM:0:get-widget-for-response()
    is .get-widget-for-response( $response-id), '…', '.get-widget-for-response()';

    #TM:0:response()
    ok .response( $response-id), '.response()';

    #TM:0:set-default-response()
    $response-id = -42;
    .set-default-response( $response-id);
    ok True, '.set-default-response()';

    #TM:0:set-response-sensitive()
    $response-id = -42;
    $setting = True;
    .set-response-sensitive( $response-id, $setting);
    ok True, '.set-response-sensitive()';

}}
  }
};

#-------------------------------------------------------------------------------
done-testing;

=finish

#-------------------------------------------------------------------------------
subtest 'Signals …', {
  use Gnome::Gtk3::Main;

  my Gnome::Gtk3::Main $main .= new;

  class SignalHandlers {
    has Bool $!signal-processed = False;

    method … (
      'any-args',
      Gnome::Gtk4::Dialog() :$_native-object, gulong :$_handler-id
      # --> …
    ) {

      isa-ok $_native-object, Gnome::Gtk4::Dialog;
      $!signal-processed = True;
    }

    method signal-emitter ( Gnome::Gtk4::Dialog :$_widget --> Str ) {

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      $_widget.emit-by-name(
        'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      );
      is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      #$!signal-processed = False;
      #$_widget.emit-by-name(
      #  'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      #);
      #is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }
      sleep(0.4);
      $main.gtk-main-quit;

      'done'
    }
  }

  my Gnome::Gtk4::Dialog $dialog .= new;

  #my Gnome::Gtk3::Window $w .= new;
  #$w.add($m);

  my SignalHandlers $sh .= new;
  $dialog.register-signal( $sh, 'method', 'signal');

  my Promise $p = $i.start-thread(
    $sh, 'signal-emitter',
    # :!new-context,
    # :start-time(now + 1)
  );

  is $main.gtk-main-level, 0, "loop level 0";
  $main.gtk-main;
  #is $main.gtk-main-level, 0, "loop level is 0 again";

  is $p.result, 'done', 'emitter finished';
}

