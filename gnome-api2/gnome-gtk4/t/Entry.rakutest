=comment Package: Gtk4, C-Source: entry
use v6.d;

#TL:1:Gnome::Gtk4::Entry:
#-------------------------------------------------------------------------------
#--[Module Imports]-------------------------------------------------------------
#-------------------------------------------------------------------------------

use Test;
use NativeCall;

use Gnome::Gdk4::N-Rectangle:api<2>;
use Gnome::Gdk4::T-types:api<2>;

use Gnome::Gtk4::Entry:api<2>;
use Gnome::Gtk4::T-entry:api<2>;
use Gnome::Gtk4::T-enums:api<2>;
use Gnome::Gtk4::T-Image:api<2>;

use Gnome::N::GlibToRakuTypes:api<2>;
use Gnome::N::N-Object:api<2>;
use Gnome::N::NativeLib:api<2>;
use Gnome::N::X:api<2>;

#use Gnome::Pango::N-AttrList:api<2>;
use Gnome::Pango::N-TabArray:api<2>;

#-------------------------------------------------------------------------------
#--[Test preparation]-----------------------------------------------------------
#-------------------------------------------------------------------------------

#Gnome::N::debug(:on);
my Gnome::Gtk4::Entry $entry;

#-------------------------------------------------------------------------------
#--[Class init tests]-----------------------------------------------------------
#-------------------------------------------------------------------------------

subtest 'ISA test', {
  given $entry {
    my N-Object $buffer;

#`{{
    #TC:0:new-entry()

    $entry .= new-entry();
    ok .is-valid, '.new-entry()';

    #TC:0:new-with-buffer()
    $buffer = …;
    $entry .= new-with-buffer( $buffer);
    ok .is-valid, '.new-with-buffer( $buffer)';

}}
  }
};

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# set environment variable 'raku-test-all' if rest must be tested too.
unless %*ENV<raku_test_all>:exists {
  done-testing;
  exit;
}

#-------------------------------------------------------------------------------
subtest 'Method tests', {
  with $entry {
    my gboolean $overwrite;
    my gint $x;
#    my N-AttrList  $attrs;
    my gboolean $sensitive;
    my N-Rectangle $icon-area;
    my N-Object $model;
    my GtkInputPurpose $purpose;
    my gint $max;
    my gboolean $activatable;
    my GFlag $hints;
    my GFlag $actions;
    my gfloat $xalign;
    my GtkEntryIconPosition $icon-pos;
    my Str $text;
    my gdouble $fraction;
    my N-Object $provider;
    my N-TabArray $tabs;
    my Str $icon-name;
    my gint $y;
    my N-Object $buffer;
    my gboolean $setting;
    my N-Object $completion;
    my gunichar $ch;
    my gboolean $visible;
    my N-Object $paintable;
    my N-Object $icon;
    my Str $tooltip;


#`{{
    #TM:0:get-current-icon-drag-source()
     .get-current-icon-drag-source(), '…', '.get-current-icon-drag-source()';

    #TM:0:get-icon-area()
    is .get-icon-area( $icon-pos, $icon-area), '…', '.get-icon-area()';

    #TM:0:get-icon-at-pos()
    is .get-icon-at-pos( $x, $y), '…', '.get-icon-at-pos()';

    #TM:0:get-icon-gicon()
    is .get-icon-gicon( $icon-pos), '…', '.get-icon-gicon()';

    #TM:0:get-icon-name()
    is .get-icon-name( $icon-pos), '…', '.get-icon-name()';

    #TM:0:get-icon-paintable()
    is .get-icon-paintable( $icon-pos), '…', '.get-icon-paintable()';

    #TM:0:get-icon-storage-type()
    is .get-icon-storage-type( $icon-pos), '…', '.get-icon-storage-type()';

    #TM:0:get-text-length()
     .get-text-length(), '…', '.get-text-length()';

    #TM:0:grab-focus-without-selecting()
    ok .grab-focus-without-selecting(), '.grab-focus-without-selecting()';

    #TM:0:progress-pulse()
    ok .progress-pulse(), '.progress-pulse()';

    #TM:0:reset-im-context()
    ok .reset-im-context(), '.reset-im-context()';

    #TM:0:set-activates-default()
    $setting = '…';
    .set-activates-default( $setting);
    #TM:0:get-activates-default()
    is .get-activates-default(),  $setting, '.set-activates-default() / .get-activates-default()';

    #TM:0:set-alignment()
    $xalign = '…';
    .set-alignment( $xalign);
    #TM:0:get-alignment()
    is .get-alignment(),  $xalign, '.set-alignment() / .get-alignment()';

    #TM:0:set-attributes()
    $attrs = '…';
    .set-attributes( $attrs);
    #TM:0:get-attributes()
    is .get-attributes(),  $attrs, '.set-attributes() / .get-attributes()';

    #TM:0:set-buffer()
    $buffer = …;
    .set-buffer( $buffer);
    #TM:0:get-buffer()
    is .get-buffer(),  $buffer, '.set-buffer() / .get-buffer()';

    #TM:0:set-completion()
    $completion = …;
    .set-completion( $completion);
    #TM:0:get-completion()
    is .get-completion(),  $completion, '.set-completion() / .get-completion()';

    #TM:0:set-extra-menu()
    $model = …;
    .set-extra-menu( $model);
    #TM:0:get-extra-menu()
    is .get-extra-menu(),  $model, '.set-extra-menu() / .get-extra-menu()';

    #TM:0:set-has-frame()
    $setting = '…';
    .set-has-frame( $setting);
    #TM:0:get-has-frame()
    is .get-has-frame(),  $setting, '.set-has-frame() / .get-has-frame()';

    #TM:0:set-icon-activatable()
    $icon-pos = …;
    $activatable = '…';
    .set-icon-activatable( $icon-pos, $activatable);
    #TM:0:get-icon-activatable()
    is .get-icon-activatable(),  $icon-pos, $activatable, '.set-icon-activatable() / .get-icon-activatable()';

    #TM:0:set-icon-drag-source()
    $icon-pos = …;
    $provider = …;
    $actions = …;
    .set-icon-drag-source( $icon-pos, $provider, $actions);
    ok True, '.set-icon-drag-source()';

    #TM:0:set-icon-from-gicon()
    $icon-pos = …;
    $icon = …;
    .set-icon-from-gicon( $icon-pos, $icon);
    ok True, '.set-icon-from-gicon()';

    #TM:0:set-icon-from-icon-name()
    $icon-pos = …;
    $icon-name = 'text';
    .set-icon-from-icon-name( $icon-pos, $icon-name);
    ok True, '.set-icon-from-icon-name()';

    #TM:0:set-icon-from-paintable()
    $icon-pos = …;
    $paintable = …;
    .set-icon-from-paintable( $icon-pos, $paintable);
    ok True, '.set-icon-from-paintable()';

    #TM:0:set-icon-sensitive()
    $icon-pos = …;
    $sensitive = '…';
    .set-icon-sensitive( $icon-pos, $sensitive);
    #TM:0:get-icon-sensitive()
    is .get-icon-sensitive(),  $icon-pos, $sensitive, '.set-icon-sensitive() / .get-icon-sensitive()';

    #TM:0:set-icon-tooltip-markup()
    $icon-pos = …;
    $tooltip = 'text';
    .set-icon-tooltip-markup( $icon-pos, $tooltip);
    #TM:0:get-icon-tooltip-markup()
    is .get-icon-tooltip-markup(),  $icon-pos, $tooltip, '.set-icon-tooltip-markup() / .get-icon-tooltip-markup()';

    #TM:0:set-icon-tooltip-text()
    $icon-pos = …;
    $tooltip = 'text';
    .set-icon-tooltip-text( $icon-pos, $tooltip);
    #TM:0:get-icon-tooltip-text()
    is .get-icon-tooltip-text(),  $icon-pos, $tooltip, '.set-icon-tooltip-text() / .get-icon-tooltip-text()';

    #TM:0:set-input-hints()
    $hints = …;
    .set-input-hints( $hints);
    #TM:0:get-input-hints()
    is .get-input-hints(),  $hints, '.set-input-hints() / .get-input-hints()';

    #TM:0:set-input-purpose()
    $purpose = …;
    .set-input-purpose( $purpose);
    #TM:0:get-input-purpose()
    is .get-input-purpose(),  $purpose, '.set-input-purpose() / .get-input-purpose()';

    #TM:0:set-invisible-char()
    $ch = '…';
    .set-invisible-char( $ch);
    #TM:0:get-invisible-char()
    is .get-invisible-char(),  $ch, '.set-invisible-char() / .get-invisible-char()';

    #TM:0:set-max-length()
    $max = '…';
    .set-max-length( $max);
    #TM:0:get-max-length()
    is .get-max-length(),  $max, '.set-max-length() / .get-max-length()';

    #TM:0:set-overwrite-mode()
    $overwrite = '…';
    .set-overwrite-mode( $overwrite);
    #TM:0:get-overwrite-mode()
    is .get-overwrite-mode(),  $overwrite, '.set-overwrite-mode() / .get-overwrite-mode()';

    #TM:0:set-placeholder-text()
    $text = 'text';
    .set-placeholder-text( $text);
    #TM:0:get-placeholder-text()
    is .get-placeholder-text(),  $text, '.set-placeholder-text() / .get-placeholder-text()';

    #TM:0:set-progress-fraction()
    $fraction = '…';
    .set-progress-fraction( $fraction);
    #TM:0:get-progress-fraction()
    is .get-progress-fraction(),  $fraction, '.set-progress-fraction() / .get-progress-fraction()';

    #TM:0:set-progress-pulse-step()
    $fraction = '…';
    .set-progress-pulse-step( $fraction);
    #TM:0:get-progress-pulse-step()
    is .get-progress-pulse-step(),  $fraction, '.set-progress-pulse-step() / .get-progress-pulse-step()';

    #TM:0:set-tabs()
    $tabs = '…';
    .set-tabs( $tabs);
    #TM:0:get-tabs()
    is .get-tabs(),  $tabs, '.set-tabs() / .get-tabs()';

    #TM:0:set-visibility()
    $visible = '…';
    .set-visibility( $visible);
    #TM:0:get-visibility()
    is .get-visibility(),  $visible, '.set-visibility() / .get-visibility()';

    #TM:0:unset-invisible-char()
    ok .unset-invisible-char(), '.unset-invisible-char()';

}}
  }
};

#-------------------------------------------------------------------------------
subtest 'Function tests', {
  with $entry {


#`{{
}}
  }
};

#-------------------------------------------------------------------------------
done-testing;

=finish

#-------------------------------------------------------------------------------
subtest 'Signals …', {
  use Gnome::Gtk3::Main;

  my Gnome::Gtk3::Main $main .= new;

  class SignalHandlers {
    has Bool $!signal-processed = False;

    method … (
      'any-args',
      Gnome::Gtk4::Entry() :$_native-object, gulong :$_handler-id
      # --> …
    ) {

      isa-ok $_native-object, Gnome::Gtk4::Entry;
      $!signal-processed = True;
    }

    method signal-emitter ( Gnome::Gtk4::Entry :$_widget --> Str ) {

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      $_widget.emit-by-name(
        'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      );
      is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      #$!signal-processed = False;
      #$_widget.emit-by-name(
      #  'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      #);
      #is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }
      sleep(0.4);
      $main.gtk-main-quit;

      'done'
    }
  }

  my Gnome::Gtk4::Entry $entry .= new;

  #my Gnome::Gtk3::Window $w .= new;
  #$w.add($m);

  my SignalHandlers $sh .= new;
  $entry.register-signal( $sh, 'method', 'signal');

  my Promise $p = $i.start-thread(
    $sh, 'signal-emitter',
    # :!new-context,
    # :start-time(now + 1)
  );

  is $main.gtk-main-level, 0, "loop level 0";
  $main.gtk-main;
  #is $main.gtk-main-level, 0, "loop level is 0 again";

  is $p.result, 'done', 'emitter finished';
}

