=comment Package: Gtk4, C-Source: treemodelfilter
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=TITLE Gnome::Gtk4::TreeModelFilter
=head1 Description

A B<Gnome::Gtk4::R-TreeModel> which hides parts of an underlying tree model

A B<Gnome::Gtk4::TreeModelFilter> is a tree model which wraps another tree model,
and can do the following things:

=item Filter specific rows, based on data from a “visible column”, a column
  storing booleans indicating whether the row should be filtered or not,
  or based on the return value of a “visible function”, which gets a
  model, iter and user_data and returns a boolean indicating whether the
  row should be filtered or not.

=item Modify the “appearance” of the model, using a modify function.
  This is extremely powerful and allows for just changing some
  values and also for creating a completely different model based
  on the given child model.

=item Set a different root node, also known as a “virtual root”. You can pass
  in a B<Gnome::Gtk4::N-TreePath> indicating the root node for the filter at construction
  time.

The basic API is similar to B<Gnome::Gtk4::TreeModelSort>. For an example on its usage,
see the section on B<Gnome::Gtk4::TreeModelSort>.

When using B<Gnome::Gtk4::TreeModelFilter>, it is important to realize that
B<Gnome::Gtk4::TreeModelFilter> maintains an internal cache of all nodes which are
visible in its clients. The cache is likely to be a subtree of the tree
exposed by the child model. B<Gnome::Gtk4::TreeModelFilter> will not cache the entire
child model when unnecessary to not compromise the caching mechanism
that is exposed by the reference counting scheme. If the child model
implements reference counting, unnecessary signals may not be emitted
because of reference counting rule 3, see the B<Gnome::Gtk4::R-TreeModel>
documentation. (Note that e.g. B<Gnome::Gtk4::TreeStore> does not implement
reference counting and will always emit all signals, even when
the receiving node is not visible).

Because of this, limitations for possible visible functions do apply.
In general, visible functions should only use data or properties from
the node for which the visibility state must be determined, its siblings
or its parents. Usually, having a dependency on the state of any child
node is not possible, unless references are taken on these explicitly.
When no such reference exists, no signals may be received for these child
nodes (see reference counting rule number 3 in the B<Gnome::Gtk4::R-TreeModel> section).

Determining the visibility state of a given node based on the state
of its child nodes is a frequently occurring use case. Therefore,
B<Gnome::Gtk4::TreeModelFilter> explicitly supports this. For example, when a node
does not have any children, you might not want the node to be visible.
As soon as the first row is added to the node’s child level (or the
last row removed), the node’s visibility should be updated.

This introduces a dependency from the node on its child nodes. In order
to accommodate this, B<Gnome::Gtk4::TreeModelFilter> must make sure the necessary
signals are received from the child model. This is achieved by building,
for all nodes which are exposed as visible nodes to B<Gnome::Gtk4::TreeModelFilter>'s
clients, the child level (if any) and take a reference on the first node
in this level. Furthermore, for every row-inserted, row-changed or
row-deleted signal (also these which were not handled because the node
was not cached), B<Gnome::Gtk4::TreeModelFilter> will check if the visibility state
of any parent node has changed.

Beware, however, that this explicit support is limited to these two
cases. For example, if you want a node to be visible only if two nodes
in a child’s child level (2 levels deeper) are visible, you are on your
own. In this case, either rely on B<Gnome::Gtk4::TreeStore> to emit all signals
because it does not implement reference counting, or for models that
do implement reference counting, obtain references on these child levels
yourself.

=begin comment

=head2 Uml Diagram
![](plantuml/….svg)

=end comment

=begin comment

=head2 Example
# Example use of module Gnome::Gtk4::TreeModelFilter

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

B<Note: The native version of this class is deprecated in gtk4-lib() since version 4.10>

=head2 new

=head3 :native-object

Create an object using a native object from elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object() :$native-object! )

=end pod

#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 clear-cache

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

This function should almost never be called. It clears the C<$filter>
of any cached iterators that haven’t been reffed with
gtk_tree_model_ref_node(). This might be useful if the child model
being filtered is static (and doesn’t change often) and there has been
a lot of unreffed access to nodes. As a side effect of this function,
all unreffed iters will be invalid.

=begin code
method clear-cache ( )
=end code

=begin comment

=head2 Example
# Example for clear-cache

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 convert-child-iter-to-iter

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Sets C<$filter-iter> to point to the row in C<$filter> that corresponds to the
row pointed at by C<$child-iter>.  If C<$filter-iter> was not set, C<False> is
returned.

=begin code
method convert-child-iter-to-iter ( N-Object $filter-iter, N-Object $child-iter --> Bool )
=end code

=item $filter-iter; An uninitialized B<Gnome::Gtk4::N-TreeIter>
=item $child-iter; A valid B<Gnome::Gtk4::N-TreeIter> pointing to a row on the child model.

Return value; C<True>, if C<$filter-iter> was set, i.e. if C<$child-iter> is a
valid iterator pointing to a visible row in child model.. 

=begin comment

=head2 Example
# Example for convert-child-iter-to-iter

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 convert-child-path-to-path

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Converts C<$child-path> to a path relative to C<$filter>. That is, C<$child-path>
points to a path in the child model. The rerturned path will point to the
same row in the filtered model. If C<$child-path> isn’t a valid path on the
child model or points to a row which is not visible in C<$filter>, then undefined
is returned.

=begin code
method convert-child-path-to-path ( N-Object $child-path --> N-Object )
=end code

=item $child-path; A B<Gnome::Gtk4::N-TreePath> to convert.

Return value; A newly allocated B<Gnome::Gtk4::N-TreePath>. 

=begin comment

=head2 Example
# Example for convert-child-path-to-path

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 convert-iter-to-child-iter

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Sets C<$child-iter> to point to the row pointed to by C<$filter-iter>.

=begin code
method convert-iter-to-child-iter ( N-Object $child-iter, N-Object $filter-iter )
=end code

=item $child-iter; An uninitialized B<Gnome::Gtk4::N-TreeIter>
=item $filter-iter; A valid B<Gnome::Gtk4::N-TreeIter> pointing to a row on C<$filter>.

=begin comment

=head2 Example
# Example for convert-iter-to-child-iter

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 convert-path-to-child-path

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Converts C<$filter-path> to a path on the child model of C<$filter>. That is, C<$filter-path> points to a location in C<$filter>. The returned path will
point to the same location in the model not being filtered. If C<$filter-path>
does not point to a location in the child model, undefined is returned.

=begin code
method convert-path-to-child-path ( N-Object $filter-path --> N-Object )
=end code

=item $filter-path; A B<Gnome::Gtk4::N-TreePath> to convert.

Return value; A newly allocated B<Gnome::Gtk4::N-TreePath>. 

=begin comment

=head2 Example
# Example for convert-path-to-child-path

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-model

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Returns a pointer to the child model of C<$filter>.

=begin code
method get-model (--> N-Object )
=end code

Return value; A pointer to a B<Gnome::Gtk4::R-TreeModel>. 

=begin comment

=head2 Example
# Example for get-model

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 refilter

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Emits I<row_changed> for each row in the child model, which causes
the filter to re-evaluate whether a row is visible or not.

=begin code
method refilter ( )
=end code

=begin comment

=head2 Example
# Example for refilter

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-modify-func
This function is not yet available

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

With the C<$n-columns> and C<$types> parameters, you give an array of column
types for this model (which will be exposed to the parent model/view).
The C<$func>, C<$data> and C<$destroy> parameters are for specifying the modify
function. The modify function will get called for each
data access, the goal of the modify function is to return the data which
should be displayed at the location specified using the parameters of the
modify function.

Note that C<.set-modify-func()>
can only be called once for a given filter model.

=begin code
method set-modify-func ( Int() $n-columns, …, &func, gpointer $data, … )
=end code

=item $n-columns; The number of columns in the filter model..
=item types; The B<Gnome::GObject::TreeModelFilter>s of the columns.. Note that each argument must be specified as a type followed by its value!
=item &func; A B<Gnome::Gtk4::T-treemodelfilter>. Tthe function must be specified with following signature; C<:( N-Object $model, N-Object $iter, N-Object $value, gint $column, gpointer $data )>.
=item $data; User data to pass to the modify function.
=item destroy; Destroy notifier of C<$data>. Note that each argument must be specified as a type followed by its value!

=begin comment

=head2 Example
# Example for set-modify-func

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-visible-column

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Sets C<$column> of the child_model to be the column where C<$filter> should
look for visibility information. C<$columns> should be a column of type
C<G_TYPE_BOOLEAN>, where C<True> means that a row is visible, and C<False>
if not.

Note that C<.set-visible-func()> or
C<.set-visible-column()> can only be called
once for a given filter model.

=begin code
method set-visible-column ( Int() $column )
=end code

=item $column; A B<int> which is the column containing the visible information.

=begin comment

=head2 Example
# Example for set-visible-column

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-visible-func
This function is not yet available

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Sets the visible function used when filtering the C<$filter> to be C<$func>.
The function should return C<True> if the given row should be visible and
C<False> otherwise.

If the condition calculated by the function changes over time (e.g.
because it depends on some global parameters), you must call
C<.refilter()> to keep the visibility information
of the model up-to-date.

Note that C<$func> is called whenever a row is inserted, when it may still
be empty. The visible function should therefore take special care of empty
rows, like in the example below.

=begin comment
<!-- language="C" -->
static gboolean
visible_func (GtkTreeModel *model,
              GtkTreeIter  *iter,
              gpointer      data)
{
  // Visible if row is non-empty and first column is “HI”
  char *str;
  gboolean visible = FALSE;

  gtk_tree_model_get (model, iter, 0, &str, -1);
  if (str && strcmp (str, "HI") == 0)
    visible = TRUE;
  g_free (str);

  return visible;
}

=end comment

Note that C<.set-visible-func()> or
C<.set-visible-column()> can only be called
once for a given filter model.

=begin code
method set-visible-func ( &func, gpointer $data, … )
=end code

=item &func; A B<Gnome::Gtk4::T-treemodelfilter>, the visible function. Tthe function must be specified with following signature; C<:( N-Object $model, N-Object $iter, gpointer $data --> gboolean )>.
=item $data; User data to pass to the visible function.
=item destroy; Destroy notifier of C<$data>. Note that each argument must be specified as a type followed by its value!

=begin comment

=head2 Example
# Example for set-visible-func

=end comment

=end pod

