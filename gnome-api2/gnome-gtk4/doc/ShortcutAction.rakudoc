=comment Package: Gtk4, C-Source: shortcutaction
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=TITLE Gnome::Gtk4::ShortcutAction
=head1 Description

B<Gnome::Gtk4::ShortcutAction> encodes an action that can be triggered by a
keyboard shortcut.

B<GtkShortcutActions> contain functions that allow easy presentation
to end users as well as being printed for debugging.

All B<GtkShortcutActions> are immutable, you can only specify their
properties during construction. If you want to change a action, you
have to replace it with a new one. If you need to pass arguments to
an action, these are specified by the higher-level B<Gnome::Gtk4::Shortcut> object.

To activate a B<Gnome::Gtk4::ShortcutAction> manually, C<.activate()>
can be called.

GTK provides various actions:

=item B<Gnome::Gtk4::MnemonicAction>: a shortcut action that calls
   gtk_widget_mnemonic_activate()
=item B<Gnome::Gtk4::CallbackAction>: a shortcut action that invokes
   a given callback
=item B<Gnome::Gtk4::SignalAction>: a shortcut action that emits a
   given signal
=item B<Gnome::Gtk4::ActivateAction>: a shortcut action that calls
   gtk_widget_activate()
=item B<Gnome::Gtk4::NamedAction>: a shortcut action that calls
   gtk_widget_activate_action()
=item B<Gnome::Gtk4::NothingAction>: a shortcut action that does nothing

=head2 Uml Diagram
=for image :src<asset_files/images/plantuml/ShortcutAction.png> :width<70%> :class<inline>

=begin comment

=head2 Example
# Example use of module Gnome::Gtk4::ShortcutAction

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

=head2 new

=head3 :native-object

Create an object using a native object from an object of the same type found elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object() :$native-object! )

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 parse-string

Tries to parse the given string into an action.

On success, the parsed action is returned. When parsing
failed, undefined is returned.

The accepted strings are:

=item B<nothing>, for B<Gnome::Gtk4::NothingAction>
=item B<activate>, for B<Gnome::Gtk4::ActivateAction>
=item B<mnemonic>-activate`, for B<Gnome::Gtk4::MnemonicAction>
=item B<action>(NAME)`, for a B<Gnome::Gtk4::NamedAction> for the action named B<NAME>
=item B<signal>(NAME)`, for a B<Gnome::Gtk4::SignalAction> for the signal B<NAME>

=begin code
method parse-string ( Str $string --> Gnome::Gtk4::ShortcutAction )
=end code

=item $string; the string to parse.

=begin comment

=head2 Example
# Example for parse-string

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 activate

Activates the action on the C<$widget> with the given C<$args>.

Note that some actions ignore the passed in C<$flags>, C<$widget> or C<$args>.

Activation of an action can fail for various reasons. If the action
is not supported by the C<$widget>, if the C<$args> don't match the action
or if the activation otherwise had no effect, C<False> will be returned.

=begin code
method activate ( UInt $flags, N-Object() $widget, N-Object $args --> Bool )
=end code

=item $flags; flags to activate with.
=item $widget; Target of the activation.
=item $args; arguments to pass

Return value; C<True> if this action was activated successfully. 

=begin comment

=head2 Example
# Example for activate

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 print

Prints the given action into a string for the developer.

This is meant for debugging and logging.

The form of the representation may change at any time and is
not guaranteed to stay identical.

=begin code
method print ( N-Object $string )
=end code

=item $string; a B<Gnome::Glib::N-String> to print into

=begin comment

=head2 Example
# Example for print

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 to-string

Prints the given action into a human-readable string.

This is a small wrapper around C<.print()>
to help when debugging.

=begin code
method to-string (--> Str )
=end code

Return value; a new string. 

=begin comment

=head2 Example
# Example for to-string

=end comment

=end pod

