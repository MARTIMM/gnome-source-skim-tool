=comment Package: Gtk4, C-Source: treemodel
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=TITLE Gnome::Gtk4::N-TreeRowReference
=head1 Description

A GtkTreeRowReference tracks model changes so that it always refers to the
same row (a B<Gnome::Gtk4::N-TreePath> refers to a position, not a fixed row). Create a
new GtkTreeRowReference with C<.new-treerowreference()>.

=begin comment

=head2 Uml Diagram
![](plantuml/….svg)

=end comment

=begin comment

=head2 Example
# Example use of module Gnome::Gtk4::TreeRowReference

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

B<Note: The native version of this class is deprecated in gtk4-lib() since version 4.10>

=head2 new

=head3 :native-object

Create an object using a native object from an object of the same type found elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object() :$native-object! )

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-treerowreference

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Creates a row reference based on C<$path>.

This reference will keep pointing to the node pointed to
by C<$path>, so long as it exists. Any changes that occur on C<$model> are
propagated, and the path is updated appropriately. If C<$path> isn’t a valid path in C<$model>, then undefined is returned.

=begin code
method new-treerowreference ( N-Object() $model, N-Object $path --> Gnome::Gtk4::TreeRowReference \)
=end code

=item $model; a B<Gnome::Gtk4::R-TreeModel>.
=item $path; a valid B<Gnome::Gtk4::N-TreePath> to monitor

=begin comment

=head2 Example
# Example for new-treerowreference

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-proxy

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

You do not need to use this function.

Creates a row reference based on C<$path>.

This reference will keep pointing to the node pointed to
by C<$path>, so long as it exists. If C<$path> isn’t a valid
path in C<$model>, then undefined is returned. However, unlike
references created with C<.new-treerowreference()>, it
does not listen to the model for changes. The creator of
the row reference must do this explicitly using
C<.inserted()>, C<.deleted()>,
C<.reordered()>.

These functions must be called exactly once per proxy when the
corresponding signal on the model is emitted. This single call
updates all row references for that proxy. Since built-in GTK
objects like B<Gnome::Gtk4::TreeView> already use this mechanism internally,
using them as the proxy object will produce unpredictable results.
Further more, passing the same object as C<$model> and C<$proxy>
doesn’t work for reasons of internal implementation.

This type of row reference is primarily meant by structures that
need to carefully monitor exactly when a row reference updates
itself, and is not generally needed by most applications.

=begin code
method new-proxy ( N-Object() $proxy, N-Object() $model, N-Object $path --> Gnome::Gtk4::TreeRowReference \)
=end code

=item $proxy; a proxy B<Gnome::GObject::Object>.
=item $model; a B<Gnome::Gtk4::R-TreeModel>.
=item $path; a valid B<Gnome::Gtk4::N-TreePath> to monitor

=begin comment

=head2 Example
# Example for new-proxy

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 copy

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Copies a B<Gnome::Gtk4::N-TreeRowReference>.

=begin code
method copy (--> N-Object )
=end code

Return value; a copy of C<$reference>. 

=begin comment

=head2 Example
# Example for copy

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 free

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Free’s C<$reference>. C<$reference> may be undefined

=begin code
method free ( )
=end code

=begin comment

=head2 Example
# Example for free

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-model

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Returns the model that the row reference is monitoring.

=begin code
method get-model (--> N-Object )
=end code

Return value; the model. 

=begin comment

=head2 Example
# Example for get-model

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-path

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Returns a path that the row reference currently points to,
or undefined if the path pointed to is no longer valid.

=begin code
method get-path (--> N-Object )
=end code

Return value; a current path. 

=begin comment

=head2 Example
# Example for get-path

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 valid

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Returns C<True> if the C<$reference> is non-undefined and refers to
a current valid path.

=begin code
method valid (--> Bool )
=end code

Return value; C<True> if C<$reference> points to a valid path. 

=begin comment

=head2 Example
# Example for valid

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Functions]------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Functions
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 deleted

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Lets a set of row reference created by
C<.new-proxy()> know that the
model emitted the I<row-deleted> signal.

=begin code
method deleted ( N-Object() $proxy, N-Object $path )
=end code

=item $proxy; a B<Gnome::GObject::Object>.
=item $path; the path position that was deleted

=begin comment

=head2 Example
# Example for deleted

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 inserted

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Lets a set of row reference created by
C<.new-proxy()> know that the
model emitted the I<row-inserted> signal.

=begin code
method inserted ( N-Object() $proxy, N-Object $path )
=end code

=item $proxy; a B<Gnome::GObject::Object>.
=item $path; the row position that was inserted

=begin comment

=head2 Example
# Example for inserted

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 reordered

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Lets a set of row reference created by
C<.new-proxy()> know that the
model emitted the I<rows-reordered> signal.

=begin code
method reordered ( N-Object() $proxy, N-Object $path, N-Object $iter, Array[Int] $new-order )
=end code

=item $proxy; a B<Gnome::GObject::Object>.
=item $path; the parent path of the reordered signal
=item $iter; the iter pointing to the parent of the reordered
=item $new-order; the new order of rows.

=begin comment

=head2 Example
# Example for reordered

=end comment

=end pod

