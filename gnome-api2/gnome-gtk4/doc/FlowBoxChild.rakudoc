=comment Package: Gtk4, C-Source: flowbox
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Gnome::Gtk4::FlowBoxChild

![](images/flowboxchild.png)

=head1 Description

B<Gnome::Gtk4::FlowBoxChild> is the kind of widget that can be added to a B<Gnome::Gtk4::FlowBox>.

=begin comment

=head2 Uml Diagram
![](plantuml/….svg)

=end comment

=begin comment

=head2 Example
# Example use of module Gnome::Gtk4::FlowBoxChild

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

=head2 new

=head3 :native-object

Create an object using a native object from elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object :$native-object! )

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-flowboxchild

Creates a new B<Gnome::Gtk4::FlowBoxChild>.

This should only be used as a child of a B<Gnome::Gtk4::FlowBox>.

=begin code
method new-flowboxchild ( --> Gnome::Gtk4::FlowBoxChild \)
=end code

=begin comment

=head2 Example
# Example for new-flowboxchild

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 changed

Marks C<$child> as changed, causing any state that depends on this
to be updated.

This affects sorting and filtering.

Note that calls to this method must be in sync with the data
used for the sorting and filtering functions. For instance, if
the list is mirroring some external data set, and *two* children
changed in the external data set when you call
C<.changed()> on the first child, the sort function
must only read the new data for the first of the two changed
children, otherwise the resorting of the children will be wrong.

This generally means that if you don’t fully control the data
model, you have to duplicate the data that affects the sorting
and filtering functions into the widgets themselves.

Another alternative is to call C<.invalidate-sort() in class Gnome::Gtk4::FlowBox>
on any model change, but that is more expensive.

=begin code
method changed ( )
=end code

=begin comment

=head2 Example
# Example for changed

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-child

Gets the child widget of C<$self>.

=begin code
method get-child (--> N-Object )
=end code

Return value; the child widget of C<$self>. 

=begin comment

=head2 Example
# Example for get-child

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-index

Gets the current index of the C<$child> in its B<Gnome::Gtk4::FlowBox> container.

=begin code
method get-index (--> Int )
=end code

Return value; the index of the C<$child>, or -1 if the C<$child> is not
  in a flow box. 

=begin comment

=head2 Example
# Example for get-index

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 is-selected

Returns whether the C<$child> is currently selected in its
B<Gnome::Gtk4::FlowBox> container.

=begin code
method is-selected (--> Bool )
=end code

Return value; C<True> if C<$child> is selected. 

=begin comment

=head2 Example
# Example for is-selected

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-child

Sets the child widget of C<$self>.

=begin code
method set-child ( N-Object() $child )
=end code

=item $child; the child widget.

=begin comment

=head2 Example
# Example for set-child

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Signal Documentation]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Signals

=comment -----------------------------------------------------------------------
=head3 activate

Emitted when the user activates a child widget in a B<Gnome::Gtk4::FlowBox>.

This can happen either by clicking or double-clicking,
or via a keybinding.

This is a [keybinding signal](class.SignalAction.html),
but it can be used by applications for their own purposes.

The default bindings are <kbd>Space</kbd> and <kbd>Enter</kbd>.

=begin code
method handler (
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gtk4::FlowBoxChild :$_widget,
  *C<user>-options
)
=end code

=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gtk4::FlowBoxChild> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

=begin comment

=head2 Example
# Example for signal activate

=end comment

=end pod

