=comment Package: Gtk4, C-Source: listbox
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=TITLE Gnome::Gtk4::ListBoxRow
=head1 Description

B<Gnome::Gtk4::ListBoxRow> is the kind of widget that can be added to a B<Gnome::Gtk4::ListBox>.

=begin comment

=head2 Uml Diagram
![](plantuml/….svg)

=end comment

=begin comment

=head2 Example
# Example use of module Gnome::Gtk4::ListBoxRow

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

=head2 new

=head3 :native-object

Create an object using a native object from elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object :$native-object! )

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-listboxrow

Creates a new B<Gnome::Gtk4::ListBoxRow>.

=begin code
method new-listboxrow ( --> Gnome::Gtk4::ListBoxRow \)
=end code

=begin comment

=head2 Example
# Example for new-listboxrow

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 changed

Marks C<$row> as changed, causing any state that depends on this
to be updated.

This affects sorting, filtering and headers.

Note that calls to this method must be in sync with the data
used for the row functions. For instance, if the list is
mirroring some external data set, and *two* rows changed in the
external data set then when you call C<.changed()>
on the first row the sort function must only read the new data
for the first of the two changed rows, otherwise the resorting
of the rows will be wrong.

This generally means that if you don’t fully control the data
model you have to duplicate the data that affects the listbox
row functions into the row widgets themselves. Another alternative
is to call C<.invalidate-sort() in class Gnome::Gtk4::ListBox> on any model change,
but that is more expensive.

=begin code
method changed ( )
=end code

=begin comment

=head2 Example
# Example for changed

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-activatable

Gets whether the row is activatable.

=begin code
method get-activatable (--> Bool )
=end code

Return value; C<True> if the row is activatable. 

=begin comment

=head2 Example
# Example for get-activatable

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-child

Gets the child widget of C<$row>.

=begin code
method get-child (--> N-Object )
=end code

Return value; the child widget of C<$row>. 

=begin comment

=head2 Example
# Example for get-child

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-header

Returns the current header of the C<$row>.

This can be used
in a [callback C<$Gtk>.ListBoxUpdateHeaderFunc] to see if
there is a header set already, and if so to update
the state of it.

=begin code
method get-header (--> N-Object )
=end code

Return value; the current header. 

=begin comment

=head2 Example
# Example for get-header

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-index

Gets the current index of the C<$row> in its B<Gnome::Gtk4::ListBox> container.

=begin code
method get-index (--> Int )
=end code

Return value; the index of the C<$row>, or -1 if the C<$row> is not in a listbox. 

=begin comment

=head2 Example
# Example for get-index

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-selectable

Gets whether the row can be selected.

=begin code
method get-selectable (--> Bool )
=end code

Return value; C<True> if the row is selectable. 

=begin comment

=head2 Example
# Example for get-selectable

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 is-selected

Returns whether the child is currently selected in its
B<Gnome::Gtk4::ListBox> container.

=begin code
method is-selected (--> Bool )
=end code

Return value; C<True> if C<$row> is selected. 

=begin comment

=head2 Example
# Example for is-selected

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-activatable

Set whether the row is activatable.

=begin code
method set-activatable ( Bool() $activatable )
=end code

=item $activatable; C<True> to mark the row as activatable.

=begin comment

=head2 Example
# Example for set-activatable

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-child

Sets the child widget of C<$self>.

=begin code
method set-child ( N-Object() $child )
=end code

=item $child; the child widget.

=begin comment

=head2 Example
# Example for set-child

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-header

Sets the current header of the C<$row>.

This is only allowed to be called
from a [callback C<$Gtk>.ListBoxUpdateHeaderFunc].
It will replace any existing header in the row,
and be shown in front of the row in the listbox.

=begin code
method set-header ( N-Object() $header )
=end code

=item $header; the header.

=begin comment

=head2 Example
# Example for set-header

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-selectable

Set whether the row can be selected.

=begin code
method set-selectable ( Bool() $selectable )
=end code

=item $selectable; C<True> to mark the row as selectable.

=begin comment

=head2 Example
# Example for set-selectable

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Signal Documentation]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Signals

=comment -----------------------------------------------------------------------
=head3 activate

This is a keybinding signal, which will cause this row to be activated.

If you want to be notified when the user activates a row (by key or not),
use the I<row-activated defined in ListBox> signal on the row’s parent
B<Gnome::Gtk4::ListBox>.

=begin code
method handler (
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gtk4::ListBoxRow :$_widget,
  *C<user>-options
)
=end code

=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gtk4::ListBoxRow> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

=begin comment

=head2 Example
# Example for signal activate

=end comment

=end pod

