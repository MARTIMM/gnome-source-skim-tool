=comment Package: Gtk4, C-Source: button
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=TITLE Gnome::Gtk4::Button
=head1 Description

The B<Gnome::Gtk4::Button> widget is generally used to trigger a callback function that is
called when the button is pressed.

=for image :src<asset_files/images/button.png> :width<30%> :class<inline>

The B<Gnome::Gtk4::Button> widget can hold any valid child widget. That is, it can hold
almost any other standard B<Gnome::Gtk4::Widget>. The most commonly used child is the
B<Gnome::Gtk4::Label>.

=head2 CSS nodes

B<Gnome::Gtk4::Button> has a single CSS node with name button. The node will get the
style classes .image-button or .text-button, if the content is just an
image or label, respectively. It may also receive the .flat style class.
When activating a button via the keyboard, the button will temporarily
gain the .keyboard-activating style class.

Other style classes that are commonly used with B<Gnome::Gtk4::Button> include
.suggested-action and .destructive-action. In special cases, buttons
can be made round by adding the .circular style class.

Button-like widgets like B<Gnome::Gtk4::ToggleButton>, B<Gnome::Gtk4::MenuButton>,
B<Gnome::Gtk4::VolumeButton>, B<Gnome::Gtk4::LockButton>, B<Gnome::Gtk4::ColorButton>
or B<Gnome::Gtk4::FontButton> use style classes such as .toggle, .popup, .scale,
.lock, .color on the button node to differentiate themselves from a plain
B<Gnome::Gtk4::Button>.

=head2 Accessibility

B<Gnome::Gtk4::Button> uses the C<GTK_ACCESSIBLE_ROLE_BUTTON> role.

=begin comment

=head2 Uml Diagram
![](plantuml/….svg)

=end comment

=begin comment

=head2 Example
# Example use of module Gnome::Gtk4::Button

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

=head2 new

=head3 :native-object

Create an object using a native object from elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object() :$native-object! )

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-button

Creates a new B<Gnome::Gtk4::Button> widget.

To add a child widget to the button, use C<.set-child()>.

=begin code
method new-button ( --> Gnome::Gtk4::Button \)
=end code

=begin comment

=head2 Example
# Example for new-button

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-from-icon-name

Creates a new button containing an icon from the current icon theme.

If the icon name isn’t known, a “broken image” icon will be
displayed instead. If the current icon theme is changed, the icon
will be updated appropriately.

=begin code
method new-from-icon-name ( Str $icon-name --> Gnome::Gtk4::Button \)
=end code

=item $icon-name; an icon name.

=begin comment

=head2 Example
# Example for new-from-icon-name

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-with-label

Creates a B<Gnome::Gtk4::Button> widget with a B<Gnome::Gtk4::Label> child.

=begin code
method new-with-label ( Str $label --> Gnome::Gtk4::Button \)
=end code

=item $label; The text you want the B<Gnome::Gtk4::Label> to hold.

=begin comment

=head2 Example
# Example for new-with-label

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-with-mnemonic

Creates a new B<Gnome::Gtk4::Button> containing a label.

If characters in C<$label> are preceded by an underscore, they are underlined.
If you need a literal underscore character in a label, use “__” (two
underscores). The first underlined character represents a keyboard
accelerator called a mnemonic. Pressing <kbd>Alt</kbd> and that key
activates the button.

=begin code
method new-with-mnemonic ( Str $label --> Gnome::Gtk4::Button \)
=end code

=item $label; The text of the button, with an underscore in front of the
  mnemonic character.

=begin comment

=head2 Example
# Example for new-with-mnemonic

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-can-shrink

Retrieves whether the button can be smaller than the natural
size of its contents.

=begin code
method get-can-shrink (--> Bool )
=end code

Return value; true if the button can shrink, and false otherwise. 

=begin comment

=head2 Example
# Example for get-child

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-child

Gets the child widget of C<$button>.

=begin code
method get-child (--> N-Object )
=end code

Return value; the child widget of C<$button>. 

=begin comment

=head2 Example
# Example for get-has-frame

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-has-frame

Returns whether the button has a frame.

=begin code
method get-has-frame (--> Bool )
=end code

Return value; C<True> if the button has a frame. 

=begin comment

=head2 Example
# Example for get-icon-name

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-icon-name

Returns the icon name of the button.

If the icon name has not been set with C<.set-icon-name()>
the return value will be undefined. This will be the case if you create
an empty button with C<.newbutton()> to use as a container.

=begin code
method get-icon-name (--> Str )
=end code

Return value; The icon name set via C<.set-icon-name()>. 

=begin comment

=head2 Example
# Example for get-label

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-label

Fetches the text from the label of the button.

If the label text has not been set with C<.set-label()>
the return value will be undefined. This will be the case if you create
an empty button with C<.newbutton()> to use as a container.

=begin code
method get-label (--> Str )
=end code

Return value; The text of the label widget. This string is owned
by the widget and must not be modified or freed.. 

=begin comment

=head2 Example
# Example for get-use-underline

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-use-underline

gets whether underlines are interpreted as mnemonics.

See C<.set-use-underline()>.

=begin code
method get-use-underline (--> Bool )
=end code

Return value; C<True> if an embedded underline in the button label
  indicates the mnemonic accelerator keys.. 

=begin comment

=head2 Example
# Example for set-child

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-can-shrink

Sets whether the button size can be smaller than the natural size of
its contents.

For text buttons, setting C<$can-shrink> to true will ellipsize the label.

For icons and custom children, this function has no effect.

=begin code
method set-can-shrink ( Bool() $can-shrink )
=end code

=item $can-shrink; whether the button can shrink.

=begin comment

=head2 Example
# Example for set-has-frame

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-child

Sets the child widget of C<$button>.

Note that by using this API, you take full responsibility for setting
up the proper accessibility label and description information for C<$button>.
Most likely, you'll either set the accessibility label or description
for C<$button> explicitly, or you'll set a labelled-by or described-by
relations from C<$child> to C<$button>.

=begin code
method set-child ( N-Object() $child )
=end code

=item $child; the child widget.

=begin comment

=head2 Example
# Example for set-icon-name

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-has-frame

Sets the style of the button.

Buttons can have a flat appearance or have a frame drawn around them.

=begin code
method set-has-frame ( Bool() $has-frame )
=end code

=item $has-frame; whether the button should have a visible frame.

=begin comment

=head2 Example
# Example for set-label

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-icon-name

Adds a B<Gnome::Gtk4::Image> with the given icon name as a child.

If C<$button> already contains a child widget, that child widget will
be removed and replaced with the image.

=begin code
method set-icon-name ( Str $icon-name )
=end code

=item $icon-name; An icon name.

=begin comment

=head2 Example
# Example for set-use-underline

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-label

Sets the text of the label of the button to C<$label>.

This will also clear any previously set labels.

=begin code
method set-label ( Str $label )
=end code

=item $label; a string.

=begin comment

=head2 Example
# Example for signal activate

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-use-underline

Sets whether to use underlines as mnemonics.

If true, an underline in the text of the button label indicates
the next character should be used for the mnemonic accelerator key.

=begin code
method set-use-underline ( Bool() $use-underline )
=end code

=item $use-underline; C<True> if underlines in the text indicate mnemonics.

=begin comment

=head2 Example
# Example for signal clicked

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Signal Documentation]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Signals

=comment -----------------------------------------------------------------------
=head3 activate

Emitted to animate press then release.

This is an action signal. Applications should never connect
to this signal, but use the I<clicked> signal.

The default bindings for this signal are all forms of the
<kbd>␣</kbd> and <kbd>Enter</kbd> keys.

=begin code
method handler (
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gtk4::Button :$_widget,
  *C<user>-options
)
=end code

=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gtk4::Button> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

=comment -----------------------------------------------------------------------
=head3 clicked

Emitted when the button has been activated (pressed and released).

=begin code
method handler (
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gtk4::Button :$_widget,
  *C<user>-options
)
=end code

=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gtk4::Button> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

=end pod

