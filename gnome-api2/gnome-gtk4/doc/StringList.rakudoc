=comment Package: Gtk4, C-Source: stringlist
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Gnome::Gtk4::StringList

![](images/stringlist.png)

=head1 Description

B<Gnome::Gtk4::StringList> is a list model that wraps an array of strings.

The objects in the model have a "string" property.

B<Gnome::Gtk4::StringList> is well-suited for any place where you would
typically use a B<char*[]>, but need a list model.

=head2 GtkStringList as GtkBuildable

The B<Gnome::Gtk4::StringList> implementation of the B<Gnome::Gtk4::R-Buildable> interface
supports adding items directly using the <items> element and
specifying <item> elements for each item. Each <item> element
supports the regular translation attributes “translatable”,
“context” and “comments”.

Here is a UI definition fragment specifying a B<Gnome::Gtk4::StringList>

=begin comment
<object class="GtkStringList">
  <items>
    <item translatable="yes">Factory</item>
    <item translatable="yes">Home</item>
    <item translatable="yes">Subway</item>
  </items>
</object>

=end comment

=begin comment

=head2 Uml Diagram
![](plantuml/….svg)

=end comment

=begin comment

=head2 Example
# Example use of module Gnome::Gtk4::StringList

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

=head2 new

=head3 :native-object

Create an object using a native object from elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object :$native-object! )

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-stringlist

Creates a new B<Gnome::Gtk4::StringList> with the given C<$strings>.

=begin code
method new-stringlist ( Array[Str] $strings --> Gnome::Gtk4::StringList \)
=end code

=item $strings; The strings to put in the model.

=begin comment

=head2 Example
# Example for new-stringlist

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 append

Appends C<$string> to C<$self>.

The C<$string> will be copied. See
C<.take()> for a way to avoid that.

=begin code
method append ( Str $string )
=end code

=item $string; the string to insert.

=begin comment

=head2 Example
# Example for append

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-string

Gets the string that is at C<$position> in C<$self>.

If C<$self> does not contain C<$position> items, undefined is returned.

This function returns the const char *. To get the
object wrapping it, use g_list_model_get_item().

=begin code
method get-string ( UInt() $position --> Str )
=end code

=item $position; the position to get the string for.

Return value; the string at the given position. 

=begin comment

=head2 Example
# Example for get-string

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 remove

Removes the string at C<$position> from C<$self>.
 C<$position> must be smaller than the current
length of the list.

=begin code
method remove ( UInt() $position )
=end code

=item $position; the position of the string that is to be removed.

=begin comment

=head2 Example
# Example for remove

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 splice

Changes C<$self> by removing C<$n-removals> strings and adding C<$additions>
to it.

This function is more efficient than C<.append()>
and C<.remove()>, because it only emits the I<items-changed> signal once for the change.

This function copies the strings in C<$additions>.

The parameters C<$position> and C<$n-removals> must be correct (ie: C<$position> + C<$n-removals> must be less than or equal to the length
of the list at the time this function is called).

=begin code
method splice ( UInt() $position, UInt() $n-removals, Array[Str] $additions )
=end code

=item $position; the position at which to make the change.
=item $n-removals; the number of strings to remove.
=item $additions; The strings to add.

=begin comment

=head2 Example
# Example for splice

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 take

Adds C<$string> to self at the end, and takes
ownership of it.

This variant of C<.append()>
is convenient for formatting strings:

=begin comment
gtk_string_list_take (self, g_strdup_print ("%d dollars", lots));

=end comment

=begin code
method take ( Str $string )
=end code

=item $string; (transfer ownership: full) the string to insert.

=begin comment

=head2 Example
# Example for take

=end comment

=end pod

