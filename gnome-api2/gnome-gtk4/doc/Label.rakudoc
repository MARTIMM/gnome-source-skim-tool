# Package: Gtk4, C-Source: label
use v6.d;

=begin pod
=head1 ::Label
=end pod

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Description

The B<Gnome::Gtk4::Label> widget displays a small amount of text.

As the name implies, most labels are used to label another widget
such as a [class C<$Button>].

![An example GtkLabel](label.png)

=head1 CSS nodes

=begin comment

  label
  ├── [selection]
  ├── [link]
  ┊
  ╰── [link]
=end comment

B<Gnome::Gtk4::Label> has a single CSS node with the name label. A wide variety
of style classes may be applied to labels, such as .title, .subtitle,
.dim-label, etc. In the I<GtkShortcutsWindow>, labels are used with the
.keycap style class.

If the label has a selection, it gets a subnode with name selection.

If the label has links, there is one subnode per link. These subnodes
carry the link or visited state depending on whether they have been
visited. In this case, label node also gets a .link style class.

=head1 GtkLabel as GtkBuildable

The GtkLabel implementation of the GtkBuildable interface supports a
custom <attributes> element, which supports any number of <attribute>
elements. The <attribute> element has attributes named “name“, “value“,
“start“ and “end“ and allows you to specify [struct C<$Pango>.Attribute]
values for this label.

An example of a UI definition fragment specifying Pango attributes:
=begin comment 
Following example code is in xml

  <object class="GtkLabel">
    <attributes>
      <attribute name="weight" value="PANGO_WEIGHT_BOLD"/>
      <attribute name="background" value="red" start="5" end="10"/>
    </attributes>
  </object>
=end comment

The start and end attributes specify the range of characters to which the
Pango attribute applies. If start and end are not specified, the attribute is
applied to the whole text. Note that specifying ranges does not make much
sense with translatable attributes. Use markup embedded in the translatable
content instead.

=head1 Accessibility

B<Gnome::Gtk4::Label> uses the %GTK_ACCESSIBLE_ROLE_LABEL role.

=head1 Mnemonics

Labels may contain “mnemonics”. Mnemonics are underlined characters in the
label, used for keyboard navigation. Mnemonics are created by providing a
string with an underscore before the mnemonic character, such as I<"_File">,
to the functions [ctor C<$Gtk>.Label.new_with_mnemonic] or
C<.set-text-with-mnemonic()>.

Mnemonics automatically activate any activatable widget the label is
inside, such as a [class C<$Gtk>.Button]; if the label is not inside the
mnemonic’s target widget, you have to tell the label about the target
using [class C<$Gtk>.Label.set_mnemonic_widget]. Here’s a simple example where
the label is inside a button:

=begin comment 
Following example code is in c

  // Pressing Alt+H will activate this button
  GtkWidget *button = gtk_button_new ();
  GtkWidget *label = gtk_label_new_with_mnemonic ("_Hello");
  gtk_button_set_child (GTK_BUTTON (button), label);
=end comment

There’s a convenience function to create buttons with a mnemonic label
already inside:

=begin comment 
Following example code is in c

  // Pressing Alt+H will activate this button
  GtkWidget *button = gtk_button_new_with_mnemonic ("_Hello");
=end comment

To create a mnemonic for a widget alongside the label, such as a
[class C<$Gtk>.Entry], you have to point the label at the entry with
C<.set-mnemonic-widget()>:

=begin comment 
Following example code is in c

  // Pressing Alt+H will focus the entry
  GtkWidget *entry = gtk_entry_new ();
  GtkWidget *label = gtk_label_new_with_mnemonic ("_Hello");
  gtk_label_set_mnemonic_widget (GTK_LABEL (label), entry);
=end comment

=head1 Markup (styled text)

To make it easy to format text in a label (changing colors,
fonts, etc.), label text can be provided in a simple
markup format:

Here’s how to create a label with a small font:
=begin comment 
Following example code is in c

  GtkWidget *label = gtk_label_new (NULL);
  gtk_label_set_markup (GTK_LABEL (label), "<small>Small text</small>");
=end comment

(See the Pango manual for complete documentation] of available
tags, [func C<$Pango>.parse_markup])

The markup passed to gtk_label_set_markup() must be valid; for example,
literal <, > and & characters must be escaped as &lt;, &gt;, and &amp;.
If you pass text obtained from the user, file, or a network to
C<.set-markup()>, you’ll want to escape it with
g_markup_escape_text() or g_markup_printf_escaped().

Markup strings are just a convenient way to set the [struct C<$Pango>.AttrList]
on a label; C<.set-attributes()> may be a simpler way to set
attributes in some cases. Be careful though; [struct C<$Pango>.AttrList] tends
to cause internationalization problems, unless you’re applying attributes
to the entire string (i.e. unless you set the range of each attribute
to [0, %G_MAXINT)). The reason is that specifying the start_index and
end_index for a [struct C<$Pango>.Attribute] requires knowledge of the exact
string being displayed, so translations will cause problems.

=head1 Selectable labels

Labels can be made selectable with C<.set-selectable()>.
Selectable labels allow the user to copy the label contents to
the clipboard. Only labels that contain useful-to-copy information
— such as error messages — should be made selectable.

=head1 Text layout

A label can contain any number of paragraphs, but will have
performance problems if it contains more than a small number.
Paragraphs are separated by newlines or other paragraph separators
understood by Pango.

Labels can automatically wrap text if you call C<.set-wrap()>.

C<.get-current-uri()> sets how the lines in a label align
with one another. If you want to set how the label as a whole aligns
in its available space, see the I<halign defined in Widget> and
I<valign defined in Widget> properties.

The I<width-chars> and I<max-width-chars>
properties can be used to control the size allocation of ellipsized or
wrapped labels. For ellipsizing labels, if either is specified (and less
than the actual text size), it is used as the minimum width, and the actual
text size is used as the natural width of the label. For wrapping labels,
width-chars is used as the minimum width, if specified, and max-width-chars
is used as the natural width. Even if max-width-chars specified, wrapping
labels will be rewrapped to use all of the available width.

=head1 Links

GTK supports markup for clickable hyperlinks in addition to regular Pango
markup. The markup for links is borrowed from HTML, using the U<a> with
“href“, “title“ and “class“ attributes. GTK renders links similar to the
way they appear in web browsers, with colored, underlined text. The “title“
attribute is displayed as a tooltip on the link. The “class“ attribute is
used as style class on the CSS node for the link.

An example looks like this:

=begin comment 
Following example code is in c

  const char *text =
  "Go to the"
  "<a href=\"http://www.gtk.org title=\"&lt;i&gt;Our&lt;/i&gt; website\">"
  "GTK website</a> for more...";
  GtkWidget *label = gtk_label_new (NULL);
  gtk_label_set_markup (GTK_LABEL (label), text);
=end comment

It is possible to implement custom handling for links and their tooltips
with the I<activate-link> signal and the
C<.get-current-uri()> function.
=begin comment
=head2 Uml Diagram
![](plantuml/….svg)
=end comment

=begin comment
=head2 Example
  … text …
  … example code …
=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

=head2 new

=head3 :native-object

Create an object using a native object from elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object :$native-object! )


=head3 :build-id

Create an object using a native object from a builder. See also B<Gnome::GObject::Object>.

  multi method new ( Str :$build-id! )

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-label

Creates a new label with the given text inside it.

You can pass undefined to get an empty label widget.

=begin code
method new-label ( Str $str --> Gnome::Gtk4::Label )
=end code

=item $str; The text of the label.

=end pod


#-------------------------------------------------------------------------------
=begin pod
=head2 new-with-mnemonic

Creates a new B<Gnome::Gtk4::Label>, containing the text in C<$str>.

If characters in C<$str> are preceded by an underscore, they are underlined. If you need a literal underscore character in a label, use
'__' (two underscores). The first underlined character represents a keyboard accelerator called a mnemonic. The mnemonic key can be used to activate another widget, chosen automatically, or explicitly using C<.set-mnemonic-widget()>.

If C<.set-mnemonic-widget() defined in Label> is not called, then the first activatable ancestor of the B<Gnome::Gtk4::Label> will be chosen as the mnemonic widget. For instance, if the label is inside a button or menu item,
the button or menu item will automatically become the mnemonic widget and be activated by the mnemonic.

=begin code
method new-with-mnemonic ( Str $str --> Gnome::Gtk4::Label )
=end code

=item $str; The text of the label, with an underscore in front of the
 mnemonic character.

=end pod


#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
#`{{
=begin pod

=head2 get-attributes

Gets the labels attribute list.

This is the [struct C<$Pango>.AttrList] that was set on the label using C<.set-attributes()>, if any. This function does not reflect attributes that come from the labels markup (see C<.set-markup()>). If you want to get the effective attributes for the label, use I<pango_layout_get_attribute (gtk_label_get_layout (self))>.

=begin code
method get-attributes (--> CArray[N-AttrList]  )
=end code


Return value; the attribute list. 


=end pod
}}

#-------------------------------------------------------------------------------
=begin pod

=head2 get-current-uri

Returns the URI for the currently active link in the label.

The active link is the one under the mouse pointer or, in a selectable label, the link in which the text cursor is currently positioned.

This function is intended for use in a I<activate-link>
handler or for use in a I<query-tooltip defined in Widget> handler.

=begin code
method get-current-uri (--> Str )
=end code


Return value; the currently active URI. 


=end pod


#-------------------------------------------------------------------------------
=begin pod

=head2 get-ellipsize

Returns the ellipsizing position of the label.

See C<.set-ellipsize()>.

=begin code
method get-ellipsize (--> PangoEllipsizeMode )
=end code


Return value; I<PangoEllipsizeMode>.  An enumeration.


=end pod


#-------------------------------------------------------------------------------
=begin pod

=head2 get-extra-menu

Gets the extra menu model of C<$label>.

See C<.set-extra-menu()>.

=begin code
method get-extra-menu (--> N-Object )
=end code


Return value; the menu model. 


=end pod


#-------------------------------------------------------------------------------
=begin pod

=head2 get-justify

Returns the justification of the label.

See C<.set-justify()>.

=begin code
method get-justify (--> GtkJustification )
=end code


Return value; I<GtkJustification>.  An enumeration.


=end pod


#-------------------------------------------------------------------------------
=begin pod

=head2 get-label

Fetches the text from a label.

The returned text includes any embedded underlines indicating mnemonics and Pango markup. (See C<.get-text()>).

=begin code
method get-label (--> Str )
=end code


Return value; the text of the label widget. This string is
 owned by the widget and must not be modified or freed.. 


=end pod


#-------------------------------------------------------------------------------
=begin pod

=head2 get-layout

Gets the I<PangoLayout> used to display the label.

The layout is useful to e.g. convert text positions to pixel positions, in combination with C<.get-layout-offsets()>.
The returned layout is owned by the C<$label> so need not be freed by the caller. The C<$label> is free to recreate its layout at any time, so it should be considered read-only.

=begin code
method get-layout (--> N-Object )
=end code


Return value; the [class C<$Pango>.Layout] for this label. 


=end pod


#-------------------------------------------------------------------------------
=begin pod

=head2 get-layout-offsets

Obtains the coordinates where the label will draw its I<PangoLayout>.

The coordinates are useful to convert mouse events into coordinates inside the [class C<$Pango>.Layout], e.g. to take some action if some part of the label is clicked. Remember when using the [class C<$Pango>.Layout]
functions you need to convert to and from pixels using PANGO_PIXELS()
or [const C<$Pango>.SCALE].

=begin code
method get-layout-offsets ( Array[Int] $x, Array[Int] $y )
=end code

=item $x; (transfer ownership: full) location to store X offset of layout.
=item $y; (transfer ownership: full) location to store Y offset of layout.

=end pod


#-------------------------------------------------------------------------------
=begin pod

=head2 get-lines

Gets the number of lines to which an ellipsized, wrapping label should be limited.

See C<.set-lines()>.

=begin code
method get-lines (--> Int )
=end code


Return value; The number of lines. 


=end pod


#-------------------------------------------------------------------------------
=begin pod

=head2 get-max-width-chars

Retrieves the desired maximum width of C<$label>, in characters.

See C<.set-width-chars()>.

=begin code
method get-max-width-chars (--> Int )
=end code


Return value; the maximum width of the label in characters.. 


=end pod


#-------------------------------------------------------------------------------
=begin pod

=head2 get-mnemonic-keyval

Return the mnemonic accelerator.

If the label has been set so that it has a mnemonic key this function returns the keyval used for the mnemonic accelerator. If there is no mnemonic set up it returns I<GDK_KEY_VoidSymbol>.

=begin code
method get-mnemonic-keyval (--> UInt )
=end code


Return value; GDK keyval usable for accelerators, or I<GDK_KEY_VoidSymbol>. 


=end pod


#-------------------------------------------------------------------------------
=begin pod

=head2 get-mnemonic-widget

Retrieves the target of the mnemonic (keyboard shortcut) of this label.

See C<.set-mnemonic-widget()>.

=begin code
method get-mnemonic-widget (--> N-Object )
=end code


Return value; the target of the label’s mnemonic,
 or undefined if none has been set and the default algorithm will be used.. 


=end pod


#-------------------------------------------------------------------------------
=begin pod

=head2 get-natural-wrap-mode

Returns line wrap mode used by the label.

See C<.set-natural-wrap-mode()>.

=begin code
method get-natural-wrap-mode (--> GtkNaturalWrapMode )
=end code


Return value; the natural line wrap mode.  An enumeration.


=end pod


#-------------------------------------------------------------------------------
=begin pod

=head2 get-selectable

Returns whether the label is selectable.

=begin code
method get-selectable (--> Bool )
=end code


Return value; %TRUE if the user can copy text from the label. 


=end pod


#-------------------------------------------------------------------------------
=begin pod

=head2 get-selection-bounds

Gets the selected range of characters in the label.

=begin code
method get-selection-bounds ( Array[Int] $start, Array[Int] $end --> Bool )
=end code

=item $start; (transfer ownership: full) return location for start of selection, as a character offset.
=item $end; (transfer ownership: full) return location for end of selection, as a character offset.

Return value; %TRUE if selection is non-empty. 


=end pod


#-------------------------------------------------------------------------------
=begin pod

=head2 get-single-line-mode

Returns whether the label is in single line mode.

=begin code
method get-single-line-mode (--> Bool )
=end code


Return value; %TRUE when the label is in single line mode.. 


=end pod


#-------------------------------------------------------------------------------
=begin pod

=head2 get-text

Fetches the text from a label.

The returned text is as it appears on screen. This does not include any embedded underlines indicating mnemonics or Pango markup. (See C<.get-label()>)

=begin code
method get-text (--> Str )
=end code


Return value; the text in the label widget. This is the internal
 string used by the label, and must not be modified.. 


=end pod


#-------------------------------------------------------------------------------
=begin pod

=head2 get-use-markup

Returns whether the label’s text is interpreted as Pango markup.

See C<.set-use-markup()>.

=begin code
method get-use-markup (--> Bool )
=end code


Return value; %TRUE if the label’s text will be parsed for markup.. 


=end pod


#-------------------------------------------------------------------------------
=begin pod

=head2 get-use-underline

Returns whether an embedded underlines in the label indicate mnemonics.

See C<.set-use-underline()>.

=begin code
method get-use-underline (--> Bool )
=end code


Return value; %TRUE whether an embedded underline in the label indicates
 the mnemonic accelerator keys.. 


=end pod


#-------------------------------------------------------------------------------
=begin pod

=head2 get-width-chars

Retrieves the desired width of C<$label>, in characters.

See C<.set-width-chars()>.

=begin code
method get-width-chars (--> Int )
=end code


Return value; the width of the label in characters.. 


=end pod


#-------------------------------------------------------------------------------
=begin pod

=head2 get-wrap

Returns whether lines in the label are automatically wrapped.

See C<.set-wrap()>.

=begin code
method get-wrap (--> Bool )
=end code


Return value; %TRUE if the lines of the label are automatically wrapped.. 


=end pod


#-------------------------------------------------------------------------------
=begin pod

=head2 get-wrap-mode

Returns line wrap mode used by the label.

See C<.set-wrap-mode()>.

=begin code
method get-wrap-mode (--> PangoWrapMode )
=end code


Return value; the line wrap mode.  An enumeration.


=end pod


#-------------------------------------------------------------------------------
=begin pod

=head2 get-xalign

Gets the I<xalign> of the label.

See the I<xalign> property.

=begin code
method get-xalign (--> Num )
=end code


Return value; the xalign property. 


=end pod


#-------------------------------------------------------------------------------
=begin pod

=head2 get-yalign

Gets the I<yalign> of the label.

See the I<yalign> property.

=begin code
method get-yalign (--> Num )
=end code


Return value; the yalign property. 


=end pod


#-------------------------------------------------------------------------------
=begin pod

=head2 select-region

Selects a range of characters in the label, if the label is selectable.

See C<.set-selectable()>. If the label is not selectable,
this function has no effect. If C<$start_offset> or C<$end_offset> are -1, then the end of the label will be substituted.

=begin code
method select-region ( Int() $start-offset, Int() $end-offset )
=end code

=item $start-offset; start offset (in characters not bytes).
=item $end-offset; end offset (in characters not bytes).

=end pod


#-------------------------------------------------------------------------------
#`{{
=begin pod

=head2 set-attributes

Apply attributes to the label text.

The attributes set with this function will be applied and merged with any other attributes previously effected by way of the I<use-underline> or I<use-markup>
properties. While it is not recommended to mix markup strings with manually set attributes, if you must; know that the attributes will be applied to the label after the markup string is parsed.

=begin code
method set-attributes ( CArray[N-AttrList]  $attrs )
=end code

=item $attrs; a [struct C<$Pango>.AttrList].

=end pod
}}

#-------------------------------------------------------------------------------
=begin pod

=head2 set-ellipsize

Sets the mode used to ellipsizei the text.

The text will be ellipsized if there is not enough space to render the entire string.

=begin code
method set-ellipsize ( PangoEllipsizeMode $mode )
=end code

=item $mode; a I<PangoEllipsizeMode>. An enumeration.

=end pod


#-------------------------------------------------------------------------------
=begin pod

=head2 set-extra-menu

Sets a menu model to add when constructing the context menu for C<$label>.

=begin code
method set-extra-menu ( N-Object() $model )
=end code

=item $model; a I<GMenuModel>.

=end pod


#-------------------------------------------------------------------------------
=begin pod

=head2 set-justify

Sets the alignment of the lines in the text of the label relative to each other.

%GTK_JUSTIFY_LEFT is the default value when the widget is first created with [ctor C<$Gtk>.Label.new]. If you instead want to set the alignment of the label as a whole, use C<.set-halign() defined in Widget> instead.
C<.set-justify()> has no effect on labels containing only a single line.

=begin code
method set-justify ( GtkJustification $jtype )
=end code

=item $jtype; a I<GtkJustification>. An enumeration.

=end pod


#-------------------------------------------------------------------------------
=begin pod

=head2 set-label

Sets the text of the label.

The label is interpreted as including embedded underlines and/or Pango markup depending on the values of the I<use-underline>
and I<use-markup> properties.

=begin code
method set-label ( Str $str )
=end code

=item $str; the new text to set for the label.

=end pod


#-------------------------------------------------------------------------------
=begin pod

=head2 set-lines

Sets the number of lines to which an ellipsized, wrapping label should be limited.

This has no effect if the label is not wrapping or ellipsized.
Set this to -1 if you don’t want to limit the number of lines.

=begin code
method set-lines ( Int() $lines )
=end code

=item $lines; the desired number of lines, or -1.

=end pod


#-------------------------------------------------------------------------------
=begin pod

=head2 set-markup

Sets the labels text and attributes from markup.

The string must be marked up with Pango markup
(see [func C<$Pango>.parse_markup]).

If the C<$str> is external data, you may need to escape it with g_markup_escape_text() or g_markup_printf_escaped():

=begin comment 
Following example code is in c

 GtkWidget *self = gtk_label_new (NULL);
 const char *str = "...";
 const char *format = "<span style=\"italic\">\%s</span>";
 char *markup;
 
 markup = g_markup_printf_escaped (format, str);
 gtk_label_set_markup (GTK_LABEL (self), markup);
 g_free (markup);
=end comment

This function will set the I<use-markup> property to %TRUE as a side effect.

If you set the label contents using the I<label>
property you should also ensure that you set the I<use-markup> property accordingly.

See also: C<.set-text()>

=begin code
method set-markup ( Str $str )
=end code

=item $str; a markup string.

=end pod


#-------------------------------------------------------------------------------
=begin pod

=head2 set-markup-with-mnemonic

Sets the labels text, attributes and mnemonic from markup.

Parses C<$str> which is marked up with Pango markup (see [func C<$Pango>.parse_markup]),
setting the label’s text and attribute list based on the parse results.
If characters in C<$str> are preceded by an underscore, they are underlined indicating that they represent a keyboard accelerator called a mnemonic.

The mnemonic key can be used to activate another widget, chosen automatically, or explicitly using C<.set-mnemonic-widget()>.

=begin code
method set-markup-with-mnemonic ( Str $str )
=end code

=item $str; a markup string.

=end pod


#-------------------------------------------------------------------------------
=begin pod

=head2 set-max-width-chars

Sets the desired maximum width in characters of C<$label> to C<$n_chars>.

=begin code
method set-max-width-chars ( Int() $n-chars )
=end code

=item $n-chars; the new desired maximum width, in characters..

=end pod


#-------------------------------------------------------------------------------
=begin pod

=head2 set-mnemonic-widget

Associate the label with its mnemonic target.

If the label has been set so that it has a mnemonic key (using i.e. C<.set-markup-with-mnemonic()>,
C<.set-text-with-mnemonic() defined in Label>,
[ctor C<$Gtk>.Label.new_with_mnemonic]
or the I<use_underline> property) the label can be associated with a widget that is the target of the mnemonic. When the label is inside a widget (like a [class C<$Gtk>.Button] or a
[class C<$Gtk>.Notebook] tab) it is automatically associated with the correct widget, but sometimes (i.e. when the target is a [class C<$Gtk>.Entry] next to the label) you need to set it explicitly using this function.

The target widget will be accelerated by emitting the
[signal C<$GtkWidget>::mnemonic-activate] signal on it. The default handler for this signal will activate the widget if there are no mnemonic collisions and toggle focus between the colliding widgets otherwise.

=begin code
method set-mnemonic-widget ( N-Object() $widget )
=end code

=item $widget; the target `GtkWidget`, or undefined to unset.

=end pod


#-------------------------------------------------------------------------------
=begin pod

=head2 set-natural-wrap-mode

Select the line wrapping for the natural size request.

This only affects the natural size requested, for the actual wrapping used,
see the I<wrap-mode> property.

=begin code
method set-natural-wrap-mode ( GtkNaturalWrapMode $wrap-mode )
=end code

=item $wrap-mode; the line wrapping mode. An enumeration.

=end pod


#-------------------------------------------------------------------------------
=begin pod

=head2 set-selectable

Makes text in the label selectable.

Selectable labels allow the user to select text from the label,
for copy-and-paste.

=begin code
method set-selectable ( Bool() $setting )
=end code

=item $setting; %TRUE to allow selecting text in the label.

=end pod


#-------------------------------------------------------------------------------
=begin pod

=head2 set-single-line-mode

Sets whether the label is in single line mode.

=begin code
method set-single-line-mode ( Bool() $single-line-mode )
=end code

=item $single-line-mode; %TRUE if the label should be in single line mode.

=end pod


#-------------------------------------------------------------------------------
=begin pod

=head2 set-text

Sets the text within the B<Gnome::Gtk4::Label> widget.

It overwrites any text that was there before.

This function will clear any previously set mnemonic accelerators,
and set the I<use-underline property> to %FALSE as a side effect.

This function will set the I<use-markup> property to %FALSE as a side effect.

See also: C<.set-markup()>

=begin code
method set-text ( Str $str )
=end code

=item $str; The text you want to set.

=end pod


#-------------------------------------------------------------------------------
=begin pod

=head2 set-text-with-mnemonic

Sets the label’s text from the string C<$str>.

If characters in C<$str> are preceded by an underscore, they are underlined indicating that they represent a keyboard accelerator called a mnemonic.
The mnemonic key can be used to activate another widget, chosen automatically, or explicitly using C<.set-mnemonic-widget()>.

=begin code
method set-text-with-mnemonic ( Str $str )
=end code

=item $str; a string.

=end pod


#-------------------------------------------------------------------------------
=begin pod

=head2 set-use-markup

Sets whether the text of the label contains markup.

See C<.set-markup()>.

=begin code
method set-use-markup ( Bool() $setting )
=end code

=item $setting; %TRUE if the label’s text should be parsed for markup..

=end pod


#-------------------------------------------------------------------------------
=begin pod

=head2 set-use-underline

Sets whether underlines in the text indicate mnemonics.

=begin code
method set-use-underline ( Bool() $setting )
=end code

=item $setting; %TRUE if underlines in the text indicate mnemonics.

=end pod


#-------------------------------------------------------------------------------
=begin pod

=head2 set-width-chars

Sets the desired width in characters of C<$label> to C<$n_chars>.

=begin code
method set-width-chars ( Int() $n-chars )
=end code

=item $n-chars; the new desired width, in characters..

=end pod


#-------------------------------------------------------------------------------
=begin pod

=head2 set-wrap

Toggles line wrapping within the B<Gnome::Gtk4::Label> widget.

%TRUE makes it break lines if text exceeds the widget’s size.
%FALSE lets the text get cut off by the edge of the widget if it exceeds the widget size.

Note that setting line wrapping to %TRUE does not make the label wrap at its parent container’s width, because GTK widgets conceptually can’t make their requisition depend on the parent container’s size. For a label that wraps at a specific position,
set the label’s width using C<.set-size-request() defined in Widget>.

=begin code
method set-wrap ( Bool() $wrap )
=end code

=item $wrap; the setting.

=end pod


#-------------------------------------------------------------------------------
=begin pod

=head2 set-wrap-mode

Controls how line wrapping is done.

This only affects the label if line wrapping is on. (See C<.set-wrap()>) The default is %PANGO_WRAP_WORD which means wrap on word boundaries.

For sizing behavior, also consider the I<natural-wrap-mode>
property.

=begin code
method set-wrap-mode ( PangoWrapMode $wrap-mode )
=end code

=item $wrap-mode; the line wrapping mode. An enumeration.

=end pod


#-------------------------------------------------------------------------------
=begin pod

=head2 set-xalign

Sets the I<xalign> of the label.

See the I<xalign> property.

=begin code
method set-xalign ( Num() $xalign )
=end code

=item $xalign; the new xalign value, between 0 and 1.

=end pod


#-------------------------------------------------------------------------------
=begin pod

=head2 set-yalign

Sets the I<yalign> of the label.

See the I<yalign> property.

=begin code
method set-yalign ( Num() $yalign )
=end code

=item $yalign; the new yalign value, between 0 and 1.

=end pod


#-------------------------------------------------------------------------------
#--[Signal Documentation]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Signals

=comment -----------------------------------------------------------------------
=head3 activate-current-link

Gets emitted when the user activates a link in the label.

The ::activate-current-link is a [keybinding signal](class.SignalAction.html).

Applications may also emit the signal with g_signal_emit_by_name()
if they need to control activation of URIs programmatically.

The default bindings for this signal are all forms of the Enter key.

=begin code
method handler (
  Int :$_handle_id,
  Gnome::Gtk4::Label() :$_native-object,
  Gnome::Gtk4::Label :$_widget,
  *%user-options
)
=end code

=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item %user-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

=comment -----------------------------------------------------------------------
=head3 activate-link

Gets emitted to activate a URI.

Applications may connect to it to override the default behaviour,
which is to call gtk_show_uri().

=begin code
method handler (
  Str $uri,
  Int :$_handle_id,
  Gnome::Gtk4::Label() :$_native-object,
  Gnome::Gtk4::Label :$_widget,
  *%user-options
  --> gboolean
)
=end code

=item $uri; the URI that is activated.
=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item %user-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

Return value; %TRUE if the link has been activated

=comment -----------------------------------------------------------------------
=head3 copy-clipboard

Gets emitted to copy the slection to the clipboard.

The ::copy-clipboard signal is a [keybinding signal](class.SignalAction.html).

The default binding for this signal is Ctrl-c.

=begin code
method handler (
  Int :$_handle_id,
  Gnome::Gtk4::Label() :$_native-object,
  Gnome::Gtk4::Label :$_widget,
  *%user-options
)
=end code

=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item %user-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

=comment -----------------------------------------------------------------------
=head3 move-cursor

Gets emitted when the user initiates a cursor movement.

The ::move-cursor signal is a [keybinding signal](class.SignalAction.html).
If the cursor is not visible in C<$entry>, this signal causes the viewport to be moved instead.

Applications should not connect to it, but may emit it with g_signal_emit_by_name() if they need to control the cursor programmatically.

The default bindings for this signal come in two variants,
the variant with the Shift modifier extends the selection,
the variant without the Shift modifier does not.
There are too many key combinations to list them all here.
- Arrow keys move by individual characters/lines
- Ctrl-arrow key combinations move by words/paragraphs
- Home/End keys move to the ends of the buffer

=begin code
method handler (
   $step,
  gint $count,
  gboolean $extend-selection,
  Int :$_handle_id,
  Gnome::Gtk4::Label() :$_native-object,
  Gnome::Gtk4::Label :$_widget,
  *%user-options
)
=end code

=item $step; the granularity of the move, as a I<GtkMovementStep>.
=item $count; the number of C<$step> units to move.
=item $extend-selection; %TRUE if the move should extend the selection.
=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item %user-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

=end pod

