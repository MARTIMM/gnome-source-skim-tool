=comment Package: Gtk4, C-Source: label
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=TITLE Gnome::Gtk4::Label
=head1 Description

The B<Gnome::Gtk4::Label> widget displays a small amount of text.

As the name implies, most labels are used to label another widget
such as a B<Gnome::Gtk4::Button>.

=for image :src<asset_files/images/label.png> :width<30%> :class<inline>

=head3 CSS nodes

=begin code
# Pressing Alt+H will activate this button
my Gnome::Gtk4::Button $button .= new-button;
my Gnome::Gtk4::Label $label .= new-with-mnemonic("_Hello");
$button.set-child($label);
=end code

B<Gnome::Gtk4::Label> has a single CSS node with the name label. A wide variety
of style classes may be applied to labels, such as .title, .subtitle,
.dim-label, etc. In the B<Gnome::Gtk4::ShortcutsWindow>, labels are used with the
.keycap style class.

If the label has a selection, it gets a subnode with name selection.

If the label has links, there is one subnode per link. These subnodes
carry the link or visited state depending on whether they have been
visited. In this case, label node also gets a .link style class.

=head3 GtkLabel as GtkBuildable

The GtkLabel implementation of the GtkBuildable interface supports a
custom `<attributes>` element, which supports any number of `<attribute>`
elements. The `<attribute>` element has attributes named “name“, “value“,
“start“ and “end“ and allows you to specify  B<Gnome::Pango::N-Attribute> 
values for this label.

An example of a UI definition fragment specifying Pango attributes:

=begin code
# Pressing Alt+H will activate this button
my Gnome::Gtk4::Button $button .= new_with_mnemonic("_Hello");
=end code

The start and end attributes specify the range of characters to which the
Pango attribute applies. If start and end are not specified, the attribute is
applied to the whole text. Note that specifying ranges does not make much
sense with translatable attributes. Use markup embedded in the translatable
content instead.

=head3 Accessibility

B<Gnome::Gtk4::Label> uses the C<GTK_ACCESSIBLE_ROLE_LABEL> role.

=head3 Mnemonics

Labels may contain “mnemonics”. Mnemonics are underlined characters in the
label, used for keyboard navigation. Mnemonics are created by providing a
string with an underscore before the mnemonic character, such as `"_File"`,
to the functions C<.new-with-mnemonic()> or
C<.set-text-with-mnemonic()>.

Mnemonics automatically activate any activatable widget the label is
inside, such as a B<Gnome::Gtk4::Button>; if the label is not inside the
mnemonic’s target widget, you have to tell the label about the target
using C<.set-mnemonic-widget()>.

Here’s a simple example where the label is inside a button:

=begin code
# Pressing Alt+H will focus the entry
my Gnome::Gtk4::Entry $entry .= new-entry;
my Gnome::Gtk4::Label $label .= new-with-mnemonic("_Hello");
$label.set-mnemonic-widget($entry);
=end code

There’s a convenience function to create buttons with a mnemonic label
already inside:

=begin code
my Gnome::Gtk4::Label $label .= new-label(Str);
$label.set-markup("<small>Small text</small>");
=end code

To create a mnemonic for a widget alongside the label, such as a
B<Gnome::Gtk4::Entry>, you have to point the label at the entry with
C<.set-mnemonic-widget()>:

=begin code
my Str $text = [~] 'Go to the ',
  '<a href="http://www.gtk.org" title="<i>Our</i> website">',
  'GTK website', '</a>', ' for more...';
my Gnome::Gtk4::Label $label .= new-label(Str);
$label.set_markup($text);
=end code

=head3 Markup (styled text)

To make it easy to format text in a label (changing colors,
fonts, etc.), label text can be provided in a simple
markup format:

Here’s how to create a label with a small font:
=begin comment
my Gnome::Gtk4::Label $label .= new-label(Str);
my Str $txt = "this must become italic text";
my Str $format = '<span style="italic">%s</span>';
# !!! find proper package where routine is defined !!!
my Str $markup = g_markup_printf_escaped( $format, $txt);
$label.set-markup($markup);
$markup.free;
=end comment

(See the Pango manual for complete documentation] of available
tags, C<.parse-markup() in package Gnome::Pango>)

The markup passed to C<.set-markup()> must be valid; for example,
literal `<`, `>` and `&` characters must be escaped as `&lt;`, `&gt;`, and `&amp;`.
If you pass text obtained from the user, file, or a network to
C<.set-markup()>, you’ll want to escape it with
C<.markup-escape-text() in package Gnome::GLib> or C<.markup-printf-escaped() in package Gnome::GLib>.

Markup strings are just a convenient way to set the  B<Gnome::Pango::N-AttrList> 
on a label; C<.set-attributes()> may be a simpler way to set
attributes in some cases. Be careful though;  B<Gnome::Pango::N-AttrList>  tends
to cause internationalization problems, unless you’re applying attributes
to the entire string (i.e. unless you set the range of each attribute
to [0, C<G_MAXINT>)). The reason is that specifying the start_index and
end_index for a  B<Gnome::Pango::N-Attribute>  requires knowledge of the exact
string being displayed, so translations will cause problems.

=head3 Selectable labels

Labels can be made selectable with C<.set-selectable()>.
Selectable labels allow the user to copy the label contents to
the clipboard. Only labels that contain useful-to-copy information—such
as error messages—should be made selectable.

=head3 Text layout

A label can contain any number of paragraphs, but will have
performance problems if it contains more than a small number.
Paragraphs are separated by newlines or other paragraph separators
understood by Pango.

Labels can automatically wrap text if you call C<.set-wrap()>.

C<.set-justify()> sets how the lines in a label align
with one another. If you want to set how the label as a whole aligns
in its available space, see the I<halign defined in Gnome::Gtk4::Widget> and
I<valign defined in Gnome::Gtk4::Widget> properties.

The I<width-chars> and I<max-width-chars>
properties can be used to control the size allocation of ellipsized or
wrapped labels. For ellipsizing labels, if either is specified (and less
than the actual text size), it is used as the minimum width, and the actual
text size is used as the natural width of the label. For wrapping labels,
width-chars is used as the minimum width, if specified, and max-width-chars
is used as the natural width. Even if max-width-chars specified, wrapping
labels will be rewrapped to use all of the available width.

=head3 Links

GTK supports markup for clickable hyperlinks in addition to regular Pango
markup. The markup for links is borrowed from HTML, using the `<a>` with
“href“, “title“ and “class“ attributes. GTK renders links similar to the
way they appear in web browsers, with colored, underlined text. The “title“
attribute is displayed as a tooltip on the link. The “class“ attribute is
used as style class on the CSS node for the link.

An example of inline links looks like this:

It is possible to implement custom handling for links and their tooltips
with the I<activate-link> signal and the
C<.get-current-uri()> function.

=head2 Uml Diagram
=for image :src<asset_files/images/plantuml/Label.png> :width<70%> :class<inline>

=begin comment
=head2 Example
# Example use of module Gnome::Gtk4::Label
=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

=head2 new

=head3 :native-object

Create an object using a native object from an object of the same type found elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object() :$native-object! )

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-label

Creates a new label with the given text inside it.

You can pass undefined to get an empty label widget.

=begin code
method new-label ( Str $str --> Gnome::Gtk4::Label )
=end code

=item $str; The text of the label.

=begin comment

=head2 Example
# Example for new-label

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-with-mnemonic

Creates a new B<Gnome::Gtk4::Label>, containing the text in C<$str>.

If characters in C<$str> are preceded by an underscore, they are
underlined. If you need a literal underscore character in a label, use
'__' (two underscores). The first underlined character represents a
keyboard accelerator called a mnemonic. The mnemonic key can be used
to activate another widget, chosen automatically, or explicitly using
C<.set-mnemonic-widget()>.

If C<.set-mnemonic-widget()> is not called, then the first
activatable ancestor of the B<Gnome::Gtk4::Label> will be chosen as the mnemonic
widget. For instance, if the label is inside a button or menu item,
the button or menu item will automatically become the mnemonic widget
and be activated by the mnemonic.

=begin code
method new-with-mnemonic ( Str $str --> Gnome::Gtk4::Label )
=end code

=item $str; The text of the label, with an underscore in front of the
  mnemonic character.

=begin comment

=head2 Example
# Example for new-with-mnemonic

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-attributes

Gets the label's attribute list.

This is the  B<Gnome::Pango::N-AttrList>  that was set on the label using
C<.set-attributes()>, if any. This function does not
reflect attributes that come from the label's markup (see
C<.set-markup()>). If you want to get the effective
attributes for the label, use
B<pango_layout_get_attributes> (gtk_label_get_layout (self))`.

=begin code
method get-attributes (--> N-Object )
=end code

Return value; the attribute list. 

=begin comment

=head2 Example
# Example for get-attributes

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-current-uri

Returns the URI for the currently active link in the label.

The active link is the one under the mouse pointer or, in a
selectable label, the link in which the text cursor is currently
positioned.

This function is intended for use in a I<activate-link>
handler or for use in a I<query-tooltip defined in Widget> handler.

=begin code
method get-current-uri (--> Str )
=end code

Return value; the currently active URI. 

=begin comment

=head2 Example
# Example for get-current-uri

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-ellipsize

Returns the ellipsizing position of the label.

See C<.set-ellipsize()>.

=begin code
method get-ellipsize (--> PangoEllipsizeMode )
=end code

Return value; C<enumeration PangoEllipsizeMode defined in Gnome::Pango::T-layout>. 

=begin comment

=head2 Example
# Example for get-ellipsize

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-extra-menu

Gets the extra menu model of C<$label>.

See C<.set-extra-menu()>.

=begin code
method get-extra-menu (--> N-Object )
=end code

Return value; the menu model. 

=begin comment

=head2 Example
# Example for get-extra-menu

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-justify

Returns the justification of the label.

See C<.set-justify()>.

=begin code
method get-justify (--> GtkJustification )
=end code

Return value; C<enumeration GtkJustification defined in Gnome::Gtk4::T-enums>. 

=begin comment

=head2 Example
# Example for get-justify

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-label

Fetches the text from a label.

The returned text includes any embedded underlines indicating
mnemonics and Pango markup. (See C<.get-text()>).

=begin code
method get-label (--> Str )
=end code

Return value; the text of the label widget. This string is
  owned by the widget and must not be modified or freed.. 

=begin comment

=head2 Example
# Example for get-label

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-layout

Gets the B<Gnome::Pango::Layout> used to display the label.

The layout is useful to e.g. convert text positions to pixel
positions, in combination with C<.get-layout-offsets()>.
The returned layout is owned by the C<$label> so need not be
freed by the caller. The C<$label> is free to recreate its layout
at any time, so it should be considered read-only.

=begin code
method get-layout (--> N-Object )
=end code

Return value; the B<Gnome::Pango::Layout> for this label. 

=begin comment

=head2 Example
# Example for get-layout

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-layout-offsets

Obtains the coordinates where the label will draw its B<Gnome::Pango::Layout>.

The coordinates are useful to convert mouse events into coordinates
inside the B<Gnome::Pango::Layout>, e.g. to take some action if some part
of the label is clicked. Remember when using the B<Gnome::Pango::Layout>
functions you need to convert to and from pixels using PANGO_PIXELS()
or [const C<$Pango>.SCALE].

=begin code
method get-layout-offsets ( Array[Int] $x, Array[Int] $y )
=end code

=item $x; (transfer ownership: full) location to store X offset of layout.
=item $y; (transfer ownership: full) location to store Y offset of layout.

=begin comment

=head2 Example
# Example for get-layout-offsets

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-lines

Gets the number of lines to which an ellipsized, wrapping
label should be limited.

See C<.set-lines()>.

=begin code
method get-lines (--> Int )
=end code

Return value; The number of lines. 

=begin comment

=head2 Example
# Example for get-lines

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-max-width-chars

Retrieves the desired maximum width of C<$label>, in characters.

See C<.set-width-chars()>.

=begin code
method get-max-width-chars (--> Int )
=end code

Return value; the maximum width of the label in characters.. 

=begin comment

=head2 Example
# Example for get-max-width-chars

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-mnemonic-keyval

Return the mnemonic accelerator.

If the label has been set so that it has a mnemonic key this function
returns the keyval used for the mnemonic accelerator. If there is no
mnemonic set up it returns B<Gnome::Gdk4::T-keysyms>.

=begin code
method get-mnemonic-keyval (--> UInt )
=end code

Return value; GDK keyval usable for accelerators, or B<Gnome::Gdk4::T-keysyms>. 

=begin comment

=head2 Example
# Example for get-mnemonic-keyval

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-mnemonic-widget

Retrieves the target of the mnemonic (keyboard shortcut) of this
label.

See C<.set-mnemonic-widget()>.

=begin code
method get-mnemonic-widget (--> N-Object )
=end code

Return value; the target of the label’s mnemonic,
  or undefined if none has been set and the default algorithm will be used.. 

=begin comment

=head2 Example
# Example for get-mnemonic-widget

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-natural-wrap-mode

Returns line wrap mode used by the label.

See C<.set-natural-wrap-mode()>.

=begin code
method get-natural-wrap-mode (--> GtkNaturalWrapMode )
=end code

Return value; the natural line wrap mode. 

=begin comment

=head2 Example
# Example for get-natural-wrap-mode

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-selectable

Returns whether the label is selectable.

=begin code
method get-selectable (--> Bool )
=end code

Return value; C<True> if the user can copy text from the label. 

=begin comment

=head2 Example
# Example for get-selectable

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-selection-bounds

Gets the selected range of characters in the label.

=begin code
method get-selection-bounds ( Array[Int] $start, Array[Int] $end --> Bool )
=end code

=item $start; (transfer ownership: full) return location for start of selection, as a character offset.
=item $end; (transfer ownership: full) return location for end of selection, as a character offset.

Return value; C<True> if selection is non-empty. 

=begin comment

=head2 Example
# Example for get-selection-bounds

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-single-line-mode

Returns whether the label is in single line mode.

=begin code
method get-single-line-mode (--> Bool )
=end code

Return value; C<True> when the label is in single line mode.. 

=begin comment

=head2 Example
# Example for get-single-line-mode

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-tabs

Gets the tabs for C<$self>.

The returned array will be undefined if “standard” (8-space) tabs are used.
Free the return value with C<.free()> in class C<Gnome::Pango::N-TabArray>.

=begin code
method get-tabs (--> N-Object )
=end code

Return value; copy of default tab array,
  or undefined if standard tabs are used; must be freed with
  C<.free()> in class C<Gnome::Pango::N-TabArray>.. 

=begin comment

=head2 Example
# Example for get-text

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-text

Fetches the text from a label.

The returned text is as it appears on screen. This does not include
any embedded underlines indicating mnemonics or Pango markup. (See
C<.get-label()>)

=begin code
method get-text (--> Str )
=end code

Return value; the text in the label widget. This is the internal
  string used by the label, and must not be modified.. 

=begin comment

=head2 Example
# Example for get-use-markup

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-use-markup

Returns whether the label’s text is interpreted as Pango markup.

See C<.set-use-markup()>.

=begin code
method get-use-markup (--> Bool )
=end code

Return value; C<True> if the label’s text will be parsed for markup.. 

=begin comment

=head2 Example
# Example for get-use-underline

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-use-underline

Returns whether an embedded underlines in the label indicate mnemonics.

See C<.set-use-underline()>.

=begin code
method get-use-underline (--> Bool )
=end code

Return value; C<True> whether an embedded underline in the label indicates
  the mnemonic accelerator keys.. 

=begin comment

=head2 Example
# Example for get-width-chars

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-width-chars

Retrieves the desired width of C<$label>, in characters.

See C<.set-width-chars()>.

=begin code
method get-width-chars (--> Int )
=end code

Return value; the width of the label in characters.. 

=begin comment

=head2 Example
# Example for get-wrap

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-wrap

Returns whether lines in the label are automatically wrapped.

See C<.set-wrap()>.

=begin code
method get-wrap (--> Bool )
=end code

Return value; C<True> if the lines of the label are automatically wrapped.. 

=begin comment

=head2 Example
# Example for get-wrap-mode

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-wrap-mode

Returns line wrap mode used by the label.

See C<.set-wrap-mode()>.

=begin code
method get-wrap-mode (--> PangoWrapMode )
=end code

Return value; the line wrap mode. 

=begin comment

=head2 Example
# Example for get-xalign

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-xalign

Gets the B<xalign> of the label.

See the I<xalign> property.

=begin code
method get-xalign (--> Num )
=end code

Return value; the xalign property. 

=begin comment

=head2 Example
# Example for get-yalign

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-yalign

Gets the B<yalign> of the label.

See the I<yalign> property.

=begin code
method get-yalign (--> Num )
=end code

Return value; the yalign property. 

=begin comment

=head2 Example
# Example for select-region

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 select-region

Selects a range of characters in the label, if the label is selectable.

See C<.set-selectable()>. If the label is not selectable,
this function has no effect. If C<$start-offset> or C<$end-offset> are -1, then the end of the label will be substituted.

=begin code
method select-region ( Int() $start-offset, Int() $end-offset )
=end code

=item $start-offset; start offset (in characters not bytes).
=item $end-offset; end offset (in characters not bytes).

=begin comment

=head2 Example
# Example for set-attributes

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-attributes

Apply attributes to the label text.

The attributes set with this function will be applied and merged with
any other attributes previously effected by way of the
I<use-underline> or I<use-markup>
properties. While it is not recommended to mix markup strings with
manually set attributes, if you must; know that the attributes will
be applied to the label after the markup string is parsed.

=begin code
method set-attributes ( N-Object $attrs )
=end code

=item $attrs; a  B<Gnome::Pango::N-AttrList> 

=begin comment

=head2 Example
# Example for set-ellipsize

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-ellipsize

Sets the mode used to ellipsize the text.

The text will be ellipsized if there is not enough space
to render the entire string.

=begin code
method set-ellipsize ( PangoEllipsizeMode $mode )
=end code

=item $mode; a C<enumeration PangoEllipsizeMode defined in Gnome::Pango::T-layout>.

=begin comment

=head2 Example
# Example for set-extra-menu

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-extra-menu

Sets a menu model to add when constructing
the context menu for C<$label>.

=begin code
method set-extra-menu ( N-Object() $model )
=end code

=item $model; a B<Gnome::Gio::MenuModel>.

=begin comment

=head2 Example
# Example for set-justify

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-justify

Sets the alignment of the lines in the text of the label relative to
each other.

C<GTK_JUSTIFY_LEFT> is the default value when the widget is first created
with C<.newlabel()>. If you instead want to set the alignment of
the label as a whole, use C<.set-halign()> in class C<Gnome::Gtk4::Widget> instead.
C<.set-justify()> has no effect on labels containing
only a single line.

=begin code
method set-justify ( GtkJustification $jtype )
=end code

=item $jtype; a C<enumeration GtkJustification defined in Gnome::Gtk4::T-enums>.

=begin comment

=head2 Example
# Example for set-label

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-label

Sets the text of the label.

The label is interpreted as including embedded underlines and/or Pango
markup depending on the values of the I<use-underline>
and I<use-markup> properties.

=begin code
method set-label ( Str $str )
=end code

=item $str; the new text to set for the label.

=begin comment

=head2 Example
# Example for set-lines

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-lines

Sets the number of lines to which an ellipsized, wrapping label
should be limited.

This has no effect if the label is not wrapping or ellipsized.
Set this to -1 if you don’t want to limit the number of lines.

=begin code
method set-lines ( Int() $lines )
=end code

=item $lines; the desired number of lines, or -1.

=begin comment

=head2 Example
# Example for set-markup

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-markup

Sets the labels text and attributes from markup.

The string must be marked up with Pango markup
(see C<.parse-markup() in package Gnome::Pango>).

If the C<$str> is external data, you may need to escape it
with g_markup_escape_text() or g_markup_printf_escaped():

This function will set the I<use-markup> property
to C<True> as a side effect.

If you set the label contents using the I<label>
property you should also ensure that you set the
I<use-markup> property accordingly.

See also: C<.set-text()>

=begin code
method set-markup ( Str $str )
=end code

=item $str; a markup string.

=begin comment

=head2 Example
# Example for set-markup-with-mnemonic

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-markup-with-mnemonic

Sets the labels text, attributes and mnemonic from markup.

Parses C<$str> which is marked up with Pango markup (see C<.parse-markup() in package Gnome::Pango>),
setting the label’s text and attribute list based on the parse results.
If characters in C<$str> are preceded by an underscore, they are underlined
indicating that they represent a keyboard accelerator called a mnemonic.

The mnemonic key can be used to activate another widget, chosen
automatically, or explicitly using C<.set-mnemonic-widget()>.

=begin code
method set-markup-with-mnemonic ( Str $str )
=end code

=item $str; a markup string.

=begin comment

=head2 Example
# Example for set-max-width-chars

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-max-width-chars

Sets the desired maximum width in characters of C<$label> to C<$n-chars>.

=begin code
method set-max-width-chars ( Int() $n-chars )
=end code

=item $n-chars; the new desired maximum width, in characters..

=begin comment

=head2 Example
# Example for set-mnemonic-widget

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-mnemonic-widget

Associate the label with its mnemonic target.

If the label has been set so that it has a mnemonic key (using
i.e. C<.set-markup-with-mnemonic()>,
C<.set-text-with-mnemonic()>,
C<.new-with-mnemonic()>
or the I<use_underline> property) the label can be
associated with a widget that is the target of the mnemonic. When the
label is inside a widget (like a B<Gnome::Gtk4::Button> or a
B<Gnome::Gtk4::Notebook> tab) it is automatically associated with the correct
widget, but sometimes (i.e. when the target is a B<Gnome::Gtk4::Entry> next to
the label) you need to set it explicitly using this function.

The target widget will be accelerated by emitting the
I<mnemonic-activate defined in Widget> signal on it. The default handler for
this signal will activate the widget if there are no mnemonic collisions
and toggle focus between the colliding widgets otherwise.

=begin code
method set-mnemonic-widget ( N-Object() $widget )
=end code

=item $widget; the target B<Gnome::Gtk4::Widget>, or undefined to unset.

=begin comment

=head2 Example
# Example for set-natural-wrap-mode

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-natural-wrap-mode

Select the line wrapping for the natural size request.

This only affects the natural size requested, for the actual wrapping used,
see the I<wrap-mode> property.

=begin code
method set-natural-wrap-mode ( GtkNaturalWrapMode $wrap-mode )
=end code

=item $wrap-mode; the line wrapping mode.

=begin comment

=head2 Example
# Example for set-selectable

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-selectable

Makes text in the label selectable.

Selectable labels allow the user to select text from the label,
for copy-and-paste.

=begin code
method set-selectable ( Bool() $setting )
=end code

=item $setting; C<True> to allow selecting text in the label.

=begin comment

=head2 Example
# Example for set-single-line-mode

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-single-line-mode

Sets whether the label is in single line mode.

=begin code
method set-single-line-mode ( Bool() $single-line-mode )
=end code

=item $single-line-mode; C<True> if the label should be in single line mode.

=begin comment

=head2 Example
# Example for set-text

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-tabs

Sets the default tab stops for paragraphs in C<$self>.

=begin code
method set-tabs ( N-Object $tabs )
=end code

=item $tabs; tabs as a B<Gnome::Pango::N-TabArray>

=begin comment

=head2 Example
# Example for set-text-with-mnemonic

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-text

Sets the text within the B<Gnome::Gtk4::Label> widget.

It overwrites any text that was there before.

This function will clear any previously set mnemonic accelerators,
and set the I<use-underline> property to C<False> as
a side effect.

This function will set the I<use-markup> property
to C<False> as a side effect.

See also: C<.set-markup()>

=begin code
method set-text ( Str $str )
=end code

=item $str; The text you want to set.

=begin comment

=head2 Example
# Example for set-use-markup

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-text-with-mnemonic

Sets the label’s text from the string C<$str>.

If characters in C<$str> are preceded by an underscore, they are underlined
indicating that they represent a keyboard accelerator called a mnemonic.
The mnemonic key can be used to activate another widget, chosen
automatically, or explicitly using C<.set-mnemonic-widget()>.

=begin code
method set-text-with-mnemonic ( Str $str )
=end code

=item $str; a string.

=begin comment

=head2 Example
# Example for set-use-underline

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-use-markup

Sets whether the text of the label contains markup.

See C<.set-markup()>.

=begin code
method set-use-markup ( Bool() $setting )
=end code

=item $setting; C<True> if the label’s text should be parsed for markup..

=begin comment

=head2 Example
# Example for set-width-chars

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-use-underline

Sets whether underlines in the text indicate mnemonics.

=begin code
method set-use-underline ( Bool() $setting )
=end code

=item $setting; C<True> if underlines in the text indicate mnemonics.

=begin comment

=head2 Example
# Example for set-wrap

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-width-chars

Sets the desired width in characters of C<$label> to C<$n-chars>.

=begin code
method set-width-chars ( Int() $n-chars )
=end code

=item $n-chars; the new desired width, in characters..

=begin comment

=head2 Example
# Example for set-wrap-mode

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-wrap

Toggles line wrapping within the B<Gnome::Gtk4::Label> widget.

C<True> makes it break lines if text exceeds the widget’s size.
C<False> lets the text get cut off by the edge of the widget if
it exceeds the widget size.

Note that setting line wrapping to C<True> does not make the label
wrap at its parent container’s width, because GTK widgets
conceptually can’t make their requisition depend on the parent
container’s size. For a label that wraps at a specific position,
set the label’s width using C<.set-size-request()> in class C<Gnome::Gtk4::Widget>.

=begin code
method set-wrap ( Bool() $wrap )
=end code

=item $wrap; the setting.

=begin comment

=head2 Example
# Example for set-xalign

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-wrap-mode

Controls how line wrapping is done.

This only affects the label if line wrapping is on. (See
C<.set-wrap()>) The default is C<PANGO_WRAP_WORD>
which means wrap on word boundaries.

For sizing behavior, also consider the I<natural-wrap-mode>
property.

=begin code
method set-wrap-mode ( PangoWrapMode $wrap-mode )
=end code

=item $wrap-mode; the line wrapping mode.

=begin comment

=head2 Example
# Example for set-yalign

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-xalign

Sets the B<xalign> of the label.

See the I<xalign> property.

=begin code
method set-xalign ( Num() $xalign )
=end code

=item $xalign; the new xalign value, between 0 and 1.

=begin comment

=head2 Example
# Example for signal activate-current-link

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-yalign

Sets the B<yalign> of the label.

See the I<yalign> property.

=begin code
method set-yalign ( Num() $yalign )
=end code

=item $yalign; the new yalign value, between 0 and 1.

=begin comment

=head2 Example
# Example for signal activate-link

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Signal Documentation]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Signals

=comment -----------------------------------------------------------------------
=head3 activate-current-link

Gets emitted when the user activates a link in the label.

The I<activate-current-link> is a [keybinding signal](class.SignalAction.html).

Applications may also emit the signal with g_signal_emit_by_name()
if they need to control activation of URIs programmatically.

The default bindings for this signal are all forms of the <kbd>Enter</kbd> key.

=begin code
method handler (
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gtk4::Label :$_widget,
  *C<user>-options
)
=end code

=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gtk4::Label> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

=begin comment

=head2 Example
# Example for signal copy-clipboard

=end comment

=comment -----------------------------------------------------------------------
=head3 activate-link

Gets emitted to activate a URI.

Applications may connect to it to override the default behaviour,
which is to call C<.launch()> in class C<Gnome::Gtk4::FileLauncher>.

=begin code
method handler (
  Str $uri,
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gtk4::Label :$_widget,
  *C<user>-options
  --> gboolean
)
=end code

=item $uri; the URI that is activated.
=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gtk4::Label> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

Return value; C<True> if the link has been activated

=begin comment

=head2 Example
# Example for signal move-cursor

=end comment

=comment -----------------------------------------------------------------------
=head3 copy-clipboard

Gets emitted to copy the selection to the clipboard.

The I<copy-clipboard> signal is a [keybinding signal](class.SignalAction.html).

The default binding for this signal is <kbd>Ctrl</kbd>+<kbd>c</kbd>.

=begin code
method handler (
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gtk4::Label :$_widget,
  *C<user>-options
)
=end code

=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gtk4::Label> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

=begin code
label
├── [selection]
├── [link]
┊
╰── [link]
=end code

=comment -----------------------------------------------------------------------
=head3 move-cursor

Gets emitted when the user initiates a cursor movement.

The I<move-cursor> signal is a [keybinding signal](class.SignalAction.html).
If the cursor is not visible in C<$entry>, this signal causes the viewport to
be moved instead.

Applications should not connect to it, but may emit it with
g_signal_emit_by_name() if they need to control the cursor
programmatically.

The default bindings for this signal come in two variants,
the variant with the Shift modifier extends the selection,
the variant without the Shift modifier does not.
There are too many key combinations to list them all here.

=item <kbd>←</kbd>, <kbd>→</kbd>, <kbd>↑</kbd>, <kbd>↓</kbd>
  move by individual characters/lines
=item <kbd>Ctrl</kbd>+<kbd>←</kbd>, etc. move by words/paragraphs
=item <kbd>Home</kbd> and <kbd>End</kbd> move to the ends of the buffer

=begin code
method handler (
   $step,
  gint $count,
  gboolean $extend-selection,
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gtk4::Label :$_widget,
  *C<user>-options
)
=end code

=item $step; the granularity of the move, as a C<enumeration GtkMovementStep defined in Gnome::Gtk4::T-enums>.
=item $count; the number of C<$step> units to move.
=item $extend-selection; C<True> if the move should extend the selection.
=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gtk4::Label> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

=begin code
<object class="GtkLabel">
  <attributes>
    <attribute name="weight" value="PANGO_WEIGHT_BOLD"/>
    <attribute name="background" value="red" start="5" end="10"/>
  </attributes>
</object>
=end code

=end pod

