=comment Package: Gtk4, C-Source: textiter
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=TITLE Gnome::Gtk4::N-TextIter
=head1 Description

An iterator for the contents of a B<Gnome::Gtk4::TextBuffer>.

You may wish to begin by reading the
[text widget conceptual overview](section-text-widget.html),
which gives an overview of all the objects and data types
related to the text widget and how they work together.

=begin comment

=head2 Example
# Example use of module Gnome::Gtk4::TextIter

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

=head2 new

=head3 :native-object

Create an object using a native object from an object of the same type found elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object() :$native-object! )

=end pod

#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 assign

Assigns the value of C<$other> to C<$iter>.

This function is not useful in applications, because
iterators can be assigned with B<Gnome::Gtk4::N-TextIter> i = j;`.

The function is used by language bindings.

=begin code
method assign ( N-Object $other )
=end code

=item $other; another B<Gnome::Gtk4::N-TextIter>

=begin comment

=head2 Example
# Example for assign

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 backward-char

Moves backward by one character offset.

Returns C<True> if movement was possible; if C<$iter> was the first
in the buffer (character offset 0), this function returns C<False>
for convenience when writing loops.

=begin code
method backward-char (--> Bool )
=end code

Return value; whether movement was possible. 

=begin comment

=head2 Example
# Example for backward-char

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 backward-chars

Moves C<$count> characters backward, if possible.

If C<$count> would move past the start or end of the buffer, moves
to the start or end of the buffer.

The return value indicates whether the iterator moved
onto a dereferenceable position; if the iterator didn’t move, or
moved onto the end iterator, then C<False> is returned. If C<$count> is 0,
the function does nothing and returns C<False>.

=begin code
method backward-chars ( Int() $count --> Bool )
=end code

=item $count; number of characters to move.

Return value; whether C<$iter> moved and is dereferenceable. 

=begin comment

=head2 Example
# Example for backward-chars

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 backward-cursor-position

Like C<.forward-cursor-position()>], but moves backward.

=begin code
method backward-cursor-position (--> Bool )
=end code

Return value; C<True> if we moved. 

=begin comment

=head2 Example
# Example for backward-cursor-position

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 backward-cursor-positions

Moves up to C<$count> cursor positions.

See C<.forward-cursor-position()>] for details.

=begin code
method backward-cursor-positions ( Int() $count --> Bool )
=end code

=item $count; number of positions to move.

Return value; C<True> if we moved and the new position is dereferenceable. 

=begin comment

=head2 Example
# Example for backward-cursor-positions

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 backward-find-char

Same as C<.forward-find-char()>],
but goes backward from C<$iter>.

=begin code
method backward-find-char ( GtkTextCharPredicate &pred, gpointer $user-data, N-Object $limit --> Bool )
=end code

=item GtkTextCharPredicate &pred; function to be called on each character. The function must be specified with the following signature; C<:( gunichar $ch, gpointer $user-data )>.
=item $user-data; user data for C<$pred>.
=item $limit; search limit

Return value; whether a match was found. 

=begin comment

=head2 Example
# Example for backward-find-char

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 backward-line

Moves C<$iter> to the start of the previous line.

Returns C<True> if C<$iter> could be moved; i.e. if C<$iter> was at
character offset 0, this function returns C<False>. Therefore,
if C<$iter> was already on line 0, but not at the start of the line, C<$iter> is snapped to the start of the line and the function returns
C<True>. (Note that this implies that
in a loop calling this function, the line number may not change on
every iteration, if your first iteration is on line 0.)

=begin code
method backward-line (--> Bool )
=end code

Return value; whether C<$iter> moved. 

=begin comment

=head2 Example
# Example for backward-line

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 backward-lines

Moves C<$count> lines backward, if possible.

If C<$count> would move past the start or end of the buffer, moves to
the start or end of the buffer.

The return value indicates whether the iterator moved
onto a dereferenceable position; if the iterator didn’t move, or
moved onto the end iterator, then C<False> is returned. If C<$count> is 0,
the function does nothing and returns C<False>. If C<$count> is negative,
moves forward by 0 - C<$count> lines.

=begin code
method backward-lines ( Int() $count --> Bool )
=end code

=item $count; number of lines to move backward.

Return value; whether C<$iter> moved and is dereferenceable. 

=begin comment

=head2 Example
# Example for backward-lines

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 backward-search

Same as C<.forward-search()>], but moves backward.
 C<$match-end> will never be set to a B<Gnome::Gtk4::N-TextIter> located after C<$iter>,
even if there is a possible C<$match-start> before or at C<$iter>.

=begin code
method backward-search ( Str $str, UInt $flags, N-Object $match-start, N-Object $match-end, N-Object $limit --> Bool )
=end code

=item $str; search string.
=item $flags; bitmask of flags affecting the search.
=item $match-start; return location for start of match
=item $match-end; return location for end of match
=item $limit; location of last possible C<$match-start>, or undefined for start of buffer

Return value; whether a match was found. 

=begin comment

=head2 Example
# Example for backward-search

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 backward-sentence-start

Moves backward to the previous sentence start.

If C<$iter> is already at the start of a sentence, moves backward
to the next one.

Sentence boundaries are determined by Pango and should
be correct for nearly any language.

=begin code
method backward-sentence-start (--> Bool )
=end code

Return value; C<True> if C<$iter> moved and is not the end iterator. 

=begin comment

=head2 Example
# Example for backward-sentence-start

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 backward-sentence-starts

Calls C<.backward-sentence-start()>] up to C<$count> times.

If C<$count> is negative, moves forward instead of backward.

=begin code
method backward-sentence-starts ( Int() $count --> Bool )
=end code

=item $count; number of sentences to move.

Return value; C<True> if C<$iter> moved and is not the end iterator. 

=begin comment

=head2 Example
# Example for backward-sentence-starts

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 backward-to-tag-toggle

Moves backward to the next toggle (on or off) of the C<$tag>, or to the next toggle of any tag if C<$tag> is undefined.

If no matching tag toggles are found,
returns C<False>, otherwise C<True>. Does not return toggles
located at C<$iter>, only toggles before C<$iter>. Sets C<$iter>
to the location of the toggle, or the start of the buffer
if no toggle is found.

=begin code
method backward-to-tag-toggle ( N-Object() $tag --> Bool )
=end code

=item $tag; a B<Gnome::Gtk4::TextTag>.

Return value; whether we found a tag toggle before C<$iter>. 

=begin comment

=head2 Example
# Example for backward-to-tag-toggle

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 backward-visible-cursor-position

Moves C<$iter> backward to the previous visible cursor position.

See C<.backward-cursor-position()>] for details.

=begin code
method backward-visible-cursor-position (--> Bool )
=end code

Return value; C<True> if we moved and the new position is dereferenceable. 

=begin comment

=head2 Example
# Example for backward-visible-cursor-position

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 backward-visible-cursor-positions

Moves up to C<$count> visible cursor positions.

See C<.backward-cursor-position()>] for details.

=begin code
method backward-visible-cursor-positions ( Int() $count --> Bool )
=end code

=item $count; number of positions to move.

Return value; C<True> if we moved and the new position is dereferenceable. 

=begin comment

=head2 Example
# Example for backward-visible-cursor-positions

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 backward-visible-line

Moves C<$iter> to the start of the previous visible line.

Returns C<True> if C<$iter> could be moved; i.e. if C<$iter> was at character offset 0, this
function returns C<False>. Therefore if C<$iter> was already on line 0,
but not at the start of the line, C<$iter> is snapped to the start of
the line and the function returns C<True>. (Note that this implies that
in a loop calling this function, the line number may not change on
every iteration, if your first iteration is on line 0.)

=begin code
method backward-visible-line (--> Bool )
=end code

Return value; whether C<$iter> moved. 

=begin comment

=head2 Example
# Example for backward-visible-line

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 backward-visible-lines

Moves C<$count> visible lines backward, if possible.

If C<$count> would move past the start or end of the buffer, moves to
the start or end of the buffer.

The return value indicates whether the iterator moved
onto a dereferenceable position; if the iterator didn’t move, or
moved onto the end iterator, then C<False> is returned. If C<$count> is 0,
the function does nothing and returns C<False>. If C<$count> is negative,
moves forward by 0 - C<$count> lines.

=begin code
method backward-visible-lines ( Int() $count --> Bool )
=end code

=item $count; number of lines to move backward.

Return value; whether C<$iter> moved and is dereferenceable. 

=begin comment

=head2 Example
# Example for backward-visible-lines

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 backward-visible-word-start

Moves backward to the previous visible word start.

If C<$iter> is currently on a word start, moves backward to the
next one after that.

Word breaks are determined by Pango and should be correct
for nearly any language.

=begin code
method backward-visible-word-start (--> Bool )
=end code

Return value; C<True> if C<$iter> moved and is not the end iterator. 

=begin comment

=head2 Example
# Example for backward-visible-word-start

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 backward-visible-word-starts

Calls C<.backward-visible-word-start()>] up to C<$count> times.

=begin code
method backward-visible-word-starts ( Int() $count --> Bool )
=end code

=item $count; number of times to move.

Return value; C<True> if C<$iter> moved and is not the end iterator. 

=begin comment

=head2 Example
# Example for backward-visible-word-starts

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 backward-word-start

Moves backward to the previous word start.

If C<$iter> is currently on a word start, moves backward to the
next one after that.

Word breaks are determined by Pango and should be correct
for nearly any language

=begin code
method backward-word-start (--> Bool )
=end code

Return value; C<True> if C<$iter> moved and is not the end iterator. 

=begin comment

=head2 Example
# Example for backward-word-start

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 backward-word-starts

Calls C<.backward-word-start()>] up to C<$count> times.

=begin code
method backward-word-starts ( Int() $count --> Bool )
=end code

=item $count; number of times to move.

Return value; C<True> if C<$iter> moved and is not the end iterator. 

=begin comment

=head2 Example
# Example for backward-word-starts

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 can-insert

Considering the default editability of the buffer, and tags that
affect editability, determines whether text inserted at C<$iter> would
be editable.

If text inserted at C<$iter> would be editable then the
user should be allowed to insert text at C<$iter>.
C<.insert-interactive()> in class B<Gnome::Gtk4::TextBuffer>] uses this function
to decide whether insertions are allowed at a given position.

=begin code
method can-insert ( Bool() $default-editability --> Bool )
=end code

=item $default-editability; C<True> if text is editable by default.

Return value; whether text inserted at C<$iter> would be editable. 

=begin comment

=head2 Example
# Example for can-insert

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 compare

A qsort()-style function that returns negative if C<$lhs> is less than C<$rhs>, positive if C<$lhs> is greater than C<$rhs>, and 0 if they’re equal.

Ordering is in character offset order, i.e. the first character
in the buffer is less than the second character in the buffer.

=begin code
method compare ( N-Object $rhs --> Int )
=end code

=item $rhs; another B<Gnome::Gtk4::N-TextIter>

Return value; -1 if C<$lhs> is less than C<$rhs>, 1 if C<$lhs> is greater, 0 if they are equal. 

=begin comment

=head2 Example
# Example for compare

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 copy

Creates a dynamically-allocated copy of an iterator.

This function is not useful in applications, because
iterators can be copied with a simple assignment
(B<Gnome::Gtk4::N-TextIter> i = j;`).

The function is used by language bindings.

=begin code
method copy (--> N-Object )
=end code

Return value; a copy of the C<$iter>, free with C<.free()>]. 

=begin comment

=head2 Example
# Example for copy

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 editable

Returns whether the character at C<$iter> is within an editable region
of text.

Non-editable text is “locked” and can’t be changed by the
user via B<Gnome::Gtk4::TextView>. If no tags applied to this text affect
editability, C<$default-setting> will be returned.

You don’t want to use this function to decide whether text can be
inserted at C<$iter>, because for insertion you don’t want to know
whether the char at C<$iter> is inside an editable range, you want to
know whether a new character inserted at C<$iter> would be inside an
editable range. Use C<.can-insert()>] to handle this
case.

=begin code
method editable ( Bool() $default-setting --> Bool )
=end code

=item $default-setting; C<True> if text is editable by default.

Return value; whether C<$iter> is inside an editable range. 

=begin comment

=head2 Example
# Example for editable

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 ends-line

Returns C<True> if C<$iter> points to the start of the paragraph
delimiter characters for a line.

Delimiters will be either a newline, a carriage return, a carriage
return followed by a newline, or a Unicode paragraph separator
character.

Note that an iterator pointing to the \n of a \r\n pair will not be
counted as the end of a line, the line ends before the \r. The end
iterator is considered to be at the end of a line, even though there
are no paragraph delimiter chars there.

=begin code
method ends-line (--> Bool )
=end code

Return value; whether C<$iter> is at the end of a line. 

=begin comment

=head2 Example
# Example for ends-line

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 ends-sentence

Determines whether C<$iter> ends a sentence.

Sentence boundaries are determined by Pango and should
be correct for nearly any language.

=begin code
method ends-sentence (--> Bool )
=end code

Return value; C<True> if C<$iter> is at the end of a sentence.. 

=begin comment

=head2 Example
# Example for ends-sentence

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 ends-tag

Returns C<True> if C<$tag> is toggled off at exactly this point.

If C<$tag> is undefined, returns C<True> if any tag is toggled off at this point.

Note that if this function returns C<True>, it means that C<$iter> is at the end of the tagged range, but that the character
at C<$iter> is outside the tagged range. In other words,
unlike C<.starts-tag()>], if this function
returns C<True>, C<.has-tag()>] will return
C<False> for the same parameters.

=begin code
method ends-tag ( N-Object() $tag --> Bool )
=end code

=item $tag; a B<Gnome::Gtk4::TextTag>.

Return value; whether C<$iter> is the end of a range tagged with C<$tag>. 

=begin comment

=head2 Example
# Example for ends-tag

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 ends-word

Determines whether C<$iter> ends a natural-language word.

Word breaks are determined by Pango and should be correct
for nearly any language.

=begin code
method ends-word (--> Bool )
=end code

Return value; C<True> if C<$iter> is at the end of a word. 

=begin comment

=head2 Example
# Example for ends-word

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 equal

Tests whether two iterators are equal, using the fastest possible
mechanism.

This function is very fast; you can expect it to perform
better than e.g. getting the character offset for each
iterator and comparing the offsets yourself. Also, it’s a
bit faster than C<.compare()>].

=begin code
method equal ( N-Object $rhs --> Bool )
=end code

=item $rhs; another B<Gnome::Gtk4::N-TextIter>

Return value; C<True> if the iterators point to the same place in the buffer. 

=begin comment

=head2 Example
# Example for equal

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 forward-char

Moves C<$iter> forward by one character offset.

Note that images embedded in the buffer occupy 1 character slot, so
this function may actually move onto an image instead of a character,
if you have images in your buffer. If C<$iter> is the end iterator or
one character before it, C<$iter> will now point at the end iterator,
and this function returns C<False> for convenience when writing loops.

=begin code
method forward-char (--> Bool )
=end code

Return value; whether C<$iter> moved and is dereferenceable. 

=begin comment

=head2 Example
# Example for forward-char

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 forward-chars

Moves C<$count> characters if possible.

If C<$count> would move past the start or end of the buffer,
moves to the start or end of the buffer.

The return value indicates whether the new position of C<$iter> is different from its original position, and dereferenceable
(the last iterator in the buffer is not dereferenceable). If C<$count>
is 0, the function does nothing and returns C<False>.

=begin code
method forward-chars ( Int() $count --> Bool )
=end code

=item $count; number of characters to move, may be negative.

Return value; whether C<$iter> moved and is dereferenceable. 

=begin comment

=head2 Example
# Example for forward-chars

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 forward-cursor-position

Moves C<$iter> forward by a single cursor position.

Cursor positions are (unsurprisingly) positions where the
cursor can appear. Perhaps surprisingly, there may not be
a cursor position between all characters. The most common
example for European languages would be a carriage return/newline
sequence.

For some Unicode characters, the equivalent of say the letter “a”
with an accent mark will be represented as two characters, first
the letter then a "combining mark" that causes the accent to be
rendered; so the cursor can’t go between those two characters.

See also the  B<Gnome::Pango::N-LogAttr>  struct and the C<.break() in package Gnome::Pango>
function.

=begin code
method forward-cursor-position (--> Bool )
=end code

Return value; C<True> if we moved and the new position is dereferenceable. 

=begin comment

=head2 Example
# Example for forward-cursor-position

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 forward-cursor-positions

Moves up to C<$count> cursor positions.

See C<.forward-cursor-position()>] for details.

=begin code
method forward-cursor-positions ( Int() $count --> Bool )
=end code

=item $count; number of positions to move.

Return value; C<True> if we moved and the new position is dereferenceable. 

=begin comment

=head2 Example
# Example for forward-cursor-positions

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 forward-find-char

Advances C<$iter>, calling C<$pred> on each character.

If C<$pred> returns C<True>, returns C<True> and stops scanning.
If C<$pred> never returns C<True>, C<$iter> is set to C<$limit> if C<$limit> is non-undefined, otherwise to the end iterator.

=begin code
method forward-find-char ( GtkTextCharPredicate &pred, gpointer $user-data, N-Object $limit --> Bool )
=end code

=item GtkTextCharPredicate &pred; a function to be called on each character. The function must be specified with the following signature; C<:( gunichar $ch, gpointer $user-data )>.
=item $user-data; user data for C<$pred>.
=item $limit; search limit

Return value; whether a match was found. 

=begin comment

=head2 Example
# Example for forward-find-char

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 forward-line

Moves C<$iter> to the start of the next line.

If the iter is already on the last line of the buffer,
moves the iter to the end of the current line. If after
the operation, the iter is at the end of the buffer and not
dereferenceable, returns C<False>. Otherwise, returns C<True>.

=begin code
method forward-line (--> Bool )
=end code

Return value; whether C<$iter> can be dereferenced. 

=begin comment

=head2 Example
# Example for forward-line

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 forward-lines

Moves C<$count> lines forward, if possible.

If C<$count> would move past the start or end of the buffer, moves to
the start or end of the buffer.

The return value indicates whether the iterator moved
onto a dereferenceable position; if the iterator didn’t move, or
moved onto the end iterator, then C<False> is returned. If C<$count> is 0,
the function does nothing and returns C<False>. If C<$count> is negative,
moves backward by 0 - C<$count> lines.

=begin code
method forward-lines ( Int() $count --> Bool )
=end code

=item $count; number of lines to move forward.

Return value; whether C<$iter> moved and is dereferenceable. 

=begin comment

=head2 Example
# Example for forward-lines

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 forward-search

Searches forward for C<$str>.

Any match is returned by setting C<$match-start> to the first character
of the match and C<$match-end> to the first character after the match.
The search will not continue past C<$limit>. Note that a search is a
linear or O(n) operation, so you may wish to use C<$limit> to avoid
locking up your UI on large buffers.
 C<$match-start> will never be set to a B<Gnome::Gtk4::N-TextIter> located before C<$iter>,
even if there is a possible C<$match-end> after or at C<$iter>.

=begin code
method forward-search ( Str $str, UInt $flags, N-Object $match-start, N-Object $match-end, N-Object $limit --> Bool )
=end code

=item $str; a search string.
=item $flags; flags affecting how the search is done.
=item $match-start; return location for start of match
=item $match-end; return location for end of match
=item $limit; location of last possible C<$match-end>, or undefined for the end of the buffer

Return value; whether a match was found. 

=begin comment

=head2 Example
# Example for forward-search

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 forward-sentence-end

Moves forward to the next sentence end.

If C<$iter> is at the end of a sentence, moves to the next
end of sentence.

Sentence boundaries are determined by Pango and should
be correct for nearly any language.

=begin code
method forward-sentence-end (--> Bool )
=end code

Return value; C<True> if C<$iter> moved and is not the end iterator. 

=begin comment

=head2 Example
# Example for forward-sentence-end

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 forward-sentence-ends

Calls C<.forward-sentence-end()>] C<$count> times.

If C<$count> is negative, moves backward instead of forward.

=begin code
method forward-sentence-ends ( Int() $count --> Bool )
=end code

=item $count; number of sentences to move.

Return value; C<True> if C<$iter> moved and is not the end iterator. 

=begin comment

=head2 Example
# Example for forward-sentence-ends

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 forward-to-end

Moves C<$iter> forward to the “end iterator”, which points
one past the last valid character in the buffer.

C<.get-char()>] called on the end iterator
returns 0, which is convenient for writing loops.

=begin code
method forward-to-end ( )
=end code

=begin comment

=head2 Example
# Example for forward-to-end

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 forward-to-line-end

Moves the iterator to point to the paragraph delimiter characters.

The possible characters are either a newline, a carriage return,
a carriage return/newline in sequence, or the Unicode paragraph
separator character.

If the iterator is already at the paragraph delimiter
characters, moves to the paragraph delimiter characters for the
next line. If C<$iter> is on the last line in the buffer, which does
not end in paragraph delimiters, moves to the end iterator (end of
the last line), and returns C<False>.

=begin code
method forward-to-line-end (--> Bool )
=end code

Return value; C<True> if we moved and the new location is not the end iterator. 

=begin comment

=head2 Example
# Example for forward-to-line-end

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 forward-to-tag-toggle

Moves forward to the next toggle (on or off) of the C<$tag>, or to the next toggle of any tag if C<$tag> is undefined.

If no matching tag toggles are found,
returns C<False>, otherwise C<True>. Does not return toggles
located at C<$iter>, only toggles after C<$iter>. Sets C<$iter> to
the location of the toggle, or to the end of the buffer
if no toggle is found.

=begin code
method forward-to-tag-toggle ( N-Object() $tag --> Bool )
=end code

=item $tag; a B<Gnome::Gtk4::TextTag>.

Return value; whether we found a tag toggle after C<$iter>. 

=begin comment

=head2 Example
# Example for forward-to-tag-toggle

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 forward-visible-cursor-position

Moves C<$iter> forward to the next visible cursor position.

See C<.forward-cursor-position()>] for details.

=begin code
method forward-visible-cursor-position (--> Bool )
=end code

Return value; C<True> if we moved and the new position is dereferenceable. 

=begin comment

=head2 Example
# Example for forward-visible-cursor-position

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 forward-visible-cursor-positions

Moves up to C<$count> visible cursor positions.

See C<.forward-cursor-position()>] for details.

=begin code
method forward-visible-cursor-positions ( Int() $count --> Bool )
=end code

=item $count; number of positions to move.

Return value; C<True> if we moved and the new position is dereferenceable. 

=begin comment

=head2 Example
# Example for forward-visible-cursor-positions

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 forward-visible-line

Moves C<$iter> to the start of the next visible line.

Returns C<True> if there
was a next line to move to, and C<False> if C<$iter> was simply moved to
the end of the buffer and is now not dereferenceable, or if C<$iter> was
already at the end of the buffer.

=begin code
method forward-visible-line (--> Bool )
=end code

Return value; whether C<$iter> can be dereferenced. 

=begin comment

=head2 Example
# Example for forward-visible-line

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 forward-visible-lines

Moves C<$count> visible lines forward, if possible.

If C<$count> would move past the start or end of the buffer, moves to
the start or end of the buffer.

The return value indicates whether the iterator moved
onto a dereferenceable position; if the iterator didn’t move, or
moved onto the end iterator, then C<False> is returned. If C<$count> is 0,
the function does nothing and returns C<False>. If C<$count> is negative,
moves backward by 0 - C<$count> lines.

=begin code
method forward-visible-lines ( Int() $count --> Bool )
=end code

=item $count; number of lines to move forward.

Return value; whether C<$iter> moved and is dereferenceable. 

=begin comment

=head2 Example
# Example for forward-visible-lines

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 forward-visible-word-end

Moves forward to the next visible word end.

If C<$iter> is currently on a word end, moves forward to the
next one after that.

Word breaks are determined by Pango and should be correct
for nearly any language

=begin code
method forward-visible-word-end (--> Bool )
=end code

Return value; C<True> if C<$iter> moved and is not the end iterator. 

=begin comment

=head2 Example
# Example for forward-visible-word-end

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 forward-visible-word-ends

Calls C<.forward-visible-word-end()>] up to C<$count> times.

=begin code
method forward-visible-word-ends ( Int() $count --> Bool )
=end code

=item $count; number of times to move.

Return value; C<True> if C<$iter> moved and is not the end iterator. 

=begin comment

=head2 Example
# Example for forward-visible-word-ends

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 forward-word-end

Moves forward to the next word end.

If C<$iter> is currently on a word end, moves forward to the
next one after that.

Word breaks are determined by Pango and should be correct
for nearly any language.

=begin code
method forward-word-end (--> Bool )
=end code

Return value; C<True> if C<$iter> moved and is not the end iterator. 

=begin comment

=head2 Example
# Example for forward-word-end

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 forward-word-ends

Calls C<.forward-word-end()>] up to C<$count> times.

=begin code
method forward-word-ends ( Int() $count --> Bool )
=end code

=item $count; number of times to move.

Return value; C<True> if C<$iter> moved and is not the end iterator. 

=begin comment

=head2 Example
# Example for forward-word-ends

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 free

Free an iterator allocated on the heap.

This function is intended for use in language bindings,
and is not especially useful for applications, because
iterators can simply be allocated on the stack.

=begin code
method free ( )
=end code

=begin comment

=head2 Example
# Example for free

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-buffer

Returns the B<Gnome::Gtk4::TextBuffer> this iterator is associated with.

=begin code
method get-buffer (--> N-Object )
=end code

Return value; the buffer. 

=begin comment

=head2 Example
# Example for get-buffer

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-bytes-in-line

Returns the number of bytes in the line containing C<$iter>,
including the paragraph delimiters.

=begin code
method get-bytes-in-line (--> Int )
=end code

Return value; number of bytes in the line. 

=begin comment

=head2 Example
# Example for get-bytes-in-line

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-char

The Unicode character at this iterator is returned.

Equivalent to operator* on a C++ iterator. If the element at
this iterator is a non-character element, such as an image
embedded in the buffer, the Unicode “unknown” character 0xFFFC
is returned. If invoked on the end iterator, zero is returned;
zero is not a valid Unicode character.

So you can write a loop which ends when this function returns 0.

=begin code
method get-char (--> UInt )
=end code

Return value; a Unicode character, or 0 if C<$iter> is not dereferenceable. 

=begin comment

=head2 Example
# Example for get-char

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-chars-in-line

Returns the number of characters in the line containing C<$iter>,
including the paragraph delimiters.

=begin code
method get-chars-in-line (--> Int )
=end code

Return value; number of characters in the line. 

=begin comment

=head2 Example
# Example for get-chars-in-line

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-child-anchor

If the location at C<$iter> contains a child anchor, the
anchor is returned.

Otherwise, undefined is returned.

=begin code
method get-child-anchor (--> N-Object )
=end code

Return value; the anchor at C<$iter>. 

=begin comment

=head2 Example
# Example for get-child-anchor

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-language

Returns the language in effect at C<$iter>.

If no tags affecting language apply to C<$iter>, the return
value is identical to that of C<.get-default-language()>.

=begin code
method get-language (--> N-Object )
=end code

Return value; language in effect at C<$iter>. 

=begin comment

=head2 Example
# Example for get-language

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-line

Returns the line number containing the iterator.

Lines in a B<Gnome::Gtk4::TextBuffer> are numbered beginning
with 0 for the first line in the buffer.

=begin code
method get-line (--> Int )
=end code

Return value; a line number. 

=begin comment

=head2 Example
# Example for get-line

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-line-index

Returns the byte index of the iterator, counting
from the start of a newline-terminated line.

Remember that B<Gnome::Gtk4::TextBuffer> encodes text in
UTF-8, and that characters can require a variable
number of bytes to represent.

=begin code
method get-line-index (--> Int )
=end code

Return value; distance from start of line, in bytes. 

=begin comment

=head2 Example
# Example for get-line-index

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-line-offset

Returns the character offset of the iterator,
counting from the start of a newline-terminated line.

The first character on the line has offset 0.

=begin code
method get-line-offset (--> Int )
=end code

Return value; offset from start of line. 

=begin comment

=head2 Example
# Example for get-line-offset

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-marks

Returns a list of all B<Gnome::Gtk4::TextMark> at this location.

Because marks are not iterable (they don’t take up any "space"
in the buffer, they are just marks in between iterable locations),
multiple marks can exist in the same place.

The returned list is not in any meaningful order.

=begin code
method get-marks (--> N-SList )
=end code

Return value; 
  list of B<Gnome::Gtk4::TextMark>. 

=begin comment

=head2 Example
# Example for get-marks

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-offset

Returns the character offset of an iterator.

Each character in a B<Gnome::Gtk4::TextBuffer> has an offset,
starting with 0 for the first character in the buffer.
Use C<.get-iter-at-offset()> in class B<Gnome::Gtk4::TextBuffer>] to convert
an offset back into an iterator.

=begin code
method get-offset (--> Int )
=end code

Return value; a character offset. 

=begin comment

=head2 Example
# Example for get-offset

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-paintable

If the element at C<$iter> is a paintable, the paintable is returned.

Otherwise, undefined is returned.

=begin code
method get-paintable (--> N-Object )
=end code

Return value; the paintable at C<$iter>. 

=begin comment

=head2 Example
# Example for get-paintable

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-slice

Returns the text in the given range.

A “slice” is an array of characters encoded in UTF-8 format,
including the Unicode “unknown” character 0xFFFC for iterable
non-character elements in the buffer, such as images.
Because images are encoded in the slice, byte and
character offsets in the returned array will correspond to byte
offsets in the text buffer. Note that 0xFFFC can occur in normal
text as well, so it is not a reliable indicator that a paintable or
widget is in the buffer.

=begin code
method get-slice ( N-Object $end --> Str )
=end code

=item $end; iterator at end of a range

Return value; slice of text from the buffer. 

=begin comment

=head2 Example
# Example for get-slice

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-tags

Returns a list of tags that apply to C<$iter>, in ascending order of
priority.

The highest-priority tags are last.

The B<Gnome::Gtk4::TextTag>s in the list don’t have a reference added,
but you have to free the list itself.

=begin code
method get-tags (--> N-SList )
=end code

Return value; list of
  B<Gnome::Gtk4::TextTag>. 

=begin comment

=head2 Example
# Example for get-tags

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-text

Returns text in the given range.

If the range
contains non-text elements such as images, the character and byte
offsets in the returned string will not correspond to character and
byte offsets in the buffer. If you want offsets to correspond, see
C<.get-slice()>].

=begin code
method get-text ( N-Object $end --> Str )
=end code

=item $end; iterator at end of a range

Return value; array of characters from the buffer. 

=begin comment

=head2 Example
# Example for get-text

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-toggled-tags

Returns a list of B<Gnome::Gtk4::TextTag> that are toggled on or off at this
point.

If C<$toggled-on> is C<True>, the list contains tags that are
toggled on. If a tag is toggled on at C<$iter>, then some non-empty
range of characters following C<$iter> has that tag applied to it.  If
a tag is toggled off, then some non-empty range following C<$iter>
does not have the tag applied to it.

=begin code
method get-toggled-tags ( Bool() $toggled-on --> N-SList )
=end code

=item $toggled-on; C<True> to get toggled-on tags.

Return value; tags
  toggled at this point. 

=begin comment

=head2 Example
# Example for get-toggled-tags

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-visible-line-index

Returns the number of bytes from the start of the
line to the given C<$iter>, not counting bytes that
are invisible due to tags with the “invisible” flag
toggled on.

=begin code
method get-visible-line-index (--> Int )
=end code

Return value; byte index of C<$iter> with respect to the start of the line. 

=begin comment

=head2 Example
# Example for get-visible-line-index

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-visible-line-offset

Returns the offset in characters from the start of the
line to the given C<$iter>, not counting characters that
are invisible due to tags with the “invisible” flag
toggled on.

=begin code
method get-visible-line-offset (--> Int )
=end code

Return value; offset in visible characters from the start of the line. 

=begin comment

=head2 Example
# Example for get-visible-line-offset

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-visible-slice

Returns visible text in the given range.

Like C<.get-slice()>], but invisible text
is not included. Invisible text is usually invisible because
a B<Gnome::Gtk4::TextTag> with the “invisible” attribute turned on has
been applied to it.

=begin code
method get-visible-slice ( N-Object $end --> Str )
=end code

=item $end; iterator at end of range

Return value; slice of text from the buffer. 

=begin comment

=head2 Example
# Example for get-visible-slice

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-visible-text

Returns visible text in the given range.

Like C<.get-text()>], but invisible text
is not included. Invisible text is usually invisible because
a B<Gnome::Gtk4::TextTag> with the “invisible” attribute turned on has
been applied to it.

=begin code
method get-visible-text ( N-Object $end --> Str )
=end code

=item $end; iterator at end of range

Return value; string containing visible text in the
range. 

=begin comment

=head2 Example
# Example for get-visible-text

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 has-tag

Returns C<True> if C<$iter> points to a character that is part
of a range tagged with C<$tag>.

See also C<.starts-tag()>] and
C<.ends-tag()>].

=begin code
method has-tag ( N-Object() $tag --> Bool )
=end code

=item $tag; a B<Gnome::Gtk4::TextTag>.

Return value; whether C<$iter> is tagged with C<$tag>. 

=begin comment

=head2 Example
# Example for has-tag

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 in-range

Checks whether C<$iter> falls in the range [ C<$start>, C<$end>).
 C<$start> and C<$end> must be in ascending order.

=begin code
method in-range ( N-Object $start, N-Object $end --> Bool )
=end code

=item $start; start of range
=item $end; end of range

Return value; C<True> if C<$iter> is in the range. 

=begin comment

=head2 Example
# Example for in-range

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 inside-sentence

Determines whether C<$iter> is inside a sentence (as opposed to in
between two sentences, e.g. after a period and before the first
letter of the next sentence).

Sentence boundaries are determined by Pango and should be correct
for nearly any language.

=begin code
method inside-sentence (--> Bool )
=end code

Return value; C<True> if C<$iter> is inside a sentence.. 

=begin comment

=head2 Example
# Example for inside-sentence

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 inside-word

Determines whether the character pointed by C<$iter> is part of a
natural-language word (as opposed to say inside some whitespace).

Word breaks are determined by Pango and should be correct
for nearly any language.

Note that if C<.starts-word()>] returns C<True>,
then this function returns C<True> too, since C<$iter> points to
the first character of the word.

=begin code
method inside-word (--> Bool )
=end code

Return value; C<True> if C<$iter> is inside a word. 

=begin comment

=head2 Example
# Example for inside-word

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 is-cursor-position

Determine if C<$iter> is at a cursor position.

See C<.forward-cursor-position()>] or
 B<Gnome::Pango::N-LogAttr>  or C<.break() in package Gnome::Pango> for details
on what a cursor position is.

=begin code
method is-cursor-position (--> Bool )
=end code

Return value; C<True> if the cursor can be placed at C<$iter>. 

=begin comment

=head2 Example
# Example for is-cursor-position

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 is-end

Returns C<True> if C<$iter> is the end iterator.

This means it is one past the last dereferenceable iterator
in the buffer. C<.is-end()>] is the most efficient
way to check whether an iterator is the end iterator.

=begin code
method is-end (--> Bool )
=end code

Return value; whether C<$iter> is the end iterator. 

=begin comment

=head2 Example
# Example for is-end

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 is-start

Returns C<True> if C<$iter> is the first iterator in the buffer.

=begin code
method is-start (--> Bool )
=end code

Return value; whether C<$iter> is the first in the buffer. 

=begin comment

=head2 Example
# Example for is-start

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 order

Swaps the value of C<$first> and C<$second> if C<$second> comes before C<$first> in the buffer.

That is, ensures that C<$first> and C<$second> are in sequence.
Most text buffer functions that take a range call this
automatically on your behalf, so there’s no real reason to
call it yourself in those cases. There are some exceptions,
such as C<.in-range()>], that expect a
pre-sorted range.

=begin code
method order ( N-Object $second )
=end code

=item $second; another B<Gnome::Gtk4::N-TextIter>

=begin comment

=head2 Example
# Example for order

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-line

Moves iterator C<$iter> to the start of the line C<$line-number>.

If C<$line-number> is negative or larger than or equal to the number of lines
in the buffer, moves C<$iter> to the start of the last line in the buffer.

=begin code
method set-line ( Int() $line-number )
=end code

=item $line-number; line number (counted from 0).

=begin comment

=head2 Example
# Example for set-line

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-line-index

Same as C<.set-line-offset()>], but works with a
byte index. The given byte index must be at
the start of a character, it can’t be in the middle of a UTF-8
encoded character.

=begin code
method set-line-index ( Int() $byte-on-line )
=end code

=item $byte-on-line; a byte index relative to the start of C<$iter>’s current line.

=begin comment

=head2 Example
# Example for set-line-index

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-line-offset

Moves C<$iter> within a line, to a new character (not byte) offset.

The given character offset must be less than or equal to the number
of characters in the line; if equal, C<$iter> moves to the start of the
next line. See C<.set-line-index()>] if you have a byte
index rather than a character offset.

=begin code
method set-line-offset ( Int() $char-on-line )
=end code

=item $char-on-line; a character offset relative to the start of C<$iter>’s current line.

=begin comment

=head2 Example
# Example for set-line-offset

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-offset

Sets C<$iter> to point to C<$char-offset>.
 C<$char-offset> counts from the start
of the entire text buffer, starting with 0.

=begin code
method set-offset ( Int() $char-offset )
=end code

=item $char-offset; a character number.

=begin comment

=head2 Example
# Example for set-offset

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-visible-line-index

Like C<.set-line-index()>], but the index is in visible
bytes, i.e. text with a tag making it invisible is not counted
in the index.

=begin code
method set-visible-line-index ( Int() $byte-on-line )
=end code

=item $byte-on-line; a byte index.

=begin comment

=head2 Example
# Example for set-visible-line-index

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-visible-line-offset

Like C<.set-line-offset()>], but the offset is in visible
characters, i.e. text with a tag making it invisible is not
counted in the offset.

=begin code
method set-visible-line-offset ( Int() $char-on-line )
=end code

=item $char-on-line; a character offset.

=begin comment

=head2 Example
# Example for set-visible-line-offset

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 starts-line

Returns C<True> if C<$iter> begins a paragraph.

This is the case if C<.get-line-offset()>]
would return 0. However this function is potentially more
efficient than C<.get-line-offset()>], because
it doesn’t have to compute the offset, it just has to see
whether it’s 0.

=begin code
method starts-line (--> Bool )
=end code

Return value; whether C<$iter> begins a line. 

=begin comment

=head2 Example
# Example for starts-line

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 starts-sentence

Determines whether C<$iter> begins a sentence.

Sentence boundaries are determined by Pango and
should be correct for nearly any language.

=begin code
method starts-sentence (--> Bool )
=end code

Return value; C<True> if C<$iter> is at the start of a sentence.. 

=begin comment

=head2 Example
# Example for starts-sentence

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 starts-tag

Returns C<True> if C<$tag> is toggled on at exactly this point.

If C<$tag> is undefined, returns C<True> if any tag is toggled on at this point.

Note that if this function returns C<True>, it means that C<$iter> is at the beginning of the tagged range, and that the
character at C<$iter> is inside the tagged range. In other
words, unlike C<.ends-tag()>], if
this function returns C<True>, C<.has-tag()>]
will also return C<True> for the same parameters.

=begin code
method starts-tag ( N-Object() $tag --> Bool )
=end code

=item $tag; a B<Gnome::Gtk4::TextTag>.

Return value; whether C<$iter> is the start of a range tagged with C<$tag>. 

=begin comment

=head2 Example
# Example for starts-tag

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 starts-word

Determines whether C<$iter> begins a natural-language word.

Word breaks are determined by Pango and should be correct
for nearly any language.

=begin code
method starts-word (--> Bool )
=end code

Return value; C<True> if C<$iter> is at the start of a word. 

=begin comment

=head2 Example
# Example for starts-word

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 toggles-tag

Gets whether a range with C<$tag> applied to it begins
or ends at C<$iter>.

This is equivalent to (C<.starts-tag()> ||
C<.ends-tag()>)

=begin code
method toggles-tag ( N-Object() $tag --> Bool )
=end code

=item $tag; a B<Gnome::Gtk4::TextTag>.

Return value; whether C<$tag> is toggled on or off at C<$iter>. 

=begin comment

=head2 Example
# Example for toggles-tag

=end comment

=end pod

