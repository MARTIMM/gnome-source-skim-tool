=comment Package: Gtk4, C-Source: treemodelsort
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=TITLE Gnome::Gtk4::TreeModelSort
=head1 Description

A GtkTreeModel which makes an underlying tree model sortable

The B<Gnome::Gtk4::TreeModelSort> is a model which implements the B<Gnome::Gtk4::R-TreeSortable>
interface.  It does not hold any data itself, but rather is created with
a child model and proxies its data.  It has identical column types to
this child model, and the changes in the child are propagated.  The
primary purpose of this model is to provide a way to sort a different
model without modifying it. Note that the sort function used by
B<Gnome::Gtk4::TreeModelSort> is not guaranteed to be stable.

The use of this is best demonstrated through an example.  In the
following sample code we create two B<Gnome::Gtk4::TreeView> widgets each with a
view of the same data.  As the model is wrapped here by a
B<Gnome::Gtk4::TreeModelSort>, the two B<Gnome::Gtk4::TreeView>s can each sort their
view of the data without affecting the other.  By contrast, if we
simply put the same model in each widget, then sorting the first would
sort the second.

=head3 Using a B<Gnome::Gtk4::TreeModelSort>

=begin comment
<!-- language="C" -->
{
  GtkTreeView *tree_view1;
  GtkTreeView *tree_view2;
  GtkTreeModel *sort_model1;
  GtkTreeModel *sort_model2;
  GtkTreeModel *child_model;

  // get the child model
  child_model = get_my_model ();

  // Create the first tree
  sort_model1 = gtk_tree_model_sort_new_with_model (child_model);
  tree_view1 = gtk_tree_view_new_with_model (sort_model1);

  // Create the second tree
  sort_model2 = gtk_tree_model_sort_new_with_model (child_model);
  tree_view2 = gtk_tree_view_new_with_model (sort_model2);

  // Now we can sort the two models independently
  gtk_tree_sortable_set_sort_column_id (GTK_TREE_SORTABLE (sort_model1),
                                        COLUMN_1, GTK_SORT_ASCENDING);
  gtk_tree_sortable_set_sort_column_id (GTK_TREE_SORTABLE (sort_model2),
                                        COLUMN_1, GTK_SORT_DESCENDING);
}

=end comment

To demonstrate how to access the underlying child model from the sort
model, the next example will be a callback for the B<Gnome::Gtk4::TreeSelection>
B<Gnome::Gtk4::TreeSelection>::changed` signal.  In this callback, we get a string
from COLUMN_1 of the model.  We then modify the string, find the same
selected row on the child model, and change the row there.

=head3 Accessing the child model of in a selection changed callback

=begin comment
<!-- language="C" -->
void
selection_changed (GtkTreeSelection *selection, gpointer data)
{
  GtkTreeModel *sort_model = NULL;
  GtkTreeModel *child_model;
  GtkTreeIter sort_iter;
  GtkTreeIter child_iter;
  char *some_data = NULL;
  char *modified_data;

  // Get the current selected row and the model.
  if (! gtk_tree_selection_get_selected (selection,
                                         &sort_model,
                                         &sort_iter))
    return;

  // Look up the current value on the selected row and get
  // a new value to change it to.
  gtk_tree_model_get (GTK_TREE_MODEL (sort_model), &sort_iter,
                      COLUMN_1, &some_data,
                      -1);

  modified_data = change_the_data (some_data);
  g_free (some_data);

  // Get an iterator on the child model, instead of the sort model.
  gtk_tree_model_sort_convert_iter_to_child_iter (GTK_TREE_MODEL_SORT (sort_model),
                                                  &child_iter,
                                                  &sort_iter);

  // Get the child model and change the value of the row. In this
  // example, the child model is a GtkListStore. It could be any other
  // type of model, though.
  child_model = gtk_tree_model_sort_get_model (GTK_TREE_MODEL_SORT (sort_model));
  gtk_list_store_set (GTK_LIST_STORE (child_model), &child_iter,
                      COLUMN_1, &modified_data,
                      -1);
  g_free (modified_data);
}

=end comment

=begin comment

=head2 Uml Diagram
![](plantuml/….svg)

=end comment

=begin comment

=head2 Example
# Example use of module Gnome::Gtk4::TreeModelSort

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

B<Note: The native version of this class is deprecated in gtk4-lib() since version 4.10>

=head2 new

=head3 :native-object

Create an object using a native object from elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object() :$native-object! )

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-with-model

Creates a new B<Gnome::Gtk4::TreeModelSort>, with C<$child-model> as the child model.

=begin code
method new-with-model ( N-Object() $child-model --> Gnome::Gtk4::TreeModelSort \)
=end code

=item $child-model; A B<Gnome::Gtk4::R-TreeModel>.

=begin comment

=head2 Example
# Example for new-with-model

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 clear-cache

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

This function should almost never be called.  It clears the C<$tree-model-sort>
of any cached iterators that haven’t been reffed with
gtk_tree_model_ref_node().  This might be useful if the child model being
sorted is static (and doesn’t change often) and there has been a lot of
unreffed access to nodes.  As a side effect of this function, all unreffed
iters will be invalid.

=begin code
method clear-cache ( )
=end code

=begin comment

=head2 Example
# Example for clear-cache

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 convert-child-iter-to-iter

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Sets C<$sort-iter> to point to the row in C<$tree-model-sort> that corresponds to
the row pointed at by C<$child-iter>.  If C<$sort-iter> was not set, C<False>
is returned.  Note: a boolean is only returned since 2.14.

=begin code
method convert-child-iter-to-iter ( N-Object $sort-iter, N-Object $child-iter --> Bool )
=end code

=item $sort-iter; An uninitialized B<Gnome::Gtk4::N-TreeIter>
=item $child-iter; A valid B<Gnome::Gtk4::N-TreeIter> pointing to a row on the child model

Return value; C<True>, if C<$sort-iter> was set, i.e. if C<$sort-iter> is a
valid iterator pointer to a visible row in the child model.. 

=begin comment

=head2 Example
# Example for convert-child-iter-to-iter

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 convert-child-path-to-path

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Converts C<$child-path> to a path relative to C<$tree-model-sort>.  That is, C<$child-path> points to a path in the child model.  The returned path will
point to the same row in the sorted model.  If C<$child-path> isn’t a valid
path on the child model, then undefined is returned.

=begin code
method convert-child-path-to-path ( N-Object $child-path --> N-Object )
=end code

=item $child-path; A B<Gnome::Gtk4::N-TreePath> to convert

Return value; A newly allocated B<Gnome::Gtk4::N-TreePath>. 

=begin comment

=head2 Example
# Example for convert-child-path-to-path

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 convert-iter-to-child-iter

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Sets C<$child-iter> to point to the row pointed to by C<$sorted-iter>.

=begin code
method convert-iter-to-child-iter ( N-Object $child-iter, N-Object $sorted-iter )
=end code

=item $child-iter; An uninitialized B<Gnome::Gtk4::N-TreeIter>
=item $sorted-iter; A valid B<Gnome::Gtk4::N-TreeIter> pointing to a row on C<$tree-model-sort>.

=begin comment

=head2 Example
# Example for convert-iter-to-child-iter

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 convert-path-to-child-path

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Converts C<$sorted-path> to a path on the child model of C<$tree-model-sort>.
That is, C<$sorted-path> points to a location in C<$tree-model-sort>.  The
returned path will point to the same location in the model not being
sorted.  If C<$sorted-path> does not point to a location in the child model,
undefined is returned.

=begin code
method convert-path-to-child-path ( N-Object $sorted-path --> N-Object )
=end code

=item $sorted-path; A B<Gnome::Gtk4::N-TreePath> to convert

Return value; A newly allocated B<Gnome::Gtk4::N-TreePath>. 

=begin comment

=head2 Example
# Example for convert-path-to-child-path

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-model

Returns the model the B<Gnome::Gtk4::TreeModelSort> is sorting.

=begin code
method get-model (--> N-Object )
=end code

Return value; the "child model" being sorted. 

=begin comment

=head2 Example
# Example for get-model

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 iter-is-valid

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

> This function is slow. Only use it for debugging and/or testing
> purposes.

Checks if the given iter is a valid iter for this B<Gnome::Gtk4::TreeModelSort>.

=begin code
method iter-is-valid ( N-Object $iter --> Bool )
=end code

=item $iter; A B<Gnome::Gtk4::N-TreeIter>

Return value; C<True> if the iter is valid, C<False> if the iter is invalid.. 

=begin comment

=head2 Example
# Example for iter-is-valid

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 reset-default-sort-func

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

This resets the default sort function to be in the “unsorted” state.  That
is, it is in the same order as the child model. It will re-sort the model
to be in the same order as the child model only if the B<Gnome::Gtk4::TreeModelSort>
is in “unsorted” state.

=begin code
method reset-default-sort-func ( )
=end code

=begin comment

=head2 Example
# Example for reset-default-sort-func

=end comment

=end pod

