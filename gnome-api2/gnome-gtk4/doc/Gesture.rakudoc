=comment Package: Gtk4, C-Source: gesture
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=TITLE Gnome::Gtk4::Gesture
=head1 Description

B<Gnome::Gtk4::Gesture> is the base class for gesture recognition.

Although B<Gnome::Gtk4::Gesture> is quite generalized to serve as a base for
multi-touch gestures, it is suitable to implement single-touch and
pointer-based gestures (using the special undefined B<Gnome::Gdk4::N-EventSequence>
value for these).

The number of touches that a B<Gnome::Gtk4::Gesture> need to be recognized is
controlled by the I<n-points> property, if a
gesture is keeping track of less or more than that number of sequences,
it won't check whether the gesture is recognized.

As soon as the gesture has the expected number of touches, it will check
regularly if it is recognized, the criteria to consider a gesture as
"recognized" is left to B<Gnome::Gtk4::Gesture> subclasses.

A recognized gesture will then emit the following signals:

=item I<begin> when the gesture is recognized.
=item I<update>, whenever an input event is processed.
=item I<end> when the gesture is no longer recognized.

=head3 Event propagation

In order to receive events, a gesture needs to set a propagation phase
through C<.set-propagation-phase() in class Gnome::Gtk4::EventController>.

In the capture phase, events are propagated from the toplevel down
to the target widget, and gestures that are attached to containers
above the widget get a chance to interact with the event before it
reaches the target.

In the bubble phase, events are propagated up from the target widget
to the toplevel, and gestures that are attached to containers above
the widget get a chance to interact with events that have not been
handled yet.

=head3 States of a sequence

Whenever input interaction happens, a single event may trigger a cascade
of B<Gnome::Gtk4::Gesture>s, both across the parents of the widget receiving the
event and in parallel within an individual widget. It is a responsibility
of the widgets using those gestures to set the state of touch sequences
accordingly in order to enable cooperation of gestures around the
B<Gnome::Gdk4::N-EventSequence>s triggering those.

Within a widget, gestures can be grouped through C<.group()>.
Grouped gestures synchronize the state of sequences, so calling
C<.set-state()> on one will effectively propagate
the state throughout the group.

By default, all sequences start out in the C<GTK_EVENT_SEQUENCE_NONE> state,
sequences in this state trigger the gesture event handler, but event
propagation will continue unstopped by gestures.

If a sequence enters into the C<GTK_EVENT_SEQUENCE_DENIED> state, the gesture
group will effectively ignore the sequence, letting events go unstopped
through the gesture, but the "slot" will still remain occupied while
the touch is active.

If a sequence enters in the C<GTK_EVENT_SEQUENCE_CLAIMED> state, the gesture
group will grab all interaction on the sequence, by:

=item Setting the same sequence to C<GTK_EVENT_SEQUENCE_DENIED> on every other
  gesture group within the widget, and every gesture on parent widgets
  in the propagation chain.
=item Emitting I<cancel> on every gesture in widgets
  underneath in the propagation chain.
=item Stopping event propagation after the gesture group handles the event.

Note: if a sequence is set early to C<GTK_EVENT_SEQUENCE_CLAIMED> on
C<GDK_TOUCH_BEGIN>/C<GDK_BUTTON_PRESS> (so those events are captured before
reaching the event widget, this implies C<GTK_PHASE_CAPTURE>), one similar
event will be emulated if the sequence changes to C<GTK_EVENT_SEQUENCE_DENIED>.
This way event coherence is preserved before event propagation is unstopped
again.

Sequence states can't be changed freely.
See C<.set-state()> to know about the possible
lifetimes of a B<Gnome::Gdk4::N-EventSequence>.

=head3 Touchpad gestures

On the platforms that support it, B<Gnome::Gtk4::Gesture> will handle transparently
touchpad gesture events. The only precautions users of B<Gnome::Gtk4::Gesture> should
do to enable this support are:

=item If the gesture has C<GTK_PHASE_NONE>, ensuring events of type
  C<GDK_TOUCHPAD_SWIPE> and C<GDK_TOUCHPAD_PINCH> are handled by the B<Gnome::Gtk4::Gesture>

=begin comment

=head2 Uml Diagram
![](plantuml/â€¦.svg)

=end comment

=begin comment

=head2 Example
# Example use of module Gnome::Gtk4::Gesture

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

=head2 new

=head3 :native-object

Create an object using a native object from an object of the same type found elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object() :$native-object! )

=end pod

#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-bounding-box

If there are touch sequences being currently handled by C<$gesture>,
returns C<True> and fills in C<$rect> with the bounding box containing
all active touches.

Otherwise, C<False> will be returned.

Note: This function will yield unexpected results on touchpad
gestures. Since there is no correlation between physical and
pixel distances, these will look as if constrained in an
infinitely small area, C<$rect> width and height will thus be 0
regardless of the number of touchpoints.

=begin code
method get-bounding-box ( N-Object $rect --> Bool )
=end code

=item $rect; bounding box containing all active touches.

Return value; C<True> if there are active touches, C<False> otherwise. 

=begin comment

=head2 Example
# Example for get-bounding-box

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-bounding-box-center

If there are touch sequences being currently handled by C<$gesture>,
returns C<True> and fills in C<$x> and C<$y> with the center of the bounding
box containing all active touches.

Otherwise, C<False> will be returned.

=begin code
method get-bounding-box-center ( Num() $x, Num() $y --> Bool )
=end code

=item $x; (transfer ownership: full) X coordinate for the bounding box center.
=item $y; (transfer ownership: full) Y coordinate for the bounding box center.

Return value; C<False> if no active touches are present, C<True> otherwise. 

=begin comment

=head2 Example
# Example for get-bounding-box-center

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-device

Returns the logical B<Gnome::Gdk4::Device> that is currently operating
on C<$gesture>.

This returns undefined if the gesture is not being interacted.

=begin code
method get-device (--> N-Object )
=end code

Return value; a B<Gnome::Gdk4::Device>. 

=begin comment

=head2 Example
# Example for get-device

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-group

Returns all gestures in the group of C<$gesture>

=begin code
method get-group (--> N-List )
=end code

Return value; The list
  of B<Gnome::Gtk4::Gesture>s, free with g_list_free(). 

=begin comment

=head2 Example
# Example for get-group

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-last-event

Returns the last event that was processed for C<$sequence>.

Note that the returned pointer is only valid as long as the C<$sequence> is still interpreted by the C<$gesture>. If in doubt,
you should make a copy of the event.

=begin code
method get-last-event ( N-Object $sequence --> N-Object )
=end code

=item $sequence; a B<Gnome::Gdk4::N-EventSequence>

Return value; The last event from C<$sequence>. 

=begin comment

=head2 Example
# Example for get-last-event

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-last-updated-sequence

Returns the B<Gnome::Gdk4::N-EventSequence> that was last updated on C<$gesture>.

=begin code
method get-last-updated-sequence (--> N-Object )
=end code

Return value; The last updated sequence. 

=begin comment

=head2 Example
# Example for get-last-updated-sequence

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-point

If C<$sequence> is currently being interpreted by C<$gesture>,
returns C<True> and fills in C<$x> and C<$y> with the last coordinates
stored for that event sequence.

The coordinates are always relative to the widget allocation.

=begin code
method get-point ( N-Object $sequence, Num() $x, Num() $y --> Bool )
=end code

=item $sequence; a B<Gnome::Gdk4::N-EventSequence>, or undefined for pointer events
=item $x; (transfer ownership: full) return location for X axis of the sequence coordinates.
=item $y; (transfer ownership: full) return location for Y axis of the sequence coordinates.

Return value; C<True> if C<$sequence> is currently interpreted. 

=begin comment

=head2 Example
# Example for get-point

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-sequence-state

Returns the C<$sequence> state, as seen by C<$gesture>.

=begin code
method get-sequence-state ( N-Object $sequence --> GtkEventSequenceState )
=end code

=item $sequence; a B<Gnome::Gdk4::N-EventSequence>

Return value; The sequence state in C<$gesture>. 

=begin comment

=head2 Example
# Example for get-sequence-state

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-sequences

Returns the list of B<GdkEventSequences> currently being interpreted
by C<$gesture>.

=begin code
method get-sequences (--> N-List )
=end code

Return value; A list
  of B<Gnome::Gdk4::N-EventSequence>, the list elements are owned by GTK and must
  not be freed or modified, the list itself must be deleted
  through g_list_free(). 

=begin comment

=head2 Example
# Example for get-sequences

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 group

Adds C<$gesture> to the same group than C<$group-gesture>.

Gestures are by default isolated in their own groups.

Both gestures must have been added to the same widget before
they can be grouped.

When gestures are grouped, the state of B<GdkEventSequences>
is kept in sync for all of those, so calling
C<.set-sequence-state()>, on one will transfer
the same value to the others.

Groups also perform an "implicit grabbing" of sequences, if a
B<Gnome::Gdk4::N-EventSequence> state is set to C<GTK_EVENT_SEQUENCE_CLAIMED>
on one group, every other gesture group attached to the same
B<Gnome::Gtk4::Widget> will switch the state for that sequence to
C<GTK_EVENT_SEQUENCE_DENIED>.

=begin code
method group ( N-Object() $gesture )
=end code

=item $gesture; a B<Gnome::Gtk4::Gesture>.

=begin comment

=head2 Example
# Example for group

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 handles-sequence

Returns C<True> if C<$gesture> is currently handling events
corresponding to C<$sequence>.

=begin code
method handles-sequence ( N-Object $sequence --> Bool )
=end code

=item $sequence; a B<Gnome::Gdk4::N-EventSequence>

Return value; C<True> if C<$gesture> is handling C<$sequence>, C<False> otherwise. 

=begin comment

=head2 Example
# Example for handles-sequence

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 is-active

Returns C<True> if the gesture is currently active.

A gesture is active while there are touch sequences
interacting with it.

=begin code
method is-active (--> Bool )
=end code

Return value; C<True> if gesture is active. 

=begin comment

=head2 Example
# Example for is-active

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 is-grouped-with

Returns C<True> if both gestures pertain to the same group.

=begin code
method is-grouped-with ( N-Object() $other --> Bool )
=end code

=item $other; another B<Gnome::Gtk4::Gesture>.

Return value; whether the gestures are grouped. 

=begin comment

=head2 Example
# Example for is-grouped-with

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 is-recognized

Returns C<True> if the gesture is currently recognized.

A gesture is recognized if there are as many interacting
touch sequences as required by C<$gesture>.

=begin code
method is-recognized (--> Bool )
=end code

Return value; C<True> if gesture is recognized. 

=begin comment

=head2 Example
# Example for is-recognized

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-sequence-state

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10.>

Sets the state of C<$sequence> in C<$gesture>.

Sequences start in state C<GTK_EVENT_SEQUENCE_NONE>, and whenever
they change state, they can never go back to that state. Likewise,
sequences in state C<GTK_EVENT_SEQUENCE_DENIED> cannot turn back to
a not denied state. With these rules, the lifetime of an event
sequence is constrained to the next four:

* None
* None â†’ Denied
* None â†’ Claimed
* None â†’ Claimed â†’ Denied

Note: Due to event handling ordering, it may be unsafe to set the
state on another gesture within a I<begin> signal
handler, as the callback might be executed before the other gesture
knows about the sequence. A safe way to perform this could be:

=begin comment
static void
first_gesture_begin_cb (GtkGesture       *first_gesture,
                        GdkEventSequence *sequence,
                        gpointer          user_data)
{
  gtk_gesture_set_sequence_state (first_gesture, sequence, GTK_EVENT_SEQUENCE_CLAIMED);
  gtk_gesture_set_sequence_state (second_gesture, sequence, GTK_EVENT_SEQUENCE_DENIED);
}

static void
second_gesture_begin_cb (GtkGesture       *second_gesture,
                         GdkEventSequence *sequence,
                         gpointer          user_data)
{
  if (gtk_gesture_get_sequence_state (first_gesture, sequence) == GTK_EVENT_SEQUENCE_CLAIMED)
    gtk_gesture_set_sequence_state (second_gesture, sequence, GTK_EVENT_SEQUENCE_DENIED);
}

=end comment

If both gestures are in the same group, just set the state on
the gesture emitting the event, the sequence will be already
be initialized to the group's global state when the second
gesture processes the event.

=begin code
method set-sequence-state ( N-Object $sequence, GtkEventSequenceState $state --> Bool )
=end code

=item $sequence; a B<Gnome::Gdk4::N-EventSequence>
=item $state; the sequence state.

Return value; C<True> if C<$sequence> is handled by C<$gesture>,
  and the state is changed successfully. 

=begin comment

=head2 Example
# Example for set-sequence-state

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-state

Sets the state of all sequences that C<$gesture> is currently
interacting with.

Sequences start in state C<GTK_EVENT_SEQUENCE_NONE>, and whenever
they change state, they can never go back to that state. Likewise,
sequences in state C<GTK_EVENT_SEQUENCE_DENIED> cannot turn back to
a not denied state. With these rules, the lifetime of an event
sequence is constrained to the next four:

* None
* None â†’ Denied
* None â†’ Claimed
* None â†’ Claimed â†’ Denied

Note: Due to event handling ordering, it may be unsafe to set the
state on another gesture within a I<begin> signal
handler, as the callback might be executed before the other gesture
knows about the sequence. A safe way to perform this could be:

=begin comment
static void
first_gesture_begin_cb (GtkGesture       *first_gesture,
                        GdkEventSequence *sequence,
                        gpointer          user_data)
{
  gtk_gesture_set_state (first_gesture, GTK_EVENT_SEQUENCE_CLAIMED);
  gtk_gesture_set_state (second_gesture, GTK_EVENT_SEQUENCE_DENIED);
}

static void
second_gesture_begin_cb (GtkGesture       *second_gesture,
                         GdkEventSequence *sequence,
                         gpointer          user_data)
{
  if (gtk_gesture_get_sequence_state (first_gesture, sequence) == GTK_EVENT_SEQUENCE_CLAIMED)
    gtk_gesture_set_state (second_gesture, GTK_EVENT_SEQUENCE_DENIED);
}

=end comment

If both gestures are in the same group, just set the state on
the gesture emitting the event, the sequence will be already
be initialized to the group's global state when the second
gesture processes the event.

=begin code
method set-state ( GtkEventSequenceState $state --> Bool )
=end code

=item $state; the sequence state.

Return value; C<True> if the state of at least one sequence
  was changed successfully. 

=begin comment

=head2 Example
# Example for set-state

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 ungroup

Separates C<$gesture> into an isolated group.

=begin code
method ungroup ( )
=end code

=begin comment

=head2 Example
# Example for ungroup

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Signal Documentation]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Signals

=comment -----------------------------------------------------------------------
=head3 begin

Emitted when the gesture is recognized.

This means the number of touch sequences matches
I<n-points>.

Note: These conditions may also happen when an extra touch
(eg. a third touch on a 2-touches gesture) is lifted, in that
situation C<$sequence> won't pertain to the current set of active
touches, so don't rely on this being true.

=begin code
method handler (
   $sequence,
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gtk4::Gesture :$_widget,
  *C<user>-options
)
=end code

=item $sequence; the B<Gnome::Gdk4::N-EventSequence> that made the gesture
  to be recognized.
=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gtk4::Gesture> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

=begin comment

=head2 Example
# Example for signal begin

=end comment

=comment -----------------------------------------------------------------------
=head3 cancel

Emitted whenever a sequence is cancelled.

This usually happens on active touches when
C<.reset() in class Gnome::Gtk4::EventController> is called on C<$gesture>
(manually, due to grabs...), or the individual C<$sequence>
was claimed by parent widgets' controllers (see
C<.set-sequence-state()>).
 C<$gesture> must forget everything about C<$sequence> as in
response to this signal.

=begin code
method handler (
   $sequence,
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gtk4::Gesture :$_widget,
  *C<user>-options
)
=end code

=item $sequence; the B<Gnome::Gdk4::N-EventSequence> that was cancelled.
=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gtk4::Gesture> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

=begin comment

=head2 Example
# Example for signal cancel

=end comment

=comment -----------------------------------------------------------------------
=head3 end

Emitted when C<$gesture> either stopped recognizing the event
sequences as something to be handled, or the number of touch
sequences became higher or lower than I<n-points>.

Note: C<$sequence> might not pertain to the group of sequences that
were previously triggering recognition on C<$gesture> (ie. a just
pressed touch sequence that exceeds I<n-points>).
This situation may be detected by checking through
C<.handles-sequence()>.

=begin code
method handler (
   $sequence,
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gtk4::Gesture :$_widget,
  *C<user>-options
)
=end code

=item $sequence; the B<Gnome::Gdk4::N-EventSequence> that made gesture
  recognition to finish.
=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gtk4::Gesture> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

=begin comment

=head2 Example
# Example for signal end

=end comment

=comment -----------------------------------------------------------------------
=head3 sequence-state-changed

Emitted whenever a sequence state changes.

See C<.set-sequence-state()> to know
more about the expectable sequence lifetimes.

=begin code
method handler (
   $sequence,
   $state,
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gtk4::Gesture :$_widget,
  *C<user>-options
)
=end code

=item $sequence; the B<Gnome::Gdk4::N-EventSequence> that was cancelled.
=item $state; the new sequence state.
=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gtk4::Gesture> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

=begin comment

=head2 Example
# Example for signal sequence-state-changed

=end comment

=comment -----------------------------------------------------------------------
=head3 update

Emitted whenever an event is handled while the gesture is recognized.
 C<$sequence> is guaranteed to pertain to the set of active touches.

=begin code
method handler (
   $sequence,
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gtk4::Gesture :$_widget,
  *C<user>-options
)
=end code

=item $sequence; the B<Gnome::Gdk4::N-EventSequence> that was updated.
=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gtk4::Gesture> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

=begin comment

=head2 Example
# Example for signal update

=end comment

=end pod

