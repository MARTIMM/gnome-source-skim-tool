=comment Package: Gtk4, C-Source: checkbutton
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=TITLE Gnome::Gtk4::CheckButton
=head1 Description

A B<Gnome::Gtk4::CheckButton> places a label next to an indicator.

=for image :src<asset_files/images/check-button.png> :width<30%> :class<inline>

A B<Gnome::Gtk4::CheckButton> is created by calling either C<.newcheckbutton()>
or C<.new-with-label()>.

The state of a B<Gnome::Gtk4::CheckButton> can be set specifically using
C<.set-active()>, and retrieved using
C<.get-active()>.

=head2 Inconsistent state

In addition to "on" and "off", check buttons can be an
"in between" state that is neither on nor off. This can be used
e.g. when the user has selected a range of elements (such as some
text or spreadsheet cells) that are affected by a check button,
and the current values in that range are inconsistent.

To set a B<Gnome::Gtk4::CheckButton> to inconsistent state, use
C<.set-inconsistent()>.

=head2 Grouping

Check buttons can be grouped together, to form mutually exclusive
groups - only one of the buttons can be toggled at a time, and toggling
another one will switch the currently toggled one off.

Grouped check buttons use a different indicator, and are commonly referred
to as *radio buttons*.

=for image :src<asset_files/images/radio-button.png> :width<30%> :class<inline>

To add a B<Gnome::Gtk4::CheckButton> to a group, use C<.set-group()>.

When the code must keep track of the state of a group of radio buttons, it
is recommended to keep track of such state through a stateful
B<Gnome::Gio::R-Action> with a target for each button. Using the B<toggled> signals to keep
track of the group changes and state is discouraged.

=head2 CSS nodes

A B<Gnome::Gtk4::CheckButton> has a main node with name checkbutton. If the
I<label> or I<child>
properties are set, it contains a child widget. The indicator node
is named check when no group is set, and radio if the checkbutton
is grouped together with other checkbuttons.

=head2 Accessibility

B<Gnome::Gtk4::CheckButton> uses the C<GTK_ACCESSIBLE_ROLE_CHECKBOX> role.

=begin comment

=head2 Uml Diagram
![](plantuml/….svg)

=end comment

=begin comment

=head2 Example
# Example use of module Gnome::Gtk4::CheckButton

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

=head2 new

=head3 :native-object

Create an object using a native object from an object of the same type found elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object() :$native-object! )

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-checkbutton

Creates a new B<Gnome::Gtk4::CheckButton>.

=begin code
method new-checkbutton ( --> Gnome::Gtk4::CheckButton \)
=end code

=begin comment

=head2 Example
# Example for new-checkbutton

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-with-label

Creates a new B<Gnome::Gtk4::CheckButton> with the given text.

=begin code
method new-with-label ( Str $label --> Gnome::Gtk4::CheckButton \)
=end code

=item $label; the text for the check button..

=begin comment

=head2 Example
# Example for new-with-label

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-with-mnemonic

Creates a new B<Gnome::Gtk4::CheckButton> with the given text and a mnemonic.

=begin code
method new-with-mnemonic ( Str $label --> Gnome::Gtk4::CheckButton \)
=end code

=item $label; The text of the button, with an underscore
  in front of the mnemonic character.

=begin comment

=head2 Example
# Example for new-with-mnemonic

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-active

Returns whether the check button is active.

=begin code
method get-active (--> Bool )
=end code

Return value; whether the check button is active. 

=begin comment

=head2 Example
# Example for get-active

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-child

Gets the child widget of C<$button> or undefined if [property C<$CheckButton>:label] is set.

=begin code
method get-child (--> N-Object )
=end code

Return value; the child widget of C<$button>. 

=begin comment

=head2 Example
# Example for get-inconsistent

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-inconsistent

Returns whether the check button is in an inconsistent state.

=begin code
method get-inconsistent (--> Bool )
=end code

Return value; C<True> if C<$check-button> is currently in an inconsistent state. 

=begin comment

=head2 Example
# Example for get-label

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-label

Returns the label of the check button or undefined if [property C<$CheckButton>:child] is set.

=begin code
method get-label (--> Str )
=end code

Return value; The label C<$self> shows next
  to the indicator. If no label is shown, undefined will be returned.. 

=begin comment

=head2 Example
# Example for get-use-underline

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-use-underline

Returns whether underlines in the label indicate mnemonics.

=begin code
method get-use-underline (--> Bool )
=end code

Return value; The value of the I<use-underline> property.
  See C<.set-use-underline()> for details on how to set
  a new value.. 

=begin comment

=head2 Example
# Example for set-active

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-active

Changes the check buttons active state.

=begin code
method set-active ( Bool() $setting )
=end code

=item $setting; the new value to set.

=begin comment

=head2 Example
# Example for set-group

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-child

Sets the child widget of C<$button>.

Note that by using this API, you take full responsibility for setting
up the proper accessibility label and description information for C<$button>.
Most likely, you'll either set the accessibility label or description
for C<$button> explicitly, or you'll set a labelled-by or described-by
relations from C<$child> to C<$button>.

=begin code
method set-child ( N-Object() $child )
=end code

=item $child; the child widget.

=begin comment

=head2 Example
# Example for set-inconsistent

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-group

Adds C<$self> to the group of C<$group>.

In a group of multiple check buttons, only one button can be active
at a time. The behavior of a checkbutton in a group is also commonly
known as a *radio button*.

Setting the group of a check button also changes the css name of the
indicator widget's CSS node to 'radio'.

Setting up groups in a cycle leads to undefined behavior.

Note that the same effect can be achieved via the B<Gnome::Gtk4::R-Actionable>
API, by using the same action with parameter type and state type 's'
for all buttons in the group, and giving each button its own target
value.

=begin code
method set-group ( N-Object() $group )
=end code

=item $group; another B<Gnome::Gtk4::CheckButton> to
  form a group with.

=begin comment

=head2 Example
# Example for set-label

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-inconsistent

Sets the B<Gnome::Gtk4::CheckButton> to inconsistent state.

You should turn off the inconsistent state again if the user checks
the check button. This has to be done manually.

=begin code
method set-inconsistent ( Bool() $inconsistent )
=end code

=item $inconsistent; C<True> if state is inconsistent.

=begin comment

=head2 Example
# Example for set-use-underline

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-label

Sets the text of C<$self>.

If I<use-underline> is C<True>, an underscore
in C<$label> is interpreted as mnemonic indicator, see
C<.set-use-underline()> for details on this behavior.

=begin code
method set-label ( Str $label )
=end code

=item $label; The text shown next to the indicator, or undefined
  to show no text.

=begin comment

=head2 Example
# Example for signal activate

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-use-underline

Sets whether underlines in the label indicate mnemonics.

If C<$setting> is C<True>, an underscore character in C<$self>'s label
indicates a mnemonic accelerator key. This behavior is similar
to I<use-underline defined in Gnome::Gtk4::Label>.

=begin code
method set-use-underline ( Bool() $setting )
=end code

=item $setting; the new value to set.

=begin comment

=head2 Example
# Example for signal toggled

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Signal Documentation]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Signals

=comment -----------------------------------------------------------------------
=head3 activate

Emitted to when the check button is activated.

The `::activate` signal on B<Gnome::Gtk4::CheckButton> is an action signal and
emitting it causes the button to animate press then release.

Applications should never connect to this signal, but use the
I<toggled> signal.

The default bindings for this signal are all forms of the
<kbd>␣</kbd> and <kbd>Enter</kbd> keys.

=begin code
method handler (
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gtk4::CheckButton :$_widget,
  *C<user>-options
)
=end code

=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gtk4::CheckButton> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

=begin comment
checkbutton[.text-button]
├── check
╰── [label]

=end comment

=comment -----------------------------------------------------------------------
=head3 toggled

Emitted when the buttons's I<active>
property changes.

=begin code
method handler (
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gtk4::CheckButton :$_widget,
  *C<user>-options
)
=end code

=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gtk4::CheckButton> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

=end pod

