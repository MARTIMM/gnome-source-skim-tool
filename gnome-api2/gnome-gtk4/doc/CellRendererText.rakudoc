=comment Package: Gtk4, C-Source: cellrenderertext
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=TITLE Gnome::Gtk4::CellRendererText
=head1 Description

Renders text in a cell

A B<Gnome::Gtk4::CellRendererText> renders a given text in its cell, using the font, color and
style information provided by its properties. The text will be ellipsized if it is
too long and the B<Gnome::Gtk4::CellRendererText>:ellipsize` property allows it.

If the B<Gnome::Gtk4::CellRenderer>:mode` is C<GTK_CELL_RENDERER_MODE_EDITABLE>,
the B<Gnome::Gtk4::CellRendererText> allows to edit its text using an entry.

=begin comment

=head2 Uml Diagram
![](plantuml/….svg)

=end comment

=begin comment

=head2 Example
# Example use of module Gnome::Gtk4::CellRendererText

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

B<Note: The native version of this class is deprecated in gtk4-lib() since version 4.10>

=head2 new

=head3 :native-object

Create an object using a native object from elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object :$native-object! )

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-cellrenderertext

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Creates a new B<Gnome::Gtk4::CellRendererText>. Adjust how text is drawn using
object properties. Object properties can be
set globally (with g_object_set()). Also, with B<Gnome::Gtk4::TreeViewColumn>,
you can bind a property to a value in a B<Gnome::Gtk4::R-TreeModel>. For example,
you can bind the “text” property on the cell renderer to a string
value in the model, thus rendering a different string in each row
of the B<Gnome::Gtk4::TreeView>.

=begin code
method new-cellrenderertext ( --> Gnome::Gtk4::CellRendererText \)
=end code

=begin comment

=head2 Example
# Example for new-cellrenderertext

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-fixed-height-from-font

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Sets the height of a renderer to explicitly be determined by the “font” and
“y_pad” property set on it.  Further changes in these properties do not
affect the height, so they must be accompanied by a subsequent call to this
function.  Using this function is inflexible, and should really only be used
if calculating the size of a cell is too slow (ie, a massive number of cells
displayed).  If C<$number-of-rows> is -1, then the fixed height is unset, and
the height is determined by the properties again.

=begin code
method set-fixed-height-from-font ( Int() $number-of-rows )
=end code

=item $number-of-rows; Number of rows of text each cell renderer is allocated, or -1.

=begin comment

=head2 Example
# Example for set-fixed-height-from-font

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Signal Documentation]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Signals

=comment -----------------------------------------------------------------------
=head3 edited

This signal is emitted after C<$renderer> has been edited.

It is the responsibility of the application to update the model
and store C<$new-text> at the position indicated by C<$path>.

=begin code
method handler (
  Str $path,
  Str $new-text,
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gtk4::CellRendererText :$_widget,
  *C<user>-options
)
=end code

=item $path; the path identifying the edited cell.
=item $new-text; the new text.
=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gtk4::CellRendererText> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

=begin comment

=head2 Example
# Example for signal edited

=end comment

=end pod

