=comment Package: Gtk4, C-Source: stylecontext
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=TITLE Gnome::Gtk4::StyleContext
=head1 Description

B<Gnome::Gtk4::StyleContext> stores styling information affecting a widget.

In order to construct the final style information, B<Gnome::Gtk4::StyleContext>
queries information from all attached B<GtkStyleProviders>. Style
providers can be either attached explicitly to the context through
C<.add-provider()>, or to the display through
C<.StyleContext.add-provider-for-display()>. The resulting
style is a combination of all providers’ information in priority order.

For GTK widgets, any B<Gnome::Gtk4::StyleContext> returned by
C<.get-style-context() in class Gnome::Gtk4::Widget> will already have a B<Gnome::Gdk4::Display>
and RTL/LTR information set. The style context will also be updated
automatically if any of these settings change on the widget.

=head3 Style Classes

Widgets can add style classes to their context, which can be used to associate
different styles by class. The documentation for individual widgets lists
which style classes it uses itself, and which style classes may be added by
applications to affect their appearance.

=head2 Custom styling in UI libraries and applications

If you are developing a library with custom widgets that render differently
than standard components, you may need to add a B<Gnome::Gtk4::R-StyleProvider> yourself
with the C<GTK_STYLE_PROVIDER_PRIORITY_FALLBACK> priority, either a
B<Gnome::Gtk4::CssProvider> or a custom object implementing the B<Gnome::Gtk4::R-StyleProvider>
interface. This way themes may still attempt to style your UI elements in
a different way if needed so.

If you are using custom styling on an applications, you probably want then
to make your style information prevail to the theme’s, so you must use
a B<Gnome::Gtk4::R-StyleProvider> with the C<GTK_STYLE_PROVIDER_PRIORITY_APPLICATION>
priority, keep in mind that the user settings in
B<XDG_CONFIG_HOME>/gtk-4.0/gtk.css` will
still take precedence over your changes, as it uses the
C<GTK_STYLE_PROVIDER_PRIORITY_USER> priority.

=begin comment

=head2 Uml Diagram
![](plantuml/….svg)

=end comment

=begin comment

=head2 Example
# Example use of module Gnome::Gtk4::StyleContext

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

B<Note: The native version of this class is deprecated in gtk4-lib() since version 4.10>

=head2 new

=head3 :native-object

Create an object using a native object from elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object() :$native-object! )

=end pod

#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 add-class

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Adds a style class to C<$context>, so later uses of the
style context will make use of this new class for styling.

In the CSS file format, a B<Gnome::Gtk4::Entry> defining a “search”
class, would be matched by:

=begin comment
entry.search { ... }

=end comment

While any widget defining a “search” class would be
matched by:
=begin comment
.search { ... }

=end comment

=begin code
method add-class ( Str $class-name )
=end code

=item $class-name; class name to use in styling.

=begin comment

=head2 Example
# Example for add-class

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 add-provider

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Adds a style provider to C<$context>, to be used in style construction.

Note that a style provider added by this function only affects
the style of the widget to which C<$context> belongs. If you want
to affect the style of all widgets, use
C<.StyleContext.add-provider-for-display()>.

Note: If both priorities are the same, a B<Gnome::Gtk4::R-StyleProvider>
added through this function takes precedence over another added
through C<.StyleContext.add-provider-for-display()>.

=begin code
method add-provider ( N-Object() $provider, UInt() $priority )
=end code

=item $provider; a B<Gnome::Gtk4::R-StyleProvider>.
=item $priority; the priority of the style provider. The lower
  it is, the earlier it will be used in the style construction.
  Typically this will be in the range between
  C<GTK_STYLE_PROVIDER_PRIORITY_FALLBACK> and
  C<GTK_STYLE_PROVIDER_PRIORITY_USER>.

=begin comment

=head2 Example
# Example for add-provider

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-border

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Gets the border for a given state as a B<Gnome::Gtk4::N-Border>.

=begin code
method get-border ( N-Object $border )
=end code

=item $border; return value for the border settings

=begin comment

=head2 Example
# Example for get-border

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-color

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Gets the foreground color for a given state.

=begin code
method get-color ( N-Object $color )
=end code

=item $color; return value for the foreground color

=begin comment

=head2 Example
# Example for get-color

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-display

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Returns the B<Gnome::Gdk4::Display> to which C<$context> is attached.

=begin code
method get-display (--> N-Object )
=end code

Return value; a B<Gnome::Gdk4::Display>.. 

=begin comment

=head2 Example
# Example for get-display

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-margin

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Gets the margin for a given state as a B<Gnome::Gtk4::N-Border>.

=begin code
method get-margin ( N-Object $margin )
=end code

=item $margin; return value for the margin settings

=begin comment

=head2 Example
# Example for get-margin

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-padding

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Gets the padding for a given state as a B<Gnome::Gtk4::N-Border>.

=begin code
method get-padding ( N-Object $padding )
=end code

=item $padding; return value for the padding settings

=begin comment

=head2 Example
# Example for get-padding

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-scale

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Returns the scale used for assets.

=begin code
method get-scale (--> Int )
=end code

Return value; the scale. 

=begin comment

=head2 Example
# Example for get-scale

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-state

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Returns the state used for style matching.

This method should only be used to retrieve the C<bit field GtkStateFlags defined in Gnome::Gtk4::T-enums>
to pass to B<Gnome::Gtk4::StyleContext> methods, like
C<.get-padding()>.
If you need to retrieve the current state of a B<Gnome::Gtk4::Widget>, use
C<.get-state-flags() in class Gnome::Gtk4::Widget>.

=begin code
method get-state (--> UInt )
=end code

Return value; the state flags. 

=begin comment

=head2 Example
# Example for get-state

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 has-class

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Returns C<True> if C<$context> currently has defined the
given class name.

=begin code
method has-class ( Str $class-name --> Bool )
=end code

=item $class-name; a class name.

Return value; C<True> if C<$context> has C<$class-name> defined. 

=begin comment

=head2 Example
# Example for has-class

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 lookup-color

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Looks up and resolves a color name in the C<$context> color map.

=begin code
method lookup-color ( Str $color-name, N-Object $color --> Bool )
=end code

=item $color-name; color name to lookup.
=item $color; Return location for the looked up color

Return value; C<True> if C<$color-name> was found and resolved, C<False> otherwise. 

=begin comment

=head2 Example
# Example for lookup-color

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 remove-class

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Removes C<$class-name> from C<$context>.

=begin code
method remove-class ( Str $class-name )
=end code

=item $class-name; class name to remove.

=begin comment

=head2 Example
# Example for remove-class

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 remove-provider

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Removes C<$provider> from the style providers list in C<$context>.

=begin code
method remove-provider ( N-Object() $provider )
=end code

=item $provider; a B<Gnome::Gtk4::R-StyleProvider>.

=begin comment

=head2 Example
# Example for remove-provider

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 restore

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Restores C<$context> state to a previous stage.

See C<.save()>.

=begin code
method restore ( )
=end code

=begin comment

=head2 Example
# Example for restore

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 save

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Saves the C<$context> state.

This allows temporary modifications done through
C<.add-class()>,
C<.remove-class()>,
C<.set-state()> to be quickly
reverted in one go through C<.restore()>.

The matching call to C<.restore()>
must be done before GTK returns to the main loop.

=begin code
method save ( )
=end code

=begin comment

=head2 Example
# Example for save

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-display

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Attaches C<$context> to the given display.

The display is used to add style information from “global”
style providers, such as the display's B<Gnome::Gtk4::Settings> instance.

If you are using a B<Gnome::Gtk4::StyleContext> returned from
C<.get-style-context() in class Gnome::Gtk4::Widget>, you do not need to
call this yourself.

=begin code
method set-display ( N-Object() $display )
=end code

=item $display; a B<Gnome::Gdk4::Display>.

=begin comment

=head2 Example
# Example for set-display

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-scale

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Sets the scale to use when getting image assets for the style.

=begin code
method set-scale ( Int() $scale )
=end code

=item $scale; scale.

=begin comment

=head2 Example
# Example for set-scale

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-state

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Sets the state to be used for style matching.

=begin code
method set-state ( UInt $flags )
=end code

=item $flags; state to represent.

=begin comment

=head2 Example
# Example for set-state

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 to-string

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Converts the style context into a string representation.

The string representation always includes information about
the name, state, id, visibility and style classes of the CSS
node that is backing C<$context>. Depending on the flags, more
information may be included.

This function is intended for testing and debugging of the
CSS implementation in GTK. There are no guarantees about
the format of the returned string, it may change.

=begin code
method to-string ( UInt $flags --> Str )
=end code

=item $flags; Flags that determine what to print.

Return value; a newly allocated string representing C<$context>. 

=begin comment

=head2 Example
# Example for to-string

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Functions]------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Functions
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 add-provider-for-display

Adds a global style provider to C<$display>, which will be used
in style construction for all B<GtkStyleContexts> under C<$display>.

GTK uses this to make styling information from B<Gnome::Gtk4::Settings>
available.

Note: If both priorities are the same, A B<Gnome::Gtk4::R-StyleProvider>
added through C<.add-provider()> takes
precedence over another added through this function.

=begin code
method add-provider-for-display ( N-Object() $display, N-Object() $provider, UInt() $priority )
=end code

=item $display; a B<Gnome::Gdk4::Display>.
=item $provider; a B<Gnome::Gtk4::R-StyleProvider>.
=item $priority; the priority of the style provider. The lower
  it is, the earlier it will be used in the style construction.
  Typically this will be in the range between
  C<GTK_STYLE_PROVIDER_PRIORITY_FALLBACK> and
  C<GTK_STYLE_PROVIDER_PRIORITY_USER>.

=begin comment

=head2 Example
# Example for add-provider-for-display

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 remove-provider-for-display

Removes C<$provider> from the global style providers list in C<$display>.

=begin code
method remove-provider-for-display ( N-Object() $display, N-Object() $provider )
=end code

=item $display; a B<Gnome::Gdk4::Display>.
=item $provider; a B<Gnome::Gtk4::R-StyleProvider>.

=begin comment

=head2 Example
# Example for remove-provider-for-display

=end comment

=end pod

