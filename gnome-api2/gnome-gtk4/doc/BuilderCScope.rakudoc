=comment Package: Gtk4, C-Source: builderscope
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=TITLE Gnome::Gtk4::BuilderCScope
=head1 Description

A B<Gnome::Gtk4::R-BuilderScope> implementation for the C language.

B<Gnome::Gtk4::BuilderCScope> instances use symbols explicitly added to C<$builder>
with prior calls to C<.add-callback-symbol()>.
If developers want to do that, they are encouraged to create their
own scopes for that purpose.

In the case that symbols are not explicitly added; GTK will uses
B<GModule>’s introspective features (by opening the module undefined) to
look at the application’s symbol table. From here it tries to match
the signal function names given in the interface description with
symbols in the application.

Note that unless C<.add-callback-symbol()> is
called for all signal callbacks which are referenced by the loaded XML,
this functionality will require that B<GModule> be supported on the platform.

=begin comment

=head2 Uml Diagram
![](plantuml/….svg)

=end comment

=begin comment

=head2 Example
# Example use of module Gnome::Gtk4::BuilderCScope

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

=head2 new

=head3 :native-object

Create an object using a native object from elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object() :$native-object! )

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-buildercscope

Creates a new B<Gnome::Gtk4::BuilderCScope> object to use with future
B<Gnome::Gtk4::Builder> instances.

Calling this function is only necessary if you want to add
custom callbacks via C<.add-callback-symbol()>.

=begin code
method new-buildercscope ( --> Gnome::Gtk4::BuilderCScope \)
=end code

=begin comment

=head2 Example
# Example for new-buildercscope

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 add-callback-symbol

Adds the C<$callback-symbol> to the scope of C<$builder> under the
given C<$callback-name>.

Using this function overrides the behavior of
C<.create-closure()> in class C<Gnome::Gtk4::Builder> for any callback symbols that
are added. Using this method allows for better encapsulation as it
does not require that callback symbols be declared in the global
namespace.

=begin code
method add-callback-symbol ( Str $callback-name, GCallback &callback-symbol )
=end code

=item $callback-name; The name of the callback, as expected in the XML.
=item GCallback &callback-symbol; The callback pointer. The function must be specified with the following signature; C<:( )>.

=begin comment

=head2 Example
# Example for add-callback-symbol

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 add-callback-symbols
This function is not yet available

A convenience function to add many callbacks.

This is equivalent to calling C<.add-callback-symbol()>
for each symbol.

=begin code
method add-callback-symbols ( Str $first-callback-name, GCallback &first-callback-symbol, … )
=end code

=item $first-callback-name; The name of the callback, as expected in the XML.
=item GCallback &first-callback-symbol; The callback pointer. The function must be specified with the following signature; C<:( )>.
=item …; …. Note that each argument must be specified as a type followed by its value!

=begin comment

=head2 Example
# Example for add-callback-symbols

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 lookup-callback-symbol

Fetches a symbol previously added with
gtk_builder_cscope_add_callback_symbol().

=begin code
method lookup-callback-symbol ( Str $callback-name -->  )
=end code

=item $callback-name; The name of the callback.

Return value; The callback symbol
  in C<$builder> for C<$callback-name>. 

=begin comment

=head2 Example
# Example for lookup-callback-symbol

=end comment

=end pod

