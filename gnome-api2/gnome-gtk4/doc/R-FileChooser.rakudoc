# Package: Gtk4, C-Source: filechooser
use v6.d;

=begin pod
=head1 Gnome::Gtk4::FileChooser
=end pod

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Description

B<Gnome::Gtk4::FileChooser> is an interface that can be implemented by file
selection widgets.

In GTK, the main objects that implement this interface are
[class C<$Gtk>.FileChooserWidget] and [class C<$Gtk>.FileChooserDialog].

You do not need to write an object that implements the B<Gnome::Gtk4::FileChooser>
interface unless you are trying to adapt an existing file selector to
expose a standard programming interface.

B<Gnome::Gtk4::FileChooser> allows for shortcuts to various places in the filesystem.
In the default implementation these are displayed in the left pane. It
may be a bit confusing at first that these shortcuts come from various
sources and in various flavours, so lets explain the terminology here:

- Bookmarks: are created by the user, by dragging folders from the
  right pane to the left pane, or by using the “Add”. Bookmarks
  can be renamed and deleted by the user.

- Shortcuts: can be provided by the application. For example, a Paint
  program may want to add a shortcut for a Clipart folder. Shortcuts
  cannot be modified by the user.

- Volumes: are provided by the underlying filesystem abstraction. They are
  the “roots” of the filesystem.

=head1 File Names and Encodings

When the user is finished selecting files in a B<Gnome::Gtk4::FileChooser>, your
program can get the selected filenames as I<GFile>s.

=head1 Adding options

You can add extra widgets to a file chooser to provide options
that are not present in the default design, by using
C<.add-choice()>. Each choice has an identifier and
a user visible label; additionally, each choice can have multiple
options. If a choice has no option, it will be rendered as a
check button with the given label; if a choice has options, it will
be rendered as a combo box.
=begin comment
=head2 Uml Diagram
![](plantuml/….svg)
=end comment

=begin comment
=head2 Example
  … text …
  … example code …
=end comment

=end pod
#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 add-choice

Adds a 'choice' to the file chooser.

This is typically implemented as a combobox or, for boolean choices,
as a checkbutton. You can select a value using C<.set-choice()> before the dialog is shown,
and you can obtain the user-selected value in the I<response defined in Dialog> signal handler using C<.get-choice()>.

=begin code
method add-choice ( Str $id, Str $label, Array[Str] $options, Array[Str] $option-labels )
=end code

=item $id; id for the added choice.
=item $label; user-visible label for the added choice.
=item $options; ids for the options of the choice, or undefined for a boolean choice.
=item $option-labels; user-visible labels for the options, must be the same length as C<$options>.

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 add-filter

Adds C<$filter> to the list of filters that the user can select between.

When a filter is selected, only files that are passed by that filter are displayed.

Note that the C<$chooser> takes ownership of the filter if it is floating,
so you have to ref and sink it if you want to keep a reference.

=begin code
method add-filter ( N-Object() $filter )
=end code

=item $filter; a I<GtkFileFilter>.

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 add-shortcut-folder

Adds a folder to be displayed with the shortcut folders in a file chooser.

=begin code
method add-shortcut-folder ( N-Object() $folder --> Bool )
=end code

=item $folder; a I<GFile> for the folder to add.

Return value; %TRUE if the folder could be added successfully,
 %FALSE otherwise.. 


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-action

Gets the type of operation that the file chooser is performing.

=begin code
method get-action (--> GtkFileChooserAction )
=end code


Return value; the action that the file selector is performing.  An enumeration.


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-choice

Gets the currently selected option in the 'choice' with the given ID.

=begin code
method get-choice ( Str $id --> Str )
=end code

=item $id; the ID of the choice to get.

Return value; the ID of the currently selected option. 


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-create-folders

Gets whether file chooser will offer to create new folders.

=begin code
method get-create-folders (--> Bool )
=end code


Return value; %TRUE if the Create Folder button should be displayed.. 


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-current-folder

Gets the current folder of C<$chooser> as I<GFile>.

=begin code
method get-current-folder (--> N-Object )
=end code


Return value; the I<GFile> for the current folder.. 


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-current-name

Gets the current name in the file selector, as entered by the user.

This is meant to be used in save dialogs, to get the currently typed filename when the file itself does not exist yet.

=begin code
method get-current-name (--> Str )
=end code


Return value; The raw text from the file chooser’s “Name” entry. Free with
 g_free(). Note that this string is not a full pathname or URI; it is
 whatever the contents of the entry are. Note also that this string is
 in UTF-8 encoding, which is not necessarily the system’s encoding for
 filenames.. 


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-file

Gets the I<GFile> for the currently selected file in the file selector.

If multiple files are selected, one of the files will be returned at random.

If the file chooser is in folder mode, this function returns the selected folder.

=begin code
method get-file (--> N-Object )
=end code


Return value; a selected I<GFile>. You own the
 returned file; use g_object_unref() to release it.. 


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-files

Lists all the selected files and subfolders in the current folder of C<$chooser> as I<GFile>.

=begin code
method get-files (--> N-List )
=end code


Return value; a list model containing a I<GFile> for each
 selected file and subfolder in the current folder. Free the returned
 list with g_object_unref().. 


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-filter

Gets the current filter.

=begin code
method get-filter (--> N-Object )
=end code


Return value; the current filter. 


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-filters

Gets the current set of user-selectable filters, as a list model.

See C<.add-filter()> and C<.remove-filter() defined in FileChooser> for changing individual filters.

You should not modify the returned list model. Future changes to C<$chooser> may or may not affect the returned model.

=begin code
method get-filters (--> N-List )
=end code


Return value; a I<GListModel> containing the current set
 of user-selectable filters.. 


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-select-multiple

Gets whether multiple files can be selected in the file chooser.

=begin code
method get-select-multiple (--> Bool )
=end code


Return value; %TRUE if multiple files can be selected.. 


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-shortcut-folders

Queries the list of shortcut folders in the file chooser.

You should not modify the returned list model. Future changes to C<$chooser> may or may not affect the returned model.

=begin code
method get-shortcut-folders (--> N-List )
=end code


Return value; A list model of I<GFile>s. 


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 remove-choice

Removes a 'choice' that has been added with gtk_file_chooser_add_choice().

=begin code
method remove-choice ( Str $id )
=end code

=item $id; the ID of the choice to remove.

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 remove-filter

Removes C<$filter> from the list of filters that the user can select between.

=begin code
method remove-filter ( N-Object() $filter )
=end code

=item $filter; a I<GtkFileFilter>.

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 remove-shortcut-folder

Removes a folder from the shortcut folders in a file chooser.

=begin code
method remove-shortcut-folder ( N-Object() $folder --> Bool )
=end code

=item $folder; a I<GFile> for the folder to remove.

Return value; %TRUE if the folder could be removed successfully,
 %FALSE otherwise.. 


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-action

Sets the type of operation that the chooser is performing.

The user interface is adapted to suit the selected action.

For example, an option to create a new folder might be shown if the action is %GTK_FILE_CHOOSER_ACTION_SAVE but not if the action is %GTK_FILE_CHOOSER_ACTION_OPEN.

=begin code
method set-action ( GtkFileChooserAction $action )
=end code

=item $action; the action that the file selector is performing. An enumeration.

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-choice

Selects an option in a 'choice' that has been added with gtk_file_chooser_add_choice().

For a boolean choice, the possible options are "true" and "false".

=begin code
method set-choice ( Str $id, Str $option )
=end code

=item $id; the ID of the choice to set.
=item $option; the ID of the option to select.

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-create-folders

Sets whether file chooser will offer to create new folders.

This is only relevant if the action is not set to be
%GTK_FILE_CHOOSER_ACTION_OPEN.

=begin code
method set-create-folders ( Bool() $create-folders )
=end code

=item $create-folders; %TRUE if the Create Folder button should be displayed.

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-current-folder

Sets the current folder for C<$chooser> from a I<GFile>.

=begin code
method set-current-folder ( N-Object() $file --> Bool )
=end code

=item $file; the I<GFile> for the new folder.

Return value; %TRUE if the folder could be changed successfully, %FALSE
 otherwise.. 


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-current-name

Sets the current name in the file selector, as if entered by the user.

Note that the name passed in here is a UTF-8 string rather than a filename. This function is meant for such uses as a suggested name in a “Save As...” dialog. You can pass
“Untitled.doc” or a similarly suitable suggestion for the C<$name>.

If you want to preselect a particular existing file, you should use C<.set-file()> instead.

Please see the documentation for those functions for an example of using C<.set-current-name()> as well.

=begin code
method set-current-name ( Str $name )
=end code

=item $name; the filename to use, as a UTF-8 string.

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-file

Sets C<$file> as the current filename for the file chooser.

This includes changing to the file’s parent folder and actually selecting the file in list. If the C<$chooser> is in %GTK_FILE_CHOOSER_ACTION_SAVE mode,
the file’s base name will also appear in the dialog’s file name entry.

If the file name isn’t in the current folder of C<$chooser>, then the current folder of C<$chooser> will be changed to the folder containing C<$file>.

Note that the file must exist, or nothing will be done except for the directory change.

If you are implementing a save dialog, you should use this function if you already have a file name to which the user may save; for example,
when the user opens an existing file and then does “Save As…”. If you don’t have a file name already — for example, if the user just created a new file and is saving it for the first time, do not call this function.

Instead, use something similar to this:

=begin comment 
Following example code is in c

 static void
 prepare_file_chooser (GtkFileChooser *chooser,
 GFile *existing_file)
 {
 gboolean document_is_new = (existing_file == NULL);
 
 if (document_is_new)
 {
 GFile *default_file_for_saving = g_file_new_for_path ("./out.txt");
 // the user just created a new document
 gtk_file_chooser_set_current_folder (chooser, default_file_for_saving, NULL);
 gtk_file_chooser_set_current_name (chooser, "Untitled document");
 g_object_unref (default_file_for_saving);
 }
 else
 {
 // the user edited an existing document
 gtk_file_chooser_set_file (chooser, existing_file, NULL);
 }
 }
=end comment

=begin code
method set-file ( N-Object() $file --> Bool )
=end code

=item $file; the I<GFile> to set as current.

Return value; Not useful. 


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-filter

Sets the current filter.

Only the files that pass the filter will be displayed.
If the user-selectable list of filters is non-empty, then the filter should be one of the filters in that list.

Setting the current filter when the list of filters is empty is useful if you want to restrict the displayed set of files without letting the user change it.

=begin code
method set-filter ( N-Object() $filter )
=end code

=item $filter; a I<GtkFileFilter>.

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-select-multiple

Sets whether multiple files can be selected in the file chooser.

This is only relevant if the action is set to be
%GTK_FILE_CHOOSER_ACTION_OPEN or
%GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER.

=begin code
method set-select-multiple ( Bool() $select-multiple )
=end code

=item $select-multiple; %TRUE if multiple files can be selected..

=end pod

