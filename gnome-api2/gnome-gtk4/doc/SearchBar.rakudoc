=comment Package: Gtk4, C-Source: searchbar
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=TITLE Gnome::Gtk4::SearchBar
=head1 Description

B<Gnome::Gtk4::SearchBar> is a container made to have a search entry.

=for image :src<asset_files/images/search-bar.png> :width<30%> :class<inline>

It can also contain additional widgets, such as drop-down menus,
or buttons.  The search bar would appear when a search is started
through typing on the keyboard, or the application’s search mode
is toggled on.

For keyboard presses to start a search, the search bar must be told
of a widget to capture key events from through
C<.set-key-capture-widget()>. This widget will
typically be the top-level window, or a parent container of the
search bar. Common shortcuts such as Ctrl+F should be handled as an
application action, or through the menu items.

You will also need to tell the search bar about which entry you
are using as your search entry using C<.connect-entry()>.

=head3 Creating a search bar

The following example shows you how to create a more complex search
entry.

[A simple example](https://gitlab.gnome.org/GNOME/gtk/tree/main/examples/search-bar.c)

=head2 CSS nodes

=begin comment
searchbar
╰── revealer
    ╰── box
         ├── [child]
         ╰── [button.close]

=end comment

B<Gnome::Gtk4::SearchBar> has a main CSS node with name searchbar. It has a child
node with name revealer that contains a node with name box. The box node
contains both the CSS node of the child widget as well as an optional button
node which gets the .close style class applied.

=head2 Accessibility

B<Gnome::Gtk4::SearchBar> uses the C<GTK_ACCESSIBLE_ROLE_SEARCH> role.

=begin comment

=head2 Uml Diagram
![](plantuml/….svg)

=end comment

=begin comment

=head2 Example
# Example use of module Gnome::Gtk4::SearchBar

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

=head2 new

=head3 :native-object

Create an object using a native object from elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object() :$native-object! )

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-searchbar

Creates a B<Gnome::Gtk4::SearchBar>.

You will need to tell it about which widget is going to be your text
entry using C<.connect-entry()>.

=begin code
method new-searchbar ( --> Gnome::Gtk4::SearchBar \)
=end code

=begin comment

=head2 Example
# Example for new-searchbar

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 connect-entry

Connects the B<Gnome::Gtk4::R-Editable> widget passed as the one to be used in
this search bar.

The entry should be a descendant of the search bar. Calling this
function manually is only required if the entry isn’t the direct
child of the search bar (as in our main example).

=begin code
method connect-entry ( N-Object() $entry )
=end code

=item $entry; a B<Gnome::Gtk4::R-Editable>.

=begin comment

=head2 Example
# Example for connect-entry

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-child

Gets the child widget of C<$bar>.

=begin code
method get-child (--> N-Object )
=end code

Return value; the child widget of C<$bar>. 

=begin comment

=head2 Example
# Example for get-child

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-key-capture-widget

Gets the widget that C<$bar> is capturing key events from.

=begin code
method get-key-capture-widget (--> N-Object )
=end code

Return value; The key capture widget.. 

=begin comment

=head2 Example
# Example for get-key-capture-widget

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-search-mode

Returns whether the search mode is on or off.

=begin code
method get-search-mode (--> Bool )
=end code

Return value; whether search mode is toggled on. 

=begin comment

=head2 Example
# Example for get-search-mode

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-show-close-button

Returns whether the close button is shown.

=begin code
method get-show-close-button (--> Bool )
=end code

Return value; whether the close button is shown. 

=begin comment

=head2 Example
# Example for get-show-close-button

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-child

Sets the child widget of C<$bar>.

=begin code
method set-child ( N-Object() $child )
=end code

=item $child; the child widget.

=begin comment

=head2 Example
# Example for set-child

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-key-capture-widget

Sets C<$widget> as the widget that C<$bar> will capture key events
from.

If key events are handled by the search bar, the bar will
be shown, and the entry populated with the entered text.

Note that despite the name of this function, the events
are only 'captured' in the bubble phase, which means that
editable child widgets of C<$widget> will receive text input
before it gets captured. If that is not desired, you can
capture and forward the events yourself with
C<.forward() in class Gnome::Gtk4::EventControllerKey>.

=begin code
method set-key-capture-widget ( N-Object() $widget )
=end code

=item $widget; a B<Gnome::Gtk4::Widget>.

=begin comment

=head2 Example
# Example for set-key-capture-widget

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-search-mode

Switches the search mode on or off.

=begin code
method set-search-mode ( Bool() $search-mode )
=end code

=item $search-mode; the new state of the search mode.

=begin comment

=head2 Example
# Example for set-search-mode

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-show-close-button

Shows or hides the close button.

Applications that already have a “search” toggle button should not
show a close button in their search bar, as it duplicates the role
of the toggle button.

=begin code
method set-show-close-button ( Bool() $visible )
=end code

=item $visible; whether the close button will be shown or not.

=begin comment

=head2 Example
# Example for set-show-close-button

=end comment

=end pod

