=comment Package: Gtk4, C-Source: treestore
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=TITLE Gnome::Gtk4::TreeStore
=head1 Description

A tree-like data structure that can be used with the B<Gnome::Gtk4::TreeView>.

The B<Gnome::Gtk4::TreeStore> object is a list model for use with a B<Gnome::Gtk4::TreeView>
widget. It implements the B<Gnome::Gtk4::R-TreeModel> interface, and consequently,
can use all of the methods available there. It also implements the
B<Gnome::Gtk4::R-TreeSortable> interface so it can be sorted by the view.
Finally, it also implements the tree [drag]B<Gnome::Gtk4::R-TreeDragSource>
and [drop]B<Gnome::Gtk4::R-TreeDragDest> interfaces.

B<Gnome::Gtk4::TreeStore> is deprecated since GTK 4.10, and should not be used in newly
written code. You should use B<Gnome::Gtk4::TreeListModel> for a tree-like model
object.

=head3 GtkTreeStore as GtkBuildable

The GtkTreeStore implementation of the B<Gnome::Gtk4::R-Buildable> interface allows
to specify the model columns with a `<columns>` element that may contain
multiple `<column>` elements, each specifying one model column. The “type”
attribute specifies the data type for the column.

An example of a UI Definition fragment for a tree store:

=begin comment
gtk_tree_store_new (3, G_TYPE_INT, G_TYPE_STRING, GDK_TYPE_TEXTURE);

=end comment

=begin comment

=head2 Uml Diagram
![](plantuml/….svg)

=end comment

=begin comment

=head2 Example
# Example use of module Gnome::Gtk4::TreeStore

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

B<Note: The native version of this class is deprecated in gtk4-lib() since version 4.10>

=head2 new

=head3 :native-object

Create an object using a native object from an object of the same type found elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object() :$native-object! )

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-treestore
This function is not yet available

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Creates a new tree store.

The tree store will have C<$n-columns>, with each column using the
corresponding type passed to this function.

Note that only types derived from standard GObject fundamental types
are supported.

As an example:

=begin comment

<object class="GtkTreeStore">
  <columns>
    <column type="gchararray"/>
    <column type="gchararray"/>
    <column type="gint"/>
  </columns>
</object>

=end comment

will create a new B<Gnome::Gtk4::TreeStore> with three columns of type
B<int>, B<gchararray>, and B<Gnome::Gdk4::Texture> respectively.

=begin code
method new-treestore ( Int() $n-columns, … --> Gnome::Gtk4::TreeStore \)
=end code

=item $n-columns; number of columns in the tree store.
=item …; …. Note that each argument must be specified as a type followed by its value!

=begin comment

=head2 Example
# Example for new-treestore

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 newv
This function is not yet available

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Creates a new tree store.

This constructor is meant for language bindings.

=begin code
method newv ( Int() $n-columns, … --> Gnome::Gtk4::TreeStore \)
=end code

=item $n-columns; number of columns in the tree store.
=item types; an array of B<Gnome::GObject::TreeStore> types for the columns, from first to last. Note that each argument must be specified as a type followed by its value!

=begin comment

=head2 Example
# Example for newv

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 append

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Appends a new row to C<$tree-store>.

If C<$parent> is non-undefined, then it will append the new row after the last
child of C<$parent>, otherwise it will append a row to the top level.

The C<$iter> parameter will be changed to point to this new row. The row will
be empty after this function is called. To fill in values, you need to call
C<.set()> or C<.set-value()>.

=begin code
method append ( N-Object $iter, N-Object $parent )
=end code

=item $iter; An unset B<Gnome::Gtk4::N-TreeIter> to set to the appended row
=item $parent; A valid B<Gnome::Gtk4::N-TreeIter>

=begin comment

=head2 Example
# Example for append

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 clear

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Removes all rows from C<$tree-store>

=begin code
method clear ( )
=end code

=begin comment

=head2 Example
# Example for clear

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 insert

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Creates a new row at C<$position>.

If parent is non-undefined, then the row will be made a child of C<$parent>.
Otherwise, the row will be created at the toplevel.

If C<$position> is `-1` or is larger than the number of rows at that level,
then the new row will be inserted to the end of the list.

The C<$iter> parameter will be changed to point to this new row. The row
will be empty after this function is called. To fill in values, you
need to call C<.set()> or C<.set-value()>.

=begin code
method insert ( N-Object $iter, N-Object $parent, Int() $position )
=end code

=item $iter; An unset B<Gnome::Gtk4::N-TreeIter> to set to the new row
=item $parent; A valid B<Gnome::Gtk4::N-TreeIter>
=item $position; position to insert the new row, or -1 for last.

=begin comment

=head2 Example
# Example for insert

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 insert-after

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Inserts a new row after C<$sibling>.

If C<$sibling> is undefined, then the row will be prepended to C<$parent>’s children.

If C<$parent> and C<$sibling> are undefined, then the row will be prepended to the
toplevel.

If both C<$sibling> and C<$parent> are set, then C<$parent> must be the parent
of C<$sibling>. When C<$sibling> is set, C<$parent> is optional.

The C<$iter> parameter will be changed to point to this new row. The row will
be empty after this function is called. To fill in values, you need to call
C<.set()> or C<.set-value()>.

=begin code
method insert-after ( N-Object $iter, N-Object $parent, N-Object $sibling )
=end code

=item $iter; An unset B<Gnome::Gtk4::N-TreeIter> to set to the new row
=item $parent; A valid B<Gnome::Gtk4::N-TreeIter>
=item $sibling; A valid B<Gnome::Gtk4::N-TreeIter>

=begin comment

=head2 Example
# Example for insert-after

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 insert-before

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Inserts a new row before C<$sibling>.

If C<$sibling> is undefined, then the row will be appended to C<$parent>’s children.

If C<$parent> and C<$sibling> are undefined, then the row will be appended to the
toplevel.

If both C<$sibling> and C<$parent> are set, then C<$parent> must be the parent
of C<$sibling>. When C<$sibling> is set, C<$parent> is optional.

The C<$iter> parameter will be changed to point to this new row. The row will
be empty after this function is called. To fill in values, you need to call
C<.set()> or C<.set-value()>.

=begin code
method insert-before ( N-Object $iter, N-Object $parent, N-Object $sibling )
=end code

=item $iter; An unset B<Gnome::Gtk4::N-TreeIter> to set to the new row
=item $parent; A valid B<Gnome::Gtk4::N-TreeIter>
=item $sibling; A valid B<Gnome::Gtk4::N-TreeIter>

=begin comment

=head2 Example
# Example for insert-before

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 insert-with-values
This function is not yet available

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Creates a new row at the given C<$position>.

The C<$iter> parameter will be changed to point to this  new row.

If C<$position> is -1, or larger than the number of rows on the list, then
the new row will be appended to the list. The row will be filled with
the values given to this function.

Calling

    gtk_tree_store_insert_with_values (tree_store, iter, position, ...)

has the same effect as calling

=begin comment
<!-- language="C" -->
gtk_tree_store_insert (tree_store, iter, position);
gtk_tree_store_set (tree_store, iter, ...);

=end comment

with the different that the former will only emit a row_inserted signal,
while the latter will emit row_inserted, row_changed and if the tree store
is sorted, rows_reordered.

Since emitting the rows_reordered signal repeatedly can affect the
performance of the program, C<.insert-with-values()> should
generally be preferred when inserting rows in a sorted tree store.

=begin code
method insert-with-values ( N-Object $iter, N-Object $parent, Int() $position, … )
=end code

=item $iter; An unset B<Gnome::Gtk4::N-TreeIter> to set the new row
=item $parent; A valid B<Gnome::Gtk4::N-TreeIter>
=item $position; position to insert the new row, or -1 to append after existing rows.
=item …; …. Note that each argument must be specified as a type followed by its value!

=begin comment

=head2 Example
# Example for insert-with-values

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 insert-with-valuesv

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

A variant of C<.insert-with-values()> which takes
the columns and values as two arrays, instead of varargs.

This function is mainly intended for language bindings.

=begin code
method insert-with-valuesv ( N-Object $iter, N-Object $parent, Int() $position, Array[Int] $columns, N-Object $values, Int() $n-values )
=end code

=item $iter; An unset B<Gnome::Gtk4::N-TreeIter> to set the new row
=item $parent; A valid B<Gnome::Gtk4::N-TreeIter>
=item $position; position to insert the new row, or -1 for last.
=item $columns; an array of column numbers.
=item $values; an array of GValues
=item $n-values; the length of the C<$columns> and C<$values> arrays.

=begin comment

=head2 Example
# Example for insert-with-valuesv

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 is-ancestor

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Checks if C<$iter> is an ancestor of C<$descendant>.

=begin code
method is-ancestor ( N-Object $iter, N-Object $descendant --> Bool )
=end code

=item $iter; A valid B<Gnome::Gtk4::N-TreeIter>
=item $descendant; A valid B<Gnome::Gtk4::N-TreeIter>

Return value; true if C<$iter> is an ancestor of C<$descendant>, and false otherwise. 

=begin comment

=head2 Example
# Example for is-ancestor

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 iter-depth

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Returns the depth of the position pointed by the iterator

The depth will be 0 for anything on the root level, 1 for anything down
a level, etc.

=begin code
method iter-depth ( N-Object $iter --> Int )
=end code

=item $iter; A valid B<Gnome::Gtk4::N-TreeIter>

Return value; The depth of the position pointed by the iterator. 

=begin comment

=head2 Example
# Example for iter-depth

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 iter-is-valid

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Checks if the given iter is a valid iter for this B<Gnome::Gtk4::TreeStore>.

This function is slow. Only use it for debugging and/or testing
purposes.

=begin code
method iter-is-valid ( N-Object $iter --> Bool )
=end code

=item $iter; the iterator to check

Return value; true if the iter is valid, and false otherwise. 

=begin comment

=head2 Example
# Example for iter-is-valid

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 move-after

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Moves C<$iter> in C<$tree-store> to the position after C<$position>.
 C<$iter> and C<$position> should be in the same level.

Note that this function only works with unsorted stores.

If C<$position> is undefined, C<$iter> will be moved to the start of the level.

=begin code
method move-after ( N-Object $iter, N-Object $position )
=end code

=item $iter; A B<Gnome::Gtk4::N-TreeIter>.
=item $position; A B<Gnome::Gtk4::N-TreeIter>.

=begin comment

=head2 Example
# Example for move-after

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 move-before

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Moves C<$iter> in C<$tree-store> to the position before C<$position>.
 C<$iter> and C<$position> should be in the same level.

Note that this function only works with unsorted stores.

If C<$position> is undefined, C<$iter> will be moved to the end of the level.

=begin code
method move-before ( N-Object $iter, N-Object $position )
=end code

=item $iter; A B<Gnome::Gtk4::N-TreeIter>
=item $position; A B<Gnome::Gtk4::N-TreeIter>

=begin comment

=head2 Example
# Example for move-before

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 prepend

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Prepends a new row to C<$tree-store>.

If C<$parent> is non-undefined, then it will prepend the new row before the first
child of C<$parent>, otherwise it will prepend a row to the top level. The
B<iter> parameter will be changed to point to this new row.  The row will
be empty after this function is called. To fill in values, you need to
call C<.set()> or C<.set-value()>.

=begin code
method prepend ( N-Object $iter, N-Object $parent )
=end code

=item $iter; An unset B<Gnome::Gtk4::N-TreeIter> to set to the prepended row
=item $parent; A valid B<Gnome::Gtk4::N-TreeIter>

=begin comment

=head2 Example
# Example for prepend

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 remove

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Removes C<$iter> from C<$tree-store>.

After being removed, C<$iter> is set to the next valid row at that level, or
invalidated if it previously pointed to the last one.

=begin code
method remove ( N-Object $iter --> Bool )
=end code

=item $iter; A valid B<Gnome::Gtk4::N-TreeIter>

Return value; true if C<$iter> is still valid, and false otherwise. 

=begin comment

=head2 Example
# Example for remove

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 reorder

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Reorders the children of C<$parent> in C<$tree-store> to follow the order
indicated by C<$new-order>.

Note that this function only works with unsorted stores.

=begin code
method reorder ( N-Object $parent, Array[Int] $new-order )
=end code

=item $parent; the parent of the children to re-order
=item $new-order; an array of integers mapping the new position
  of each child to its old position before the re-ordering,
  i.e. B<new_order>[newpos] = oldpos`.

=begin comment

=head2 Example
# Example for reorder

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set
This function is not yet available

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Sets the value of one or more cells in the row referenced by C<$iter>.

The variable argument list should contain integer column numbers,
each column number followed by the value to be set.

The list is terminated by a value of `-1`.

For example, to set column 0 with type B<G_TYPE_STRING> to “Foo”, you would
write

The value will be referenced by the store if it is a B<G_TYPE_OBJECT>, and it
will be copied if it is a B<G_TYPE_STRING> or B<G_TYPE_BOXED>.

=begin code
method set ( N-Object $iter, … )
=end code

=item $iter; A valid B<Gnome::Gtk4::N-TreeIter> for the row being modified
=item …; …. Note that each argument must be specified as a type followed by its value!

=begin comment

=head2 Example
# Example for set

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-column-types
This function is not yet available

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Sets the type of the columns in a tree store.

This function is meant primarily for types that inherit from
B<Gnome::Gtk4::TreeStore>, and should only be used when constructing a new
B<Gnome::Gtk4::TreeStore>.

This functions cannot be called after a row has been added,
or a method on the B<Gnome::Gtk4::R-TreeModel> interface is called on the
tree store.

=begin code
method set-column-types ( Int() $n-columns, … )
=end code

=item $n-columns; Number of columns for the tree store.
=item types; An array of B<Gnome::GObject::TreeStore> types, one for each column. Note that each argument must be specified as a type followed by its value!

=begin comment

=head2 Example
# Example for set-column-types

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-valist
This function is not yet available

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

A version of C<.set()> using B<va_list>.

=begin code
method set-valist ( N-Object $iter, … )
=end code

=item $iter; A valid B<Gnome::Gtk4::N-TreeIter> for the row being modified
=item var-args; va_list of column/value pairs. Note that each argument must be specified as a type followed by its value!

=begin comment

=head2 Example
# Example for set-valist

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-value

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Sets the data in the cell specified by C<$iter> and C<$column>.

The type of C<$value> must be convertible to the type of the
column.

=begin code
method set-value ( N-Object $iter, Int() $column, N-Object $value )
=end code

=item $iter; A valid B<Gnome::Gtk4::N-TreeIter> for the row being modified
=item $column; column number to modify.
=item $value; new value for the cell

=begin comment

=head2 Example
# Example for set-value

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-valuesv

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

A variant of C<.set-valist()> which takes
the columns and values as two arrays, instead of using variadic
arguments.

This function is mainly intended for language bindings or in case
the number of columns to change is not known until run-time.

=begin code
method set-valuesv ( N-Object $iter, Array[Int] $columns, N-Object $values, Int() $n-values )
=end code

=item $iter; A valid B<Gnome::Gtk4::N-TreeIter> for the row being modified
=item $columns; an array of column numbers.
=item $values; an array of GValues
=item $n-values; the length of the C<$columns> and C<$values> arrays.

=begin comment

=head2 Example
# Example for set-valuesv

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 swap

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Swaps C<$a> and C<$b> in the same level of C<$tree-store>.

Note that this function only works with unsorted stores.

=begin code
method swap ( N-Object $a, N-Object $b )
=end code

=item $a; A B<Gnome::Gtk4::N-TreeIter>.
=item $b; Another B<Gnome::Gtk4::N-TreeIter>.

=begin comment

=head2 Example
# Example for swap

=end comment

=end pod

