=comment Package: Gtk4, C-Source: treestore
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Gnome::Gtk4::TreeStore

![](images/treestore.png)

=head1 Description

A tree-like data structure that can be used with the GtkTreeView

The B<Gnome::Gtk4::TreeStore> object is a list model for use with a B<Gnome::Gtk4::TreeView>
widget.  It implements the B<Gnome::Gtk4::R-TreeModel> interface, and consequently,
can use all of the methods available there.  It also implements the
B<Gnome::Gtk4::R-TreeSortable> interface so it can be sorted by the view.  Finally,
it also implements the tree drag and drop
interfaces.

=head2 GtkTreeStore as GtkBuildable

The GtkTreeStore implementation of the B<Gnome::Gtk4::R-Buildable> interface allows
to specify the model columns with a <columns> element that may contain
multiple <column> elements, each specifying one model column. The “type”
attribute specifies the data type for the column.

An example of a UI Definition fragment for a tree store:
=begin comment

<object class="GtkTreeStore">
  <columns>
    <column type="gchararray"/>
    <column type="gchararray"/>
    <column type="gint"/>
  </columns>
</object>

=end comment

=begin comment

=head2 Uml Diagram
![](plantuml/….svg)

=end comment

=begin comment

=head2 Example
# Example use of module Gnome::Gtk4::TreeStore

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

=head2 new

=head3 :native-object

Create an object using a native object from elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object :$native-object! )

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-treestore
This function is not yet available

Creates a new tree store as with C<$n-columns> columns each of the types passed
in.  Note that only types derived from standard GObject fundamental types
are supported.

As an example,

=begin comment
gtk_tree_store_new (3, G_TYPE_INT, G_TYPE_STRING, GDK_TYPE_TEXTURE);

=end comment

will create a new B<Gnome::Gtk4::TreeStore> with three columns, of type
B<int>, B<gchararray>, and B<Gnome::Gdk4::Texture> respectively.

=begin code
method new-treestore ( Int() $n-columns, … --> Gnome::Gtk4::TreeStore \)
=end code

=item $n-columns; number of columns in the tree store.
=item …; …. Note that each argument must be specified as a type followed by its value!

=begin comment

=head2 Example
# Example for new-treestore

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 newv
This function is not yet available

Non vararg creation function.  Used primarily by language bindings.

=begin code
method newv ( Int() $n-columns, … --> Gnome::Gtk4::TreeStore \)
=end code

=item $n-columns; number of columns in the tree store.
=item types; an array of B<Gnome::GObject::TreeStore> types for the columns, from first to last. Note that each argument must be specified as a type followed by its value!

=begin comment

=head2 Example
# Example for newv

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 append

Appends a new row to C<$tree-store>.  If C<$parent> is non-undefined, then it will append the
new row after the last child of C<$parent>, otherwise it will append a row to
the top level.  C<$iter> will be changed to point to this new row.  The row will
be empty after this function is called.  To fill in values, you need to call
C<.set()> or C<.set-value()>.

=begin code
method append ( CArray[N-TreeIter] $iter, CArray[N-TreeIter] $parent )
=end code

=item $iter; An unset B<Gnome::Gtk4::N-TreeIter> to set to the appended row.
=item $parent; A valid B<Gnome::Gtk4::N-TreeIter>.

=begin comment

=head2 Example
# Example for append

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 clear

Removes all rows from C<$tree-store>

=begin code
method clear ( )
=end code

=begin comment

=head2 Example
# Example for clear

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 insert

Creates a new row at C<$position>.  If parent is non-undefined, then the row will be
made a child of C<$parent>.  Otherwise, the row will be created at the toplevel.
If C<$position> is -1 or is larger than the number of rows at that level, then
the new row will be inserted to the end of the list.  C<$iter> will be changed
to point to this new row.  The row will be empty after this function is
called.  To fill in values, you need to call C<.set()> or
C<.set-value()>.

=begin code
method insert ( CArray[N-TreeIter] $iter, CArray[N-TreeIter] $parent, Int() $position )
=end code

=item $iter; An unset B<Gnome::Gtk4::N-TreeIter> to set to the new row.
=item $parent; A valid B<Gnome::Gtk4::N-TreeIter>.
=item $position; position to insert the new row, or -1 for last.

=begin comment

=head2 Example
# Example for insert

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 insert-after

Inserts a new row after C<$sibling>.  If C<$sibling> is undefined, then the row will be
prepended to C<$parent> ’s children.  If C<$parent> and C<$sibling> are undefined, then
the row will be prepended to the toplevel.  If both C<$sibling> and C<$parent> are
set, then C<$parent> must be the parent of C<$sibling>.  When C<$sibling> is set, C<$parent> is optional.
 C<$iter> will be changed to point to this new row.  The row will be empty after
this function is called.  To fill in values, you need to call
C<.set()> or C<.set-value()>.

=begin code
method insert-after ( CArray[N-TreeIter] $iter, CArray[N-TreeIter] $parent, CArray[N-TreeIter] $sibling )
=end code

=item $iter; An unset B<Gnome::Gtk4::N-TreeIter> to set to the new row.
=item $parent; A valid B<Gnome::Gtk4::N-TreeIter>.
=item $sibling; A valid B<Gnome::Gtk4::N-TreeIter>.

=begin comment

=head2 Example
# Example for insert-after

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 insert-before

Inserts a new row before C<$sibling>.  If C<$sibling> is undefined, then the row will
be appended to C<$parent> ’s children.  If C<$parent> and C<$sibling> are undefined, then
the row will be appended to the toplevel.  If both C<$sibling> and C<$parent> are
set, then C<$parent> must be the parent of C<$sibling>.  When C<$sibling> is set, C<$parent> is optional.
 C<$iter> will be changed to point to this new row.  The row will be empty after
this function is called.  To fill in values, you need to call
C<.set()> or C<.set-value()>.

=begin code
method insert-before ( CArray[N-TreeIter] $iter, CArray[N-TreeIter] $parent, CArray[N-TreeIter] $sibling )
=end code

=item $iter; An unset B<Gnome::Gtk4::N-TreeIter> to set to the new row.
=item $parent; A valid B<Gnome::Gtk4::N-TreeIter>.
=item $sibling; A valid B<Gnome::Gtk4::N-TreeIter>.

=begin comment

=head2 Example
# Example for insert-before

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 insert-with-values
This function is not yet available

Creates a new row at C<$position>. C<$iter> will be changed to point to this
new row. If C<$position> is -1, or larger than the number of rows on the list, then
the new row will be appended to the list. The row will be filled with
the values given to this function.

Calling
B<gtk_tree_store_insert_with_values (tree_store, iter, position, ...)>
has the same effect as calling
=begin comment
<!-- language="C" -->
gtk_tree_store_insert (tree_store, iter, position);
gtk_tree_store_set (tree_store, iter, ...);

=end comment

with the different that the former will only emit a row_inserted signal,
while the latter will emit row_inserted, row_changed and if the tree store
is sorted, rows_reordered.  Since emitting the rows_reordered signal
repeatedly can affect the performance of the program,
C<.insert-with-values()> should generally be preferred when
inserting rows in a sorted tree store.

=begin code
method insert-with-values ( CArray[N-TreeIter] $iter, CArray[N-TreeIter] $parent, Int() $position, … )
=end code

=item $iter; An unset B<Gnome::Gtk4::N-TreeIter> to set the new row.
=item $parent; A valid B<Gnome::Gtk4::N-TreeIter>.
=item $position; position to insert the new row, or -1 to append after existing rows.
=item …; …. Note that each argument must be specified as a type followed by its value!

=begin comment

=head2 Example
# Example for insert-with-values

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 insert-with-valuesv

A variant of C<.insert-with-values()> which takes
the columns and values as two arrays, instead of varargs.  This
function is mainly intended for language bindings.

=begin code
method insert-with-valuesv ( CArray[N-TreeIter] $iter, CArray[N-TreeIter] $parent, Int() $position, Array[Int] $columns, CArray[N-Value] $values, Int() $n-values )
=end code

=item $iter; An unset B<Gnome::Gtk4::N-TreeIter> to set the new row.
=item $parent; A valid B<Gnome::Gtk4::N-TreeIter>.
=item $position; position to insert the new row, or -1 for last.
=item $columns; an array of column numbers.
=item $values; an array of GValues.
=item $n-values; the length of the C<$columns> and C<$values> arrays.

=begin comment

=head2 Example
# Example for insert-with-valuesv

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 is-ancestor

Returns C<True> if C<$iter> is an ancestor of C<$descendant>.  That is, C<$iter> is the
parent (or grandparent or great-grandparent) of C<$descendant>.

=begin code
method is-ancestor ( CArray[N-TreeIter] $iter, CArray[N-TreeIter] $descendant --> Bool )
=end code

=item $iter; A valid B<Gnome::Gtk4::N-TreeIter>.
=item $descendant; A valid B<Gnome::Gtk4::N-TreeIter>.

Return value; C<True>, if C<$iter> is an ancestor of C<$descendant>. 

=begin comment

=head2 Example
# Example for is-ancestor

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 iter-depth

Returns the depth of C<$iter>.  This will be 0 for anything on the root level, 1
for anything down a level, etc.

=begin code
method iter-depth ( CArray[N-TreeIter] $iter --> Int )
=end code

=item $iter; A valid B<Gnome::Gtk4::N-TreeIter>.

Return value; The depth of C<$iter>. 

=begin comment

=head2 Example
# Example for iter-depth

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 iter-is-valid

Checks if the given iter is a valid iter for this B<Gnome::Gtk4::TreeStore>.

This function is slow. Only use it for debugging and/or testing
purposes.

=begin code
method iter-is-valid ( CArray[N-TreeIter] $iter --> Bool )
=end code

=item $iter; the iterator to check.

Return value; C<True> if the iter is valid, C<False> if the iter is invalid.. 

=begin comment

=head2 Example
# Example for iter-is-valid

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 move-after

Moves C<$iter> in C<$tree-store> to the position after C<$position>. C<$iter> and C<$position> should be in the same level. Note that this function only
works with unsorted stores. If C<$position> is undefined, C<$iter> will be moved
to the start of the level.

=begin code
method move-after ( CArray[N-TreeIter] $iter, CArray[N-TreeIter] $position )
=end code

=item $iter; A B<Gnome::Gtk4::N-TreeIter>..
=item $position; A B<Gnome::Gtk4::N-TreeIter>..

=begin comment

=head2 Example
# Example for move-after

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 move-before

Moves C<$iter> in C<$tree-store> to the position before C<$position>. C<$iter> and C<$position> should be in the same level. Note that this function only
works with unsorted stores. If C<$position> is undefined, C<$iter> will be
moved to the end of the level.

=begin code
method move-before ( CArray[N-TreeIter] $iter, CArray[N-TreeIter] $position )
=end code

=item $iter; A B<Gnome::Gtk4::N-TreeIter>.
=item $position; A B<Gnome::Gtk4::N-TreeIter>.

=begin comment

=head2 Example
# Example for move-before

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 prepend

Prepends a new row to C<$tree-store>.  If C<$parent> is non-undefined, then it will prepend
the new row before the first child of C<$parent>, otherwise it will prepend a row
to the top level.  C<$iter> will be changed to point to this new row.  The row
will be empty after this function is called.  To fill in values, you need to
call C<.set()> or C<.set-value()>.

=begin code
method prepend ( CArray[N-TreeIter] $iter, CArray[N-TreeIter] $parent )
=end code

=item $iter; An unset B<Gnome::Gtk4::N-TreeIter> to set to the prepended row.
=item $parent; A valid B<Gnome::Gtk4::N-TreeIter>.

=begin comment

=head2 Example
# Example for prepend

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 remove

Removes C<$iter> from C<$tree-store>.  After being removed, C<$iter> is set to the
next valid row at that level, or invalidated if it previously pointed to the
last one.

=begin code
method remove ( CArray[N-TreeIter] $iter --> Bool )
=end code

=item $iter; A valid B<Gnome::Gtk4::N-TreeIter>.

Return value; C<True> if C<$iter> is still valid, C<False> if not.. 

=begin comment

=head2 Example
# Example for remove

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 reorder

Reorders the children of C<$parent> in C<$tree-store> to follow the order
indicated by C<$new-order>. Note that this function only works with
unsorted stores.

=begin code
method reorder ( CArray[N-TreeIter] $parent, Array[Int] $new-order )
=end code

=item $parent; A B<Gnome::Gtk4::N-TreeIter>.
=item $new-order; an array of integers mapping the new position of each child
  to its old position before the re-ordering,
  i.e. C<$new-orderB><[newpos] = oldpos>..

=begin comment

=head2 Example
# Example for reorder

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set
This function is not yet available

Sets the value of one or more cells in the row referenced by C<$iter>.
The variable argument list should contain integer column numbers,
each column number followed by the value to be set.
The list is terminated by a -1. For example, to set column 0 with type
C<G_TYPE_STRING> to “Foo”, you would write
B<gtk_tree_store_set (store, iter, 0, "Foo", -1)>.

The value will be referenced by the store if it is a C<G_TYPE_OBJECT>, and it
will be copied if it is a C<G_TYPE_STRING> or C<G_TYPE_BOXED>.

=begin code
method set ( CArray[N-TreeIter] $iter, … )
=end code

=item $iter; A valid B<Gnome::Gtk4::N-TreeIter> for the row being modified.
=item …; …. Note that each argument must be specified as a type followed by its value!

=begin comment

=head2 Example
# Example for set

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-column-types
This function is not yet available

This function is meant primarily for B<GObjects> that inherit from
B<Gnome::Gtk4::TreeStore>, and should only be used when constructing a new
B<Gnome::Gtk4::TreeStore>.  It will not function after a row has been added,
or a method on the B<Gnome::Gtk4::R-TreeModel> interface is called.

=begin code
method set-column-types ( Int() $n-columns, … )
=end code

=item $n-columns; Number of columns for the tree store.
=item types; An array of B<Gnome::GObject::TreeStore> types, one for each column. Note that each argument must be specified as a type followed by its value!

=begin comment

=head2 Example
# Example for set-column-types

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-valist
This function is not yet available

See C<.set()>; this version takes a va_list for
use by language bindings.

=begin code
method set-valist ( CArray[N-TreeIter] $iter, … )
=end code

=item $iter; A valid B<Gnome::Gtk4::N-TreeIter> for the row being modified.
=item var-args; va_list of column/value pairs. Note that each argument must be specified as a type followed by its value!

=begin comment

=head2 Example
# Example for set-valist

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-value

Sets the data in the cell specified by C<$iter> and C<$column>.
The type of C<$value> must be convertible to the type of the
column.

=begin code
method set-value ( CArray[N-TreeIter] $iter, Int() $column, CArray[N-Value] $value )
=end code

=item $iter; A valid B<Gnome::Gtk4::N-TreeIter> for the row being modified.
=item $column; column number to modify.
=item $value; new value for the cell.

=begin comment

=head2 Example
# Example for set-value

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-valuesv

A variant of C<.set-valist()> which takes
the columns and values as two arrays, instead of varargs.  This
function is mainly intended for language bindings or in case
the number of columns to change is not known until run-time.

=begin code
method set-valuesv ( CArray[N-TreeIter] $iter, Array[Int] $columns, CArray[N-Value] $values, Int() $n-values )
=end code

=item $iter; A valid B<Gnome::Gtk4::N-TreeIter> for the row being modified.
=item $columns; an array of column numbers.
=item $values; an array of GValues.
=item $n-values; the length of the C<$columns> and C<$values> arrays.

=begin comment

=head2 Example
# Example for set-valuesv

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 swap

Swaps C<$a> and C<$b> in the same level of C<$tree-store>. Note that this function
only works with unsorted stores.

=begin code
method swap ( CArray[N-TreeIter] $a, CArray[N-TreeIter] $b )
=end code

=item $a; A B<Gnome::Gtk4::N-TreeIter>..
=item $b; Another B<Gnome::Gtk4::N-TreeIter>..

=begin comment

=head2 Example
# Example for swap

=end comment

=end pod

