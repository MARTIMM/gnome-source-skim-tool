=comment Package: Gtk4, C-Source: editable
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Gnome::Gtk4::R-Editable

![](images/editable.png)

=head1 Description

B<Gnome::Gtk4::R-Editable> is an interface for text editing widgets.

Typical examples of editable widgets are B<Gnome::Gtk4::Entry> and
B<Gnome::Gtk4::SpinButton>. It contains functions for generically manipulating
an editable widget, a large number of action signals used for key bindings,
and several signals that an application can connect to modify the behavior
of a widget.

As an example of the latter usage, by connecting the following handler to
I<insert-text>, an application can convert all entry
into a widget into uppercase.

=head3 Forcing entry to uppercase.

=begin comment
#include <ctype.h>

void
insert_text_handler (GtkEditable *editable,
                     const char  *text,
                     int          length,
                     int         *position,
                     gpointer     data)
{
  char *result = g_utf8_strup (text, length);

  g_signal_handlers_block_by_func (editable,
                               (gpointer) insert_text_handler, data);
  gtk_editable_insert_text (editable, result, length, position);
  g_signal_handlers_unblock_by_func (editable,
                                     (gpointer) insert_text_handler, data);

  g_signal_stop_emission_by_name (editable, "insert_text");

  g_free (result);
}

=end comment

=head3 Implementing GtkEditable

The most likely scenario for implementing B<Gnome::Gtk4::R-Editable> on your own widget
is that you will embed a B<Gnome::Gtk4::Text> inside a complex widget, and want to
delegate the editable functionality to that text widget. B<Gnome::Gtk4::R-Editable>
provides some utility functions to make this easy.

In your class_init function, call C<.Editable.install-properties()>,
passing the first available property ID:

=begin comment
static void
my_class_init (MyClass *class)
{
  ...
  g_object_class_install_properties (object_class, NUM_PROPERTIES, props);
  gtk_editable_install_properties (object_clas, NUM_PROPERTIES);
  ...
}

=end comment

In your interface_init function for the B<Gnome::Gtk4::R-Editable> interface, provide
an implementation for the get_delegate vfunc that returns your text widget:

=begin comment
GtkEditable *
get_editable_delegate (GtkEditable *editable)
{
  return GTK_EDITABLE (MY_WIDGET (editable)->text_widget);
}

static void
my_editable_init (GtkEditableInterface *iface)
{
  iface->get_delegate = get_editable_delegate;
}

=end comment

You don't need to provide any other vfuncs. The default implementations
work by forwarding to the delegate that the GtkEditableInterface.get_delegate()
vfunc returns.

In your instance_init function, create your text widget, and then call
C<.init-delegate()>:

=begin comment
static void
my_widget_init (MyWidget *self)
{
  ...
  self->text_widget = gtk_text_new ();
  gtk_editable_init_delegate (GTK_EDITABLE (self));
  ...
}

=end comment

In your dispose function, call C<.finish-delegate()> before
destroying your text widget:

=begin comment
static void
my_widget_dispose (GObject *object)
{
  ...
  gtk_editable_finish_delegate (GTK_EDITABLE (self));
  g_clear_pointer (&self->text_widget, gtk_widget_unparent);
  ...
}

=end comment

Finally, use C<.Editable.delegate-set-property()> in your B<set_property>
function (and similar for B<get_property>), to set the editable properties:

=begin comment
  ...
  if (gtk_editable_delegate_set_property (object, prop_id, value, pspec))
    return;

  switch (prop_id)
  ...

=end comment

It is important to note that if you create a B<Gnome::Gtk4::R-Editable> that uses
a delegate, the low level I<insert-text> and
I<delete-text> signals will be propagated from the
"wrapper" editable to the delegate, but they will not be propagated from
the delegate to the "wrapper" editable, as they would cause an infinite
recursion. If you wish to connect to the I<insert-text>
and I<delete-text> signals, you will need to connect
to them on the delegate obtained via C<.get-delegate()>.

=begin comment

=head2 Uml Diagram
![](plantuml/….svg)

=end comment

=begin comment

=head2 Example
# Example use of module Gnome::Gtk4::Editable

=end comment

=end pod
#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 delete-selection

Deletes the currently selected text of the editable.

This call doesn’t do anything if there is no selected text.

=begin code
method delete-selection ( )
=end code

=begin comment

=head2 Example
# Example for delete-selection

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 delete-text

Deletes a sequence of characters.

The characters that are deleted are those characters at positions
from C<$start-pos> up to, but not including C<$end-pos>. If C<$end-pos> is
negative, then the characters deleted are those from C<$start-pos> to
the end of the text.

Note that the positions are specified in characters, not bytes.

=begin code
method delete-text ( Int() $start-pos, Int() $end-pos )
=end code

=item $start-pos; start position.
=item $end-pos; end position.

=begin comment

=head2 Example
# Example for delete-text

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 finish-delegate

Undoes the setup done by C<.init-delegate()>.

This is a helper function that should be called from dispose,
before removing the delegate object.

=begin code
method finish-delegate ( )
=end code

=begin comment

=head2 Example
# Example for finish-delegate

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-alignment

Gets the alignment of the editable.

=begin code
method get-alignment (--> Num )
=end code

Return value; the alignment. 

=begin comment

=head2 Example
# Example for get-alignment

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-chars

Retrieves a sequence of characters.

The characters that are retrieved are those characters at positions
from C<$start-pos> up to, but not including C<$end-pos>. If C<$end-pos> is negative,
then the characters retrieved are those characters from C<$start-pos> to
the end of the text.

Note that positions are specified in characters, not bytes.

=begin code
method get-chars ( Int() $start-pos, Int() $end-pos --> Str )
=end code

=item $start-pos; start of text.
=item $end-pos; end of text.

Return value; a pointer to the contents of the widget as a
  string. This string is allocated by the B<Gnome::Gtk4::R-Editable> implementation
  and should be freed by the caller.. 

=begin comment

=head2 Example
# Example for get-chars

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-delegate

Gets the B<Gnome::Gtk4::R-Editable> that C<$editable> is delegating its
implementation to.

Typically, the delegate is a B<Gnome::Gtk4::Text> widget.

=begin code
method get-delegate (--> N-Object )
=end code

Return value; the delegate B<Gnome::Gtk4::R-Editable>. 

=begin comment

=head2 Example
# Example for get-delegate

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-editable

Retrieves whether C<$editable> is editable.

=begin code
method get-editable (--> Bool )
=end code

Return value; C<True> if C<$editable> is editable.. 

=begin comment

=head2 Example
# Example for get-editable

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-enable-undo

Gets if undo/redo actions are enabled for C<$editable>

=begin code
method get-enable-undo (--> Bool )
=end code

Return value; C<True> if undo is enabled. 

=begin comment

=head2 Example
# Example for get-enable-undo

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-max-width-chars

Retrieves the desired maximum width of C<$editable>, in characters.

=begin code
method get-max-width-chars (--> Int )
=end code

Return value; the maximum width of the entry, in characters. 

=begin comment

=head2 Example
# Example for get-max-width-chars

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-position

Retrieves the current position of the cursor relative
to the start of the content of the editable.

Note that this position is in characters, not in bytes.

=begin code
method get-position (--> Int )
=end code

Return value; the cursor position. 

=begin comment

=head2 Example
# Example for get-position

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-selection-bounds

Retrieves the selection bound of the editable.
 C<$start-pos> will be filled with the start of the selection and C<$end-pos> with end. If no text was selected both will be identical
and C<False> will be returned.

Note that positions are specified in characters, not bytes.

=begin code
method get-selection-bounds ( Array[Int] $start-pos, Array[Int] $end-pos --> Bool )
=end code

=item $start-pos; (transfer ownership: full) location to store the starting position.
=item $end-pos; (transfer ownership: full) location to store the end position.

Return value; C<True> if there is a non-empty selection, C<False> otherwise. 

=begin comment

=head2 Example
# Example for get-selection-bounds

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-text

Retrieves the contents of C<$editable>.

The returned string is owned by GTK and must not be modified or freed.

=begin code
method get-text (--> Str )
=end code

Return value; a pointer to the contents of the editable. 

=begin comment

=head2 Example
# Example for get-text

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-width-chars

Gets the number of characters of space reserved
for the contents of the editable.

=begin code
method get-width-chars (--> Int )
=end code

Return value; number of chars to request space for, or negative if unset. 

=begin comment

=head2 Example
# Example for get-width-chars

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 init-delegate

Sets up a delegate for B<Gnome::Gtk4::R-Editable>.

This is assuming that the get_delegate vfunc in the B<Gnome::Gtk4::R-Editable>
interface has been set up for the C<$editable>'s type.

This is a helper function that should be called in instance init,
after creating the delegate object.

=begin code
method init-delegate ( )
=end code

=begin comment

=head2 Example
# Example for init-delegate

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 insert-text

Inserts C<$length> bytes of C<$text> into the contents of the
widget, at position C<$position>.

Note that the position is in characters, not in bytes.
The function updates C<$position> to point after the newly
inserted text.

=begin code
method insert-text ( Str $text, Int() $length, Array[Int] $position )
=end code

=item $text; the text to append.
=item $length; the length of the text in bytes, or -1.
=item $position; (transfer ownership: full) location of the position text will be inserted at.

=begin comment

=head2 Example
# Example for insert-text

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 select-region

Selects a region of text.

The characters that are selected are those characters at positions
from C<$start-pos> up to, but not including C<$end-pos>. If C<$end-pos> is
negative, then the characters selected are those characters from C<$start-pos> to  the end of the text.

Note that positions are specified in characters, not bytes.

=begin code
method select-region ( Int() $start-pos, Int() $end-pos )
=end code

=item $start-pos; start of region.
=item $end-pos; end of region.

=begin comment

=head2 Example
# Example for select-region

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-alignment

Sets the alignment for the contents of the editable.

This controls the horizontal positioning of the contents when
the displayed text is shorter than the width of the editable.

=begin code
method set-alignment ( Num() $xalign )
=end code

=item $xalign; The horizontal alignment, from 0 (left) to 1 (right).
  Reversed for RTL layouts.

=begin comment

=head2 Example
# Example for set-alignment

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-editable

Determines if the user can edit the text in the editable widget.

=begin code
method set-editable ( Bool() $is-editable )
=end code

=item $is-editable; C<True> if the user is allowed to edit the text
  in the widget.

=begin comment

=head2 Example
# Example for set-editable

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-enable-undo

If enabled, changes to C<$editable> will be saved for undo/redo
actions.

This results in an additional copy of text changes and are not
stored in secure memory. As such, undo is forcefully disabled
when I<visibility defined in Gnome::Gtk4::Text> is set to C<False>.

=begin code
method set-enable-undo ( Bool() $enable-undo )
=end code

=item $enable-undo; if undo/redo should be enabled.

=begin comment

=head2 Example
# Example for set-enable-undo

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-max-width-chars

Sets the desired maximum width in characters of C<$editable>.

=begin code
method set-max-width-chars ( Int() $n-chars )
=end code

=item $n-chars; the new desired maximum width, in characters.

=begin comment

=head2 Example
# Example for set-max-width-chars

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-position

Sets the cursor position in the editable to the given value.

The cursor is displayed before the character with the given (base 0)
index in the contents of the editable. The value must be less than
or equal to the number of characters in the editable. A value of -1
indicates that the position should be set after the last character
of the editable. Note that C<$position> is in characters, not in bytes.

=begin code
method set-position ( Int() $position )
=end code

=item $position; the position of the cursor.

=begin comment

=head2 Example
# Example for set-position

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-text

Sets the text in the editable to the given value.

This is replacing the current contents.

=begin code
method set-text ( Str $text )
=end code

=item $text; the text to set.

=begin comment

=head2 Example
# Example for set-text

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-width-chars

Changes the size request of the editable to be about the
right size for C<$n-chars> characters.

Note that it changes the size request, the size can still
be affected by how you pack the widget into containers.
If C<$n-chars> is -1, the size reverts to the default size.

=begin code
method set-width-chars ( Int() $n-chars )
=end code

=item $n-chars; width in chars.

=begin comment

=head2 Example
# Example for set-width-chars

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Functions]------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Functions
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 delegate-get-property

Gets a property of the B<Gnome::Gtk4::R-Editable> delegate for C<$object>.

This is helper function that should be called in the B<get_property>
function of your B<Gnome::Gtk4::R-Editable> implementation, before handling your
own properties.

=begin code
method delegate-get-property ( N-Object() $object, UInt() $prop-id, CArray[N-Value] $value, N-Object() $pspec --> Bool )
=end code

=item $object; a B<Gnome::GObject::Object>.
=item $prop-id; a property ID.
=item $value; value to set.
=item $pspec; the B<Gnome::GObject::ParamSpec> for the property.

Return value; C<True> if the property was found. 

=begin comment

=head2 Example
# Example for delegate-get-property

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 delegate-set-property

Sets a property on the B<Gnome::Gtk4::R-Editable> delegate for C<$object>.

This is a helper function that should be called in the B<set_property>
function of your B<Gnome::Gtk4::R-Editable> implementation, before handling your
own properties.

=begin code
method delegate-set-property ( N-Object() $object, UInt() $prop-id, CArray[N-Value] $value, N-Object() $pspec --> Bool )
=end code

=item $object; a B<Gnome::GObject::Object>.
=item $prop-id; a property ID.
=item $value; value to set.
=item $pspec; the B<Gnome::GObject::ParamSpec> for the property.

Return value; C<True> if the property was found. 

=begin comment

=head2 Example
# Example for delegate-set-property

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 install-properties
This function is not yet available

Overrides the B<Gnome::Gtk4::R-Editable> properties for C<$class>.

This is a helper function that should be called in class_init,
after installing your own properties.

Note that your class must have "text", "cursor-position",
"selection-bound", "editable", "width-chars", "max-width-chars",
"xalign" and "enable-undo" properties for this function to work.

To handle the properties in your set_property and get_property
functions, you can either use C<.Editable.delegate-set-property()>
and C<.Editable.delegate-get-property()> (if you are using
a delegate), or remember the C<$first-prop> offset and add it to the
values in the  C<enumeration EditableProperties from Gnome::Gtk4::T-editable>  enumeration to get the
property IDs for these properties.

=begin code
method install-properties ( …, UInt() $first-prop --> UInt )
=end code

=item object-class; a B<GObjectClass>. Note that each argument must be specified as a type followed by its value!
=item $first-prop; property ID to use for the first property.

Return value; the number of properties that were installed. 

=begin comment

=head2 Example
# Example for install-properties

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Signal Documentation]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Signals

=comment -----------------------------------------------------------------------
=head3 changed

Emitted at the end of a single user-visible operation on the
contents.

E.g., a paste operation that replaces the contents of the
selection will cause only one signal emission (even though it
is implemented by first deleting the selection, then inserting
the new content, and may cause multiple I<notify>::text signals
to be emitted).

=begin code
method handler (
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gtk4::Editable :$_widget,
  *C<user>-options
)
=end code

=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gtk4::Editable> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

=begin comment

=head2 Example
# Example for signal changed

=end comment

=comment -----------------------------------------------------------------------
=head3 delete-text

Emitted when text is deleted from the widget by the user.

The default handler for this signal will normally be responsible for
deleting the text, so by connecting to this signal and then stopping
the signal with g_signal_stop_emission(), it is possible to modify the
range of deleted text, or prevent it from being deleted entirely.

The C<$start-pos> and C<$end-pos> parameters are interpreted as for
C<.delete-text()>.

=begin code
method handler (
  gint $start-pos,
  gint $end-pos,
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gtk4::Editable :$_widget,
  *C<user>-options
)
=end code

=item $start-pos; the starting position.
=item $end-pos; the end position.
=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gtk4::Editable> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

=begin comment

=head2 Example
# Example for signal delete-text

=end comment

=comment -----------------------------------------------------------------------
=head3 insert-text

Emitted when text is inserted into the widget by the user.

The default handler for this signal will normally be responsible
for inserting the text, so by connecting to this signal and then
stopping the signal with g_signal_stop_emission(), it is possible
to modify the inserted text, or prevent it from being inserted entirely.

=begin code
method handler (
  Str $text,
  gint $length,
  gpointer $position,
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gtk4::Editable :$_widget,
  *C<user>-options
)
=end code

=item $text; the new text to insert.
=item $length; the length of the new text, in bytes,
    or -1 if new_text is nul-terminated.
=item $position; (transfer ownership: full)the position, in characters,
    at which to insert the new text. this is an in-out
    parameter.  After the signal emission is finished, it
    should point after the newly inserted text..
=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gtk4::Editable> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

=begin comment

=head2 Example
# Example for signal insert-text

=end comment

=end pod

