=comment Package: Gtk4, C-Source: constraintlayout
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=TITLE Gnome::Gtk4::ConstraintLayout
=head1 Description

A layout manager using constraints to describe relations between widgets.

B<Gnome::Gtk4::ConstraintLayout> is a layout manager that uses relations between
widget attributes, expressed via B<Gnome::Gtk4::Constraint> instances, to
measure and allocate widgets.

=head4 How do constraints work

Constraints are objects defining the relationship between attributes
of a widget; you can read the description of the B<Gnome::Gtk4::Constraint>
class to have a more in depth definition.

By taking multiple constraints and applying them to the children of
a widget using B<Gnome::Gtk4::ConstraintLayout>, it's possible to describe
complex layout policies; each constraint applied to a child or to the parent
widgets contributes to the full description of the layout, in terms of
parameters for resolving the value of each attribute.

It is important to note that a layout is defined by the totality of
constraints; removing a child, or a constraint, from an existing layout
without changing the remaining constraints may result in an unstable
or unsolvable layout.

Constraints have an implicit "reading order"; you should start describing
each edge of each child, as well as their relationship with the parent
container, from the top left (or top right, in RTL languages), horizontally
first, and then vertically.

A constraint-based layout with too few constraints can become "unstable",
that is: have more than one solution. The behavior of an unstable layout
is undefined.

A constraint-based layout with conflicting constraints may be unsolvable,
and lead to an unstable layout. You can use the I<strength defined in Gnome::Gtk4::Constraint>
property of B<Gnome::Gtk4::Constraint> to "nudge" the layout towards a solution.

=head4 GtkConstraintLayout as GtkBuildable

B<Gnome::Gtk4::ConstraintLayout> implements the B<Gnome::Gtk4::R-Buildable> interface and
has a custom "constraints" element which allows describing constraints in
a B<Gnome::Gtk4::Builder> UI file.

An example of a UI definition fragment specifying a constraint:

=begin comment
  <object class="GtkConstraintLayout">
    <constraints>
      <constraint target="button" target-attribute="start"
                  relation="eq"
                  source="super" source-attribute="start"
                  constant="12"
                  strength="required" />
      <constraint target="button" target-attribute="width"
                  relation="ge"
                  constant="250"
                  strength="strong" />
    </constraints>
  </object>

=end comment

The definition above will add two constraints to the GtkConstraintLayout:

=item a required constraint between the leading edge of "button" and
   the leading edge of the widget using the constraint layout, plus
   12 pixels
=item a strong, constant constraint making the width of "button" greater
   than, or equal to 250 pixels

The "target" and "target-attribute" attributes are required.

The "source" and "source-attribute" attributes of the "constraint"
element are optional; if they are not specified, the constraint is
assumed to be a constant.

The "relation" attribute is optional; if not specified, the constraint
is assumed to be an equality.

The "strength" attribute is optional; if not specified, the constraint
is assumed to be required.

The "source" and "target" attributes can be set to "super" to indicate
that the constraint target is the widget using the GtkConstraintLayout.

There can be "constant" and "multiplier" attributes.

Additionally, the "constraints" element can also contain a description
of the B<GtkConstraintGuides> used by the layout:

=begin comment
  <constraints>
    <guide min-width="100" max-width="500" name="hspace"/>
    <guide min-height="64" nat-height="128" name="vspace" strength="strong"/>
  </constraints>

=end comment

The "guide" element has the following optional attributes:

=item "min-width", "nat-width", and "max-width", describe the minimum,
    natural, and maximum width of the guide, respectively
=item "min-height", "nat-height", and "max-height", describe the minimum,
    natural, and maximum height of the guide, respectively
=item "strength" describes the strength of the constraint on the natural
    size of the guide; if not specified, the constraint is assumed to
    have a medium strength
=item "name" describes a name for the guide, useful when debugging

=head4 Using the Visual Format Language

Complex constraints can be described using a compact syntax called VFL,
or *Visual Format Language*.

The Visual Format Language describes all the constraints on a row or
column, typically starting from the leading edge towards the trailing
one. Each element of the layout is composed by "views", which identify
a B<Gnome::Gtk4::R-ConstraintTarget>.

For instance:

=begin comment
  [button]-[textField]

=end comment

Describes a constraint that binds the trailing edge of "button" to the
leading edge of "textField", leaving a default space between the two.

Using VFL is also possible to specify predicates that describe constraints
on attributes like width and height:

=begin comment
  // Width must be greater than, or equal to 50
  [button(>=50)]

  // Width of button1 must be equal to width of button2
  [button1(==button2)]

=end comment

The default orientation for a VFL description is horizontal, unless
otherwise specified:

=begin comment
  // horizontal orientation, default attribute: width
  H:[button(>=150)]

  // vertical orientation, default attribute: height
  V:[button1(==button2)]

=end comment

It's also possible to specify multiple predicates, as well as their
strength:

=begin comment
  // minimum width of button must be 150
  // natural width of button can be 250
  [button(>=150@required, ==250@medium)]

=end comment

Finally, it's also possible to use simple arithmetic operators:

=begin comment
  // width of button1 must be equal to width of button2
  // divided by 2 plus 12
  [button1(button2 / 2 + 12)]

=end comment

=begin comment

=head2 Uml Diagram
![](plantuml/….svg)

=end comment

=begin comment

=head2 Example
# Example use of module Gnome::Gtk4::ConstraintLayout

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

=head2 new

=head3 :native-object

Create an object using a native object from elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object() :$native-object! )

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-constraintlayout

Creates a new B<Gnome::Gtk4::ConstraintLayout> layout manager.

=begin code
method new-constraintlayout ( --> Gnome::Gtk4::ConstraintLayout \)
=end code

=begin comment

=head2 Example
# Example for new-constraintlayout

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 add-constraint

Adds a constraint to the layout manager.

The I<source defined in Gnome::Gtk4::Constraint> and I<target defined in Gnome::Gtk4::Constraint>
properties of B<constraint> can be:

=item set to undefined to indicate that the constraint refers to the
   widget using B<layout>
=item set to the B<Gnome::Gtk4::Widget> using B<layout>
=item set to a child of the B<Gnome::Gtk4::Widget> using B<layout>
=item set to a B<Gnome::Gtk4::ConstraintGuide> that is part of B<layout>

The C<$layout> acquires the ownership of C<$constraint> after calling
this function.

=begin code
method add-constraint ( Array[Int] $constraint )
=end code

=item $constraint; (transfer ownership: full) a B<Gnome::Gtk4::Constraint>.

=begin comment

=head2 Example
# Example for add-constraint

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 add-constraints-from-description
This function is not yet available

Creates a list of constraints from a VFL description.

This function is a convenience wrapper around
C<.add-constraints-from-descriptionv()>, using
variadic arguments to populate the view/target map.

=begin code
method add-constraints-from-description ( Array[Str] $lines, Int() $n-lines, Int() $hspacing, Int() $vspacing, N-Object $error, Str $first-view, … --> N-List )
=end code

=item $lines; an array of Visual Format Language lines
  defining a set of constraints.
=item $n-lines; the number of lines.
=item $hspacing; default horizontal spacing value, or -1 for the fallback value.
=item $vspacing; default vertical spacing value, or -1 for the fallback value.
=item $error; return location for a B<Gnome::Glib::N-Error>
=item $first-view; the name of a view in the VFL description, followed by the
  B<Gnome::Gtk4::R-ConstraintTarget> to which it maps.
=item …; …. Note that each argument must be specified as a type followed by its value!

Return value; the list of
  B<Gnome::Gtk4::Constraint>s that were added to the layout. 

=begin comment

=head2 Example
# Example for add-constraints-from-description

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 add-constraints-from-descriptionv

Creates a list of constraints from a VFL description.

The Visual Format Language, VFL, is based on Apple's AutoLayout [VFL](https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/VisualFormatLanguage.html).

The B<views> dictionary is used to match B<Gnome::Gtk4::R-ConstraintTarget>
instances to the symbolic view name inside the VFL.

The VFL grammar is:

=begin comment
       <visualFormatString> = (<orientation>)?
                              (<superview><connection>)?
                              <view>(<connection><view>)*
                              (<connection><superview>)?
              <orientation> = 'H' | 'V'
                <superview> = '|'
               <connection> = '' | '-' <predicateList> '-' | '-'
            <predicateList> = <simplePredicate> | <predicateListWithParens>
          <simplePredicate> = <metricName> | <positiveNumber>
  <predicateListWithParens> = '(' <predicate> (',' <predicate>)* ')'
                <predicate> = (<relation>)? <objectOfPredicate> (<operatorList>)? ('@' <priority>)?
                 <relation> = '==' | '<=' | '>='
        <objectOfPredicate> = <constant> | <viewName> | ('.' <attributeName>)?
                 <priority> = <positiveNumber> | 'required' | 'strong' | 'medium' | 'weak'
                 <constant> = <number>
             <operatorList> = (<multiplyOperator>)? (<addOperator>)?
         <multiplyOperator> = [ '*' | '/' ] <positiveNumber>
              <addOperator> = [ '+' | '-' ] <positiveNumber>
                 <viewName> = [A-Za-z_]([A-Za-z0-9_]*) // A C identifier
               <metricName> = [A-Za-z_]([A-Za-z0-9_]*) // A C identifier
            <attributeName> = 'top' | 'bottom' | 'left' | 'right' | 'width' | 'height' |
                              'start' | 'end' | 'centerX' | 'centerY' | 'baseline'
           <positiveNumber> // A positive real number parseable by g_ascii_strtod()
                   <number> // A real number parseable by g_ascii_strtod()

=end comment

**Note**: The VFL grammar used by GTK is slightly different than the one
defined by Apple, as it can use symbolic values for the constraint's
strength instead of numeric values; additionally, GTK allows adding
simple arithmetic operations inside predicates.

Examples of VFL descriptions are:

=begin comment
  // Default spacing
  [button]-[textField]

  // Width constraint
  [button(>=50)]

  // Connection to super view
  |-50-[purpleBox]-50-|

  // Vertical layout
  V:[topField]-10-[bottomField]

  // Flush views
  [maroonView][blueView]

  // Priority
  [button(100@strong)]

  // Equal widths
  [button1(==button2)]

  // Multiple predicates
  [flexibleButton(>=70,<=100)]

  // A complete line of layout
  |-[find]-[findNext]-[findField(>=20)]-|

  // Operators
  [button1(button2 / 3 + 50)]

  // Named attributes
  [button1(==button2.height)]

=end comment

=begin code
method add-constraints-from-descriptionv ( Array[Str] $lines, Int() $n-lines, Int() $hspacing, Int() $vspacing, N-Object $views, CArray[N-Error] $err --> N-List )
=end code

=item $lines; an array of Visual Format Language lines
  defining a set of constraints.
=item $n-lines; the number of lines.
=item $hspacing; default horizontal spacing value, or -1 for the fallback value.
=item $vspacing; default vertical spacing value, or -1 for the fallback value.
=item $views; a dictionary of `[ name, target ]`
  pairs; the B<name> keys map to the view names in the VFL lines, while
  the B<target> values map to children of the widget using a B<Gnome::Gtk4::ConstraintLayout>,
  or guides
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; the list of
  B<Gnome::Gtk4::Constraint> instances that were added to the layout. 

=begin comment

=head2 Example
# Example for add-constraints-from-descriptionv

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 add-guide

Adds a guide to B<layout>.

A guide can be used as the source or target of constraints,
like a widget, but it is not visible.

The B<layout> acquires the ownership of B<guide> after calling
this function.

=begin code
method add-guide ( N-Object() $guide )
=end code

=item $guide; (transfer ownership: full) a B<Gnome::Gtk4::ConstraintGuide> object.

=begin comment

=head2 Example
# Example for add-guide

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 observe-constraints

Returns a B<Gnome::Gio::R-ListModel> to track the constraints that are
part of the layout.

Calling this function will enable extra internal bookkeeping
to track constraints and emit signals on the returned listmodel.
It may slow down operations a lot.

Applications should try hard to avoid calling this function
because of the slowdowns.

=begin code
method observe-constraints (--> N-List )
=end code

Return value; a
  B<Gnome::Gio::R-ListModel> tracking the layout's constraints. 

=begin comment

=head2 Example
# Example for observe-constraints

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 observe-guides

Returns a B<Gnome::Gio::R-ListModel> to track the guides that are
part of the layout.

Calling this function will enable extra internal bookkeeping
to track guides and emit signals on the returned listmodel.
It may slow down operations a lot.

Applications should try hard to avoid calling this function
because of the slowdowns.

=begin code
method observe-guides (--> N-List )
=end code

Return value; a
  B<Gnome::Gio::R-ListModel> tracking the layout's guides. 

=begin comment

=head2 Example
# Example for observe-guides

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 remove-all-constraints

Removes all constraints from the layout manager.

=begin code
method remove-all-constraints ( )
=end code

=begin comment

=head2 Example
# Example for remove-all-constraints

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 remove-constraint

Removes B<constraint> from the layout manager,
so that it no longer influences the layout.

=begin code
method remove-constraint ( Array[Int] $constraint )
=end code

=item $constraint; a B<Gnome::Gtk4::Constraint>.

=begin comment

=head2 Example
# Example for remove-constraint

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 remove-guide

Removes B<guide> from the layout manager,
so that it no longer influences the layout.

=begin code
method remove-guide ( N-Object() $guide )
=end code

=item $guide; a B<Gnome::Gtk4::ConstraintGuide> object.

=begin comment

=head2 Example
# Example for remove-guide

=end comment

=end pod

