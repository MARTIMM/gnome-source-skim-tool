=comment Package: Gtk4, C-Source: builder
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Gnome::Gtk4::Builder

![](images/builder.png)

=head1 Description

A B<Gnome::Gtk4::Builder> reads XML descriptions of a user interface and
instantiates the described objects.

To create a B<Gnome::Gtk4::Builder> from a user interface description, call
C<.new-from-file()>, C<.new-from-resource()>
or C<.new-from-string()>.

In the (unusual) case that you want to add user interface
descriptions from multiple sources to the same B<Gnome::Gtk4::Builder> you can
call C<.newbuilder()> to get an empty builder and populate it by
(multiple) calls to C<.add-from-file()>,
C<.add-from-resource()> or
C<.add-from-string()>.

A B<Gnome::Gtk4::Builder> holds a reference to all objects that it has constructed
and drops these references when it is finalized. This finalization can
cause the destruction of non-widget objects or widgets which are not
contained in a toplevel window. For toplevel windows constructed by a
builder, it is the responsibility of the user to call
C<.destroy() in class Gnome::Gtk4::Window> to get rid of them and all the widgets
they contain.

The functions C<.get-object()> and
C<.get-objects()> can be used to access the widgets in
the interface by the names assigned to them inside the UI description.
Toplevel windows returned by these functions will stay around until the
user explicitly destroys them with C<.destroy() in class Gnome::Gtk4::Window>. Other
widgets will either be part of a larger hierarchy constructed by the
builder (in which case you should not have to worry about their lifecycle),
or without a parent, in which case they have to be added to some container
to make use of them. Non-widget objects need to be reffed with
g_object_ref() to keep them beyond the lifespan of the builder.

=head2 GtkBuilder UI Definitions

B<Gnome::Gtk4::Builder> parses textual descriptions of user interfaces which are
specified in XML format. We refer to these descriptions as “GtkBuilder
UI definitions” or just “UI definitions” if the context is clear.

The toplevel element is B<<interface>>. It optionally takes a “domain”
attribute, which will make the builder look for translated strings
using B<dgettext()> in the domain specified. This can also be done by
calling C<.set-translation-domain()> on the builder.

Objects are described by B<<object>> elements, which can contain
B<<property>> elements to set properties, B<<signal>> elements which
connect signals to handlers, and B<<child>> elements, which describe
child objects (most often widgets inside a container, but also e.g.
actions in an action group, or columns in a tree model). A B<<child>>
element contains an B<<object>> element which describes the child object.

The target toolkit version(s) are described by B<<requires>> elements,
the “lib” attribute specifies the widget library in question (currently
the only supported value is “gtk”) and the “version” attribute specifies
the target version in the form “B<<major>>.B<<minor>>”. B<Gnome::Gtk4::Builder> will
error out if the version requirements are not met.

Typically, the specific kind of object represented by an B<<object>>
element is specified by the “class” attribute. If the type has not
been loaded yet, GTK tries to find the B<get_type()> function from the
class name by applying heuristics. This works in most cases, but if
necessary, it is possible to specify the name of the B<get_type()>
function explicitly with the "type-func" attribute.

Objects may be given a name with the “id” attribute, which allows the
application to retrieve them from the builder with
C<.get-object()>. An id is also necessary to use the
object as property value in other parts of the UI definition. GTK
reserves ids starting and ending with B<___> (three consecutive
underscores) for its own purposes.

Setting properties of objects is pretty straightforward with the
B<<property>> element: the “name” attribute specifies the name of the
property, and the content of the element specifies the value.
If the “translatable” attribute is set to a true value, GTK uses
B<gettext()> (or B<dgettext()> if the builder has a translation domain set)
to find a translation for the value. This happens before the value
is parsed, so it can be used for properties of any type, but it is
probably most useful for string properties. It is also possible to
specify a context to disambiguate short strings, and comments which
may help the translators.

B<Gnome::Gtk4::Builder> can parse textual representations for the most common
property types: characters, strings, integers, floating-point numbers,
booleans (strings like “TRUE”, “t”, “yes”, “y”, “1” are interpreted
as C<True>, strings like “FALSE”, “f”, “no”, “n”, “0” are interpreted
as C<False>), enumerations (can be specified by their name, nick or
integer value), flags (can be specified by their name, nick, integer
value, optionally combined with “|”, e.g.
“GTK_INPUT_HINT_EMOJI|GTK_INPUT_HINT_LOWERCASE”)
and colors (in a format understood by C<.parse() in class Gnome::Gdk4::N-RGBA>).

B<Gnome::Glib::N-Variant>s can be specified in the format understood by
g_variant_parse(), and pixbufs can be specified as a filename of an
image file to load.

Objects can be referred to by their name and by default refer to
objects declared in the local XML fragment and objects exposed via
C<.expose-object()>. In general, B<Gnome::Gtk4::Builder> allows
forward references to objects — declared in the local XML; an object
doesn’t have to be constructed before it can be referred to. The
exception to this rule is that an object has to be constructed before
it can be used as the value of a construct-only property.

It is also possible to bind a property value to another object's
property value using the attributes "bind-source" to specify the
source object of the binding, and optionally, "bind-property" and
"bind-flags" to specify the source property and source binding flags
respectively. Internally, B<Gnome::Gtk4::Builder> implements this using B<Gnome::GObject::Binding>
objects. For more information see g_object_bind_property().

Sometimes it is necessary to refer to widgets which have implicitly
been constructed by GTK as part of a composite widget, to set
properties on them or to add further children (e.g. the content area
of a B<GtkDialog>). This can be achieved by setting the “internal-child”
property of the B<<child>> element to a true value. Note that B<Gnome::Gtk4::Builder>
still requires an B<<object>> element for the internal child, even if it
has already been constructed.

A number of widgets have different places where a child can be added
(e.g. tabs vs. page content in notebooks). This can be reflected in
a UI definition by specifying the “type” attribute on a B<<child>>
The possible values for the “type” attribute are described in the
sections describing the widget-specific portions of UI definitions.

=head2 Signal handlers and function pointers

Signal handlers are set up with the B<<signal>> element. The “name”
attribute specifies the name of the signal, and the “handler” attribute
specifies the function to connect to the signal.
The remaining attributes, “after”, “swapped” and “object”, have the
same meaning as the corresponding parameters of the
g_signal_connect_object() or g_signal_connect_data() functions. A
“last_modification_time” attribute is also allowed, but it does not
have a meaning to the builder.

If you rely on B<GModule> support to lookup callbacks in the symbol table,
the following details should be noted:

When compiling applications for Windows, you must declare signal callbacks
with C<G_MODULE_EXPORT>, or they will not be put in the symbol table.
On Linux and Unix, this is not necessary; applications should instead
be compiled with the -Wl,--export-dynamic B<CFLAGS>, and linked against
B<gmodule-export-2.0>.

=head2 A GtkBuilder UI Definition

=begin comment
<interface>
  <object class="GtkDialog" id="dialog1">
    <child internal-child="content_area">
      <object class="GtkBox" id="vbox1">
        <child internal-child="action_area">
          <object class="GtkBox" id="hbuttonbox1">
            <child>
              <object class="GtkButton" id="ok_button">
                <property name="label" translatable="yes">_Ok</property>
                <property name="use-underline">True</property>
                <signal name="clicked" handler="ok_button_clicked"/>
              </object>
            </child>
          </object>
        </child>
      </object>
    </child>
  </object>
</interface>

=end comment

Beyond this general structure, several object classes define their
own XML DTD fragments for filling in the ANY placeholders in the DTD
above. Note that a custom element in a <child> element gets parsed by
the custom tag handler of the parent object, while a custom element in
an <object> element gets parsed by the custom tag handler of the object.

These XML fragments are explained in the documentation of the
respective objects.

A B<<template>> tag can be used to define a widget class’s components.
See the [GtkWidget documentation](class.Widget.html#building-composite-widgets-from-template-xml) for details.

=begin comment

=head2 Uml Diagram
![](plantuml/….svg)

=end comment

=begin comment

=head2 Example
# Example use of module Gnome::Gtk4::Builder

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

=head2 new

=head3 :native-object

Create an object using a native object from elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object :$native-object! )

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-builder

Creates a new empty builder object.

This function is only useful if you intend to make multiple calls
to C<.add-from-file()>, C<.add-from-resource()>
or C<.add-from-string()> in order to merge multiple UI
descriptions into a single builder.

=begin code
method new-builder ( --> Gnome::Gtk4::Builder \)
=end code

=begin comment

=head2 Example
# Example for new-builder

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-from-file

Parses the UI definition in the file C<$filename>.

If there is an error opening the file or parsing the description then
the program will be aborted. You should only ever attempt to parse
user interface descriptions that are shipped as part of your program.

=begin code
method new-from-file ( Str $filename --> Gnome::Gtk4::Builder \)
=end code

=item $filename; filename of user interface description file.

=begin comment

=head2 Example
# Example for new-from-file

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-from-resource

Parses the UI definition at C<$resource-path>.

If there is an error locating the resource or parsing the
description, then the program will be aborted.

=begin code
method new-from-resource ( Str $resource-path --> Gnome::Gtk4::Builder \)
=end code

=item $resource-path; a B<Gnome::Gio::N-Resource> resource path.

=begin comment

=head2 Example
# Example for new-from-resource

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-from-string

Parses the UI definition in C<$string>.

If C<$string> is undefined-terminated, then C<$length> should be -1.
If C<$length> is not -1, then it is the length of C<$string>.

If there is an error parsing C<$string> then the program will be
aborted. You should not attempt to parse user interface description
from untrusted sources.

=begin code
method new-from-string ( Str $string, Int() $length --> Gnome::Gtk4::Builder \)
=end code

=item $string; a user interface (XML) description.
=item $length; the length of C<$string>, or -1.

=begin comment

=head2 Example
# Example for new-from-string

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 add-from-file

Parses a file containing a UI definition and merges it with
the current contents of C<$builder>.

This function is useful if you need to call
C<.set-current-object()>) to add user data to
callbacks before loading GtkBuilder UI. Otherwise, you probably
want C<.new-from-file()> instead.

If an error occurs, 0 will be returned and C<$error> will be assigned a
B<Gnome::Glib::N-Error> from the B<GTK_BUILDER_ERROR>, B<G_MARKUP_ERROR> or B<G_FILE_ERROR>
domains.

It’s not really reasonable to attempt to handle failures of this
call. You should not use this function with untrusted files (ie:
files that are not part of your application). Broken B<Gnome::Gtk4::Builder>
files can easily crash your program, and it’s possible that memory
was leaked leading up to the reported failure. The only reasonable
thing to do when an error is detected is to call B<g_error()>.

=begin code
method add-from-file ( Str $filename, CArray[N-Error] $err --> Bool )
=end code

=item $filename; the name of the file to parse.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; C<True> on success, C<False> if an error occurred. 

=begin comment

=head2 Example
# Example for add-from-file

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 add-from-resource

Parses a resource file containing a UI definition
and merges it with the current contents of C<$builder>.

This function is useful if you need to call
C<.set-current-object()> to add user data to
callbacks before loading GtkBuilder UI. Otherwise, you probably
want C<.new-from-resource()> instead.

If an error occurs, 0 will be returned and C<$error> will be assigned a
B<Gnome::Glib::N-Error> from the C<GTK_BUILDER_ERROR>, C<G_MARKUP_ERROR> or C<G_RESOURCE_ERROR>
domain.

It’s not really reasonable to attempt to handle failures of this
call.  The only reasonable thing to do when an error is detected is
to call g_error().

=begin code
method add-from-resource ( Str $resource-path, CArray[N-Error] $err --> Bool )
=end code

=item $resource-path; the path of the resource file to parse.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; C<True> on success, C<False> if an error occurred. 

=begin comment

=head2 Example
# Example for add-from-resource

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 add-from-string

Parses a string containing a UI definition and merges it
with the current contents of C<$builder>.

This function is useful if you need to call
C<.set-current-object()> to add user data to
callbacks before loading B<Gnome::Gtk4::Builder> UI. Otherwise, you probably
want C<.new-from-string()> instead.

Upon errors C<False> will be returned and C<$error> will be assigned a
B<Gnome::Glib::N-Error> from the C<GTK_BUILDER_ERROR>, C<G_MARKUP_ERROR> or
C<G_VARIANT_PARSE_ERROR> domain.

It’s not really reasonable to attempt to handle failures of this
call.  The only reasonable thing to do when an error is detected is
to call g_error().

=begin code
method add-from-string ( Str $buffer, Int() $length, CArray[N-Error] $err --> Bool )
=end code

=item $buffer; the string to parse.
=item $length; the length of C<$buffer> (may be -1 if C<$buffer> is nul-terminated).
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; C<True> on success, C<False> if an error occurred. 

=begin comment

=head2 Example
# Example for add-from-string

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 add-objects-from-file

Parses a file containing a UI definition building only the
requested objects and merges them with the current contents
of C<$builder>.

Upon errors, 0 will be returned and C<$error> will be assigned a
B<Gnome::Glib::N-Error> from the C<GTK_BUILDER_ERROR>, C<G_MARKUP_ERROR> or C<G_FILE_ERROR>
domain.

If you are adding an object that depends on an object that is not
its child (for instance a B<GtkTreeView> that depends on its
B<GtkTreeModel>), you have to explicitly list all of them in C<$object-ids>.

=begin code
method add-objects-from-file ( Str $filename, Array[Str] $object-ids, CArray[N-Error] $err --> Bool )
=end code

=item $filename; the name of the file to parse.
=item $object-ids; nul-terminated array of objects to build.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; C<True> on success, C<False> if an error occurred. 

=begin comment

=head2 Example
# Example for add-objects-from-file

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 add-objects-from-resource

Parses a resource file containing a UI definition, building
only the requested objects and merges them with the current
contents of C<$builder>.

Upon errors, 0 will be returned and C<$error> will be assigned a
B<Gnome::Glib::N-Error> from the C<GTK_BUILDER_ERROR>, C<G_MARKUP_ERROR> or C<G_RESOURCE_ERROR>
domain.

If you are adding an object that depends on an object that is not
its child (for instance a B<GtkTreeView> that depends on its
B<GtkTreeModel>), you have to explicitly list all of them in C<$object-ids>.

=begin code
method add-objects-from-resource ( Str $resource-path, Array[Str] $object-ids, CArray[N-Error] $err --> Bool )
=end code

=item $resource-path; the path of the resource file to parse.
=item $object-ids; nul-terminated array of objects to build.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; C<True> on success, C<False> if an error occurred. 

=begin comment

=head2 Example
# Example for add-objects-from-resource

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 add-objects-from-string

Parses a string containing a UI definition, building only the
requested objects and merges them with the current contents of C<$builder>.

Upon errors C<False> will be returned and C<$error> will be assigned a
B<Gnome::Glib::N-Error> from the C<GTK_BUILDER_ERROR> or C<G_MARKUP_ERROR> domain.

If you are adding an object that depends on an object that is not
its child (for instance a B<GtkTreeView> that depends on its
B<GtkTreeModel>), you have to explicitly list all of them in C<$object-ids>.

=begin code
method add-objects-from-string ( Str $buffer, Int() $length, Array[Str] $object-ids, CArray[N-Error] $err --> Bool )
=end code

=item $buffer; the string to parse.
=item $length; the length of C<$buffer> (may be -1 if C<$buffer> is nul-terminated).
=item $object-ids; nul-terminated array of objects to build.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; C<True> on success, C<False> if an error occurred. 

=begin comment

=head2 Example
# Example for add-objects-from-string

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 create-closure
This function is not yet available

Creates a closure to invoke the function called C<$function-name>.

This is using the create_closure() implementation of C<$builder>'s
B<Gnome::Gtk4::R-BuilderScope>.

If no closure could be created, undefined will be returned and C<$error>
will be set.

=begin code
method create-closure ( Str $function-name, UInt $flags, N-Object() $object, CArray[N-Error] $err --> N-Object )
=end code

=item $function-name; name of the function to look up.
=item $flags; closure creation flags.
=item $object; Object to create the closure with.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; A new closure for invoking C<$function-name>. 

=begin comment

=head2 Example
# Example for create-closure

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 expose-object

Add C<$object> to the C<$builder> object pool so it can be
referenced just like any other object built by builder.

=begin code
method expose-object ( Str $name, N-Object() $object )
=end code

=item $name; the name of the object exposed to the builder.
=item $object; the object to expose.

=begin comment

=head2 Example
# Example for expose-object

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 extend-with-template

Main private entry point for building composite components
from template XML.

This is exported purely to let B<gtk-builder-tool> validate
templates, applications have no need to call this function.

=begin code
method extend-with-template ( N-Object() $object, GType $template-type, Str $buffer, Int() $length, CArray[N-Error] $err --> Bool )
=end code

=item $object; the object that is being extended.
=item $template-type; the type that the template is for.
=item $buffer; the string to parse.
=item $length; the length of C<$buffer> (may be -1 if C<$buffer> is nul-terminated).
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; A positive value on success, 0 if an error occurred. 

=begin comment

=head2 Example
# Example for extend-with-template

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-current-object

Gets the current object set via C<.set-current-object()>.

=begin code
method get-current-object (--> N-Object )
=end code

Return value; the current object. 

=begin comment

=head2 Example
# Example for get-current-object

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-object

Gets the object named C<$name>.

Note that this function does not increment the reference count
of the returned object.

=begin code
method get-object ( Str $name --> N-Object )
=end code

=item $name; name of object to get.

Return value; the object named C<$name>. 

=begin comment

=head2 Example
# Example for get-object

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-objects

Gets all objects that have been constructed by C<$builder>.

Note that this function does not increment the reference
counts of the returned objects.

=begin code
method get-objects (--> N-SList )
=end code

Return value; a
  newly-allocated B<Gnome::Glib::N-SList> containing all the objects
  constructed by the B<GtkBuilder instance>. It should be
  freed by g_slist_free(). 

=begin comment

=head2 Example
# Example for get-objects

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-scope

Gets the scope in use that was set via C<.set-scope()>.

=begin code
method get-scope (--> N-Object )
=end code

Return value; the current scope. 

=begin comment

=head2 Example
# Example for get-scope

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-translation-domain

Gets the translation domain of C<$builder>.

=begin code
method get-translation-domain (--> Str )
=end code

Return value; the translation domain. 

=begin comment

=head2 Example
# Example for get-translation-domain

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-type-from-name

Looks up a type by name.

This is using the virtual function that B<Gnome::Gtk4::Builder> has
for that purpose. This is mainly used when implementing
the B<Gnome::Gtk4::R-Buildable> interface on a type.

=begin code
method get-type-from-name ( Str $type-name --> GType )
=end code

=item $type-name; type name to lookup.

Return value; the B<Gnome::GObject::Builder> found for C<$type-name> or C<G_TYPE_INVALID>
  if no type was found. 

=begin comment

=head2 Example
# Example for get-type-from-name

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-current-object

Sets the current object for the C<$builder>.

The current object can be thought of as the B<this> object that the
builder is working for and will often be used as the default object
when an object is optional.

C<.init-template() in class Gnome::Gtk4::Widget> for example will set the current
object to the widget the template is inited for. For functions like
C<.new-from-resource()>, the current object will be undefined.

=begin code
method set-current-object ( N-Object() $current-object )
=end code

=item $current-object; the new current object.

=begin comment

=head2 Example
# Example for set-current-object

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-scope

Sets the scope the builder should operate in.

If C<$scope> is undefined, a new B<Gnome::Gtk4::BuilderCScope> will be created.

=begin code
method set-scope ( N-Object() $scope )
=end code

=item $scope; the scope to use.

=begin comment

=head2 Example
# Example for set-scope

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-translation-domain

Sets the translation domain of C<$builder>.

=begin code
method set-translation-domain ( Str $domain )
=end code

=item $domain; the translation domain.

=begin comment

=head2 Example
# Example for set-translation-domain

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 value-from-string

Demarshals a value from a string.

This function calls g_value_init() on the C<$value> argument,
so it need not be initialised beforehand.

Can handle char, uchar, boolean, int, uint, long,
ulong, enum, flags, float, double, string, B<Gnome::Gdk4::N-RGBA> and
B<Gnome::Gtk4::Adjustment> type values.

Upon errors C<False> will be returned and C<$error> will be
assigned a B<Gnome::Glib::N-Error> from the C<GTK_BUILDER_ERROR> domain.

=begin code
method value-from-string ( N-Object() $pspec, Str $string, N-Object $value, CArray[N-Error] $err --> Bool )
=end code

=item $pspec; the B<Gnome::GObject::ParamSpec> for the property.
=item $string; the string representation of the value.
=item $value; the B<Gnome::GObject::N-Value> to store the result in
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; C<True> on success. 

=begin comment

=head2 Example
# Example for value-from-string

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 value-from-string-type

Demarshals a value from a string.

Unlike C<.value-from-string()>, this function
takes a B<Gnome::GObject::Builder> instead of B<Gnome::GObject::ParamSpec>.

Calls g_value_init() on the C<$value> argument, so it
need not be initialised beforehand.

Upon errors C<False> will be returned and C<$error> will be
assigned a B<Gnome::Glib::N-Error> from the C<GTK_BUILDER_ERROR> domain.

=begin code
method value-from-string-type ( GType $type, Str $string, N-Object $value, CArray[N-Error] $err --> Bool )
=end code

=item $type; the B<Gnome::GObject::Builder> of the value.
=item $string; the string representation of the value.
=item $value; the B<Gnome::GObject::N-Value> to store the result in
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; C<True> on success. 

=begin comment

=head2 Example
# Example for value-from-string-type

=end comment

=end pod

