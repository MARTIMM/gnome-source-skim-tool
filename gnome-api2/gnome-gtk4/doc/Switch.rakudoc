=comment Package: Gtk4, C-Source: switch
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=TITLE Gnome::Gtk4::Switch
=head1 Description

B<Gnome::Gtk4::Switch> is a "light switch" that has two states: on or off.

=for image :src<asset_files/images/switch.png> :width<30%> :class<inline>

The user can control which state should be active by clicking the
empty area, or by dragging the slider.

B<Gnome::Gtk4::Switch> can also express situations where the underlying state changes
with a delay. In this case, the slider position indicates the user's recent
change (represented by the I<active> property), while the
trough color indicates the present underlying state (represented by the
I<state> property).

=for image :src<asset_files/images/switch-state.png> :width<30%> :class<inline>

See I<state-set> for details.

=head2 CSS nodes

=begin comment
switch
├── label
├── label
╰── slider

=end comment

B<Gnome::Gtk4::Switch> has four css nodes, the main node with the name switch and
subnodes for the slider and the on and off images. Neither of them is
using any style classes.

=head2 Accessibility

B<Gnome::Gtk4::Switch> uses the C<GTK_ACCESSIBLE_ROLE_SWITCH> role.

=begin comment

=head2 Uml Diagram
![](plantuml/….svg)

=end comment

=begin comment

=head2 Example
# Example use of module Gnome::Gtk4::Switch

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

=head2 new

=head3 :native-object

Create an object using a native object from elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object :$native-object! )

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-switch

Creates a new B<Gnome::Gtk4::Switch> widget.

=begin code
method new-switch ( --> Gnome::Gtk4::Switch \)
=end code

=begin comment

=head2 Example
# Example for new-switch

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-active

Gets whether the B<Gnome::Gtk4::Switch> is in its “on” or “off” state.

=begin code
method get-active (--> Bool )
=end code

Return value; C<True> if the B<Gnome::Gtk4::Switch> is active, and C<False> otherwise. 

=begin comment

=head2 Example
# Example for get-active

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-state

Gets the underlying state of the B<Gnome::Gtk4::Switch>.

=begin code
method get-state (--> Bool )
=end code

Return value; the underlying state. 

=begin comment

=head2 Example
# Example for get-state

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-active

Changes the state of C<$self> to the desired one.

=begin code
method set-active ( Bool() $is-active )
=end code

=item $is-active; C<True> if C<$self> should be active, and C<False> otherwise.

=begin comment

=head2 Example
# Example for set-active

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-state

Sets the underlying state of the B<Gnome::Gtk4::Switch>.

This function is typically called from a I<state-set>
signal handler in order to set up delayed state changes.

See I<state-set> for details.

=begin code
method set-state ( Bool() $state )
=end code

=item $state; the new state.

=begin comment

=head2 Example
# Example for set-state

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Signal Documentation]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Signals

=comment -----------------------------------------------------------------------
=head3 activate

Emitted to animate the switch.

Applications should never connect to this signal,
but use the I<active> property.

=begin code
method handler (
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gtk4::Switch :$_widget,
  *C<user>-options
)
=end code

=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gtk4::Switch> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

=begin comment

=head2 Example
# Example for signal activate

=end comment

=comment -----------------------------------------------------------------------
=head3 state-set

Emitted to change the underlying state.

The I<state-set> signal is emitted when the user changes the switch
position. The default handler calls C<.set-state()> with the
value of C<$state>.

To implement delayed state change, applications can connect to this
signal, initiate the change of the underlying state, and call
C<.set-state()> when the underlying state change is
complete. The signal handler should return C<True> to prevent the
default handler from running.

=begin code
method handler (
  gboolean $state,
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gtk4::Switch :$_widget,
  *C<user>-options
  --> gboolean
)
=end code

=item $state; the new state of the switch.
=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gtk4::Switch> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

Return value; C<True> to stop the signal emission

=begin comment

=head2 Example
# Example for signal state-set

=end comment

=end pod

