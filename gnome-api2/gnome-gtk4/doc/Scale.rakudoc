=comment Package: Gtk4, C-Source: scale
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=TITLE Gnome::Gtk4::Scale
=head1 Description

A B<Gnome::Gtk4::Scale> is a slider control used to select a numeric value.

=for image :src<asset_files/images/scales.png> :width<30%> :class<inline>

To use it, you’ll probably want to investigate the methods on its base
class, B<Gnome::Gtk4::Range>, in addition to the methods for B<Gnome::Gtk4::Scale> itself.
To set the value of a scale, you would normally use C<.set-value()> in class B<Gnome::Gtk4::Range>].
To detect changes to the value, you would normally use the
I<value-changed defined in Range> signal.

Note that using the same upper and lower bounds for the B<Gnome::Gtk4::Scale> (through
the B<Gnome::Gtk4::Range> methods) will hide the slider itself. This is useful for
applications that want to show an undeterminate value on the scale, without
changing the layout of the application (such as movie or music players).

=head2 GtkScale as GtkBuildable

B<Gnome::Gtk4::Scale> supports a custom `<marks>` element, which can contain multiple
`<mark\>` elements. The “value” and “position” attributes have the same
meaning as C<.add-mark()>] parameters of the same name. If
the element is not empty, its content is taken as the markup to show at
the mark. It can be translated with the usual ”translatable” and
“context” attributes.

=head2 CSS nodes

=begin comment
scale[.fine-tune][.marks-before][.marks-after]
├── [value][.top][.right][.bottom][.left]
├── marks.top
│   ├── mark
│   ┊    ├── [label]
│   ┊    ╰── indicator
┊   ┊
│   ╰── mark
├── marks.bottom
│   ├── mark
│   ┊    ├── indicator
│   ┊    ╰── [label]
┊   ┊
│   ╰── mark
╰── trough
    ├── [fill]
    ├── [highlight]
    ╰── slider

=end comment

B<Gnome::Gtk4::Scale> has a main CSS node with name scale and a subnode for its contents,
with subnodes named trough and slider.

The main node gets the style class .fine-tune added when the scale is in
'fine-tuning' mode.

If the scale has an origin (see C<.set-has-origin()>]), there is
a subnode with name highlight below the trough node that is used for rendering
the highlighted part of the trough.

If the scale is showing a fill level (see C<.set-show-fill-level()> in class B<Gnome::Gtk4::Range>]),
there is a subnode with name fill below the trough node that is used for
rendering the filled in part of the trough.

If marks are present, there is a marks subnode before or after the trough
node, below which each mark gets a node with name mark. The marks nodes get
either the .top or .bottom style class.

The mark node has a subnode named indicator. If the mark has text, it also
has a subnode named label. When the mark is either above or left of the
scale, the label subnode is the first when present. Otherwise, the indicator
subnode is the first.

The main CSS node gets the 'marks-before' and/or 'marks-after' style classes
added depending on what marks are present.

If the scale is displaying the value (see I<draw-value>),
there is subnode with name value. This node will get the .top or .bottom style
classes similar to the marks node.

=head2 Accessibility

B<Gnome::Gtk4::Scale> uses the C<GTK_ACCESSIBLE_ROLE_SLIDER> role.

=head2 Uml Diagram
=for image :src<asset_files/images/plantuml/Scale.png> :width<70%> :class<inline>

=begin comment

=head2 Example
# Example use of module Gnome::Gtk4::Scale

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

=head2 new

=head3 :native-object

Create an object using a native object from an object of the same type found elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object() :$native-object! )

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-scale

Creates a new B<Gnome::Gtk4::Scale>.

=begin code
method new-scale ( GtkOrientation $orientation, N-Object() $adjustment --> Gnome::Gtk4::Scale )
=end code

=item $orientation; the scale’s orientation..
=item $adjustment; the B<Gnome::Gtk4::Adjustment> which sets
  the range of the scale, or undefined to create a new adjustment..

=begin comment

=head2 Example
# Example for new-scale

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-with-range

Creates a new scale widget with a range from C<$min> to C<$max>.

The returns scale will have the given orientation and will let the
user input a number between C<$min> and C<$max> (including C<$min> and C<$max>)
with the increment C<$step>. C<$step> must be nonzero; it’s the distance
the slider moves when using the arrow keys to adjust the scale
value.

Note that the way in which the precision is derived works best if C<$step> is a power of ten. If the resulting precision is not suitable
for your needs, use C<.set-digits()>] to correct it.

=begin code
method new-with-range ( GtkOrientation $orientation, Num() $min, Num() $max, Num() $step --> Gnome::Gtk4::Scale )
=end code

=item $orientation; the scale’s orientation..
=item $min; minimum value.
=item $max; maximum value.
=item $step; step increment (tick size) used with keyboard shortcuts.

=begin comment

=head2 Example
# Example for new-with-range

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 add-mark

Adds a mark at C<$value>.

A mark is indicated visually by drawing a tick mark next to the scale,
and GTK makes it easy for the user to position the scale exactly at the
marks value.

If C<$markup> is defined, text is shown next to the tick mark.

To remove marks from a scale, use C<.clear-marks()>].

=begin code
method add-mark ( Num() $value, GtkPositionType $position, Str $markup )
=end code

=item $value; the value at which the mark is placed, must be between
  the lower and upper limits of the scales’ adjustment.
=item $position; where to draw the mark. For a horizontal scale, C<GTK_POS_TOP>
  and C<GTK_POS_LEFT> are drawn above the scale, anything else below.
  For a vertical scale, C<GTK_POS_LEFT> and C<GTK_POS_TOP> are drawn to
  the left of the scale, anything else to the right..
=item $markup; Text to be shown at the mark, using Pango markup.

=begin comment

=head2 Example
# Example for add-mark

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 clear-marks

Removes any marks that have been added.

=begin code
method clear-marks ( )
=end code

=begin comment

=head2 Example
# Example for clear-marks

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-digits

Gets the number of decimal places that are displayed in the value.

=begin code
method get-digits (--> Int )
=end code

Return value; the number of decimal places that are displayed. 

=begin comment

=head2 Example
# Example for get-digits

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-draw-value

Returns whether the current value is displayed as a string
next to the slider.

=begin code
method get-draw-value (--> Bool )
=end code

Return value; whether the current value is displayed as a string. 

=begin comment

=head2 Example
# Example for get-draw-value

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-has-origin

Returns whether the scale has an origin.

=begin code
method get-has-origin (--> Bool )
=end code

Return value; C<True> if the scale has an origin.. 

=begin comment

=head2 Example
# Example for get-has-origin

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-layout

Gets the B<Gnome::Pango::Layout> used to display the scale.

The returned object is owned by the scale so does not need
to be freed by the caller.

=begin code
method get-layout (--> N-Object )
=end code

Return value; the B<Gnome::Pango::Layout>
  for this scale, or undefined if the I<draw-value>
  property is C<False>.. 

=begin comment

=head2 Example
# Example for get-layout

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-layout-offsets

Obtains the coordinates where the scale will draw the
B<Gnome::Pango::Layout> representing the text in the scale.

Remember when using the B<Gnome::Pango::Layout> function you need to
convert to and from pixels using B<PANGO_PIXELS>()` or B<Gnome::Pango::T-types>.

If the I<draw-value> property is C<False>, the return
values are undefined.

=begin code
method get-layout-offsets ( Array[Int] $x, Array[Int] $y )
=end code

=item $x; (transfer ownership: full) location to store X offset of layout.
=item $y; (transfer ownership: full) location to store Y offset of layout.

=begin comment

=head2 Example
# Example for get-layout-offsets

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-value-pos

Gets the position in which the current value is displayed.

=begin code
method get-value-pos (--> GtkPositionType )
=end code

Return value; the position in which the current value is displayed. 

=begin comment

=head2 Example
# Example for get-value-pos

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-digits

Sets the number of decimal places that are displayed in the value.

Also causes the value of the adjustment to be rounded to this number
of digits, so the retrieved value matches the displayed one, if
I<draw-value> is C<True> when the value changes. If
you want to enforce rounding the value when I<draw-value>
is C<False>, you can set I<round-digits defined in Gnome::Gtk4::Range> instead.

Note that rounding to a small number of digits can interfere with
the smooth autoscrolling that is built into B<Gnome::Gtk4::Scale>. As an alternative,
you can use C<.set-format-value-func()>] to format the displayed
value yourself.

=begin code
method set-digits ( Int() $digits )
=end code

=item $digits; the number of decimal places to display,
  e.g. use 1 to display 1.0, 2 to display 1.00, etc.

=begin comment

=head2 Example
# Example for set-digits

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-draw-value

Specifies whether the current value is displayed as a string next
to the slider.

=begin code
method set-draw-value ( Bool() $draw-value )
=end code

=item $draw-value; C<True> to draw the value.

=begin comment

=head2 Example
# Example for set-draw-value

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-format-value-func

 C<$func> allows you to change how the scale value is displayed.

The given function will return an allocated string representing C<$value>. That string will then be used to display the scale's value.

If #NULL is passed as C<$func>, the value will be displayed on
its own, rounded according to the value of the
I<digits> property.

=begin code
method set-format-value-func ( GtkScaleFormatValueFunc &func, gpointer $user-data, GDestroyNotify &destroy-notify )
=end code

=item GtkScaleFormatValueFunc &func; function that formats the value. The function must be specified with the following signature; C<:( N-Object $scale, gdouble $value, gpointer $user-data )>.
=item $user-data; user data to pass to C<$func>.
=item GDestroyNotify &destroy-notify; destroy function for C<$user-data>. The function must be specified with the following signature; C<:( gpointer $data )>.

=begin comment

=head2 Example
# Example for set-format-value-func

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-has-origin

Sets whether the scale has an origin.

If I<has-origin> is set to C<True> (the default),
the scale will highlight the part of the trough between the origin
(bottom or left side) and the current value.

=begin code
method set-has-origin ( Bool() $has-origin )
=end code

=item $has-origin; C<True> if the scale has an origin.

=begin comment

=head2 Example
# Example for set-has-origin

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-value-pos

Sets the position in which the current value is displayed.

=begin code
method set-value-pos ( GtkPositionType $pos )
=end code

=item $pos; the position in which the current value is displayed.

=begin comment

=head2 Example
# Example for set-value-pos

=end comment

=end pod

