=comment Package: Gtk4, C-Source: accessible
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=TITLE Gnome::Gtk4::R-Accessible
=head1 Description

B<Gnome::Gtk4::R-Accessible> is an interface for describing UI elements for
Assistive Technologies.

Every accessible implementation has:

=item a “role”, represented by a value of the  C<enumeration AccessibleRole from Gnome::Gtk4::T-enums>  enumeration
=item an “attribute”, represented by a set of  C<enumeration AccessibleState from Gnome::Gtk4::T-enums> ,
    C<enumeration AccessibleProperty from Gnome::Gtk4::T-enums>  and  C<enumeration AccessibleRelation from Gnome::Gtk4::T-enums>  values

The role cannot be changed after instantiating a B<Gnome::Gtk4::R-Accessible>
implementation.

The attributes are updated every time a UI element's state changes in
a way that should be reflected by assistive technologies. For instance,
if a B<Gnome::Gtk4::Widget> visibility changes, the C<GTK_ACCESSIBLE_STATE_HIDDEN>
state will also change to reflect the I<visible defined in Gnome::Gtk4::Widget> property.

Every accessible implementation is part of a tree of accessible objects.
Normally, this tree corresponds to the widget tree, but can be customized
by reimplementing the [vfunc C<$Gtk>.Accessible.get_accessible_parent],
[vfunc C<$Gtk>.Accessible.get_first_accessible_child] and
[vfunc C<$Gtk>.Accessible.get_next_accessible_sibling] virtual functions.
Note that you can not create a top-level accessible object as of now,
which means that you must always have a parent accessible object.
Also note that when an accessible object does not correspond to a widget,
and it has children, whose implementation you don't control,
it is necessary to ensure the correct shape of the a11y tree
by calling C<.set-accessible-parent()> and
updating the sibling by C<.update-next-accessible-sibling()>.

=begin comment

=head2 Uml Diagram
![](plantuml/….svg)

=end comment

=begin comment

=head2 Example
# Example use of module Gnome::Gtk4::Accessible

=end comment

=end pod
#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 announce

Requests the user's screen reader to announce the given message.

This kind of notification is useful for messages that
either have only a visual representation or that are not
exposed visually at all, e.g. a notification about a
successful operation.

Also, by using this API, you can ensure that the message
does not interrupts the user's current screen reader output.

=begin code
method announce ( Str $message, GtkAccessibleAnnouncementPriority $priority )
=end code

=item $message; the string to announce.
=item $priority; the priority of the announcement.

=begin comment

=head2 Example
# Example for get-accessible-role

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-accessible-parent

Retrieves the accessible parent for an accessible object.

This function returns undefined for top level widgets.

=begin code
method get-accessible-parent (--> N-Object )
=end code

Return value; the accessible parent. 

=begin comment

=head2 Example
# Example for reset-property

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-accessible-role

Retrieves the accessible role of an accessible object.

=begin code
method get-accessible-role (--> GtkAccessibleRole )
=end code

Return value; the accessible role. 

=begin comment

=head2 Example
# Example for reset-relation

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-at-context

Retrieves the accessible implementation for the given B<Gnome::Gtk4::R-Accessible>.

=begin code
method get-at-context (--> N-Object )
=end code

Return value; the accessible implementation object. 

=begin comment

=head2 Example
# Example for reset-state

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-bounds

Queries the coordinates and dimensions of this accessible

This functionality can be overridden by B<Gnome::Gtk4::R-Accessible>
implementations, e.g. to get the bounds from an ignored
child widget.

=begin code
method get-bounds ( Array[Int] $x, Array[Int] $y, Array[Int] $width, Array[Int] $height --> Bool )
=end code

=item $x; (transfer ownership: full) the x coordinate of the top left corner of the accessible.
=item $y; (transfer ownership: full) the y coordinate of the top left corner of the widget.
=item $width; (transfer ownership: full) the width of the accessible object.
=item $height; (transfer ownership: full) the height of the accessible object.

Return value; true if the bounds are valid, and false otherwise. 

=begin comment

=head2 Example
# Example for update-property

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-first-accessible-child

Retrieves the first accessible child of an accessible object.

=begin code
method get-first-accessible-child (--> N-Object )
=end code

Return value; the first accessible child. 

=begin comment

=head2 Example
# Example for update-property-value

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-next-accessible-sibling

Retrieves the next accessible sibling of an accessible object

=begin code
method get-next-accessible-sibling (--> N-Object )
=end code

Return value; the next accessible sibling. 

=begin comment

=head2 Example
# Example for update-relation

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-platform-state

Query a platform state, such as focus.

See C<.platform-changed()>.

This functionality can be overridden by B<Gnome::Gtk4::R-Accessible>
implementations, e.g. to get platform state from an ignored
child widget, as is the case for B<Gnome::Gtk4::Text> wrappers.

=begin code
method get-platform-state ( GtkAccessiblePlatformState $state --> Bool )
=end code

=item $state; platform state to query.

Return value; the value of C<$state> for the accessible. 

=begin comment

=head2 Example
# Example for update-relation-value

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 reset-property

Resets the accessible C<$property> to its default value.

=begin code
method reset-property ( GtkAccessibleProperty $property )
=end code

=item $property; a C<enumeration GtkAccessibleProperty defined in Gnome::Gtk4::T-enums>.

=begin comment

=head2 Example
# Example for update-state

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 reset-relation

Resets the accessible C<$relation> to its default value.

=begin code
method reset-relation ( GtkAccessibleRelation $relation )
=end code

=item $relation; a C<enumeration GtkAccessibleRelation defined in Gnome::Gtk4::T-enums>.

=begin comment

=head2 Example
# Example for update-state-value

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 reset-state

Resets the accessible C<$state> to its default value.

=begin code
method reset-state ( GtkAccessibleState $state )
=end code

=item $state; a C<enumeration GtkAccessibleState defined in Gnome::Gtk4::T-enums>.

=begin comment
value = gtk_adjustment_get_value (adjustment);
gtk_accessible_update_property (GTK_ACCESSIBLE (spin_button),
                                   GTK_ACCESSIBLE_PROPERTY_VALUE_NOW, value,
                                   -1);

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-accessible-parent

Sets the parent and sibling of an accessible object.

This function is meant to be used by accessible implementations that are
not part of the widget hierarchy, and but act as a logical bridge between
widgets. For instance, if a widget creates an object that holds metadata
for each child, and you want that object to implement the B<Gnome::Gtk4::R-Accessible>
interface, you will use this function to ensure that the parent of each
child widget is the metadata object, and the parent of each metadata
object is the container widget.

=begin code
method set-accessible-parent ( N-Object() $parent, N-Object() $next-sibling )
=end code

=item $parent; the parent accessible object.
=item $next-sibling; the sibling accessible object.

=begin comment
gtk_accessible_update_relation (accessible,
                                GTK_ACCESSIBLE_RELATION_CONTROLS,
                                  ref1, NULL,
                                GTK_ACCESSIBLE_RELATION_LABELLED_BY,
                                  ref1, ref2, ref3, NULL,
                                -1);

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 update-next-accessible-sibling

Updates the next accessible sibling of C<$self>.

That might be useful when a new child of a custom B<Gnome::Gtk4::R-Accessible>
is created, and it needs to be linked to a previous child.

=begin code
method update-next-accessible-sibling ( N-Object() $new-sibling )
=end code

=item $new-sibling; the new next accessible sibling to set.

=begin comment
value = GTK_ACCESSIBLE_TRISTATE_MIXED;
gtk_accessible_update_state (GTK_ACCESSIBLE (check_button),
                             GTK_ACCESSIBLE_STATE_CHECKED, value,
                             -1);

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 update-property
This function is not yet available

Updates a list of accessible properties.

See the  C<enumeration AccessibleProperty from Gnome::Gtk4::T-enums>  documentation for the
value types of accessible properties.

This function should be called by B<Gnome::Gtk4::Widget> types whenever
an accessible property change must be communicated to assistive
technologies.

Example:

=begin code
method update-property ( GtkAccessibleProperty $first-property, … )
=end code

=item $first-property; the first C<enumeration GtkAccessibleProperty defined in Gnome::Gtk4::T-enums>.
=item …; …. Note that each argument must be specified as a type followed by its value!

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 update-property-value

Updates an array of accessible properties.

This function should be called by B<Gnome::Gtk4::Widget> types whenever an accessible
property change must be communicated to assistive technologies.

This function is meant to be used by language bindings.

=begin code
method update-property-value ( Int() $n-properties, GtkAccessibleProperty $properties, N-Object $values )
=end code

=item $n-properties; the number of accessible properties to set.
=item $properties; an array of C<enumeration GtkAccessibleProperty defined in Gnome::Gtk4::T-enums>.
=item $values; an array of B<GValues>, one for each property

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 update-relation
This function is not yet available

Updates a list of accessible relations.

This function should be called by B<Gnome::Gtk4::Widget> types whenever an accessible
relation change must be communicated to assistive technologies.

If the  C<enumeration AccessibleRelation from Gnome::Gtk4::T-enums>  requires a list of references,
you should pass each reference individually, followed by undefined, e.g.

=begin code
method update-relation ( GtkAccessibleRelation $first-relation, … )
=end code

=item $first-relation; the first C<enumeration GtkAccessibleRelation defined in Gnome::Gtk4::T-enums>.
=item …; …. Note that each argument must be specified as a type followed by its value!

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 update-relation-value

Updates an array of accessible relations.

This function should be called by B<Gnome::Gtk4::Widget> types whenever an accessible
relation change must be communicated to assistive technologies.

This function is meant to be used by language bindings.

=begin code
method update-relation-value ( Int() $n-relations, GtkAccessibleRelation $relations, N-Object $values )
=end code

=item $n-relations; the number of accessible relations to set.
=item $relations; an array of C<enumeration GtkAccessibleRelation defined in Gnome::Gtk4::T-enums>.
=item $values; an array of B<GValues>, one for each relation

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 update-state
This function is not yet available

Updates a list of accessible states. See the  C<enumeration AccessibleState from Gnome::Gtk4::T-enums> 
documentation for the value types of accessible states.

This function should be called by B<Gnome::Gtk4::Widget> types whenever an accessible
state change must be communicated to assistive technologies.

Example:

=begin code
method update-state ( GtkAccessibleState $first-state, … )
=end code

=item $first-state; the first C<enumeration GtkAccessibleState defined in Gnome::Gtk4::T-enums>.
=item …; …. Note that each argument must be specified as a type followed by its value!

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 update-state-value

Updates an array of accessible states.

This function should be called by B<Gnome::Gtk4::Widget> types whenever an accessible
state change must be communicated to assistive technologies.

This function is meant to be used by language bindings.

=begin code
method update-state-value ( Int() $n-states, GtkAccessibleState $states, N-Object $values )
=end code

=item $n-states; the number of accessible states to set.
=item $states; an array of C<enumeration GtkAccessibleState defined in Gnome::Gtk4::T-enums>.
=item $values; an array of B<GValues>, one for each state

=end pod

