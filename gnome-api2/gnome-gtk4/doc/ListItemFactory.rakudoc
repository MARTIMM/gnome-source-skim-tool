=comment Package: Gtk4, C-Source: listitemfactory
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=TITLE Gnome::Gtk4::ListItemFactory
=head1 Description

A B<Gnome::Gtk4::ListItemFactory> creates widgets for the items taken from a B<Gnome::Gio::R-ListModel>.

This is one of the core concepts of handling list widgets such
as B<Gnome::Gtk4::ListView> or B<Gnome::Gtk4::GridView>.

The B<Gnome::Gtk4::ListItemFactory> is tasked with creating widgets for items
taken from the model when the views need them and updating them as
the items displayed by the view change.

A view is usually only able to display anything after both a factory
and a model have been set on the view. So it is important that you do
not skip this step when setting up your first view.

Because views do not display the whole list at once but only a few
items, they only need to maintain a few widgets at a time. They will
instruct the B<Gnome::Gtk4::ListItemFactory> to create these widgets and bind them
to the items that are currently displayed.

As the list model changes or the user scrolls to the list, the items will
change and the view will instruct the factory to bind the widgets to those
new items.

The actual widgets used for displaying those widgets is provided by you.

When the factory needs widgets created, it will create a B<Gnome::Gtk4::ListItem>
and hand it to your code to set up a widget for. This list item will provide
various properties with information about what item to display and provide
you with some opportunities to configure its behavior. See the
B<Gnome::Gtk4::ListItem> documentation for further details.

Various implementations of B<Gnome::Gtk4::ListItemFactory> exist to allow you different
ways to provide those widgets. The most common implementations are
B<Gnome::Gtk4::BuilderListItemFactory> which takes a B<Gnome::Gtk4::Builder> .ui file
and then creates widgets and manages everything automatically from the
information in that file and B<Gnome::Gtk4::SignalListItemFactory> which allows
you to connect to signals with your own code and retain full control over
how the widgets are setup and managed.

A B<Gnome::Gtk4::ListItemFactory> is supposed to be final - that means its behavior should
not change and the first widget created from it should behave the same way as
the last widget created from it.
If you intend to do changes to the behavior, it is recommended that you create
a new B<Gnome::Gtk4::ListItemFactory> which will allow the views to recreate its widgets.

Once you have chosen your factory and created it, you need to set it
on the view widget you want to use it with, such as via
C<.set-factory() in class Gnome::Gtk4::ListView>. Reusing factories across different
views is allowed, but very uncommon.

=begin comment

=head2 Uml Diagram
![](plantuml/â€¦.svg)

=end comment

=begin comment

=head2 Example
# Example use of module Gnome::Gtk4::ListItemFactory

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

=head2 new

=head3 :native-object

Create an object using a native object from elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object() :$native-object! )

=end pod

