=comment Package: Gtk4, C-Source: applicationwindow
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=TITLE Gnome::Gtk4::ApplicationWindow
=head1 Description

B<Gnome::Gtk4::ApplicationWindow> is a B<Gnome::Gtk4::Window> subclass that integrates with
B<Gnome::Gtk4::Application>.

Notably, B<Gnome::Gtk4::ApplicationWindow> can handle an application menubar.

This class implements the B<Gnome::Gio::R-ActionGroup> and B<Gnome::Gio::R-ActionMap> interfaces,
to let you add window-specific actions that will be exported by the
associated B<Gnome::Gtk4::Application>, together with its application-wide
actions. Window-specific actions are prefixed with the “win.”
prefix and application-wide actions are prefixed with the “app.”
prefix. Actions must be addressed with the prefixed name when
referring to them from a B<Gnome::Gio::MenuModel>.

Note that widgets that are placed inside a B<Gnome::Gtk4::ApplicationWindow>
can also activate these actions, if they implement the
B<Gnome::Gtk4::R-Actionable> interface.

The settings I<gtk-shell-shows-app-menu defined in Gnome::Gtk4::Settings> and
I<gtk-shell-shows-menubar defined in Gnome::Gtk4::Settings> tell GTK whether the
desktop environment is showing the application menu and menubar
models outside the application as part of the desktop shell.
For instance, on OS X, both menus will be displayed remotely;
on Windows neither will be.

If the desktop environment does not display the menubar, then
B<Gnome::Gtk4::ApplicationWindow> will automatically show a menubar for it.
This behaviour can be overridden with the
I<show-menubar> property. If the
desktop environment does not display the application menu, then
it will automatically be included in the menubar or in the windows
client-side decorations.

See B<Gnome::Gtk4::PopoverMenu> for information about the XML language
used by B<Gnome::Gtk4::Builder> for menu models.

See also: C<.set-menubar()> in class C<Gnome::Gtk4::Application>.

=head3 A GtkApplicationWindow with a menubar

The code sample below shows how to set up a B<Gnome::Gtk4::ApplicationWindow>
with a menu bar defined on the B<Gnome::Gtk4::Application>:

=begin code
my Gnome::Gtk4::Application $app .= new-application( "org.gtk.test", 0);
my Gnome::Gtk4::Builder $builder .= from-string( q:to/EOUI/, -1);
  <interface>
    <menu id='menubar'>
      <submenu>
        <attribute name='label' translatable='yes'>_Edit</attribute>
        <item>
          <attribute name='label' translatable='yes'>_Copy</attribute>
          <attribute name='action'>win.copy</attribute>
        </item>
        <item>
          <attribute name='label' translatable='yes'>_Paste</attribute>
          <attribute name='action'>win.paste</attribute>
        </item>
      </submenu>
    </menu>
  </interface>
  EOUI

my Gnome::Gio::MenuModel $menubar = $builder.get-object("menubar);
$app.set-menubar($menubar);
$builder.clear-object

# ...
my Gnome::Gtk4::Widget $window .= new-application-window($app);
=end code

=head2 Uml Diagram
=for image :src<asset_files/images/plantuml/ApplicationWindow.png> :width<70%> :class<inline>

=begin comment

=head2 Example
# Example use of module Gnome::Gtk4::ApplicationWindow

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

=head2 new

=head3 :native-object

Create an object using a native object from an object of the same type found elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object() :$native-object! )

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-applicationwindow

Creates a new B<Gnome::Gtk4::ApplicationWindow>.

=begin code
method new-applicationwindow ( N-Object() $application --> Gnome::Gtk4::ApplicationWindow )
=end code

=item $application; a B<Gnome::Gtk4::Application>.

=begin comment

=head2 Example
# Example for new-applicationwindow

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-help-overlay

Gets the B<Gnome::Gtk4::ShortcutsWindow> that is associated with C<$window>.

See C<.set-help-overlay()>.

=begin code
method get-help-overlay (--> N-Object )
=end code

Return value; the help overlay associated
  with C<$window>. 

=begin comment

=head2 Example
# Example for get-help-overlay

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-id

Returns the unique ID of the window.

 If the window has not yet been added to a B<Gnome::Gtk4::Application>, returns B<0>.

=begin code
method get-id (--> UInt )
=end code

Return value; the unique ID for C<$window>, or B<0> if the window
  has not yet been added to a B<Gnome::Gtk4::Application>. 

=begin comment

=head2 Example
# Example for get-id

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-show-menubar

Returns whether the window will display a menubar for the app menu
and menubar as needed.

=begin code
method get-show-menubar (--> Bool )
=end code

Return value; C<True> if C<$window> will display a menubar when needed. 

=begin comment

=head2 Example
# Example for get-show-menubar

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-help-overlay

Associates a shortcuts window with the application window.

Additionally, sets up an action with the name
B<win>.show-help-overlay` to present it.
 C<$window> takes responsibility for destroying C<$help-overlay>.

=begin code
method set-help-overlay ( N-Object() $help-overlay )
=end code

=item $help-overlay; a B<Gnome::Gtk4::ShortcutsWindow>.

=begin comment

=head2 Example
# Example for set-help-overlay

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-show-menubar

Sets whether the window will display a menubar for the app menu
and menubar as needed.

=begin code
method set-show-menubar ( Bool() $show-menubar )
=end code

=item $show-menubar; whether to show a menubar when needed.

=begin comment

=head2 Example
# Example for set-show-menubar

=end comment

=end pod

