=comment Package: Gtk4, C-Source: expression
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=TITLE Gnome::Gtk4::Expression
=head1 Description

B<Gnome::Gtk4::Expression> provides a way to describe references to values.

An important aspect of expressions is that the value can be obtained
from a source that is several steps away. For example, an expression
may describe ‘the value of property A of B<object1>, which is itself the
value of a property of B<object2>’. And B<object1> may not even exist yet
at the time that the expression is created. This is contrast to B<Gnome::GObject::Object>
property bindings, which can only create direct connections between
the properties of two objects that must both exist for the duration
of the binding.

An expression needs to be "evaluated" to obtain the value that it currently
refers to. An evaluation always happens in the context of a current object
called B<this> (it mirrors the behavior of object-oriented languages),
which may or may not influence the result of the evaluation. Use
C<.evaluate()> for evaluating an expression.

Various methods for defining expressions exist, from simple constants via
C<.newexpression()> in class C<Gnome::Gtk4::ConstantExpression> to looking up properties in a B<Gnome::GObject::Object>
(even recursively) via C<.newexpression()> in class C<Gnome::Gtk4::PropertyExpression> or providing
custom functions to transform and combine expressions via
C<.newexpression()> in class C<Gnome::Gtk4::ClosureExpression>.

Here is an example of a complex expression:

=begin comment
  color_expr = gtk_property_expression_new (GTK_TYPE_LIST_ITEM,
                                            NULL, "item");
  expression = gtk_property_expression_new (GTK_TYPE_COLOR,
                                            color_expr, "name");

=end comment

when evaluated with B<this> being a B<Gnome::Gtk4::ListItem>, it will obtain the
"item" property from the B<Gnome::Gtk4::ListItem>, and then obtain the "name" property
from the resulting object (which is assumed to be of type B<GTK_TYPE_COLOR>).

A more concise way to describe this would be

=begin comment
  this->item->name

=end comment

The most likely place where you will encounter expressions is in the context
of list models and list widgets using them. For example, B<Gnome::Gtk4::DropDown> is
evaluating a B<Gnome::Gtk4::Expression> to obtain strings from the items in its model
that it can then use to match against the contents of its search entry.
B<Gnome::Gtk4::StringFilter> is using a B<Gnome::Gtk4::Expression> for similar reasons.

By default, expressions are not paying attention to changes and evaluation is
just a snapshot of the current state at a given time. To get informed about
changes, an expression needs to be "watched" via a  B<Gnome::Gtk4::N-ExpressionWatch> ,
which will cause a callback to be called whenever the value of the expression may
have changed; C<.watch()> starts watching an expression, and
C<.unwatch()> in class C<Gnome::Gtk4::N-ExpressionWatch> stops.

Watches can be created for automatically updating the property of an object,
similar to GObject's B<Gnome::GObject::Binding> mechanism, by using C<.bind()>.

=head3 GtkExpression in GObject properties

In order to use a B<Gnome::Gtk4::Expression> as a B<Gnome::GObject::Object> property, you must use the
C<.param-spec-expression()> when creating a B<Gnome::GObject::ParamSpec> to install in the
B<Gnome::GObject::Object> class being defined; for instance:

=begin comment
obj_props[PROP_EXPRESSION] =
  gtk_param_spec_expression ("expression",
                             "Expression",
                             "The expression used by the widget",
                             G_PARAM_READWRITE |
                             G_PARAM_STATIC_STRINGS |
                             G_PARAM_EXPLICIT_NOTIFY);

=end comment

When implementing the B<GObjectClass>.set_property` and B<GObjectClass>.get_property`
virtual functions, you must use C<.value-get-expression()>, to retrieve the
stored B<Gnome::Gtk4::Expression> from the B<Gnome::GObject::N-Value> container, and C<.value-set-expression()>,
to store the B<Gnome::Gtk4::Expression> into the B<Gnome::GObject::N-Value>; for instance:

=begin comment
  // in set_property()...
  case PROP_EXPRESSION:
    foo_widget_set_expression (foo, gtk_value_get_expression (value));
    break;

  // in get_property()...
  case PROP_EXPRESSION:
    gtk_value_set_expression (value, foo->expression);
    break;

=end comment

=head3 GtkExpression in .ui files

B<Gnome::Gtk4::Builder> has support for creating expressions. The syntax here can be used where
a B<Gnome::Gtk4::Expression> object is needed like in a `<property>` tag for an expression
property, or in a `<binding name="property">` tag to bind a property to an expression.

To create a property expression, use the `<lookup>` element. It can have a B<type>
attribute to specify the object type, and a B<name> attribute to specify the property
to look up. The content of `<lookup>` can either be an element specifying the expression
to use the object, or a string that specifies the name of the object to use.

Example:

=begin comment
  <lookup name='search'>string_filter</lookup>

=end comment

Since the `<lookup>` element creates an expression and its element content can
itself be an expression, this means that `<lookup>` tags can also be nested.
This is a common idiom when dealing with B<Gnome::Gtk4::ListItem>s. See
B<Gnome::Gtk4::BuilderListItemFactory> for an example of this technique.

To create a constant expression, use the `<constant>` element. If the type attribute
is specified, the element content is interpreted as a value of that type. Otherwise,
it is assumed to be an object. For instance:

=begin comment
  <constant>string_filter</constant>
  <constant type='gchararray'>Hello, world</constant>

=end comment

To create a closure expression, use the `<closure>` element. The B<function>
attribute specifies what function to use for the closure, and the B<type>
attribute specifies its return type. The content of the element contains the
expressions for the parameters. For instance:

=begin comment
  <closure type='gchararray' function='combine_args_somehow'>
    <constant type='gchararray'>File size:</constant>
    <lookup type='GFile' name='size'>myfile</lookup>
  </closure>

=end comment

To create a property binding, use the `<binding>` element in place of where a
`<property>` tag would ordinarily be used. The B<name> and B<object> attributes are
supported. The B<name> attribute is required, and pertains to the applicable property
name. The B<object> attribute is optional. If provided, it will use the specified object
as the B<this> object when the expression is evaluated. Here is an example in which the
B<label> property of a B<Gnome::Gtk4::Label> is bound to the B<string> property of another arbitrary
object:

=head2 Uml Diagram
=for image :src<asset_files/images/plantuml/Expression.png> :width<70%> :class<inline>

=begin comment

=head2 Example
# Example use of module Gnome::Gtk4::Expression

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

=head2 new

=head3 :native-object

Create an object using a native object from an object of the same type found elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object() :$native-object! )

=end pod

#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 bind

Bind B<target>'s property named B<property> to B<self>.

The value that B<self> evaluates to is set via B<g_object_set>()` on
B<target>. This is repeated whenever B<self> changes to ensure that
the object's property stays synchronized with B<self>.

If B<self>'s evaluation fails, B<target>'s B<property> is not updated.
You can ensure that this doesn't happen by using a fallback
expression.

Note that this function takes ownership of B<self>. If you want
to keep it around, you should C<.ref()> it beforehand.

=begin code
method bind ( gpointer $target, Str $property, gpointer $this --> N-Object )
=end code

=item $target; the target object to bind to.
=item $property; name of the property on B<target> to bind to.
=item $this; the this argument for
  the evaluation of B<self>.

Return value; a B<Gnome::Gtk4::N-ExpressionWatch>. 

=begin comment

=head2 Example
# Example for bind

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 evaluate

Evaluates the given expression and on success stores the result
in C<$value>.

The B<Gnome::GObject::Expression> of B<value> will be the type given by
C<.get-value-type()>.

It is possible that expressions cannot be evaluated - for example
when the expression references objects that have been destroyed or
set to undefined. In that case B<value> will remain empty and C<False>
will be returned.

=begin code
method evaluate ( gpointer $this, N-Object $value --> Bool )
=end code

=item $this; the this argument for the evaluation.
=item $value; an empty B<Gnome::GObject::N-Value>

Return value; C<True> if the expression could be evaluated. 

=begin comment

=head2 Example
# Example for evaluate

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-value-type

Gets the B<Gnome::GObject::Expression> that this expression evaluates to.

This type is constant and will not change over the lifetime
of this expression.

=begin code
method get-value-type (--> GType )
=end code

Return value; The type returned from C<.evaluate()>. 

=begin comment

=head2 Example
# Example for get-value-type

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 is-static

Checks if the expression is static.

A static expression will never change its result when
C<.evaluate()> is called on it with the same arguments.

That means a call to C<.watch()> is not necessary because
it will never trigger a notify.

=begin code
method is-static (--> Bool )
=end code

Return value; C<True> if the expression is static. 

=begin comment

=head2 Example
# Example for is-static

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 ref

Acquires a reference on the given B<Gnome::Gtk4::Expression>.

=begin code
method ref (--> N-Object )
=end code

Return value; the B<Gnome::Gtk4::Expression> with an additional reference. 

=begin comment

=head2 Example
# Example for ref

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 unref

Releases a reference on the given B<Gnome::Gtk4::Expression>.

If the reference was the last, the resources associated to the B<self> are
freed.

=begin code
method unref ( )
=end code

=begin comment

=head2 Example
# Example for unref

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 watch

Watch the given B<expression> for changes.

The C<$notify> function will be called whenever the evaluation of B<self>
may have changed.

GTK cannot guarantee that the evaluation did indeed change when the C<$notify>
gets invoked, but it guarantees the opposite: When it did in fact change,
the C<$notify> will be invoked.

=begin code
method watch ( gpointer $this, GtkExpressionNotify &notify, gpointer $user-data, GDestroyNotify &user-destroy --> N-Object )
=end code

=item $this; the B<this> argument to
  watch.
=item GtkExpressionNotify &notify; callback to invoke when the expression changes. The function must be specified with the following signature; C<:( gpointer $user-data )>.
=item $user-data; user data to pass to the B<notify> callback.
=item GDestroyNotify &user-destroy; destroy notify for B<user_data>. The function must be specified with the following signature; C<:( gpointer $data )>.

Return value; The newly installed watch. Note that the only
  reference held to the watch will be released when the watch is unwatched
  which can happen automatically, and not just via
  C<.unwatch()> in class C<Gnome::Gtk4::N-ExpressionWatch>. You should call C<.ref()> in class C<Gnome::Gtk4::N-ExpressionWatch>
  if you want to keep the watch around.. 

=begin comment

=head2 Example
# Example for watch

=end comment

=end pod

