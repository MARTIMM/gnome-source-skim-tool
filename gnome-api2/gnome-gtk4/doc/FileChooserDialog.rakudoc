=comment Package: Gtk4, C-Source: filechooserdialog
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=TITLE Gnome::Gtk4::FileChooserDialog
=head1 Description

B<Gnome::Gtk4::FileChooserDialog> is a dialog suitable for use with
“File Open” or “File Save” commands.

=for image :src<asset_files/images/filechooser.png> :width<30%> :class<inline>

This widget works by putting a B<Gnome::Gtk4::FileChooserWidget>
inside a B<Gnome::Gtk4::Dialog>. It exposes the B<Gnome::Gtk4::R-FileChooser>
interface, so you can use all of the B<Gnome::Gtk4::R-FileChooser> functions
on the file chooser dialog as well as those for B<Gnome::Gtk4::Dialog>.

Note that B<Gnome::Gtk4::FileChooserDialog> does not have any methods of its
own. Instead, you should use the functions that work on a
B<Gnome::Gtk4::R-FileChooser>.

If you want to integrate well with the platform you should use the
B<Gnome::Gtk4::FileChooserNative> API, which will use a platform-specific
dialog if available and fall back to B<Gnome::Gtk4::FileChooserDialog>
otherwise.

=head3 Typical usage

In the simplest of cases, you can the following code to use
B<Gnome::Gtk4::FileChooserDialog> to select a file for opening:

=begin comment
static void
on_open_response (GtkDialog *dialog,
                  int        response)
{
  if (response == GTK_RESPONSE_ACCEPT)
    {
      GtkFileChooser *chooser = GTK_FILE_CHOOSER (dialog);

      g_autoptr(GFile) file = gtk_file_chooser_get_file (chooser);

      open_file (file);
    }

  gtk_window_destroy (GTK_WINDOW (dialog));
}

  // ...
  GtkWidget *dialog;
  GtkFileChooserAction action = GTK_FILE_CHOOSER_ACTION_OPEN;

  dialog = gtk_file_chooser_dialog_new ("Open File",
                                        parent_window,
                                        action,
                                        _("_Cancel"),
                                        GTK_RESPONSE_CANCEL,
                                        _("_Open"),
                                        GTK_RESPONSE_ACCEPT,
                                        NULL);

  gtk_widget_show (dialog);

  g_signal_connect (dialog, "response",
                    G_CALLBACK (on_open_response),
                    NULL);

=end comment

To use a dialog for saving, you can use this:

=begin comment
static void
on_save_response (GtkDialog *dialog,
                  int        response)
{
  if (response == GTK_RESPONSE_ACCEPT)
    {
      GtkFileChooser *chooser = GTK_FILE_CHOOSER (dialog);

      g_autoptr(GFile) file = gtk_file_chooser_get_file (chooser);

      save_to_file (file);
    }

  gtk_window_destroy (GTK_WINDOW (dialog));
}

  // ...
  GtkWidget *dialog;
  GtkFileChooser *chooser;
  GtkFileChooserAction action = GTK_FILE_CHOOSER_ACTION_SAVE;

  dialog = gtk_file_chooser_dialog_new ("Save File",
                                        parent_window,
                                        action,
                                        _("_Cancel"),
                                        GTK_RESPONSE_CANCEL,
                                        _("_Save"),
                                        GTK_RESPONSE_ACCEPT,
                                        NULL);
  chooser = GTK_FILE_CHOOSER (dialog);

  if (user_edited_a_new_document)
    gtk_file_chooser_set_current_name (chooser, _("Untitled document"));
  else
    gtk_file_chooser_set_file (chooser, existing_filename);

  gtk_widget_show (dialog);

  g_signal_connect (dialog, "response",
                    G_CALLBACK (on_save_response),
                    NULL);

=end comment

=head3 Setting up a file chooser dialog

There are various cases in which you may need to use a B<Gnome::Gtk4::FileChooserDialog>:

=item To select a file for opening, use C<GTK_FILE_CHOOSER_ACTION_OPEN>.

=item To save a file for the first time, use C<GTK_FILE_CHOOSER_ACTION_SAVE>,
  and suggest a name such as “Untitled” with
  C<.set-current-name() in class Gnome::Gtk4::R-FileChooser>.

=item To save a file under a different name, use C<GTK_FILE_CHOOSER_ACTION_SAVE>,
  and set the existing file with C<.set-file() in class Gnome::Gtk4::R-FileChooser>.

=item To choose a folder instead of a filem use C<GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER>.

In general, you should only cause the file chooser to show a specific
folder when it is appropriate to use C<.set-file() in class Gnome::Gtk4::R-FileChooser>,
i.e. when you are doing a “Save As” command and you already have a file
saved somewhere.

=head3 Response Codes

B<Gnome::Gtk4::FileChooserDialog> inherits from B<Gnome::Gtk4::Dialog>, so buttons that
go in its action area have response codes such as C<GTK_RESPONSE_ACCEPT> and
C<GTK_RESPONSE_CANCEL>. For example, you could call
C<.newfilechooserdialog()> as follows:

=begin comment
GtkWidget *dialog;
GtkFileChooserAction action = GTK_FILE_CHOOSER_ACTION_OPEN;

dialog = gtk_file_chooser_dialog_new ("Open File",
                                      parent_window,
                                      action,
                                      _("_Cancel"),
                                      GTK_RESPONSE_CANCEL,
                                      _("_Open"),
                                      GTK_RESPONSE_ACCEPT,
                                      NULL);

=end comment

This will create buttons for “Cancel” and “Open” that use predefined
response identifiers from  C<enumeration ResponseType from Gnome::Gtk4::T-dialog> .  For most dialog
boxes you can use your own custom response codes rather than the
ones in  C<enumeration ResponseType from Gnome::Gtk4::T-dialog> , but B<Gnome::Gtk4::FileChooserDialog> assumes that
its “accept”-type action, e.g. an “Open” or “Save” button,
will have one of the following response codes:

=item C<GTK_RESPONSE_ACCEPT>
=item C<GTK_RESPONSE_OK>
=item C<GTK_RESPONSE_YES>
=item C<GTK_RESPONSE_APPLY>

This is because B<Gnome::Gtk4::FileChooserDialog> must intercept responses and switch
to folders if appropriate, rather than letting the dialog terminate — the
implementation uses these known response codes to know which responses can
be blocked if appropriate.

To summarize, make sure you use a predefined response code
when you use B<Gnome::Gtk4::FileChooserDialog> to ensure proper operation.

=head3 CSS nodes

B<Gnome::Gtk4::FileChooserDialog> has a single CSS node with the name B<window> and style
class `.filechooser`.

=begin comment

=head2 Uml Diagram
![](plantuml/….svg)

=end comment

=begin comment

=head2 Example
# Example use of module Gnome::Gtk4::FileChooserDialog

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

B<Note: The native version of this class is deprecated in gtk4-lib() since version 4.10>

=head2 new

=head3 :native-object

Create an object using a native object from an object of the same type found elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object() :$native-object! )

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-filechooserdialog
This function is not yet available

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Creates a new B<Gnome::Gtk4::FileChooserDialog>.

This function is analogous to C<.new-with-buttons() in class Gnome::Gtk4::Dialog>.

=begin code
method new-filechooserdialog ( Str $title, N-Object() $parent, GtkFileChooserAction $action, Str $first-button-text, … --> Gnome::Gtk4::FileChooserDialog \)
=end code

=item $title; Title of the dialog.
=item $parent; Transient parent of the dialog.
=item $action; Open or save mode for the dialog.
=item $first-button-text; text to go in the first button.
=item …; …. Note that each argument must be specified as a type followed by its value!

=begin comment

=head2 Example
# Example for new-filechooserdialog

=end comment

=end pod

