=comment Package: Gtk4, C-Source: boxlayout
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=TITLE Gnome::Gtk4::BoxLayout
=head1 Description

B<Gnome::Gtk4::BoxLayout> is a layout manager that arranges children in a single
row or column.

Whether it is a row or column depends on the value of its
I<orientation defined in Gnome::Gtk4::R-Orientable> property. Within the other dimension
all children all allocated the same size. The B<Gnome::Gtk4::BoxLayout> will respect
the I<halign defined in Gnome::Gtk4::Widget> and I<valign defined in Gnome::Gtk4::Widget>
properties of each child widget.

If you want all children to be assigned the same size, you can use
the I<homogeneous> property.

If you want to specify the amount of space placed between each child,
you can use the I<spacing> property.

=begin comment

=head2 Uml Diagram
![](plantuml/â€¦.svg)

=end comment

=begin comment

=head2 Example
# Example use of module Gnome::Gtk4::BoxLayout

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

=head2 new

=head3 :native-object

Create an object using a native object from an object of the same type found elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object() :$native-object! )

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-boxlayout

Creates a new B<Gnome::Gtk4::BoxLayout>.

=begin code
method new-boxlayout ( GtkOrientation $orientation --> Gnome::Gtk4::BoxLayout \)
=end code

=item $orientation; the orientation for the new layout.

=begin comment

=head2 Example
# Example for new-boxlayout

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-baseline-child

Gets the value set by C<.set-baseline-child()>.

=begin code
method get-baseline-child (--> Int )
=end code

Return value; the index of the child that determines the baseline
    in vertical layout, or -1. 

=begin comment

=head2 Example
# Example for get-baseline-position

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-baseline-position

Gets the value set by C<.set-baseline-position()>.

=begin code
method get-baseline-position (--> GtkBaselinePosition )
=end code

Return value; the baseline position. 

=begin comment

=head2 Example
# Example for get-homogeneous

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-homogeneous

Returns whether the layout is set to be homogeneous.

=begin code
method get-homogeneous (--> Bool )
=end code

Return value; C<True> if the layout is homogeneous. 

=begin comment

=head2 Example
# Example for get-spacing

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-spacing

Returns the space that C<$box-layout> puts between children.

=begin code
method get-spacing (--> UInt )
=end code

Return value; the spacing of the layout. 

=begin comment

=head2 Example
# Example for set-baseline-position

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-baseline-child

Sets the index of the child that determines the baseline
in vertical layout.

=begin code
method set-baseline-child ( Int() $child )
=end code

=item $child; the child position, or -1.

=begin comment

=head2 Example
# Example for set-homogeneous

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-baseline-position

Sets the baseline position of a box layout.

The baseline position affects only horizontal boxes with at least one
baseline aligned child. If there is more vertical space available than
requested, and the baseline is not allocated by the parent then the
given C<$position> is used to allocate the baseline within the extra
space available.

=begin code
method set-baseline-position ( GtkBaselinePosition $position )
=end code

=item $position; a C<enumeration GtkBaselinePosition defined in Gnome::Gtk4::T-enums>.

=begin comment

=head2 Example
# Example for set-spacing

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-homogeneous

Sets whether the box layout will allocate the same
size to all children.

=begin code
method set-homogeneous ( Bool() $homogeneous )
=end code

=item $homogeneous; C<True> to set the box layout as homogeneous.

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-spacing

Sets how much spacing to put between children.

=begin code
method set-spacing ( UInt() $spacing )
=end code

=item $spacing; the spacing to apply between children.

=end pod

