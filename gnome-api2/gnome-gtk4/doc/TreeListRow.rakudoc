=comment Package: Gtk4, C-Source: treelistmodel
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=TITLE Gnome::Gtk4::TreeListRow
=head1 Description

B<Gnome::Gtk4::TreeListRow> is used by B<Gnome::Gtk4::TreeListModel> to represent items.

It allows navigating the model as a tree and modify the state of rows.

B<Gnome::Gtk4::TreeListRow> instances are created by a B<Gnome::Gtk4::TreeListModel> only
when the I<passthrough defined in Gnome::Gtk4::TreeListModel> property is not set.

There are various support objects that can make use of B<Gnome::Gtk4::TreeListRow>
objects, such as the B<Gnome::Gtk4::TreeExpander> widget that allows displaying
an icon to expand or collapse a row or B<Gnome::Gtk4::TreeListRowSorter> that
makes it possible to sort trees properly.

=begin comment

=head2 Uml Diagram
![](plantuml/â€¦.svg)

=end comment

=begin comment

=head2 Example
# Example use of module Gnome::Gtk4::TreeListRow

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

=head2 new

=head3 :native-object

Create an object using a native object from elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object() :$native-object! )

=end pod

#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-child-row

If C<$self> is not expanded or C<$position> is greater than the
number of children, undefined is returned.

=begin code
method get-child-row ( UInt() $position --> N-Object )
=end code

=item $position; position of the child to get.

Return value; the child in C<$position>. 

=begin comment

=head2 Example
# Example for get-child-row

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-children

If the row is expanded, gets the model holding the children of C<$self>.

This model is the model created by the
[callback C<$Gtk>.TreeListModelCreateModelFunc]
and contains the original items, no matter what value
I<passthrough defined in Gnome::Gtk4::TreeListModel> is set to.

=begin code
method get-children (--> N-List )
=end code

Return value; The model containing the children. 

=begin comment

=head2 Example
# Example for get-children

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-depth

Gets the depth of this row.

Rows that correspond to items in the root model have a depth
of zero, rows corresponding to items of models of direct children
of the root model have a depth of 1 and so on.

The depth of a row never changes until the row is removed from its model
at which point it will forever return 0.

=begin code
method get-depth (--> UInt )
=end code

Return value; The depth of this row. 

=begin comment

=head2 Example
# Example for get-depth

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-expanded

Gets if a row is currently expanded.

=begin code
method get-expanded (--> Bool )
=end code

Return value; C<True> if the row is expanded. 

=begin comment

=head2 Example
# Example for get-expanded

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-item

Gets the item corresponding to this row,

=begin code
method get-item (--> gpointer )
=end code

Return value; The item
  of this row. This function is only marked as nullable for backwards
  compatibility reasons.. 

=begin comment

=head2 Example
# Example for get-item

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-parent

Gets the row representing the parent for C<$self>.

That is the row that would need to be collapsed
to make this row disappear.

If C<$self> is a row corresponding to the root model,
undefined is returned.

The value returned by this function never changes
until the row is removed from its model at which point
it will forever return undefined.

=begin code
method get-parent (--> N-Object )
=end code

Return value; The parent of C<$self>. 

=begin comment

=head2 Example
# Example for get-parent

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-position

Returns the position in the B<Gnome::Gtk4::TreeListModel> that C<$self> occupies
at the moment.

=begin code
method get-position (--> UInt )
=end code

Return value; The position in the model. 

=begin comment

=head2 Example
# Example for get-position

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 is-expandable

Checks if a row can be expanded.

This does not mean that the row is actually expanded,
this can be checked with C<.get-expanded()>.

If a row is expandable never changes until the row is removed
from its model at which point it will forever return C<False>.

=begin code
method is-expandable (--> Bool )
=end code

Return value; C<True> if the row is expandable. 

=begin comment

=head2 Example
# Example for is-expandable

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-expanded

Expands or collapses a row.

If a row is expanded, the model of calling the
[callback C<$Gtk>.TreeListModelCreateModelFunc] for the row's
item will be inserted after this row. If a row is collapsed,
those items will be removed from the model.

If the row is not expandable, this function does nothing.

=begin code
method set-expanded ( Bool() $expanded )
=end code

=item $expanded; C<True> if the row should be expanded.

=begin comment

=head2 Example
# Example for set-expanded

=end comment

=end pod

