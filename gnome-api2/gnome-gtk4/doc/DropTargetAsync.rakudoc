=comment Package: Gtk4, C-Source: droptargetasync
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=TITLE Gnome::Gtk4::DropTargetAsync
=head1 Description

B<Gnome::Gtk4::DropTargetAsync> is an event controller to receive Drag-and-Drop
operations, asynchronously.

It is the more complete but also more complex method of handling drop
operations compared to B<Gnome::Gtk4::DropTarget>, and you should only use
it if B<Gnome::Gtk4::DropTarget> doesn't provide all the features you need.

To use a B<Gnome::Gtk4::DropTargetAsync> to receive drops on a widget, you create
a B<Gnome::Gtk4::DropTargetAsync> object, configure which data formats and actions
you support, connect to its signals, and then attach it to the widget
with C<.add-controller()> in class C<Gnome::Gtk4::Widget>.

During a drag operation, the first signal that a B<Gnome::Gtk4::DropTargetAsync>
emits is I<accept>, which is meant to determine
whether the target is a possible drop site for the ongoing drop. The
default handler for the I<accept> signal accepts the drop if it finds
a compatible data format and an action that is supported on both sides.

If it is, and the widget becomes a target, you will receive a
I<drag-enter> signal, followed by
I<drag-motion> signals as the pointer moves,
optionally a I<drop> signal when a drop happens,
and finally a I<drag-leave> signal when the
pointer moves off the widget.

The I<drag-enter> and I<drag-motion> handler return a C<bit field GdkDragAction defined in Gnome::Gdk4::T-enums>
to update the status of the ongoing operation. The I<drop> handler
should decide if it ultimately accepts the drop and if it does, it
should initiate the data transfer and finish the operation by calling
C<.finish()> in class C<Gnome::Gdk4::Drop>.

Between the I<drag-enter> and I<drag-leave> signals the widget is a
current drop target, and will receive the C<GTK_STATE_FLAG_DROP_ACTIVE>
state, which can be used by themes to style the widget as a drop target.

=head2 Uml Diagram
=for image :src<asset_files/images/plantuml/DropTargetAsync.png> :width<70%> :class<inline>

=begin comment

=head2 Example
# Example use of module Gnome::Gtk4::DropTargetAsync

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

=head2 new

=head3 :native-object

Create an object using a native object from an object of the same type found elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object() :$native-object! )

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-droptargetasync

Creates a new B<Gnome::Gtk4::DropTargetAsync> object.

=begin code
method new-droptargetasync ( N-Object $formats, UInt $actions --> Gnome::Gtk4::DropTargetAsync )
=end code

=item $formats; (transfer ownership: full) the supported data formats
=item $actions; the supported actions.

=begin comment

=head2 Example
# Example for new-droptargetasync

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-actions

Gets the actions that this drop target supports.

=begin code
method get-actions (--> UInt )
=end code

Return value; the actions that this drop target supports. 

=begin comment

=head2 Example
# Example for get-actions

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-formats

Gets the data formats that this drop target accepts.

If the result is undefined, all formats are expected to be supported.

=begin code
method get-formats (--> N-Object )
=end code

Return value; the supported data formats. 

=begin comment

=head2 Example
# Example for get-formats

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 reject-drop

Sets the C<$drop> as not accepted on this drag site.

This function should be used when delaying the decision
on whether to accept a drag or not until after reading
the data.

=begin code
method reject-drop ( N-Object() $drop )
=end code

=item $drop; the B<Gnome::Gdk4::Drop> of an ongoing drag operation.

=begin comment

=head2 Example
# Example for reject-drop

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-actions

Sets the actions that this drop target supports.

=begin code
method set-actions ( UInt $actions )
=end code

=item $actions; the supported actions.

=begin comment

=head2 Example
# Example for set-actions

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-formats

Sets the data formats that this drop target will accept.

=begin code
method set-formats ( N-Object $formats )
=end code

=item $formats; the supported data formats or undefined for any format

=begin comment

=head2 Example
# Example for set-formats

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Signal Documentation]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Signals

=comment -----------------------------------------------------------------------
=head3 accept

Emitted on the drop site when a drop operation is about to begin.

If the drop is not accepted, C<False> will be returned and the drop target
will ignore the drop. If C<True> is returned, the drop is accepted for now
but may be rejected later via a call to C<.reject-drop()>
or ultimately by returning C<False> from a I<drop>
handler.

The default handler for this signal decides whether to accept the drop
based on the formats provided by the C<$drop>.

If the decision whether the drop will be accepted or rejected needs
further processing, such as inspecting the data, this function should
return C<True> and proceed as is C<$drop> was accepted and if it decides to
reject the drop later, it should call C<.reject-drop()>.

=begin code
method handler (
   $drop,
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gtk4::DropTargetAsync :$_widget,
  *C<user>-options
  --> gboolean
)
=end code

=item $drop; the B<Gnome::Gdk4::Drop>.
=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gtk4::DropTargetAsync> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

Return value; C<True> if C<$drop> is accepted

=begin comment

=head2 Example
# Example for signal accept

=end comment

=comment -----------------------------------------------------------------------
=head3 drag-enter

Emitted on the drop site when the pointer enters the widget.

It can be used to set up custom highlighting.

=begin code
method handler (
   $drop,
  gdouble $x,
  gdouble $y,
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gtk4::DropTargetAsync :$_widget,
  *C<user>-options
)
=end code

=item $drop; the B<Gnome::Gdk4::Drop>.
=item $x; the x coordinate of the current pointer position.
=item $y; the y coordinate of the current pointer position.
=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gtk4::DropTargetAsync> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

=begin comment

=head2 Example
# Example for signal drag-enter

=end comment

=comment -----------------------------------------------------------------------
=head3 drag-leave

Emitted on the drop site when the pointer leaves the widget.

Its main purpose it to undo things done in
B<Gnome::Gtk4::DropTargetAsync>::drag-enter.

=begin code
method handler (
   $drop,
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gtk4::DropTargetAsync :$_widget,
  *C<user>-options
)
=end code

=item $drop; the B<Gnome::Gdk4::Drop>.
=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gtk4::DropTargetAsync> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

=begin comment

=head2 Example
# Example for signal drag-leave

=end comment

=comment -----------------------------------------------------------------------
=head3 drag-motion

Emitted while the pointer is moving over the drop target.

=begin code
method handler (
   $drop,
  gdouble $x,
  gdouble $y,
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gtk4::DropTargetAsync :$_widget,
  *C<user>-options
)
=end code

=item $drop; the B<Gnome::Gdk4::Drop>.
=item $x; the x coordinate of the current pointer position.
=item $y; the y coordinate of the current pointer position.
=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gtk4::DropTargetAsync> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

=begin comment

=head2 Example
# Example for signal drag-motion

=end comment

=comment -----------------------------------------------------------------------
=head3 drop

Emitted on the drop site when the user drops the data onto the widget.

The signal handler must determine whether the pointer position is in a
drop zone or not. If it is not in a drop zone, it returns C<False> and no
further processing is necessary.

Otherwise, the handler returns C<True>. In this case, this handler will
accept the drop. The handler must ensure that C<.finish()> in class C<Gnome::Gdk4::Drop>
is called to let the source know that the drop is done. The call to
C<.finish()> in class C<Gnome::Gdk4::Drop> must only be done when all data has been received.

To receive the data, use one of the read functions provided by
B<Gnome::Gdk4::Drop> such as C<.read-async()> in class C<Gnome::Gdk4::Drop> or
C<.read-value-async()> in class C<Gnome::Gdk4::Drop>.

=begin code
method handler (
   $drop,
  gdouble $x,
  gdouble $y,
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gtk4::DropTargetAsync :$_widget,
  *C<user>-options
  --> gboolean
)
=end code

=item $drop; the B<Gnome::Gdk4::Drop>.
=item $x; the x coordinate of the current pointer position.
=item $y; the y coordinate of the current pointer position.
=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gtk4::DropTargetAsync> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

Return value; whether the drop is accepted at the given pointer position

=begin comment

=head2 Example
# Example for signal drop

=end comment

=end pod

