=comment Package: Gtk4, C-Source: customfilter
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=TITLE Gnome::Gtk4::CustomFilter
=head1 Description

B<Gnome::Gtk4::CustomFilter> determines whether to include items with a callback.

=head2 Uml Diagram
=for image :src<asset_files/images/plantuml/CustomFilter.png> :width<70%> :class<inline>

=begin comment

=head2 Example
# Example use of module Gnome::Gtk4::CustomFilter

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

=head2 new

=head3 :native-object

Create an object using a native object from an object of the same type found elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object() :$native-object! )

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-customfilter

Creates a new filter using the given C<$match-func> to filter
items.

If C<$match-func> is undefined, the filter matches all items.

If the filter func changes its filtering behavior,
gtk_filter_changed() needs to be called.

=begin code
method new-customfilter ( GtkCustomFilterFunc &match-func, gpointer $user-data, GDestroyNotify &user-destroy --> Gnome::Gtk4::CustomFilter )
=end code

=item GtkCustomFilterFunc &match-func; function to filter items. The function must be specified with the following signature; C<:( gpointer $item, gpointer $user-data )>.
=item $user-data; user data to pass to C<$match-func>.
=item GDestroyNotify &user-destroy; destroy notify for C<$user-data>. The function must be specified with the following signature; C<:( gpointer $data )>.

=begin comment

=head2 Example
# Example for new-customfilter

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-filter-func

Sets the function used for filtering items.

If C<$match-func> is undefined, the filter matches all items.

If the filter func changes its filtering behavior,
gtk_filter_changed() needs to be called.

If a previous function was set, its C<$user-destroy> will be
called now.

=begin code
method set-filter-func ( GtkCustomFilterFunc &match-func, gpointer $user-data, GDestroyNotify &user-destroy )
=end code

=item GtkCustomFilterFunc &match-func; function to filter items. The function must be specified with the following signature; C<:( gpointer $item, gpointer $user-data )>.
=item $user-data; user data to pass to C<$match-func>.
=item GDestroyNotify &user-destroy; destroy notify for C<$user-data>. The function must be specified with the following signature; C<:( gpointer $data )>.

=begin comment

=head2 Example
# Example for set-filter-func

=end comment

=end pod

