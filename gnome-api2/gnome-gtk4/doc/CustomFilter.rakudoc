=comment Package: Gtk4, C-Source: customfilter
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Gnome::Gtk4::CustomFilter

![](images/customfilter.png)

=head1 Description

B<Gnome::Gtk4::CustomFilter> determines whether to include items with a callback.

=begin comment

=head2 Uml Diagram
![](plantuml/….svg)

=end comment

=begin comment

=head2 Example
# Example use of module Gnome::Gtk4::CustomFilter

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

=head2 new

=head3 :native-object

Create an object using a native object from elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object :$native-object! )

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-customfilter
This function is not yet available

Creates a new filter using the given C<$match-func> to filter
items.

If C<$match-func> is undefined, the filter matches all items.

If the filter func changes its filtering behavior,
gtk_filter_changed() needs to be called.

=begin code
method new-customfilter ( &match-func, gpointer $user-data, … --> Gnome::Gtk4::CustomFilter \)
=end code

=item &match-func; function to filter items. Tthe function must be specified with following signature; C<:( gpointer $item, gpointer $user-data --> gboolean )>.
=item $user-data; user data to pass to C<$match-func>.
=item user-destroy; destroy notify for C<$user-data>. Note that each argument must be specified as a type followed by its value!

=begin comment

=head2 Example
# Example for new-customfilter

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-filter-func
This function is not yet available

Sets the function used for filtering items.

If C<$match-func> is undefined, the filter matches all items.

If the filter func changes its filtering behavior,
gtk_filter_changed() needs to be called.

If a previous function was set, its C<$user-destroy> will be
called now.

=begin code
method set-filter-func ( &match-func, gpointer $user-data, … )
=end code

=item &match-func; function to filter items. Tthe function must be specified with following signature; C<:( gpointer $item, gpointer $user-data --> gboolean )>.
=item $user-data; user data to pass to C<$match-func>.
=item user-destroy; destroy notify for C<$user-data>. Note that each argument must be specified as a type followed by its value!

=begin comment

=head2 Example
# Example for set-filter-func

=end comment

=end pod

