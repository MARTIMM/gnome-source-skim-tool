=comment Package: Gtk4, C-Source: printoperation
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=TITLE Gnome::Gtk4::PrintOperation
=head1 Description

B<Gnome::Gtk4::PrintOperation> is the high-level, portable printing API.

It looks a bit different than other GTK dialogs such as the
B<Gnome::Gtk4::R-FileChooser>, since some platforms don’t expose enough
infrastructure to implement a good print dialog. On such
platforms, B<Gnome::Gtk4::PrintOperation> uses the native print dialog.
On platforms which do not provide a native print dialog, GTK
uses its own, see B<Gnome::Gtk4::PrintUnixDialog>.

The typical way to use the high-level printing API is to create
a B<Gnome::Gtk4::PrintOperation> object with C<.newprintoperation()>
when the user selects to print. Then you set some properties on it,
e.g. the page size, any B<Gnome::Gtk4::PrintSettings> from previous print
operations, the number of pages, the current page, etc.

Then you start the print operation by calling C<.run()>].
It will then show a dialog, let the user select a printer and options.
When the user finished the dialog, various signals will be emitted on
the B<Gnome::Gtk4::PrintOperation>, the main one being
I<draw-page>, which you are supposed to handle
and render the page on the provided B<Gnome::Gtk4::PrintContext> using Cairo.

=head2 The high-level printing API

=begin comment
static GtkPrintSettings *settings = NULL;

static void
do_print (void)
{
  GtkPrintOperation *print;
  GtkPrintOperationResult res;

  print = gtk_print_operation_new ();

  if (settings != NULL)
    gtk_print_operation_set_print_settings (print, settings);

  g_signal_connect (print, "begin_print", G_CALLBACK (begin_print), NULL);
  g_signal_connect (print, "draw_page", G_CALLBACK (draw_page), NULL);

  res = gtk_print_operation_run (print, GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG,
                                 GTK_WINDOW (main_window), NULL);

  if (res == GTK_PRINT_OPERATION_RESULT_APPLY)
    {
      if (settings != NULL)
        g_object_unref (settings);
      settings = g_object_ref (gtk_print_operation_get_print_settings (print));
    }

  g_object_unref (print);
}

=end comment

By default B<Gnome::Gtk4::PrintOperation> uses an external application to do
print preview. To implement a custom print preview, an application
must connect to the preview signal. The functions
C<.render-page()> in class B<Gnome::Gtk4::R-PrintOperationPreview>],
C<.end-preview()> in class B<Gnome::Gtk4::R-PrintOperationPreview>] and
C<.is-selected()> in class B<Gnome::Gtk4::R-PrintOperationPreview>]
are useful when implementing a print preview.

=head2 Uml Diagram
=for image :src<asset_files/images/plantuml/PrintOperation.png> :width<70%> :class<inline>

=begin comment

=head2 Example
# Example use of module Gnome::Gtk4::PrintOperation

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

=head2 new

=head3 :native-object

Create an object using a native object from an object of the same type found elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object() :$native-object! )

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-printoperation

Creates a new B<Gnome::Gtk4::PrintOperation>.

=begin code
method new-printoperation ( --> Gnome::Gtk4::PrintOperation )
=end code

=begin comment

=head2 Example
# Example for new-printoperation

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 cancel

Cancels a running print operation.

This function may be called from a I<begin-print>,
I<paginate> or I<draw-page>
signal handler to stop the currently running print operation.

=begin code
method cancel ( )
=end code

=begin comment

=head2 Example
# Example for cancel

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 draw-page-finish

Signal that drawing of particular page is complete.

It is called after completion of page drawing (e.g. drawing
in another thread). If C<.set-defer-drawing()>]
was called before, then this function has to be called by application.
Otherwise it is called by GTK itself.

=begin code
method draw-page-finish ( )
=end code

=begin comment

=head2 Example
# Example for draw-page-finish

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-default-page-setup

Returns the default page setup.

=begin code
method get-default-page-setup (--> N-Object )
=end code

Return value; the default page setup. 

=begin comment

=head2 Example
# Example for get-default-page-setup

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-embed-page-setup

Gets whether page setup selection combos are embedded

=begin code
method get-embed-page-setup (--> Bool )
=end code

Return value; whether page setup selection combos are embedded. 

=begin comment

=head2 Example
# Example for get-embed-page-setup

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-error

Call this when the result of a print operation is
C<GTK_PRINT_OPERATION_RESULT_ERROR>.

It can be called either after C<.run()>]
returns, or in the I<done> signal
handler.

The returned B<Gnome::Glib::N-Error> will contain more details on what went wrong.

=begin code
method get-error ( CArray[N-Error] $err )
=end code

=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

=begin comment

=head2 Example
# Example for get-error

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-has-selection

Gets whether there is a selection.

=begin code
method get-has-selection (--> Bool )
=end code

Return value; whether there is a selection. 

=begin comment

=head2 Example
# Example for get-has-selection

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-n-pages-to-print

Returns the number of pages that will be printed.

Note that this value is set during print preparation phase
(C<GTK_PRINT_STATUS_PREPARING>), so this function should never be
called before the data generation phase (C<GTK_PRINT_STATUS_GENERATING_DATA>).
You can connect to the I<status-changed>
signal and call C<.get-n-pages-to-print()> when
print status is C<GTK_PRINT_STATUS_GENERATING_DATA>.

This is typically used to track the progress of print operation.

=begin code
method get-n-pages-to-print (--> Int )
=end code

Return value; the number of pages that will be printed. 

=begin comment

=head2 Example
# Example for get-n-pages-to-print

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-print-settings

Returns the current print settings.

Note that the return value is undefined until either
C<.set-print-settings()>] or
C<.run()>] have been called.

=begin code
method get-print-settings (--> N-Object )
=end code

Return value; the current print settings of C<$op>.. 

=begin comment

=head2 Example
# Example for get-print-settings

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-status

Returns the status of the print operation.

Also see C<.get-status-string()>].

=begin code
method get-status (--> GtkPrintStatus )
=end code

Return value; the status of the print operation. 

=begin comment

=head2 Example
# Example for get-status

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-status-string

Returns a string representation of the status of the
print operation.

The string is translated and suitable for displaying
the print status e.g. in a B<Gnome::Gtk4::Statusbar>.

Use C<.get-status()>] to obtain
a status value that is suitable for programmatic use.

=begin code
method get-status-string (--> Str )
=end code

Return value; a string representation of the status
   of the print operation. 

=begin comment

=head2 Example
# Example for get-status-string

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-support-selection

Gets whether the application supports print of selection

=begin code
method get-support-selection (--> Bool )
=end code

Return value; whether the application supports print of selection. 

=begin comment

=head2 Example
# Example for get-support-selection

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 is-finished

A convenience function to find out if the print operation
is finished.

a print operation is finished if its status is either
C<GTK_PRINT_STATUS_FINISHED> or C<GTK_PRINT_STATUS_FINISHED_ABORTED>.

Note: when you enable print status tracking the print operation
can be in a non-finished state even after done has been called, as
the operation status then tracks the print job status on the printer.

=begin code
method is-finished (--> Bool )
=end code

Return value; C<True>, if the print operation is finished.. 

=begin comment

=head2 Example
# Example for is-finished

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 run

Runs the print operation.

Normally that this function does not return until the rendering
of all pages is complete. You can connect to the
I<status-changed> signal on C<$op> to obtain
some information about the progress of the print operation.

Furthermore, it may use a recursive mainloop to show the print dialog.

If you set the [Gtk.PrintOperation:allow-async] property, the operation
will run asynchronously if this is supported on the platform. The
I<done> signal will be emitted with the result
of the operation when the it is done (i.e. when the dialog is canceled,
or when the print succeeds or fails).

=begin comment
if (settings != NULL)
  gtk_print_operation_set_print_settings (print, settings);

if (page_setup != NULL)
  gtk_print_operation_set_default_page_setup (print, page_setup);

g_signal_connect (print, "begin-print",
                  G_CALLBACK (begin_print), &data);
g_signal_connect (print, "draw-page",
                  G_CALLBACK (draw_page), &data);

res = gtk_print_operation_run (print,
                               GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG,
                               parent,
                               &error);

if (res == GTK_PRINT_OPERATION_RESULT_ERROR)
 {
   error_dialog = gtk_message_dialog_new (GTK_WINDOW (parent),
  			                     GTK_DIALOG_DESTROY_WITH_PARENT,
					     GTK_MESSAGE_ERROR,
					     GTK_BUTTONS_CLOSE,
					     "Error printing file:\n%s",
					     error->message);
   g_signal_connect (error_dialog, "response",
                     G_CALLBACK (gtk_window_destroy), NULL);
   gtk_widget_show (error_dialog);
   g_error_free (error);
 }
else if (res == GTK_PRINT_OPERATION_RESULT_APPLY)
 {
   if (settings != NULL)
g_object_unref (settings);
   settings = g_object_ref (gtk_print_operation_get_print_settings (print));
 }

=end comment

Note that C<.run()> can only be called once on a
given B<Gnome::Gtk4::PrintOperation>.

=begin code
method run ( GtkPrintOperationAction $action, N-Object() $parent, CArray[N-Error] $err --> GtkPrintOperationResult )
=end code

=item $action; the action to start.
=item $parent; Transient parent of the dialog.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; the result of the print operation. A return value of
  C<GTK_PRINT_OPERATION_RESULT_APPLY> indicates that the printing was
  completed successfully. In this case, it is a good idea to obtain
  the used print settings with
  C<.get-print-settings()>]
  and store them for reuse with the next print operation. A value of
  C<GTK_PRINT_OPERATION_RESULT_IN_PROGRESS> means the operation is running
  asynchronously, and will emit the I<done>
  signal when done.. 

=begin comment

=head2 Example
# Example for run

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-allow-async

Sets whether C<.run()> may return
before the print operation is completed.

Note that some platforms may not allow asynchronous
operation.

=begin code
method set-allow-async ( Bool() $allow-async )
=end code

=item $allow-async; C<True> to allow asynchronous operation.

=begin comment

=head2 Example
# Example for set-allow-async

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-current-page

Sets the current page.

If this is called before C<.run()>],
the user will be able to select to print only the current page.

Note that this only makes sense for pre-paginated documents.

=begin code
method set-current-page ( Int() $current-page )
=end code

=item $current-page; the current page, 0-based.

=begin comment

=head2 Example
# Example for set-current-page

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-custom-tab-label

Sets the label for the tab holding custom widgets.

=begin code
method set-custom-tab-label ( Str $label )
=end code

=item $label; the label to use, or undefined to use the default label.

=begin comment

=head2 Example
# Example for set-custom-tab-label

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-default-page-setup

Makes C<$default-page-setup> the default page setup for C<$op>.

This page setup will be used by C<.run()>],
but it can be overridden on a per-page basis by connecting
to the I<request-page-setup> signal.

=begin code
method set-default-page-setup ( N-Object() $default-page-setup )
=end code

=item $default-page-setup; a B<Gnome::Gtk4::PageSetup>.

=begin comment

=head2 Example
# Example for set-default-page-setup

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-defer-drawing

Sets up the B<Gnome::Gtk4::PrintOperation> to wait for calling of
C<.draw-page-finish()> from application.

This can be used for drawing page in another thread.

This function must be called in the callback of the
I<draw-page> signal.

=begin code
method set-defer-drawing ( )
=end code

=begin comment

=head2 Example
# Example for set-defer-drawing

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-embed-page-setup

Embed page size combo box and orientation combo box into page setup page.

Selected page setup is stored as default page setup in B<Gnome::Gtk4::PrintOperation>.

=begin code
method set-embed-page-setup ( Bool() $embed )
=end code

=item $embed; C<True> to embed page setup selection in the B<Gnome::Gtk4::PrintUnixDialog>.

=begin comment

=head2 Example
# Example for set-embed-page-setup

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-export-filename

Sets up the B<Gnome::Gtk4::PrintOperation> to generate a file instead
of showing the print dialog.

The intended use of this function is for implementing
“Export to PDF” actions. Currently, PDF is the only supported
format.

“Print to PDF” support is independent of this and is done
by letting the user pick the “Print to PDF” item from the list
of printers in the print dialog.

=begin code
method set-export-filename ( Str $filename )
=end code

=item $filename; the filename for the exported file.

=begin comment

=head2 Example
# Example for set-export-filename

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-has-selection

Sets whether there is a selection to print.

Application has to set number of pages to which the selection
will draw by C<.set-n-pages()>] in a handler
for the I<begin-print> signal.

=begin code
method set-has-selection ( Bool() $has-selection )
=end code

=item $has-selection; C<True> indicates that a selection exists.

=begin comment

=head2 Example
# Example for set-has-selection

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-job-name

Sets the name of the print job.

The name is used to identify the job (e.g. in monitoring
applications like eggcups).

If you don’t set a job name, GTK picks a default one by
numbering successive print jobs.

=begin code
method set-job-name ( Str $job-name )
=end code

=item $job-name; a string that identifies the print job.

=begin comment

=head2 Example
# Example for set-job-name

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-n-pages

Sets the number of pages in the document.

This must be set to a positive number before the rendering
starts. It may be set in a I<begin-print>
signal handler.

Note that the page numbers passed to the
I<request-page-setup>
and I<draw-page> signals are 0-based, i.e.
if the user chooses to print all pages, the last I<draw-page> signal
will be for page C<$n-pages> - 1.

=begin code
method set-n-pages ( Int() $n-pages )
=end code

=item $n-pages; the number of pages.

=begin comment

=head2 Example
# Example for set-n-pages

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-print-settings

Sets the print settings for C<$op>.

This is typically used to re-establish print settings
from a previous print operation, see C<.run()>].

=begin code
method set-print-settings ( N-Object() $print-settings )
=end code

=item $print-settings; B<Gnome::Gtk4::PrintSettings>.

=begin comment

=head2 Example
# Example for set-print-settings

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-show-progress

If C<$show-progress> is C<True>, the print operation will show
a progress dialog during the print operation.

=begin code
method set-show-progress ( Bool() $show-progress )
=end code

=item $show-progress; C<True> to show a progress dialog.

=begin comment

=head2 Example
# Example for set-show-progress

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-support-selection

Sets whether selection is supported by B<Gnome::Gtk4::PrintOperation>.

=begin code
method set-support-selection ( Bool() $support-selection )
=end code

=item $support-selection; C<True> to support selection.

=begin comment

=head2 Example
# Example for set-support-selection

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-track-print-status

If track_status is C<True>, the print operation will try to continue
report on the status of the print job in the printer queues and printer.

This can allow your application to show things like “out of paper”
issues, and when the print job actually reaches the printer.

This function is often implemented using some form of polling,
so it should not be enabled unless needed.

=begin code
method set-track-print-status ( Bool() $track-status )
=end code

=item $track-status; C<True> to track status after printing.

=begin comment

=head2 Example
# Example for set-track-print-status

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-unit

Sets up the transformation for the cairo context obtained from
B<Gnome::Gtk4::PrintContext> in such a way that distances are measured in
units of C<$unit>.

=begin code
method set-unit ( GtkUnit $unit )
=end code

=item $unit; the unit to use.

=begin comment

=head2 Example
# Example for set-unit

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-use-full-page

If C<$full-page> is C<True>, the transformation for the cairo context
obtained from B<Gnome::Gtk4::PrintContext> puts the origin at the top left
corner of the page.

This may not be the top left corner of the sheet, depending on page
orientation and the number of pages per sheet). Otherwise, the origin
is at the top left corner of the imageable area (i.e. inside the margins).

=begin code
method set-use-full-page ( Bool() $full-page )
=end code

=item $full-page; C<True> to set up the B<Gnome::Gtk4::PrintContext> for the full page.

=begin comment

=head2 Example
# Example for set-use-full-page

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Signal Documentation]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Signals

=comment -----------------------------------------------------------------------
=head3 begin-print

Emitted after the user has finished changing print settings
in the dialog, before the actual rendering starts.

A typical use for I<begin-print> is to use the parameters from the
B<Gnome::Gtk4::PrintContext> and paginate the document accordingly,
and then set the number of pages with
C<.set-n-pages()>].

=begin code
method handler (
  N-Object $context,
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gtk4::PrintOperation :$_widget,
  *C<user>-options
)
=end code

=item $context; the B<Gnome::Gtk4::PrintContext> for the current operation.
=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gtk4::PrintOperation> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

=begin comment

=head2 Example
# Example for signal begin-print

=end comment

=comment -----------------------------------------------------------------------
=head3 create-custom-widget

Emitted when displaying the print dialog.

If you return a widget in a handler for this signal it will be
added to a custom tab in the print dialog. You typically return a
container widget with multiple widgets in it.

The print dialog owns the returned widget, and its lifetime is not
controlled by the application. However, the widget is guaranteed
to stay around until the I<custom-widget-apply>
signal is emitted on the operation. Then you can read out any
information you need from the widgets.

=begin code
method handler (
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gtk4::PrintOperation :$_widget,
  *C<user>-options
)
=end code

=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gtk4::PrintOperation> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

=begin comment

=head2 Example
# Example for signal create-custom-widget

=end comment

=comment -----------------------------------------------------------------------
=head3 custom-widget-apply

Emitted right before I<begin-print> if you added
a custom widget in the I<create-custom-widget> handler.

When you get this signal you should read the information from the
custom widgets, as the widgets are not guaranteed to be around at a
later time.

=begin code
method handler (
  N-Object $widget,
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gtk4::PrintOperation :$_widget,
  *C<user>-options
)
=end code

=item $widget; the custom widget added in I<create-custom-widget>.
=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gtk4::PrintOperation> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

=begin comment

=head2 Example
# Example for signal custom-widget-apply

=end comment

=comment -----------------------------------------------------------------------
=head3 done

Emitted when the print operation run has finished doing
everything required for printing.
 C<$result> gives you information about what happened during the run.
If C<$result> is C<GTK_PRINT_OPERATION_RESULT_ERROR> then you can call
C<.get-error()>] for more information.

If you enabled print status tracking then
C<.is-finished()>] may still return C<False>
after the I<done> signal was emitted.

=begin code
method handler (
   $result,
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gtk4::PrintOperation :$_widget,
  *C<user>-options
)
=end code

=item $result; the result of the print operation.
=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gtk4::PrintOperation> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

=begin comment

=head2 Example
# Example for signal done

=end comment

=comment -----------------------------------------------------------------------
=head3 draw-page

Emitted for every page that is printed.

The signal handler must render the C<$page-nr>'s page onto the cairo
context obtained from C<$context> using
C<.get-cairo-context()> in class B<Gnome::Gtk4::PrintContext>].

=begin comment
static void
draw_page (GtkPrintOperation *operation,
           GtkPrintContext   *context,
           int                page_nr,
           gpointer           user_data)
{
  cairo_t *cr;
  PangoLayout *layout;
  double width, text_height;
  int layout_height;
  PangoFontDescription *desc;
  
  cr = gtk_print_context_get_cairo_context (context);
  width = gtk_print_context_get_width (context);
  
  cairo_rectangle (cr, 0, 0, width, HEADER_HEIGHT);
  
  cairo_set_source_rgb (cr, 0.8, 0.8, 0.8);
  cairo_fill (cr);
  
  layout = gtk_print_context_create_pango_layout (context);
  
  desc = pango_font_description_from_string ("sans 14");
  pango_layout_set_font_description (layout, desc);
  pango_font_description_free (desc);
  
  pango_layout_set_text (layout, "some text", -1);
  pango_layout_set_width (layout, width * PANGO_SCALE);
  pango_layout_set_alignment (layout, PANGO_ALIGN_CENTER);
     		      
  pango_layout_get_size (layout, NULL, &layout_height);
  text_height = (double)layout_height / PANGO_SCALE;
  
  cairo_move_to (cr, width / 2,  (HEADER_HEIGHT - text_height) / 2);
  pango_cairo_show_layout (cr, layout);
  
  g_object_unref (layout);
}

=end comment

Use C<.set-use-full-page()>] and
C<.set-unit()>] before starting the print
operation to set up the transformation of the cairo context
according to your needs.

=begin code
method handler (
  N-Object $context,
  gint $page-nr,
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gtk4::PrintOperation :$_widget,
  *C<user>-options
)
=end code

=item $context; the B<Gnome::Gtk4::PrintContext> for the current operation.
=item $page-nr; the number of the currently printed page (0-based).
=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gtk4::PrintOperation> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

=begin comment

=head2 Example
# Example for signal draw-page

=end comment

=comment -----------------------------------------------------------------------
=head3 end-print

Emitted after all pages have been rendered.

A handler for this signal can clean up any resources that have
been allocated in the I<begin-print> handler.

=begin code
method handler (
  N-Object $context,
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gtk4::PrintOperation :$_widget,
  *C<user>-options
)
=end code

=item $context; the B<Gnome::Gtk4::PrintContext> for the current operation.
=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gtk4::PrintOperation> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

=begin comment

=head2 Example
# Example for signal end-print

=end comment

=comment -----------------------------------------------------------------------
=head3 paginate

Emitted after the I<begin-print> signal, but before the actual rendering
starts.

It keeps getting emitted until a connected signal handler returns C<True>.

The I<paginate> signal is intended to be used for paginating a document
in small chunks, to avoid blocking the user interface for a long
time. The signal handler should update the number of pages using
C<.set-n-pages()>], and return C<True> if the document
has been completely paginated.

If you don't need to do pagination in chunks, you can simply do
it all in the I<begin-print> handler, and set the number of pages
from there.

=begin code
method handler (
  N-Object $context,
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gtk4::PrintOperation :$_widget,
  *C<user>-options
  --> gboolean
)
=end code

=item $context; the B<Gnome::Gtk4::PrintContext> for the current operation.
=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gtk4::PrintOperation> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

Return value; C<True> if pagination is complete

=begin comment

=head2 Example
# Example for signal paginate

=end comment

=comment -----------------------------------------------------------------------
=head3 preview

Gets emitted when a preview is requested from the native dialog.

The default handler for this signal uses an external viewer
application to preview.

To implement a custom print preview, an application must return
C<True> from its handler for this signal. In order to use the
provided C<$context> for the preview implementation, it must be
given a suitable cairo context with
C<.set-cairo-context()> in class B<Gnome::Gtk4::PrintContext>].

The custom preview implementation can use
C<.is-selected()> in class B<Gnome::Gtk4::R-PrintOperationPreview>] and
C<.render-page()> in class B<Gnome::Gtk4::R-PrintOperationPreview>] to find pages which
are selected for print and render them. The preview must be
finished by calling C<.end-preview()> in class B<Gnome::Gtk4::R-PrintOperationPreview>]
(typically in response to the user clicking a close button).

=begin code
method handler (
  N-Object $preview,
  N-Object $context,
  N-Object $parent,
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gtk4::PrintOperation :$_widget,
  *C<user>-options
  --> gboolean
)
=end code

=item $preview; the B<Gnome::Gtk4::R-PrintOperationPreview> for the current operation.
=item $context; the B<Gnome::Gtk4::PrintContext> that will be used.
=item $parent; the B<Gnome::Gtk4::Window> to use as window parent.
=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gtk4::PrintOperation> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

Return value; C<True> if the listener wants to take over control of the preview

=begin comment

=head2 Example
# Example for signal preview

=end comment

=comment -----------------------------------------------------------------------
=head3 request-page-setup

Emitted once for every page that is printed.

This gives the application a chance to modify the page setup.
Any changes done to C<$setup> will be in force only for printing
this page.

=begin code
method handler (
  N-Object $context,
  gint $page-nr,
  N-Object $setup,
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gtk4::PrintOperation :$_widget,
  *C<user>-options
)
=end code

=item $context; the B<Gnome::Gtk4::PrintContext> for the current operation.
=item $page-nr; the number of the currently printed page (0-based).
=item $setup; the B<Gnome::Gtk4::PageSetup>.
=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gtk4::PrintOperation> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

=begin comment

=head2 Example
# Example for signal request-page-setup

=end comment

=comment -----------------------------------------------------------------------
=head3 status-changed

Emitted at between the various phases of the print operation.

See  enumeration C<PrintStatus> from C<Gnome::Gtk4::T-printoperation>  for the phases that are being discriminated.
Use C<.get-status()>] to find out the current
status.

=begin code
method handler (
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gtk4::PrintOperation :$_widget,
  *C<user>-options
)
=end code

=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gtk4::PrintOperation> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

=begin comment

=head2 Example
# Example for signal status-changed

=end comment

=comment -----------------------------------------------------------------------
=head3 update-custom-widget

Emitted after change of selected printer.

The actual page setup and print settings are passed to the custom
widget, which can actualize itself according to this change.

=begin code
method handler (
  N-Object $widget,
  N-Object $setup,
  N-Object $settings,
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gtk4::PrintOperation :$_widget,
  *C<user>-options
)
=end code

=item $widget; the custom widget added in I<create-custom-widget>.
=item $setup; actual page setup.
=item $settings; actual print settings.
=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gtk4::PrintOperation> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

=begin comment

=head2 Example
# Example for signal update-custom-widget

=end comment

=end pod

