=comment Package: Gtk4, C-Source: cellrenderer
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=TITLE Gnome::Gtk4::CellRenderer
=head1 Description

An object for rendering a single cell

The B<Gnome::Gtk4::CellRenderer> is a base class of a set of objects used for
rendering a cell to a B<Gnome::Cairo::N-Context>.  These objects are used primarily by
the B<Gnome::Gtk4::TreeView> widget, though they aren’t tied to them in any
specific way.  It is worth noting that B<Gnome::Gtk4::CellRenderer> is not a
B<Gnome::Gtk4::Widget> and cannot be treated as such.

The primary use of a B<Gnome::Gtk4::CellRenderer> is for drawing a certain graphical
elements on a B<Gnome::Cairo::N-Context>. Typically, one cell renderer is used to
draw many cells on the screen.  To this extent, it isn’t expected that a
CellRenderer keep any permanent state around.  Instead, any state is set
just prior to use using B<Gnome::GObject::Object>s property system.  Then, the
cell is measured using C<.get-preferred-size()>. Finally, the cell
is rendered in the correct location using C<.snapshot()>.

There are a number of rules that must be followed when writing a new
B<Gnome::Gtk4::CellRenderer>.  First and foremost, it’s important that a certain set
of properties will always yield a cell renderer of the same size,
barring a style change. The B<Gnome::Gtk4::CellRenderer> also has a number of
generic properties that are expected to be honored by all children.

Beyond merely rendering a cell, cell renderers can optionally
provide active user interface elements. A cell renderer can be
“activatable” like B<Gnome::Gtk4::CellRenderer>Toggle,
which toggles when it gets activated by a mouse click, or it can be
“editable” like B<Gnome::Gtk4::CellRenderer>Text, which
allows the user to edit the text using a widget implementing the
B<Gnome::Gtk4::R-CellEditable> interface, e.g. B<Gnome::Gtk4::Entry>.
To make a cell renderer activatable or editable, you have to
implement the B<Gnome::Gtk4::CellRenderer>Class.activate or
B<Gnome::Gtk4::CellRenderer>Class.start_editing virtual functions, respectively.

Many properties of B<Gnome::Gtk4::CellRenderer> and its subclasses have a
corresponding “set” property, e.g. “cell-background-set” corresponds
to “cell-background”. These “set” properties reflect whether a property
has been set or not. You should not set them independently.

=begin comment

=head2 Uml Diagram
![](plantuml/….svg)

=end comment

=begin comment

=head2 Example
# Example use of module Gnome::Gtk4::CellRenderer

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

B<Note: The native version of this class is deprecated in gtk4-lib() since version 4.10>

=head2 new

=head3 :native-object

Create an object using a native object from elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object() :$native-object! )

=end pod

#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 activate

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Passes an activate event to the cell renderer for possible processing.
Some cell renderers may use events; for example, B<Gnome::Gtk4::CellRendererToggle>
toggles when it gets a mouse click.

=begin code
method activate ( N-Object() $event, N-Object() $widget, Str $path, N-Object $background-area, N-Object $cell-area, UInt $flags --> Bool )
=end code

=item $event; a B<Gnome::Gdk4::Event>.
=item $widget; widget that received the event.
=item $path; widget-dependent string representation of the event location;
   e.g. for B<Gnome::Gtk4::TreeView>, a string representation of B<Gnome::Gtk4::N-TreePath>.
=item $background-area; background area as passed to C<.render()>
=item $cell-area; cell area as passed to C<.render()>
=item $flags; render flags.

Return value; C<True> if the event was consumed/handled. 

=begin comment

=head2 Example
# Example for activate

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-aligned-area

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Gets the aligned area used by C<$cell> inside C<$cell-area>. Used for finding
the appropriate edit and focus rectangle.

=begin code
method get-aligned-area ( N-Object() $widget, UInt $flags, N-Object $cell-area, N-Object $aligned-area )
=end code

=item $widget; the B<Gnome::Gtk4::Widget> this cell will be rendering to.
=item $flags; render flags.
=item $cell-area; cell area which would be passed to C<.render()>
=item $aligned-area; the return location for the space inside C<$cell-area>
               that would actually be used to render.

=begin comment

=head2 Example
# Example for get-aligned-area

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-alignment

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Fills in C<$xalign> and C<$yalign> with the appropriate values of C<$cell>.

=begin code
method get-alignment ( Num() $xalign, Num() $yalign )
=end code

=item $xalign; (transfer ownership: full) location to fill in with the x alignment of the cell.
=item $yalign; (transfer ownership: full) location to fill in with the y alignment of the cell.

=begin comment

=head2 Example
# Example for get-alignment

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-fixed-size

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Fills in C<$width> and C<$height> with the appropriate size of C<$cell>.

=begin code
method get-fixed-size ( Array[Int] $width, Array[Int] $height )
=end code

=item $width; (transfer ownership: full) location to fill in with the fixed width of the cell.
=item $height; (transfer ownership: full) location to fill in with the fixed height of the cell.

=begin comment

=head2 Example
# Example for get-fixed-size

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-is-expanded

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Checks whether the given B<Gnome::Gtk4::CellRenderer> is expanded.

=begin code
method get-is-expanded (--> Bool )
=end code

Return value; C<True> if the cell renderer is expanded. 

=begin comment

=head2 Example
# Example for get-is-expanded

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-is-expander

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Checks whether the given B<Gnome::Gtk4::CellRenderer> is an expander.

=begin code
method get-is-expander (--> Bool )
=end code

Return value; C<True> if C<$cell> is an expander, and C<False> otherwise. 

=begin comment

=head2 Example
# Example for get-is-expander

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-padding

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Fills in C<$xpad> and C<$ypad> with the appropriate values of C<$cell>.

=begin code
method get-padding ( Array[Int] $xpad, Array[Int] $ypad )
=end code

=item $xpad; (transfer ownership: full) location to fill in with the x padding of the cell.
=item $ypad; (transfer ownership: full) location to fill in with the y padding of the cell.

=begin comment

=head2 Example
# Example for get-padding

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-preferred-height

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Retrieves a renderer’s natural size when rendered to C<$widget>.

=begin code
method get-preferred-height ( N-Object() $widget, Array[Int] $minimum-size, Array[Int] $natural-size )
=end code

=item $widget; the B<Gnome::Gtk4::Widget> this cell will be rendering to.
=item $minimum-size; (transfer ownership: full) location to store the minimum size.
=item $natural-size; (transfer ownership: full) location to store the natural size.

=begin comment

=head2 Example
# Example for get-preferred-height

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-preferred-height-for-width

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Retrieves a cell renderers’s minimum and natural height if it were rendered to C<$widget> with the specified C<$width>.

=begin code
method get-preferred-height-for-width ( N-Object() $widget, Int() $width, Array[Int] $minimum-height, Array[Int] $natural-height )
=end code

=item $widget; the B<Gnome::Gtk4::Widget> this cell will be rendering to.
=item $width; the size which is available for allocation.
=item $minimum-height; (transfer ownership: full) location for storing the minimum size.
=item $natural-height; (transfer ownership: full) location for storing the preferred size.

=begin comment

=head2 Example
# Example for get-preferred-height-for-width

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-preferred-size

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Retrieves the minimum and natural size of a cell taking
into account the widget’s preference for height-for-width management.

=begin code
method get-preferred-size ( N-Object() $widget, N-Object $minimum-size, N-Object $natural-size )
=end code

=item $widget; the B<Gnome::Gtk4::Widget> this cell will be rendering to.
=item $minimum-size; location for storing the minimum size
=item $natural-size; location for storing the natural size

=begin comment

=head2 Example
# Example for get-preferred-size

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-preferred-width

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Retrieves a renderer’s natural size when rendered to C<$widget>.

=begin code
method get-preferred-width ( N-Object() $widget, Array[Int] $minimum-size, Array[Int] $natural-size )
=end code

=item $widget; the B<Gnome::Gtk4::Widget> this cell will be rendering to.
=item $minimum-size; (transfer ownership: full) location to store the minimum size.
=item $natural-size; (transfer ownership: full) location to store the natural size.

=begin comment

=head2 Example
# Example for get-preferred-width

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-preferred-width-for-height

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Retrieves a cell renderers’s minimum and natural width if it were rendered to C<$widget> with the specified C<$height>.

=begin code
method get-preferred-width-for-height ( N-Object() $widget, Int() $height, Array[Int] $minimum-width, Array[Int] $natural-width )
=end code

=item $widget; the B<Gnome::Gtk4::Widget> this cell will be rendering to.
=item $height; the size which is available for allocation.
=item $minimum-width; (transfer ownership: full) location for storing the minimum size.
=item $natural-width; (transfer ownership: full) location for storing the preferred size.

=begin comment

=head2 Example
# Example for get-preferred-width-for-height

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-request-mode

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Gets whether the cell renderer prefers a height-for-width layout
or a width-for-height layout.

=begin code
method get-request-mode (--> GtkSizeRequestMode )
=end code

Return value; The C<enumeration GtkSizeRequestMode defined in Gnome::Gtk4::T-enums> preferred by this renderer.. 

=begin comment

=head2 Example
# Example for get-request-mode

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-sensitive

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Returns the cell renderer’s sensitivity.

=begin code
method get-sensitive (--> Bool )
=end code

Return value; C<True> if the cell renderer is sensitive. 

=begin comment

=head2 Example
# Example for get-sensitive

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-state

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Translates the cell renderer state to C<bit field GtkStateFlags defined in Gnome::Gtk4::T-enums>,
based on the cell renderer and widget sensitivity, and
the given B<Gnome::Gtk4::CellRenderer>State.

=begin code
method get-state ( N-Object() $widget, UInt $cell-state --> UInt )
=end code

=item $widget; a B<Gnome::Gtk4::Widget>.
=item $cell-state; cell renderer state.

Return value; the widget state flags applying to C<$cell>. 

=begin comment

=head2 Example
# Example for get-state

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-visible

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Returns the cell renderer’s visibility.

=begin code
method get-visible (--> Bool )
=end code

Return value; C<True> if the cell renderer is visible. 

=begin comment

=head2 Example
# Example for get-visible

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 is-activatable

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Checks whether the cell renderer can do something when activated.

=begin code
method is-activatable (--> Bool )
=end code

Return value; C<True> if the cell renderer can do anything when activated. 

=begin comment

=head2 Example
# Example for is-activatable

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-alignment

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Sets the renderer’s alignment within its available space.

=begin code
method set-alignment ( Num() $xalign, Num() $yalign )
=end code

=item $xalign; the x alignment of the cell renderer.
=item $yalign; the y alignment of the cell renderer.

=begin comment

=head2 Example
# Example for set-alignment

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-fixed-size

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Sets the renderer size to be explicit, independent of the properties set.

=begin code
method set-fixed-size ( Int() $width, Int() $height )
=end code

=item $width; the width of the cell renderer, or -1.
=item $height; the height of the cell renderer, or -1.

=begin comment

=head2 Example
# Example for set-fixed-size

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-is-expanded

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Sets whether the given B<Gnome::Gtk4::CellRenderer> is expanded.

=begin code
method set-is-expanded ( Bool() $is-expanded )
=end code

=item $is-expanded; whether C<$cell> should be expanded.

=begin comment

=head2 Example
# Example for set-is-expanded

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-is-expander

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Sets whether the given B<Gnome::Gtk4::CellRenderer> is an expander.

=begin code
method set-is-expander ( Bool() $is-expander )
=end code

=item $is-expander; whether C<$cell> is an expander.

=begin comment

=head2 Example
# Example for set-is-expander

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-padding

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Sets the renderer’s padding.

=begin code
method set-padding ( Int() $xpad, Int() $ypad )
=end code

=item $xpad; the x padding of the cell renderer.
=item $ypad; the y padding of the cell renderer.

=begin comment

=head2 Example
# Example for set-padding

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-sensitive

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Sets the cell renderer’s sensitivity.

=begin code
method set-sensitive ( Bool() $sensitive )
=end code

=item $sensitive; the sensitivity of the cell.

=begin comment

=head2 Example
# Example for set-sensitive

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-visible

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Sets the cell renderer’s visibility.

=begin code
method set-visible ( Bool() $visible )
=end code

=item $visible; the visibility of the cell.

=begin comment

=head2 Example
# Example for set-visible

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 snapshot

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Invokes the virtual render function of the B<Gnome::Gtk4::CellRenderer>. The three
passed-in rectangles are areas in C<$cr>. Most renderers will draw within C<$cell-area>; the xalign, yalign, xpad, and ypad fields of the B<Gnome::Gtk4::CellRenderer>
should be honored with respect to C<$cell-area>. C<$background-area> includes the
blank space around the cell, and also the area containing the tree expander;
so the C<$background-area> rectangles for all cells tile to cover the entire C<$window>.

=begin code
method snapshot ( N-Object() $snapshot, N-Object() $widget, N-Object $background-area, N-Object $cell-area, UInt $flags )
=end code

=item $snapshot; a B<Gnome::Gtk4::Snapshot> to draw to.
=item $widget; the widget owning C<$window>.
=item $background-area; entire cell area (including tree expanders and maybe
   padding on the sides)
=item $cell-area; area normally rendered by a cell renderer
=item $flags; flags that affect rendering.

=begin comment

=head2 Example
# Example for snapshot

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 start-editing

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Starts editing the contents of this C<$cell>, through a new B<Gnome::Gtk4::R-CellEditable>
widget created by the B<Gnome::Gtk4::CellRenderer>Class.start_editing virtual function.

=begin code
method start-editing ( N-Object() $event, N-Object() $widget, Str $path, N-Object $background-area, N-Object $cell-area, UInt $flags --> N-Object )
=end code

=item $event; a B<Gnome::Gdk4::Event>.
=item $widget; widget that received the event.
=item $path; widget-dependent string representation of the event location;
   e.g. for B<Gnome::Gtk4::TreeView>, a string representation of B<Gnome::Gtk4::N-TreePath>.
=item $background-area; background area as passed to C<.render()>
=item $cell-area; cell area as passed to C<.render()>
=item $flags; render flags.

Return value; A new B<Gnome::Gtk4::R-CellEditable> for editing this
  C<$cell>, or undefined if editing is not possible. 

=begin comment

=head2 Example
# Example for start-editing

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 stop-editing

B<Note: The native version of this routine is deprecated in gtk4-lib() since version 4.10>

Informs the cell renderer that the editing is stopped.
If C<$canceled> is C<True>, the cell renderer will emit the
B<Gnome::Gtk4::CellRenderer>::editing-canceled signal.

This function should be called by cell renderer implementations
in response to the B<Gnome::Gtk4::R-CellEditable>::editing-done` signal of
B<Gnome::Gtk4::R-CellEditable>.

=begin code
method stop-editing ( Bool() $canceled )
=end code

=item $canceled; C<True> if the editing has been canceled.

=begin comment

=head2 Example
# Example for stop-editing

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Signal Documentation]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Signals

=comment -----------------------------------------------------------------------
=head3 editing-canceled

This signal gets emitted when the user cancels the process of editing a
cell.  For example, an editable cell renderer could be written to cancel
editing when the user presses Escape.

See also: C<.stop-editing()>.

=begin code
method handler (
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gtk4::CellRenderer :$_widget,
  *C<user>-options
)
=end code

=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gtk4::CellRenderer> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

=begin comment

=head2 Example
# Example for signal editing-canceled

=end comment

=comment -----------------------------------------------------------------------
=head3 editing-started

This signal gets emitted when a cell starts to be edited.
The intended use of this signal is to do special setup
on C<$editable>, e.g. adding a B<Gnome::Gtk4::EntryCompletion> or setting
up additional columns in a B<Gnome::Gtk4::ComboBox>.

See gtk_cell_editable_start_editing() for information on the lifecycle of
the C<$editable> and a way to do setup that doesn’t depend on the C<$renderer>.

Note that GTK doesn't guarantee that cell renderers will
continue to use the same kind of widget for editing in future
releases, therefore you should check the type of C<$editable>
before doing any specific setup, as in the following example:
=begin comment
<!-- language="C" -->
static void
text_editing_started (GtkCellRenderer *cell,
                      GtkCellEditable *editable,
                      const char      *path,
                      gpointer         data)
{
  if (GTK_IS_ENTRY (editable))
    {
      GtkEntry *entry = GTK_ENTRY (editable);

      // ... create a GtkEntryCompletion

      gtk_entry_set_completion (entry, completion);
    }
}

=end comment

=begin code
method handler (
  N-Object $editable,
  Str $path,
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gtk4::CellRenderer :$_widget,
  *C<user>-options
)
=end code

=item $editable; the B<Gnome::Gtk4::R-CellEditable>.
=item $path; the path identifying the edited cell.
=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gtk4::CellRenderer> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

=begin comment

=head2 Example
# Example for signal editing-started

=end comment

=end pod

