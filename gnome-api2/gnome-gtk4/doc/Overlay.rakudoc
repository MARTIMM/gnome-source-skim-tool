=comment Package: Gtk4, C-Source: overlay
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=TITLE Gnome::Gtk4::Overlay
=head1 Description

B<Gnome::Gtk4::Overlay> is a container which contains a single main child, on top
of which it can place “overlay” widgets.

=for image :src<asset_files/images/overlay.png> :width<30%> :class<inline>

The position of each overlay widget is determined by its
I<halign defined in Gnome::Gtk4::Widget> and I<valign defined in Gnome::Gtk4::Widget>
properties. E.g. a widget with both alignments set to C<GTK_ALIGN_START>
will be placed at the top left corner of the B<Gnome::Gtk4::Overlay> container,
whereas an overlay with halign set to C<GTK_ALIGN_CENTER> and valign set
to C<GTK_ALIGN_END> will be placed a the bottom edge of the B<Gnome::Gtk4::Overlay>,
horizontally centered. The position can be adjusted by setting the margin
properties of the child to non-zero values.

More complicated placement of overlays is possible by connecting
to the I<get-child-position> signal.

An overlay’s minimum and natural sizes are those of its main child.
The sizes of overlay children are not considered when measuring these
preferred sizes.

=head2 GtkOverlay as GtkBuildable

The B<Gnome::Gtk4::Overlay> implementation of the B<Gnome::Gtk4::R-Buildable> interface
supports placing a child as an overlay by specifying “overlay” as
the “type” attribute of a `<child>` element.

=head2 CSS nodes

B<Gnome::Gtk4::Overlay> has a single CSS node with the name “overlay”. Overlay children
whose alignments cause them to be positioned at an edge get the style classes
“.left”, “.right”, “.top”, and/or “.bottom” according to their position.

=begin comment

=head2 Uml Diagram
![](plantuml/….svg)

=end comment

=begin comment

=head2 Example
# Example use of module Gnome::Gtk4::Overlay

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

=head2 new

=head3 :native-object

Create an object using a native object from an object of the same type found elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object() :$native-object! )

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-overlay

Creates a new B<Gnome::Gtk4::Overlay>.

=begin code
method new-overlay ( --> Gnome::Gtk4::Overlay \)
=end code

=begin comment

=head2 Example
# Example for new-overlay

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 add-overlay

Adds C<$widget> to C<$overlay>.

The widget will be stacked on top of the main widget
added with C<.set-child()>.

The position at which C<$widget> is placed is determined
from its I<halign defined in Gnome::Gtk4::Widget> and
I<valign defined in Gnome::Gtk4::Widget> properties.

=begin code
method add-overlay ( N-Object() $widget )
=end code

=item $widget; a B<Gnome::Gtk4::Widget> to be added to the container.

=begin comment

=head2 Example
# Example for add-overlay

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-child

Gets the child widget of C<$overlay>.

=begin code
method get-child (--> N-Object )
=end code

Return value; the child widget of C<$overlay>. 

=begin comment

=head2 Example
# Example for get-child

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-clip-overlay

Gets whether C<$widget> should be clipped within the parent.

=begin code
method get-clip-overlay ( N-Object() $widget --> Bool )
=end code

=item $widget; an overlay child of B<Gnome::Gtk4::Overlay>.

Return value; whether the widget is clipped within the parent.. 

=begin comment

=head2 Example
# Example for get-clip-overlay

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-measure-overlay

Gets whether C<$widget>'s size is included in the measurement of C<$overlay>.

=begin code
method get-measure-overlay ( N-Object() $widget --> Bool )
=end code

=item $widget; an overlay child of B<Gnome::Gtk4::Overlay>.

Return value; whether the widget is measured. 

=begin comment

=head2 Example
# Example for get-measure-overlay

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 remove-overlay

Removes an overlay that was added with C<.add-overlay()>.

=begin code
method remove-overlay ( N-Object() $widget )
=end code

=item $widget; a B<Gnome::Gtk4::Widget> to be removed.

=begin comment

=head2 Example
# Example for remove-overlay

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-child

Sets the child widget of C<$overlay>.

=begin code
method set-child ( N-Object() $child )
=end code

=item $child; the child widget.

=begin comment

=head2 Example
# Example for set-child

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-clip-overlay

Sets whether C<$widget> should be clipped within the parent.

=begin code
method set-clip-overlay ( N-Object() $widget, Bool() $clip-overlay )
=end code

=item $widget; an overlay child of B<Gnome::Gtk4::Overlay>.
=item $clip-overlay; whether the child should be clipped.

=begin comment

=head2 Example
# Example for set-clip-overlay

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-measure-overlay

Sets whether C<$widget> is included in the measured size of C<$overlay>.

The overlay will request the size of the largest child that has
this property set to C<True>. Children who are not included may
be drawn outside of C<$overlay>'s allocation if they are too large.

=begin code
method set-measure-overlay ( N-Object() $widget, Bool() $measure )
=end code

=item $widget; an overlay child of B<Gnome::Gtk4::Overlay>.
=item $measure; whether the child should be measured.

=begin comment

=head2 Example
# Example for set-measure-overlay

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Signal Documentation]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Signals

=comment -----------------------------------------------------------------------
=head3 get-child-position

Emitted to determine the position and size of any overlay
child widgets.

A handler for this signal should fill C<$allocation> with
the desired position and size for C<$widget>, relative to
the 'main' child of C<$overlay>.

The default handler for this signal uses the C<$widget>'s
halign and valign properties to determine the position
and gives the widget its natural size (except that an
alignment of C<GTK_ALIGN_FILL> will cause the overlay to
be full-width/height). If the main child is a
B<Gnome::Gtk4::ScrolledWindow>, the overlays are placed relative
to its contents.

=begin code
method handler (
  N-Object $widget,
   $allocation,
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gtk4::Overlay :$_widget,
  *C<user>-options
  --> gboolean
)
=end code

=item $widget; the child widget to position.
=item $allocation; return
  location for the allocation.
=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gtk4::Overlay> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

Return value; C<True> if the C<$allocation> has been filled

=begin comment

=head2 Example
# Example for signal get-child-position

=end comment

=end pod

