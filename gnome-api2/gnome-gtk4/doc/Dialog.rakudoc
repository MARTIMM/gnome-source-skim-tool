use v6.d;

=begin pod
=head1 Gnome::Gtk4::Dialog
=end pod

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod

![](images/dialog.png)

=head1 Description

Dialogs are a convenient way to prompt the user for a small amount
of input.

![An example GtkDialog](dialog.png)

Typical uses are to display a message, ask a question, or anything else
that does not require extensive effort on the user’s part.

The main area of a B<Gnome::Gtk4::Dialog> is called the "content area", and is yours
to populate with widgets such a I<GtkLabel> or I<GtkEntry>, to present
your information, questions, or tasks to the user.

In addition, dialogs allow you to add "action widgets". Most commonly,
action widgets are buttons. Depending on the platform, action widgets may
be presented in the header bar at the top of the window, or at the bottom
of the window. To add action widgets, create your B<Gnome::Gtk4::Dialog> using
[ctor C<$Gtk>.Dialog.new_with_buttons], or use
C<.add-button()>, C<.add-action-widget()>,
or C<.add-action-widget() defined in Dialog>.

B<Gnome::Gtk4::Dialog>s uses some heuristics to decide whether to add a close
button to the window decorations. If any of the action buttons use
the response ID %GTK_RESPONSE_CLOSE or %GTK_RESPONSE_CANCEL, the
close button is omitted.

Clicking a button that was added as an action widget will emit the
I<response> signal with a response ID that you specified.
GTK will never assign a meaning to positive response IDs; these are
entirely user-defined. But for convenience, you can use the response
IDs in the C<GtkResponseType> enumeration enumeration (these all have values
less than zero). If a dialog receives a delete event, the
I<response> signal will be emitted with the
%GTK_RESPONSE_DELETE_EVENT response ID.

Dialogs are created with a call to [ctor C<$Gtk>.Dialog.new] or
[ctor C<$Gtk>.Dialog.new_with_buttons]. The latter is recommended; it allows
you to set the dialog title, some convenient flags, and add buttons.

A “modal” dialog (that is, one which freezes the rest of the application
from user input), can be created by calling C<.set-modal() defined in Window>
on the dialog. When using [ctor C<$Gtk>.Dialog.new_with_buttons], you can also
pass the %GTK_DIALOG_MODAL flag to make a dialog modal.

For the simple dialog in the following example, a [class C<$Gtk>.MessageDialog]
would save some effort. But you’d need to create the dialog contents manually
if you had more than a simple message in the dialog.

An example for simple B<Gnome::Gtk4::Dialog> usage:

=begin comment 
Following example code is in c

  // Function to open a dialog box with a message
  void
  quick_message (GtkWindow *parent, char *message)
  {
   GtkWidget *dialog, *label, *content_area;
   GtkDialogFlags flags;
  
   // Create the widgets
   flags = GTK_DIALOG_DESTROY_WITH_PARENT;
   dialog = gtk_dialog_new_with_buttons ("Message",
                                         parent,
                                         flags,
                                         _("_OK"),
                                         GTK_RESPONSE_NONE,
                                         NULL);
   content_area = gtk_dialog_get_content_area (GTK_DIALOG (dialog));
   label = gtk_label_new (message);
  
   // Ensure that the dialog box is destroyed when the user responds
  
   g_signal_connect_swapped (dialog,
                             "response",
                             G_CALLBACK (gtk_window_destroy),
                             dialog);
  
   // Add the label, and show everything we’ve added
  
   gtk_box_append (GTK_BOX (content_area), label);
   gtk_widget_show (dialog);
  }
=end comment

=head1 GtkDialog as GtkBuildable

The B<Gnome::Gtk4::Dialog> implementation of the I<GtkBuildable> interface exposes the C<$content_area> as an internal child with the name “content_area”.

B<Gnome::Gtk4::Dialog> supports a custom U<action-widgets> element, which can contain
multiple U<action-widget> elements. The “response” attribute specifies a
numeric response, and the content of the element is the id of widget
(which should be a child of the dialogs C<$action_area>). To mark a response
as default, set the “default” attribute of the U<action-widget> element
to true.

B<Gnome::Gtk4::Dialog> supports adding action widgets by specifying “action” as
the “type” attribute of a U<child> element. The widget will be added
either to the action area or the headerbar of the dialog, depending
on the “use-header-bar” property. The response id has to be associated
with the action widget using the U<action-widgets> element.

An example of a B<Gnome::Gtk4::Dialog> UI definition fragment:

=begin comment 
Following example code is in xml

  <object class="GtkDialog" id="dialog1">
    <child type="action">
      <object class="GtkButton" id="button_cancel"/>
    </child>
    <child type="action">
      <object class="GtkButton" id="button_ok">
      </object>
    </child>
    <action-widgets>
      <action-widget response="cancel">button_cancel</action-widget>
      <action-widget response="ok" default="true">button_ok</action-widget>
    </action-widgets>
  </object>
=end comment

=head1 Accessibility

B<Gnome::Gtk4::Dialog> uses the %GTK_ACCESSIBLE_ROLE_DIALOG role.
=begin comment
=head2 Uml Diagram
![](plantuml/….svg)
=end comment

=begin comment
=head2 Example
  … text …
  … example code …
=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

=head2 new

=head3 :native-object

Create an object using a native object from elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object :$native-object! )


=head3 :build-id

Create an object using a native object from a builder. See also B<Gnome::GObject::Object>.

  multi method new ( Str :$build-id! )

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-dialog

Creates a new dialog box.

Widgets should not be packed into the I<GtkWindow>
directly, but into the C<$content_area> and C<$action_area>,
as described above.

=begin code
method new-dialog ( --> Gnome::Gtk4::Dialog )
=end code


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-with-buttons

Creates a new B<Gnome::Gtk4::Dialog> with the given title and transient parent.

The C<$flags> argument can be used to make the dialog modal, have it destroyed along with its transient parent, or make it use a headerbar.

Button text/response ID pairs should be listed in pairs, with a undefined pointer ending the list. Button text can be arbitrary text. A response ID can be any positive number, or one of the values in the C<GtkResponseType> enumeration enumeration. If the user clicks one of these buttons, B<Gnome::Gtk4::Dialog> will emit the I<response> signal with the corresponding response ID.

If a B<Gnome::Gtk4::Dialog> receives a delete event, it will emit ::response with a response ID of %GTK_RESPONSE_DELETE_EVENT.

However, destroying a dialog does not emit the ::response signal;
so be careful relying on ::response when using the
%GTK_DIALOG_DESTROY_WITH_PARENT flag.

Here’s a simple example:
=begin comment 
Following example code is in c

 GtkWindow *main_app_window; // Window the dialog should show up on
 GtkWidget *dialog;
 GtkDialogFlags flags = GTK_DIALOG_MODAL | GTK_DIALOG_DESTROY_WITH_PARENT;
 dialog = gtk_dialog_new_with_buttons ("My dialog",
 main_app_window,
 flags,
 _("_OK"),
 GTK_RESPONSE_ACCEPT,
 _("_Cancel"),
 GTK_RESPONSE_REJECT,
 NULL);
=end comment

=begin code
method new-with-buttons ( Str $title, N-Object() $parent, UInt $flags, Str $first-button-text, … --> Gnome::Gtk4::Dialog )
=end code

=item $title; Title of the dialog.
=item $parent; Transient parent of the dialog.
=item $flags; from B<Gnome::Gtk4::Dialog>Flags. A bitmap.
=item $first-button-text; text to go in first button.
=item …; response ID for first button, then additional buttons, ending with undefined. Note that each argument must be specified as a type followed by its value!

=end pod

#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 add-action-widget

Adds an activatable widget to the action area of a B<Gnome::Gtk4::Dialog>.

GTK connects a signal handler that will emit the I<response> signal on the dialog when the widget is activated. The widget is appended to the end of the dialog’s action area.

If you want to add a non-activatable widget, simply pack it into the C<$action_area> field of the B<Gnome::Gtk4::Dialog> struct.

=begin code
method add-action-widget ( N-Object() $child, Int() $response-id )
=end code

=item $child; an activatable widget.
=item $response-id; response ID for C<$child>.

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 add-button

Adds a button with the given text.

GTK arranges things so that clicking the button will emit the I<response> signal with the given C<$response_id>.
The button is appended to the end of the dialog’s action area.
The button widget is returned, but usually you don’t need it.

=begin code
method add-button ( Str $button-text, Int() $response-id --> N-Object )
=end code

=item $button-text; text of button.
=item $response-id; response ID for the button.

Return value; the I<GtkButton> widget that was added. 


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 add-buttons

Adds multiple buttons.

This is the same as calling C<.add-button()>
repeatedly. The variable argument list should be undefined-terminated as with [ctor C<$Gtk>.Dialog.new_with_buttons]. Each button must have both text and response ID.

=begin code
method add-buttons ( Str $first-button-text, … )
=end code

=item $first-button-text; button text.
=item …; response ID for first button, then more text-response_id pairs. Note that each argument must be specified as a type followed by its value!

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-content-area

Returns the content area of C<$dialog>.

=begin code
method get-content-area (--> N-Object )
=end code


Return value; the content area I<GtkBox>.. 


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-header-bar

Returns the header bar of C<$dialog>.

Note that the headerbar is only used by the dialog if the I<use-header-bar> property is %TRUE.

=begin code
method get-header-bar (--> N-Object )
=end code


Return value; the header bar. 


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-response-for-widget

Gets the response id of a widget in the action area of a dialog.

=begin code
method get-response-for-widget ( N-Object() $widget --> Int )
=end code

=item $widget; a widget in the action area of C<$dialog>.

Return value; the response id of C<$widget>, or %GTK_RESPONSE_NONE
 if C<$widget> doesn’t have a response id set.. 


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-widget-for-response

Gets the widget button that uses the given response ID in the action area of a dialog.

=begin code
method get-widget-for-response ( Int() $response-id --> N-Object )
=end code

=item $response-id; the response ID used by the C<$dialog> widget.

Return value; the C<$widget> button that uses the given
 C<$response_id>. 


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 response

Emits the ::response signal with the given response ID.

Used to indicate that the user has responded to the dialog in some way.

=begin code
method response ( Int() $response-id )
=end code

=item $response-id; response ID.

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-default-response

Sets the default widget for the dialog based on the response ID.

Pressing “Enter” normally activates the default widget.

=begin code
method set-default-response ( Int() $response-id )
=end code

=item $response-id; a response ID.

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-response-sensitive

A convenient way to sensitize/desensitize dialog buttons.

Calls I<gtk_widget_set_sensitive (widget, C<$setting>)>
for each widget in the dialog’s action area with the given C<$response_id>.

=begin code
method set-response-sensitive ( Int() $response-id, Bool() $setting )
=end code

=item $response-id; a response ID.
=item $setting; %TRUE for sensitive.

=end pod

#-------------------------------------------------------------------------------
#--[Signal Documentation]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Signals

=comment -----------------------------------------------------------------------
=head3 close

Emitted when the user uses a keybinding to close the dialog.

This is a [keybinding signal](class.SignalAction.html).

The default binding for this signal is the Escape key.

=begin code
method handler (
  Int :$_handle_id,
  Gnome::Gtk4::Dialog() :$_native-object,
  Gnome::Gtk4::Dialog :$_widget,
  *%user-options
)
=end code

=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item %user-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

=comment -----------------------------------------------------------------------
=head3 response

Emitted when an action widget is clicked.

The signal is also emitted when the dialog receives a delete event, and when C<.response()> is called.
On a delete event, the response ID is %GTK_RESPONSE_DELETE_EVENT.
Otherwise, it depends on which action widget was clicked.

=begin code
method handler (
  gint $response-id,
  Int :$_handle_id,
  Gnome::Gtk4::Dialog() :$_native-object,
  Gnome::Gtk4::Dialog :$_widget,
  *%user-options
)
=end code

=item $response-id; the response ID.
=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item %user-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

=end pod

