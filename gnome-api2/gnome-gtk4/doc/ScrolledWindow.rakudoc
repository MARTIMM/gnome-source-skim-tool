=comment Package: Gtk4, C-Source: scrolledwindow
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Gnome::Gtk4::ScrolledWindow

![](images/scrolledwindow.png)

=head1 Description

B<Gnome::Gtk4::ScrolledWindow> is a container that makes its child scrollable.

It does so using either internally added scrollbars or externally
associated adjustments, and optionally draws a frame around the child.

Widgets with native scrolling support, i.e. those whose classes implement
the B<Gnome::Gtk4::R-Scrollable> interface, are added directly. For other types
of widget, the class B<Gnome::Gtk4::Viewport> acts as an adaptor, giving
scrollability to other widgets. C<.set-child()>
intelligently accounts for whether or not the added child is a B<Gnome::Gtk4::R-Scrollable>.
If it isn’t, then it wraps the child in a B<Gnome::Gtk4::Viewport>. Therefore, you can
just add any child widget and not worry about the details.

If C<.set-child()> has added a B<Gnome::Gtk4::Viewport> for you,
you can remove both your added child widget from the B<Gnome::Gtk4::Viewport>, and the
B<Gnome::Gtk4::Viewport> from the B<Gnome::Gtk4::ScrolledWindow>, like this:

=begin comment
GtkWidget *scrolled_window = gtk_scrolled_window_new ();
GtkWidget *child_widget = gtk_button_new ();

// GtkButton is not a GtkScrollable, so GtkScrolledWindow will automatically
// add a GtkViewport.
gtk_box_append (GTK_BOX (scrolled_window), child_widget);

// Either of these will result in child_widget being unparented:
gtk_box_remove (GTK_BOX (scrolled_window), child_widget);
// or
gtk_box_remove (GTK_BOX (scrolled_window),
                      gtk_bin_get_child (GTK_BIN (scrolled_window)));

=end comment

Unless I<hscrollbar-policy> and
I<vscrollbar-policy> are C<GTK_POLICY_NEVER> or
C<GTK_POLICY_EXTERNAL>, B<Gnome::Gtk4::ScrolledWindow> adds internal B<Gnome::Gtk4::Scrollbar> widgets
around its child. The scroll position of the child, and if applicable the
scrollbars, is controlled by the I<hadjustment>
and I<vadjustment> that are associated with the
B<Gnome::Gtk4::ScrolledWindow>. See the docs on B<Gnome::Gtk4::Scrollbar> for the details,
but note that the “step_increment” and “page_increment” fields are only
effective if the policy causes scrollbars to be present.

If a B<Gnome::Gtk4::ScrolledWindow> doesn’t behave quite as you would like, or
doesn’t have exactly the right layout, it’s very possible to set up
your own scrolling with B<Gnome::Gtk4::Scrollbar> and for example a B<Gnome::Gtk4::Grid>.

=head2 Touch support

B<Gnome::Gtk4::ScrolledWindow> has built-in support for touch devices. When a
touchscreen is used, swiping will move the scrolled window, and will
expose 'kinetic' behavior. This can be turned off with the
I<kinetic-scrolling> property if it is undesired.

B<Gnome::Gtk4::ScrolledWindow> also displays visual 'overshoot' indication when
the content is pulled beyond the end, and this situation can be
captured with the I<edge-overshot> signal.

If no mouse device is present, the scrollbars will overlaid as
narrow, auto-hiding indicators over the content. If traditional
scrollbars are desired although no mouse is present, this behaviour
can be turned off with the I<overlay-scrolling>
property.

=head2 CSS nodes

B<Gnome::Gtk4::ScrolledWindow> has a main CSS node with name scrolledwindow.
It gets a .frame style class added when I<has-frame>
is C<True>.

It uses subnodes with names overshoot and undershoot to draw the overflow
and underflow indications. These nodes get the .left, .right, .top or .bottom
style class added depending on where the indication is drawn.

B<Gnome::Gtk4::ScrolledWindow> also sets the positional style classes (.left, .right,
.top, .bottom) and style classes related to overlay scrolling
(.overlay-indicator, .dragging, .hovering) on its scrollbars.

If both scrollbars are visible, the area where they meet is drawn
with a subnode named junction.

=head2 Accessibility

B<Gnome::Gtk4::ScrolledWindow> uses the C<GTK_ACCESSIBLE_ROLE_GROUP> role.

=begin comment

=head2 Uml Diagram
![](plantuml/….svg)

=end comment

=begin comment

=head2 Example
# Example use of module Gnome::Gtk4::ScrolledWindow

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

=head2 new

=head3 :native-object

Create an object using a native object from elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object :$native-object! )

=head3 :build-id

Create an object using a native object from a builder. See also B<Gnome::GObject::Object>.

  multi method new ( Str :$build-id! )

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-scrolledwindow

Creates a new scrolled window.

=begin code
method new-scrolledwindow ( --> Gnome::Gtk4::ScrolledWindow \)
=end code

=begin comment

=head2 Example
# Example for new-scrolledwindow

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-child

Gets the child widget of C<$scrolled-window>.

=begin code
method get-child (--> N-Object )
=end code

Return value; the child widget of C<$scrolled-window>. 

=begin comment

=head2 Example
# Example for get-child

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-hadjustment

Returns the horizontal scrollbar’s adjustment.

This is the adjustment used to connect the horizontal scrollbar
to the child widget’s horizontal scroll functionality.

=begin code
method get-hadjustment (--> N-Object )
=end code

Return value; the horizontal B<Gnome::Gtk4::Adjustment>. 

=begin comment

=head2 Example
# Example for get-hadjustment

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-has-frame

Gets whether the scrolled window draws a frame.

=begin code
method get-has-frame (--> Bool )
=end code

Return value; C<True> if the C<$scrolled-window> has a frame. 

=begin comment

=head2 Example
# Example for get-has-frame

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-hscrollbar

Returns the horizontal scrollbar of C<$scrolled-window>.

=begin code
method get-hscrollbar (--> N-Object )
=end code

Return value; the horizontal scrollbar of the scrolled window.. 

=begin comment

=head2 Example
# Example for get-hscrollbar

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-kinetic-scrolling

Returns the specified kinetic scrolling behavior.

=begin code
method get-kinetic-scrolling (--> Bool )
=end code

Return value; the scrolling behavior flags.. 

=begin comment

=head2 Example
# Example for get-kinetic-scrolling

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-max-content-height

Returns the maximum content height set.

=begin code
method get-max-content-height (--> Int )
=end code

Return value; the maximum content height, or -1. 

=begin comment

=head2 Example
# Example for get-max-content-height

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-max-content-width

Returns the maximum content width set.

=begin code
method get-max-content-width (--> Int )
=end code

Return value; the maximum content width, or -1. 

=begin comment

=head2 Example
# Example for get-max-content-width

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-min-content-height

Gets the minimal content height of C<$scrolled-window>.

=begin code
method get-min-content-height (--> Int )
=end code

Return value; the minimal content height. 

=begin comment

=head2 Example
# Example for get-min-content-height

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-min-content-width

Gets the minimum content width of C<$scrolled-window>.

=begin code
method get-min-content-width (--> Int )
=end code

Return value; the minimum content width. 

=begin comment

=head2 Example
# Example for get-min-content-width

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-overlay-scrolling

Returns whether overlay scrolling is enabled for this scrolled window.

=begin code
method get-overlay-scrolling (--> Bool )
=end code

Return value; C<True> if overlay scrolling is enabled. 

=begin comment

=head2 Example
# Example for get-overlay-scrolling

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-placement

Gets the placement of the contents with respect to the scrollbars.

=begin code
method get-placement (--> GtkCornerType )
=end code

Return value; the current placement value.. 

=begin comment

=head2 Example
# Example for get-placement

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-policy

Retrieves the current policy values for the horizontal and vertical
scrollbars.

See C<.set-policy()>.

=begin code
method get-policy ( GtkPolicyType $hscrollbar-policy, GtkPolicyType $vscrollbar-policy )
=end code

=item $hscrollbar-policy; (transfer ownership: full) location to store the policy
  for the horizontal scrollbar.
=item $vscrollbar-policy; (transfer ownership: full) location to store the policy
  for the vertical scrollbar.

=begin comment

=head2 Example
# Example for get-policy

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-propagate-natural-height

Reports whether the natural height of the child will be calculated
and propagated through the scrolled window’s requested natural height.

=begin code
method get-propagate-natural-height (--> Bool )
=end code

Return value; whether natural height propagation is enabled.. 

=begin comment

=head2 Example
# Example for get-propagate-natural-height

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-propagate-natural-width

Reports whether the natural width of the child will be calculated
and propagated through the scrolled window’s requested natural width.

=begin code
method get-propagate-natural-width (--> Bool )
=end code

Return value; whether natural width propagation is enabled.. 

=begin comment

=head2 Example
# Example for get-propagate-natural-width

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-vadjustment

Returns the vertical scrollbar’s adjustment.

This is the adjustment used to connect the vertical
scrollbar to the child widget’s vertical scroll functionality.

=begin code
method get-vadjustment (--> N-Object )
=end code

Return value; the vertical B<Gnome::Gtk4::Adjustment>. 

=begin comment

=head2 Example
# Example for get-vadjustment

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-vscrollbar

Returns the vertical scrollbar of C<$scrolled-window>.

=begin code
method get-vscrollbar (--> N-Object )
=end code

Return value; the vertical scrollbar of the scrolled window.. 

=begin comment

=head2 Example
# Example for get-vscrollbar

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-child

Sets the child widget of C<$scrolled-window>.

=begin code
method set-child ( N-Object() $child )
=end code

=item $child; the child widget.

=begin comment

=head2 Example
# Example for set-child

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-hadjustment

Sets the B<Gnome::Gtk4::Adjustment> for the horizontal scrollbar.

=begin code
method set-hadjustment ( N-Object() $hadjustment )
=end code

=item $hadjustment; the B<Gnome::Gtk4::Adjustment> to use, or undefined to create a new one.

=begin comment

=head2 Example
# Example for set-hadjustment

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-has-frame

Changes the frame drawn around the contents of C<$scrolled-window>.

=begin code
method set-has-frame ( Bool() $has-frame )
=end code

=item $has-frame; whether to draw a frame around scrolled window contents.

=begin comment

=head2 Example
# Example for set-has-frame

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-kinetic-scrolling

Turns kinetic scrolling on or off.

Kinetic scrolling only applies to devices with source
C<GDK_SOURCE_TOUCHSCREEN>.

=begin code
method set-kinetic-scrolling ( Bool() $kinetic-scrolling )
=end code

=item $kinetic-scrolling; C<True> to enable kinetic scrolling.

=begin comment

=head2 Example
# Example for set-kinetic-scrolling

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-max-content-height

Sets the maximum height that C<$scrolled-window> should keep visible.

The C<$scrolled-window> will grow up to this height before it starts
scrolling the content.

It is a programming error to set the maximum content height to a value
smaller than I<min-content-height>.

=begin code
method set-max-content-height ( Int() $height )
=end code

=item $height; the maximum content height.

=begin comment

=head2 Example
# Example for set-max-content-height

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-max-content-width

Sets the maximum width that C<$scrolled-window> should keep visible.

The C<$scrolled-window> will grow up to this width before it starts
scrolling the content.

It is a programming error to set the maximum content width to a
value smaller than I<min-content-width>.

=begin code
method set-max-content-width ( Int() $width )
=end code

=item $width; the maximum content width.

=begin comment

=head2 Example
# Example for set-max-content-width

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-min-content-height

Sets the minimum height that C<$scrolled-window> should keep visible.

Note that this can and (usually will) be smaller than the minimum
size of the content.

It is a programming error to set the minimum content height to a
value greater than I<max-content-height>.

=begin code
method set-min-content-height ( Int() $height )
=end code

=item $height; the minimal content height.

=begin comment

=head2 Example
# Example for set-min-content-height

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-min-content-width

Sets the minimum width that C<$scrolled-window> should keep visible.

Note that this can and (usually will) be smaller than the minimum
size of the content.

It is a programming error to set the minimum content width to a
value greater than I<max-content-width>.

=begin code
method set-min-content-width ( Int() $width )
=end code

=item $width; the minimal content width.

=begin comment

=head2 Example
# Example for set-min-content-width

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-overlay-scrolling

Enables or disables overlay scrolling for this scrolled window.

=begin code
method set-overlay-scrolling ( Bool() $overlay-scrolling )
=end code

=item $overlay-scrolling; whether to enable overlay scrolling.

=begin comment

=head2 Example
# Example for set-overlay-scrolling

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-placement

Sets the placement of the contents with respect to the scrollbars
for the scrolled window.

The default is C<GTK_CORNER_TOP_LEFT>, meaning the child is
in the top left, with the scrollbars underneath and to the right.
Other values in  C<enumeration CornerType from Gnome::Gtk4::T-scrolledwindow>  are C<GTK_CORNER_TOP_RIGHT>,
C<GTK_CORNER_BOTTOM_LEFT>, and C<GTK_CORNER_BOTTOM_RIGHT>.

See also C<.get-placement()> and
C<.unset-placement()>.

=begin code
method set-placement ( GtkCornerType $window-placement )
=end code

=item $window-placement; position of the child window.

=begin comment

=head2 Example
# Example for set-placement

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-policy

Sets the scrollbar policy for the horizontal and vertical scrollbars.

The policy determines when the scrollbar should appear; it is a value
from the  C<enumeration PolicyType from Gnome::Gtk4::T-scrolledwindow>  enumeration. If C<GTK_POLICY_ALWAYS>, the
scrollbar is always present; if C<GTK_POLICY_NEVER>, the scrollbar is
never present; if C<GTK_POLICY_AUTOMATIC>, the scrollbar is present only
if needed (that is, if the slider part of the bar would be smaller
than the trough — the display is larger than the page size).

=begin code
method set-policy ( GtkPolicyType $hscrollbar-policy, GtkPolicyType $vscrollbar-policy )
=end code

=item $hscrollbar-policy; policy for horizontal bar.
=item $vscrollbar-policy; policy for vertical bar.

=begin comment

=head2 Example
# Example for set-policy

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-propagate-natural-height

Sets whether the natural height of the child should be calculated
and propagated through the scrolled window’s requested natural height.

=begin code
method set-propagate-natural-height ( Bool() $propagate )
=end code

=item $propagate; whether to propagate natural height.

=begin comment

=head2 Example
# Example for set-propagate-natural-height

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-propagate-natural-width

Sets whether the natural width of the child should be calculated
and propagated through the scrolled window’s requested natural width.

=begin code
method set-propagate-natural-width ( Bool() $propagate )
=end code

=item $propagate; whether to propagate natural width.

=begin comment

=head2 Example
# Example for set-propagate-natural-width

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 set-vadjustment

Sets the B<Gnome::Gtk4::Adjustment> for the vertical scrollbar.

=begin code
method set-vadjustment ( N-Object() $vadjustment )
=end code

=item $vadjustment; the B<Gnome::Gtk4::Adjustment> to use, or undefined to create a new one.

=begin comment

=head2 Example
# Example for set-vadjustment

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 unset-placement

Unsets the placement of the contents with respect to the scrollbars.

If no window placement is set for a scrolled window,
it defaults to C<GTK_CORNER_TOP_LEFT>.

=begin code
method unset-placement ( )
=end code

=begin comment

=head2 Example
# Example for unset-placement

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Signal Documentation]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Signals

=comment -----------------------------------------------------------------------
=head3 edge-overshot

Emitted whenever user initiated scrolling makes the scrolled
window firmly surpass the limits defined by the adjustment
in that orientation.

A similar behavior without edge resistance is provided by the
I<edge-reached> signal.

Note: The C<$pos> argument is LTR/RTL aware, so callers should be
aware too if intending to provide behavior on horizontal edges.

=begin code
method handler (
   $pos,
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gtk4::ScrolledWindow :$_widget,
  *C<user>-options
)
=end code

=item $pos; edge side that was hit.
=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gtk4::ScrolledWindow> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

=begin comment

=head2 Example
# Example for signal edge-overshot

=end comment

=comment -----------------------------------------------------------------------
=head3 edge-reached

Emitted whenever user-initiated scrolling makes the scrolled
window exactly reach the lower or upper limits defined by the
adjustment in that orientation.

A similar behavior with edge resistance is provided by the
I<edge-overshot> signal.

Note: The C<$pos> argument is LTR/RTL aware, so callers should be
aware too if intending to provide behavior on horizontal edges.

=begin code
method handler (
   $pos,
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gtk4::ScrolledWindow :$_widget,
  *C<user>-options
)
=end code

=item $pos; edge side that was reached.
=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gtk4::ScrolledWindow> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

=begin comment

=head2 Example
# Example for signal edge-reached

=end comment

=comment -----------------------------------------------------------------------
=head3 move-focus-out

Emitted when focus is moved away from the scrolled window by a
keybinding.

This is a [keybinding signal](class.SignalAction.html).

The default bindings for this signal are
B<Ctrl + Tab> to move forward and B<Ctrl + Shift + Tab> to
move backward.

=begin code
method handler (
   $direction-type,
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gtk4::ScrolledWindow :$_widget,
  *C<user>-options
)
=end code

=item $direction-type; either C<GTK_DIR_TAB_FORWARD> or
  C<GTK_DIR_TAB_BACKWARD>.
=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gtk4::ScrolledWindow> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

=begin comment

=head2 Example
# Example for signal move-focus-out

=end comment

=comment -----------------------------------------------------------------------
=head3 scroll-child

Emitted when a keybinding that scrolls is pressed.

This is a [keybinding signal](class.SignalAction.html).

The horizontal or vertical adjustment is updated which triggers a
signal that the scrolled window’s child may listen to and scroll itself.

=begin code
method handler (
   $scroll,
  gboolean $horizontal,
  Int :$_handle_id,
  N-GObject :$_native-object,
  Gnome::Gtk4::ScrolledWindow :$_widget,
  *C<user>-options
  --> gboolean
)
=end code

=item $scroll; a C<enumeration GtkScrollType defined in Gnome::Gtk4::T-enums> describing how much to scroll.
=item $horizontal; whether the keybinding scrolls the child
  horizontally or not.
=item $_handle_id; The registered event handler id.
=item $_native-object; The native object provided by the Raku object which registered this event. This a native B<Gnome::Gtk4::ScrolledWindow> object.
=item $_widget; The object which registered the signal. User code may have left the object going out of scope.
=item C<user>-options; A list of named arguments provided at the C<.register-signal()> method from B<Gnome::GObject::Object>.

Return value; 

=begin comment

=head2 Example
# Example for signal scroll-child

=end comment

=end pod

