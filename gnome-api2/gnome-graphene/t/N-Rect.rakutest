=comment Package: Graphene, C-Source: rect
use v6.d;

#TL:1:Gnome::Graphene::N-Rect:
#-------------------------------------------------------------------------------
#--[Module Imports]-------------------------------------------------------------
#-------------------------------------------------------------------------------

use Test;
use NativeCall;

#use Gnome::Graphene::N-Point:api<2>;
use Gnome::Graphene::N-Rect:api<2>;
#use Gnome::Graphene::N-Vec2:api<2>;
use Gnome::Graphene::T-point:api<2>;
use Gnome::Graphene::T-rect:api<2>;
use Gnome::Graphene::T-vec:api<2>;
use Gnome::Graphene::T-size:api<2>;
use Gnome::N::GlibToRakuTypes:api<2>;
use Gnome::N::N-Object:api<2>;
use Gnome::N::NativeLib:api<2>;
use Gnome::N::X:api<2>;

#-------------------------------------------------------------------------------
#--[Test preparation]-----------------------------------------------------------
#-------------------------------------------------------------------------------

#Gnome::N::debug(:on);
my Gnome::Graphene::N-Rect ( $rect, $rect2);
my N-Rect() $n-rect;
my N-Point() $n-point;
my N-Size() $n-size;

#-------------------------------------------------------------------------------
#--[Class init tests]-----------------------------------------------------------
#-------------------------------------------------------------------------------

subtest 'ISA test', {
  $rect .= alloc;
  ok $rect.is-valid, '.alloc';
};

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# set environment variable 'raku-test-all' if rest must be tested too.
unless %*ENV<raku_test_all>:exists {
  done-testing;
  exit;
}

#-------------------------------------------------------------------------------
subtest 'Method tests', {
    my Num() $x = 10e0;
    my Num() $y = 10e0;
    my Num() $width = 5e0;
    my Num() $height = 5e0;
    my CArray[N-Vec2] $vertices;
    my CArray[N-Rect] $src;
    my CArray[N-Rect] $res;
    my CArray[N-Point] $p;
    my CArray[N-Rect] $b;
    my Num() $factor;

#Gnome::N::debug(:on);
    #TM:1:init()
    $rect.init( $x, $y, $width, $height);

    #TM:1:get-x()
    is $rect.get-x(), $x, '.get-x()';

    #TM:1:get-y()
    is $rect.get-y(), $y, '.get-y()';

    #TM:1:get-width()
    is $rect.get-width(), $width, '.get-width()';

    #TM:1:get-height()
    is $rect.get-height(), $height, '.get-height()';

    #TM::init-from-rect()
    $rect2 .= alloc;
    $rect2.init-from-rect($rect);
    is $rect2.get-height(), $height, '.init-from-rect()';

    #TM:1:equal()
    ok $rect.equal($rect2), '.equal()';

    #TM:1:get-center()
    $n-point .= new;
    $rect.get-center($n-point);
    is $n-point.x, $x + ½ * $width, '.get-center()';

    #TM:1:get-area()
    is $rect.get-area($n-point), $width * $height, '.area()';


    #TM:1:free() implicit
    $rect2.clear-object;
    ok !$rect2.is-valid, '.free()';

#`{{
    #TM:0:contains-point()
    ok .contains-point( $p), '.contains-point()';

    #TM:0:contains-rect()
    ok .contains-rect( $b), '.contains-rect()';

    #TM:0:expand()
    ok .expand( $p, $res), '.expand()';

    #TM:0:get-bottom-left()
    is .get-bottom-left( $p), '…', '.get-bottom-left()';

    #TM:0:get-bottom-right()
    is .get-bottom-right( $p), '…', '.get-bottom-right()';


    #TM:0:get-top-left()
    is .get-top-left( $p), '…', '.get-top-left()';

    #TM:0:get-top-right()
    is .get-top-right( $p), '…', '.get-top-right()';

    #TM:0:get-vertices()
    is .get-vertices( $vertices), '…', '.get-vertices()';

    #TM:0:inset()
    ok .inset( $d-x, $d-y), '.inset()';

    #TM:0:inset-r()
    ok .inset-r( $d-x, $d-y, $res), '.inset-r()';

    #TM:0:interpolate()
    ok .interpolate( $b, $factor, $res), '.interpolate()';

    #TM:0:intersection()
    ok .intersection( $b, $res), '.intersection()';

    #TM:0:normalize()
    ok .normalize(), '.normalize()';

    #TM:0:normalize-r()
    ok .normalize-r( $res), '.normalize-r()';

    #TM:0:offset()
    ok .offset( $d-x, $d-y), '.offset()';

    #TM:0:offset-r()
    ok .offset-r( $d-x, $d-y, $res), '.offset-r()';

    #TM:0:round-extents()
    ok .round-extents( $res), '.round-extents()';

    #TM:0:scale()
    ok .scale( $s-h, $s-v, $res), '.scale()';

    #TM:0:union()
    ok .union( $b, $res), '.union()';

}}
#  }
};

#-------------------------------------------------------------------------------
subtest 'Function tests', {
  with $n-rect {


#`{{
    #TM:0:alloc()
    ok .alloc(), '.alloc()';

    #TM:0:zero()
    ok .zero(), '.zero()';

}}
  }
};

#-------------------------------------------------------------------------------
done-testing;

=finish

