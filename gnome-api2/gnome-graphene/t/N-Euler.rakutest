=comment Package: Graphene, C-Source: euler
use v6.d;

#TL:1:Gnome::Graphene::N-Euler:
#-------------------------------------------------------------------------------
#--[Module Imports]-------------------------------------------------------------
#-------------------------------------------------------------------------------

use NativeCall;
use Test;


use Gnome::Graphene::N-Euler:api<2>;
use Gnome::Graphene::N-Matrix:api<2>;
#use Gnome::Graphene::N-Quaternion:api<2>;
use Gnome::Graphene::N-Vec3:api<2>;
use Gnome::Graphene::T-euler:api<2>;
use Gnome::Graphene::T-matrix:api<2>;
#use Gnome::Graphene::T-quaternion:api<2>;
use Gnome::Graphene::T-vec:api<2>;
use Gnome::N::GlibToRakuTypes:api<2>;
use Gnome::N::N-Object:api<2>;
use Gnome::N::NativeLib:api<2>;
use Gnome::N::X:api<2>;

#-------------------------------------------------------------------------------
#--[Test preparation]-----------------------------------------------------------
#-------------------------------------------------------------------------------

#Gnome::N::debug(:on);
my N-Euler $n-euler;

#-------------------------------------------------------------------------------
#--[Class init tests]-----------------------------------------------------------
#-------------------------------------------------------------------------------

subtest 'ISA test', {
  given $n-euler {

#`{{
    #TM:0:alloc()
    ok .alloc(), '.alloc()';

}}
  }
};

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# set environment variable 'raku-test-all' if rest must be tested too.
unless %*ENV<raku_test_all>:exists {
  done-testing;
  exit;
}

#-------------------------------------------------------------------------------
subtest 'Method tests', {
  with $n-euler {
    my Num() $z;
    my N-Object $m;
    my N-Object $q;
    my N-Object $src;
    my graphene_euler_order_t $order;
    my N-Object $res;
    my N-Object $b;
    my Num() $x;
    my N-Object $v;
    my Num() $y;


#`{{
    #TM:0:equal()
    ok .equal( $b), '.equal()';

    #TM:0:free()
    ok .free(), '.free()';

    #TM:0:get-alpha()
     .get-alpha(), '…', '.get-alpha()';

    #TM:0:get-beta()
     .get-beta(), '…', '.get-beta()';

    #TM:0:get-gamma()
     .get-gamma(), '…', '.get-gamma()';

    #TM:0:get-order()
     .get-order(), '…', '.get-order()';

    #TM:0:get-x()
     .get-x(), '…', '.get-x()';

    #TM:0:get-y()
     .get-y(), '…', '.get-y()';

    #TM:0:get-z()
     .get-z(), '…', '.get-z()';

    #TM:0:init()
    ok .init( $x, $y, $z), '.init()';

    #TM:0:init-from-euler()
    ok .init-from-euler( $src), '.init-from-euler()';

    #TM:0:init-from-matrix()
    ok .init-from-matrix( $m, $order), '.init-from-matrix()';

    #TM:0:init-from-quaternion()
    ok .init-from-quaternion( $q, $order), '.init-from-quaternion()';

    #TM:0:init-from-radians()
    ok .init-from-radians( $x, $y, $z, $order), '.init-from-radians()';

    #TM:0:init-from-vec3()
    ok .init-from-vec3( $v, $order), '.init-from-vec3()';

    #TM:0:init-with-order()
    ok .init-with-order( $x, $y, $z, $order), '.init-with-order()';

    #TM:0:reorder()
    ok .reorder( $order, $res), '.reorder()';

    #TM:0:to-matrix()
    ok .to-matrix( $res), '.to-matrix()';

    #TM:0:to-quaternion()
    ok .to-quaternion( $res), '.to-quaternion()';

    #TM:0:to-vec3()
    ok .to-vec3( $res), '.to-vec3()';

}}
  }
};

#-------------------------------------------------------------------------------
subtest 'Function tests', {
  with $n-euler {


#`{{
}}
  }
};

#-------------------------------------------------------------------------------
done-testing;

=finish

