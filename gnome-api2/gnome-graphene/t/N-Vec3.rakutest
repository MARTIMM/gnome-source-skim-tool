=comment Package: Graphene, C-Source: graphene-vec
use v6.d;

#TL:1:Gnome::Graphene::N-Vec3:
#-------------------------------------------------------------------------------
#--[Module Imports]-------------------------------------------------------------
#-------------------------------------------------------------------------------

use Test;
use NativeCall;


use Gnome::Graphene::N-Vec2:api<2>;
use Gnome::Graphene::N-Vec3:api<2>;
use Gnome::Graphene::N-Vec4:api<2>;
use Gnome::N::GlibToRakuTypes:api<2>;
use Gnome::N::N-Object:api<2>;
use Gnome::N::NativeLib:api<2>;
use Gnome::N::X:api<2>;

#-------------------------------------------------------------------------------
#--[Test preparation]-----------------------------------------------------------
#-------------------------------------------------------------------------------

#Gnome::N::debug(:on);
my N-Vec3 $n-vec3;

#-------------------------------------------------------------------------------
#--[Class init tests]-----------------------------------------------------------
#-------------------------------------------------------------------------------

subtest 'ISA test', {
  given $n-vec3 {

#`{{
    #TM:0:alloc()
    ok .alloc(), '.alloc()';

}}
  }
};

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# set environment variable 'raku-test-all' if rest must be tested too.
unless %*ENV<raku_test_all>:exists {
  done-testing;
  exit;
}

#-------------------------------------------------------------------------------
subtest 'Method tests', {
  with $n-vec3 {
    my Num() $w;
    my CArray[N-Vec3] $res;
    my Num() $epsilon;
    my Num() $factor;
    my Num() $y;
    my CArray[N-Vec3] $v2;
    my Num() $z;
    my CArray[N-Vec3] $b;
    my CArray[N-Vec3] $src;
    my Num() $dest;
    my Num() $x;


#`{{
    #TM:0:add()
    ok .add( $b, $res), '.add()';

    #TM:0:cross()
    ok .cross( $b, $res), '.cross()';

    #TM:0:divide()
    ok .divide( $b, $res), '.divide()';

    #TM:0:dot()
    ok .dot( $b), '.dot()';

    #TM:0:equal()
    ok .equal( $v2), '.equal()';

    #TM:0:free()
    ok .free(), '.free()';

    #TM:0:get-x()
     .get-x(), '…', '.get-x()';

    #TM:0:get-xy()
    is .get-xy( $res), '…', '.get-xy()';

    #TM:0:get-xy0()
    is .get-xy0( $res), '…', '.get-xy0()';

    #TM:0:get-xyz0()
    is .get-xyz0( $res), '…', '.get-xyz0()';

    #TM:0:get-xyz1()
    is .get-xyz1( $res), '…', '.get-xyz1()';

    #TM:0:get-xyzw()
    is .get-xyzw( $w, $res), '…', '.get-xyzw()';

    #TM:0:get-y()
     .get-y(), '…', '.get-y()';

    #TM:0:get-z()
     .get-z(), '…', '.get-z()';

    #TM:0:init()
    ok .init( $x, $y, $z), '.init()';

    #TM:0:init-from-float()
    ok .init-from-float( $src), '.init-from-float()';

    #TM:0:init-from-vec3()
    ok .init-from-vec3( $src), '.init-from-vec3()';

    #TM:0:interpolate()
    ok .interpolate( $v2, $factor, $res), '.interpolate()';

    #TM:0:length()
    ok .length(), '.length()';

    #TM:0:max()
    ok .max( $b, $res), '.max()';

    #TM:0:min()
    ok .min( $b, $res), '.min()';

    #TM:0:multiply()
    ok .multiply( $b, $res), '.multiply()';

    #TM:0:near()
    ok .near( $v2, $epsilon), '.near()';

    #TM:0:negate()
    ok .negate( $res), '.negate()';

    #TM:0:normalize()
    ok .normalize( $res), '.normalize()';

    #TM:0:scale()
    ok .scale( $factor, $res), '.scale()';

    #TM:0:subtract()
    ok .subtract( $b, $res), '.subtract()';

    #TM:0:to-float()
    ok .to-float( $dest), '.to-float()';

}}
  }
};

#-------------------------------------------------------------------------------
subtest 'Function tests', {
  with $n-vec3 {


#`{{
    #TM:0:one()
    ok .one(), '.one()';

    #TM:0:x-axis()
    ok .x-axis(), '.x-axis()';

    #TM:0:y-axis()
    ok .y-axis(), '.y-axis()';

    #TM:0:z-axis()
    ok .z-axis(), '.z-axis()';

    #TM:0:zero()
    ok .zero(), '.zero()';

}}
  }
};

#-------------------------------------------------------------------------------
done-testing;

=finish

