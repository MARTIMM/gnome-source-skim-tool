=comment Package: Graphene, C-Source: point
use v6.d;

#TL:1:Gnome::Graphene::N-Point:
#-------------------------------------------------------------------------------
#--[Module Imports]-------------------------------------------------------------
#-------------------------------------------------------------------------------

use Test;
use NativeCall;

use Gnome::Graphene::N-Point:api<2>;
use Gnome::Graphene::T-point:api<2>;
use Gnome::Graphene::T-vec:api<2>;

use Gnome::N::GlibToRakuTypes:api<2>;
use Gnome::N::N-Object:api<2>;
use Gnome::N::NativeLib:api<2>;
use Gnome::N::X:api<2>;

#-------------------------------------------------------------------------------
#--[Test preparation]-----------------------------------------------------------
#-------------------------------------------------------------------------------

#Gnome::N::debug(:on);
my Gnome::Graphene::N-Point ( $point1, $point2, $point3);
my N-Point $n-point .= new;

#-------------------------------------------------------------------------------
#--[Class init tests]-----------------------------------------------------------
#-------------------------------------------------------------------------------

subtest 'ISA test', {
  given $point1 {

    #TM:1:alloc()
    $point1 .= alloc;
    ok $point1.is-valid, '.alloc()';
  }
};

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# set environment variable 'raku-test-all' if rest must be tested too.
unless %*ENV<raku_test_all>:exists {
  done-testing;
  exit;
}

#-------------------------------------------------------------------------------
subtest 'Method tests', {
  $point1.init( 5.0, 5.0);

  #TM:1:init()
  $point2 .= alloc;
  $point2.init( 11.0, 9.0);
  my N-Point() $p = $point2.get-native-object;
  is $p.x, 11e0, '.init() x: ' ~ $p.x;
  is $p.y, 9e0, '.init() y: ' ~ $p.y;

  #TM:1:distance()
  my $a-dx = CArray[gfloat].new(0e0);
  my $a-dy = CArray[gfloat].new(0e0);
  is-approx $point1.distance( $point2, $a-dx, $a-dy),
            sqrt(36+16), '.distance()';
  is $a-dx[0], 6, '.distance(), x diff: ' ~ $a-dx[0];
  is $a-dy[0], 4, '.distance(), y diff: ' ~ $a-dy[0];

  #TM:1:init-from-point()
  $point3 .= alloc;
  $point3.init-from-point($point2);
  $p = $point3.get-native-object;
  is $p.x, 11e0, '.init-from-point() x: ' ~ $p.x;
  
  #TM:1:equal()
  ok $point2.equal($point3), '.equal()';

  #TM:1:interpolate()
  $point1.interpolate( $point2, 2e0, $n-point);

  # Twice as far from x=5 to x=11 -> + 6
  is $n-point.x, 17e0, '.interpolate() x 11 + 6: ' ~ $n-point.x;
  # Twice as far from y=5 to y=9 -> +4
  is $n-point.y, 13e0, '.interpolate() y 9 + 4: ' ~ $n-point.y;

  #TM:1:free(), implicit
  $point2.clear-object();
  ok !$point2.is-valid, '.free()';

#`{{
    #TM:0:init-from-vec2()
    ok .init-from-vec2( $src), '.init-from-vec2()';

    #TM:0:near()
    ok .near( $b, $epsilon), '.near()';

    #TM:0:to-vec2()
    ok .to-vec2( $v), '.to-vec2()';

}}
};

#-------------------------------------------------------------------------------
#subtest 'Function tests', {
#  with $point1 {


#`{{
    #TM:0:zero()
    ok .zero(), '.zero()';

}}
#  }
#};

#-------------------------------------------------------------------------------
done-testing;

=finish

