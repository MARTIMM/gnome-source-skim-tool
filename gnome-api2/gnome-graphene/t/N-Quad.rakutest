=comment Package: Graphene, C-Source: quad
use v6.d;

#TL:1:Gnome::Graphene::N-Quad:
#-------------------------------------------------------------------------------
#--[Module Imports]-------------------------------------------------------------
#-------------------------------------------------------------------------------

use Test;
use NativeCall;


use Gnome::Graphene::N-Quad:api<2>;
use Gnome::Graphene::N-Point:api<2>;
use Gnome::Graphene::N-Rect:api<2>;
use Gnome::Graphene::T-point:api<2>;
use Gnome::Graphene::T-quad:api<2>;
use Gnome::Graphene::T-rect:api<2>;

use Gnome::N::GlibToRakuTypes:api<2>;
use Gnome::N::N-Object:api<2>;
use Gnome::N::NativeLib:api<2>;
use Gnome::N::X:api<2>;

#-------------------------------------------------------------------------------
#--[Test preparation]-----------------------------------------------------------
#-------------------------------------------------------------------------------

#Gnome::N::debug(:on);
my Gnome::Graphene::N-Quad ( $quad, $quad2, $quad3);
my N-Quad $n-quad;

#-------------------------------------------------------------------------------
#--[Class init tests]-----------------------------------------------------------
#-------------------------------------------------------------------------------

subtest 'ISA test', {
  given $quad {

    #TM:1:alloc()
    $quad .= alloc;
    ok .is-valid, '.alloc()';

#`{{
}}
  }
};

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# set environment variable 'raku-test-all' if rest must be tested too.
unless %*ENV<raku_test_all>:exists {
  done-testing;
  exit;
}

#-------------------------------------------------------------------------------
subtest 'Method tests', {
  with $quad {
    my  $index;
    my Gnome::Graphene::N-Point ( $p1, $p2, $p3, $p4);
    my Gnome::Graphene::N-Rect $rect;
    my N-Rect $n-rect .= new;
    my CArray[N-Point] $points;
    my Num() $x = 10e0;
    my Num() $y = 10e0;
    my Num() $width = 5e0;
    my Num() $height = 5e0;

    #TM:1:init()
#Gnome::N::debug(:on);
    $p1 .= alloc; $p1.init( 11, 1);
    $p2 .= alloc; $p2.init( 20, 2);
    $p3 .= alloc; $p3.init( 21, 10);
    $p4 .= alloc; $p4.init( 9, 9);
    lives-ok { .init( $p1, $p2, $p3, $p4); }, '.init()';

    #TM:1:init-from-points()
    $quad2 .= alloc;
    $points = CArray[N-Point].new(
      nativecast( N-Point, $p1.get-native-object),
      nativecast( N-Point, $p2.get-native-object),
      nativecast( N-Point, $p3.get-native-object),
      nativecast( N-Point, $p4.get-native-object)
    );
    lives-ok { $quad2.init-from-points($points); }, '.init-from-points()';

    #TM:1:init-from-rect()
    $rect .= alloc;
    $quad3 .= alloc;
    $rect.init( $x, $y, $width, $height);
    lives-ok { $quad3.init-from-rect($rect); }, '.init-from-rect()';
    $rect.clear-object;

    #TM:1:bounds()
    .bounds($n-rect);
    $rect .= new(:native-object($n-rect));
    is $rect.get-x, 9e0, '.bounds() x: ' ~ $rect.get-x;
    is $rect.get-y, 1e0, '.bounds() y: ' ~ $rect.get-y;

    #TM:1:contains()
#    loop ( my Int $cx = 7; $cx < 24; $cx++ ) {
#      $p4.init( $cx, 9);
#      diag " \$p = ( $cx, 9) " ~ .contains($p4).Str;
#    }

    $p4.init( 15, 9);
    ok .contains($p4), '.contains() ( 15, 9)';


    #TM:1:free() implicit
    .clear-object;
    ok !.is-valid, '.free()';
#`{{

    #TM:0:get-point()
    is .get-point( $index), 'â€¦', '.get-point()';

}}
  }
};

#-------------------------------------------------------------------------------
subtest 'Function tests', {
  with $quad {


#`{{
}}
  }
};

#-------------------------------------------------------------------------------
done-testing;

=finish

