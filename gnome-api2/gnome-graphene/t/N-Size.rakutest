=comment Package: Graphene, C-Source: size
use v6.d;

#TL:1:Gnome::Graphene::N-Size:
#-------------------------------------------------------------------------------
#--[Module Imports]-------------------------------------------------------------
#-------------------------------------------------------------------------------

use Test;
use NativeCall;


use Gnome::Graphene::N-Size:api<2>;
use Gnome::Graphene::T-size:api<2>;
use Gnome::N::GlibToRakuTypes:api<2>;
use Gnome::N::N-Object:api<2>;
use Gnome::N::NativeLib:api<2>;
use Gnome::N::X:api<2>;

#-------------------------------------------------------------------------------
#--[Test preparation]-----------------------------------------------------------
#-------------------------------------------------------------------------------

#Gnome::N::debug(:on);
my Gnome::Graphene::N-Size ( $size, $size2);

#-------------------------------------------------------------------------------
#--[Class init tests]-----------------------------------------------------------
#-------------------------------------------------------------------------------

subtest 'ISA test', {
  #TM:1:alloc()
  $size .= alloc();
  ok $size.is-valid, '.alloc()';
};

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# set environment variable 'raku-test-all' if rest must be tested too.
unless %*ENV<raku_test_all>:exists {
  done-testing;
  exit;
}

#-------------------------------------------------------------------------------
subtest 'Method tests', {
#  with $n-size {
    my CArray[N-Size] $res;
    my CArray[N-Size] $b;
    my Num() $width = 10e2;
    my Num() $height = 20e3;
    my Num() $factor = 5e-1;
    my CArray[N-Size] $src;

    #TM:1:init()
    $size.init( $width, $height);
    my N-Size() $n-size = $size.get-native-object;
    is $n-size.width, 1000e0, '.init() width: ' ~ $n-size.width;
    is $n-size.height, 20000e0, '.init() height: ' ~ $n-size.height;

    #TM:1:init-from-size()
    $size2 .= alloc;
    $size2.init-from-size($size);
    $n-size = $size2.get-native-object;
    is $n-size.width, 1000e0, '.init-from-size() width: ' ~ $n-size.width;

    #TM:1:equal()
    ok $size.equal($size2), '.equal()';

    #TM:1:scale()
    $size.scale( $factor, $n-size);
    is $n-size.width, 5e2, '.scale() width: ' ~ $n-size.width;
    is $n-size.height, 1e4, '.scale() width: ' ~ $n-size.height;

    #TM:1:free() indirect call
    $size2.clear-object;
    ok !$size2.is-valid, '.free()';

#`{{
    #TM:0:interpolate()
    ok .interpolate( $b, $factor, $res), '.interpolate()';


}}
#  }
};

#-------------------------------------------------------------------------------
#subtest 'Function tests', {
#  with $n-size {


#`{{
    #TM:0:zero()
    ok .zero(), '.zero()';

}}
#  }
#};

#-------------------------------------------------------------------------------
done-testing;

=finish

