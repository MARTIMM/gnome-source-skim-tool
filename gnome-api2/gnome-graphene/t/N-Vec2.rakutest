=comment Package: Graphene, C-Source: vec
use v6.d;

#TL:1:Gnome::Graphene::N-Vec2:
#-------------------------------------------------------------------------------
#--[Module Imports]-------------------------------------------------------------
#-------------------------------------------------------------------------------

use Test;
use NativeCall;

use Gnome::Graphene::N-Vec2:api<2>;
use Gnome::Graphene::T-vec:api<2>;

use Gnome::N::GlibToRakuTypes:api<2>;
use Gnome::N::N-Object:api<2>;
use Gnome::N::NativeLib:api<2>;
use Gnome::N::X:api<2>;

#-------------------------------------------------------------------------------
#--[Test preparation]-----------------------------------------------------------
#-------------------------------------------------------------------------------

#Gnome::N::debug(:on);
my Gnome::Graphene::N-Vec2 ( $vec, $vec2, $vec3);
my N-Vec2 $n-vec2;

#-------------------------------------------------------------------------------
#--[Class init tests]-----------------------------------------------------------
#-------------------------------------------------------------------------------

subtest 'ISA test', {
  given $vec {

    #TM:1:alloc()
    $vec .= alloc;
    ok .is-valid, '.alloc()';
  }
};

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# set environment variable 'raku-test-all' if rest must be tested too.
unless %*ENV<raku_test_all>:exists {
  done-testing;
  exit;
}

#-------------------------------------------------------------------------------
subtest 'Method tests', {
  with $vec {
    my Num() $y = 10;
    my Num() $x = 10;
    my Num() $factor;
#    my Num() $epsilon;
#    my N-Object $res;
#    my N-Object $b;

    #TM:1:init()
    lives-ok { .init( $x, $y); }, '.init()';

    #TM:1:get-x()
    is .get-x(), $x, '.get-x()';

    #TM:1:get-y()
    is .get-y(), $y, '.get-y()';

    #TM:1:init-from-float()
    $vec2 .= alloc;
    my $float-points = CArray[gfloat].new( 11e-1, 22e1);
    $vec2.init-from-float($float-points);
    is-approx $vec2.get-x, 1.1e0, '.init-from-float()';

    #TM:1:init-from-vec2()
    $vec3 .= alloc;
    lives-ok { $vec3.init-from-vec2($vec2); }, '.init-from-vec2()';

    #TM:1:equal()
    ok $vec3.equal($vec2), '.equal()';


    #TM:1:free() implicit
    .clear-object;
    ok !.is-valid, '.free()';


#`{{
    #TM:0:add()
    ok .add( $b, $res), '.add()';

    #TM:0:divide()
    ok .divide( $b, $res), '.divide()';

    #TM:0:dot()
    ok .dot( $b), '.dot()';

    #TM:0:interpolate()
    ok .interpolate( $v2, $factor, $res), '.interpolate()';

    #TM:0:length()
    ok .length(), '.length()';

    #TM:0:max()
    ok .max( $b, $res), '.max()';

    #TM:0:min()
    ok .min( $b, $res), '.min()';

    #TM:0:multiply()
    ok .multiply( $b, $res), '.multiply()';

    #TM:0:near()
    ok .near( $v2, $epsilon), '.near()';

    #TM:0:negate()
    ok .negate( $res), '.negate()';

    #TM:0:normalize()
    ok .normalize( $res), '.normalize()';

    #TM:0:scale()
    ok .scale( $factor, $res), '.scale()';

    #TM:0:subtract()
    ok .subtract( $b, $res), '.subtract()';

    #TM:0:to-float()
    ok .to-float( $dest), '.to-float()';

}}
  }
};

#-------------------------------------------------------------------------------
subtest 'Function tests', {
  with $vec {


#`{{
    #TM:0:one()
    ok .one(), '.one()';

    #TM:0:x-axis()
    ok .x-axis(), '.x-axis()';

    #TM:0:y-axis()
    ok .y-axis(), '.y-axis()';

    #TM:0:zero()
    ok .zero(), '.zero()';

}}
  }
};

#-------------------------------------------------------------------------------
done-testing;

=finish

