=comment Package: Graphene, C-Source: point3d
use v6.d;

#TL:1:Gnome::Graphene::N-Point3D:
#-------------------------------------------------------------------------------
#--[Module Imports]-------------------------------------------------------------
#-------------------------------------------------------------------------------

use Test;
use NativeCall;

use Gnome::Graphene::N-Point3D:api<2>;
#use Gnome::Graphene::N-Point:api<2>;
use Gnome::Graphene::N-Rect:api<2>;
use Gnome::Graphene::N-Vec3:api<2>;

use Gnome::Graphene::T-point3d:api<2>;
use Gnome::Graphene::T-rect:api<2>;
use Gnome::Graphene::T-vec:api<2>;

use Gnome::N::GlibToRakuTypes:api<2>;
use Gnome::N::N-Object:api<2>;
use Gnome::N::NativeLib:api<2>;
use Gnome::N::X:api<2>;

#-------------------------------------------------------------------------------
#--[Test preparation]-----------------------------------------------------------
#-------------------------------------------------------------------------------

#Gnome::N::debug(:on);
my N-Point3D $n-point3d;
my Gnome::Graphene::N-Point3D ( $point3d, $point3d1);

#-------------------------------------------------------------------------------
#--[Class init tests]-----------------------------------------------------------
#-------------------------------------------------------------------------------

subtest 'ISA test', {
  given $point3d {

    #TM:0:alloc()
    $point3d .= alloc;
    ok .is-valid, '.alloc()';
  }
};

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# set environment variable 'raku-test-all' if rest must be tested too.
unless %*ENV<raku_test_all>:exists {
  done-testing;
  exit;
}

#-------------------------------------------------------------------------------
subtest 'Method tests', {
  with $point3d {
    my Num() $x = 10;
    my Num() $y = 11;
    my Num() $z = 0;
    my Num() $factor;
#    my CArray[N-Rect] $viewport;
#    my CArray[N-Point3D] $src;
#    my CArray[N-Vec3] $delta;
#    my CArray[N-Vec3] $v;
#    my Num() $epsilon;
#    my CArray[N-Point3D] $res;
#    my Num() $z-near;
#    my Num() $z-far;
#    my CArray[N-Point3D] $b;

    #TM:1:init()
    lives-ok { .init( $x, $y, $z); }, '.init()';

    #TM:1:length()
    is-approx .length, sqrt(100 + 121), '.length()';

    #TM:1:init-from-point()
    $point3d1 .= alloc;
    lives-ok { $point3d1.init-from-point($point3d) }, '.init-from-point()';

    #TM:1:equal()
    ok .equal($point3d1), '.equal()';


    #TM:1:free() implicit
    .clear-object;
    ok !.is-valid, '.free()';

#`{{
    #TM:0:cross()
    ok .cross( $b, $res), '.cross()';

    #TM:0:distance()
    ok .distance( $b, $delta), '.distance()';

    #TM:0:dot()
    ok .dot( $b), '.dot()';


    #TM:0:init-from-vec3()
    ok .init-from-vec3( $v), '.init-from-vec3()';

    #TM:0:interpolate()
    ok .interpolate( $b, $factor, $res), '.interpolate()';

    #TM:0:near()
    ok .near( $b, $epsilon), '.near()';

    #TM:0:normalize()
    ok .normalize( $res), '.normalize()';

    #TM:0:normalize-viewport()
    ok .normalize-viewport( $viewport, $z-near, $z-far, $res), '.normalize-viewport()';

    #TM:0:scale()
    ok .scale( $factor, $res), '.scale()';

    #TM:0:to-vec3()
    ok .to-vec3( $v), '.to-vec3()';

}}
  }
};

#-------------------------------------------------------------------------------
subtest 'Function tests', {
  with $point3d {


#`{{
    #TM:0:zero()
    ok .zero(), '.zero()';

}}
  }
};

#-------------------------------------------------------------------------------
done-testing;

=finish

