=comment Package: Graphene, C-Source: rect
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Gnome::Graphene::N-Rect

=head1 Description

The location and size of a rectangle region.

The width and height of a B<Gnome::Graphene::N-Rect> can be negative; for instance,
a B<Gnome::Graphene::N-Rect> with an origin of [ 0, 0 ] and a size of [ 10, 10 ] is
equivalent to a B<Gnome::Graphene::N-Rect> with an origin of [ 10, 10 ] and a size
of [ -10, -10 ].

Application code can normalize rectangles using C<.normalize()>;
this function will ensure that the width and height of a rectangle are
positive values. All functions taking a B<Gnome::Graphene::N-Rect> as an argument
will internally operate on a normalized copy; all functions returning a
B<Gnome::Graphene::N-Rect> will always return a normalized rectangle.

=begin comment

=head2 Example
# Example use of module Gnome::Graphene::Rect

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

=head2 new

=head3 :native-object

Create an object using a native object from elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object() :$native-object! )

=end pod

#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 contains-point

Checks whether a B<Gnome::Graphene::N-Rect> contains the given coordinates.

=begin code
method contains-point ( CArray[N-Point] $p --> gboolean )
=end code

=item $p; a B<Gnome::Graphene::N-Point>.

Return value; B<true> if the rectangle contains the point. 

=begin comment

=head2 Example
# Example for contains-point

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 contains-rect

Checks whether a B<Gnome::Graphene::N-Rect> fully contains the given
rectangle.

=begin code
method contains-rect ( CArray[N-Rect] $b --> gboolean )
=end code

=item $b; a B<Gnome::Graphene::N-Rect>.

Return value; B<true> if the rectangle C<$a> fully contains C<$b>. 

=begin comment

=head2 Example
# Example for contains-rect

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 equal

Checks whether the two given rectangle are equal.

=begin code
method equal ( CArray[N-Rect] $b --> gboolean )
=end code

=item $b; a B<Gnome::Graphene::N-Rect>.

Return value; B<true> if the rectangles are equal. 

=begin comment

=head2 Example
# Example for equal

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 expand

Expands a B<Gnome::Graphene::N-Rect> to contain the given B<Gnome::Graphene::N-Point>.

=begin code
method expand ( CArray[N-Point] $p, CArray[N-Rect] $res )
=end code

=item $p; a B<Gnome::Graphene::N-Point>.
=item $res; return location for the expanded rectangle.

=begin comment

=head2 Example
# Example for expand

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 free

Frees the resources allocated by C<.alloc()>.

=begin code
method free ( )
=end code

=begin comment

=head2 Example
# Example for free

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-area

Compute the area of given normalized rectangle.

=begin code
method get-area (--> Num )
=end code

Return value; the area of the normalized rectangle. 

=begin comment

=head2 Example
# Example for get-area

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-bottom-left

Retrieves the coordinates of the bottom-left corner of the given rectangle.

=begin code
method get-bottom-left ( CArray[N-Point] $p )
=end code

=item $p; return location for a B<Gnome::Graphene::N-Point>.

=begin comment

=head2 Example
# Example for get-bottom-left

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-bottom-right

Retrieves the coordinates of the bottom-right corner of the given rectangle.

=begin code
method get-bottom-right ( CArray[N-Point] $p )
=end code

=item $p; return location for a B<Gnome::Graphene::N-Point>.

=begin comment

=head2 Example
# Example for get-bottom-right

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-center

Retrieves the coordinates of the center of the given rectangle.

=begin code
method get-center ( CArray[N-Point] $p )
=end code

=item $p; return location for a B<Gnome::Graphene::N-Point>.

=begin comment

=head2 Example
# Example for get-center

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-height

Retrieves the normalized height of the given rectangle.

=begin code
method get-height (--> Num )
=end code

Return value; the normalized height of the rectangle. 

=begin comment

=head2 Example
# Example for get-height

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-top-left

Retrieves the coordinates of the top-left corner of the given rectangle.

=begin code
method get-top-left ( CArray[N-Point] $p )
=end code

=item $p; return location for a B<Gnome::Graphene::N-Point>.

=begin comment

=head2 Example
# Example for get-top-left

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-top-right

Retrieves the coordinates of the top-right corner of the given rectangle.

=begin code
method get-top-right ( CArray[N-Point] $p )
=end code

=item $p; return location for a B<Gnome::Graphene::N-Point>.

=begin comment

=head2 Example
# Example for get-top-right

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-vertices

Computes the four vertices of a B<Gnome::Graphene::N-Rect>.

=begin code
method get-vertices ( CArray[N-Vec2] $vertices )
=end code

=item $vertices; return location for an array
 of 4 B<graphene_vec>2_t.

=begin comment

=head2 Example
# Example for get-vertices

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-width

Retrieves the normalized width of the given rectangle.

=begin code
method get-width (--> Num )
=end code

Return value; the normalized width of the rectangle. 

=begin comment

=head2 Example
# Example for get-width

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-x

Retrieves the normalized X coordinate of the origin of the given
rectangle.

=begin code
method get-x (--> Num )
=end code

Return value; the normalized X coordinate of the rectangle. 

=begin comment

=head2 Example
# Example for get-x

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-y

Retrieves the normalized Y coordinate of the origin of the given
rectangle.

=begin code
method get-y (--> Num )
=end code

Return value; the normalized Y coordinate of the rectangle. 

=begin comment

=head2 Example
# Example for get-y

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 init

Initializes the given B<Gnome::Graphene::N-Rect> with the given values.

This function will implicitly normalize the B<Gnome::Graphene::N-Rect>
before returning.

=begin code
method init ( Num() $x, Num() $y, Num() $width, Num() $height --> CArray[N-Rect] )
=end code

=item $x; the X coordinate of the C<$graphene-rect-t>.origin.
=item $y; the Y coordinate of the C<$graphene-rect-t>.origin.
=item $width; the width of the C<$graphene-rect-t>.size.
=item $height; the height of the C<$graphene-rect-t>.size.

Return value; the initialized rectangle. 

=begin comment

=head2 Example
# Example for init

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 init-from-rect

Initializes C<$r> using the given C<$src> rectangle.

This function will implicitly normalize the B<Gnome::Graphene::N-Rect>
before returning.

=begin code
method init-from-rect ( CArray[N-Rect] $src --> CArray[N-Rect] )
=end code

=item $src; a B<Gnome::Graphene::N-Rect>.

Return value; the initialized rectangle. 

=begin comment

=head2 Example
# Example for init-from-rect

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 inset

Changes the given rectangle to be smaller, or larger depending on the
given inset parameters.

To create an inset rectangle, use positive C<$d-x> or C<$d-y> values; to
create a larger, encompassing rectangle, use negative C<$d-x> or C<$d-y>
values.

The origin of the rectangle is offset by C<$d-x> and C<$d-y>, while the size
is adjusted by B<(2 * C<$d-x>, 2 * C<$d-y>)>. If C<$d-x> and C<$d-y> are positive
values, the size of the rectangle is decreased; if C<$d-x> and C<$d-y> are
negative values, the size of the rectangle is increased.

If the size of the resulting inset rectangle has a negative width or
height then the size will be set to zero.

=begin code
method inset ( Num() $d-x, Num() $d-y --> CArray[N-Rect] )
=end code

=item $d-x; the horizontal inset.
=item $d-y; the vertical inset.

Return value; the inset rectangle. 

=begin comment

=head2 Example
# Example for inset

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 inset-r

Changes the given rectangle to be smaller, or larger depending on the
given inset parameters.

To create an inset rectangle, use positive C<$d-x> or C<$d-y> values; to
create a larger, encompassing rectangle, use negative C<$d-x> or C<$d-y>
values.

The origin of the rectangle is offset by C<$d-x> and C<$d-y>, while the size
is adjusted by B<(2 * C<$d-x>, 2 * C<$d-y>)>. If C<$d-x> and C<$d-y> are positive
values, the size of the rectangle is decreased; if C<$d-x> and C<$d-y> are
negative values, the size of the rectangle is increased.

If the size of the resulting inset rectangle has a negative width or
height then the size will be set to zero.

=begin code
method inset-r ( Num() $d-x, Num() $d-y, CArray[N-Rect] $res )
=end code

=item $d-x; the horizontal inset.
=item $d-y; the vertical inset.
=item $res; return location for the inset rectangle.

=begin comment

=head2 Example
# Example for inset-r

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 interpolate

Linearly interpolates the origin and size of the two given
rectangles.

=begin code
method interpolate ( CArray[N-Rect] $b, Num() $factor, CArray[N-Rect] $res )
=end code

=item $b; a B<Gnome::Graphene::N-Rect>.
=item $factor; the linear interpolation factor.
=item $res; return location for the
  interpolated rectangle.

=begin comment

=head2 Example
# Example for interpolate

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 intersection

Computes the intersection of the two given rectangles.

![](rectangle-intersection.png)

The intersection in the image above is the blue outline.

If the two rectangles do not intersect, C<$res> will contain
a degenerate rectangle with origin in (0, 0) and a size of 0.

=begin code
method intersection ( CArray[N-Rect] $b, CArray[N-Rect] $res --> gboolean )
=end code

=item $b; a B<Gnome::Graphene::N-Rect>.
=item $res; return location for
  a B<Gnome::Graphene::N-Rect>.

Return value; B<true> if the two rectangles intersect. 

=begin comment

=head2 Example
# Example for intersection

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 normalize

Normalizes the passed rectangle.

This function ensures that the size of the rectangle is made of
positive values, and that the origin is the top-left corner of
the rectangle.

=begin code
method normalize (--> CArray[N-Rect] )
=end code

Return value; the normalized rectangle. 

=begin comment

=head2 Example
# Example for normalize

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 normalize-r

Normalizes the passed rectangle.

This function ensures that the size of the rectangle is made of
positive values, and that the origin is in the top-left corner
of the rectangle.

=begin code
method normalize-r ( CArray[N-Rect] $res )
=end code

=item $res; the return location for the
  normalized rectangle.

=begin comment

=head2 Example
# Example for normalize-r

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 offset

Offsets the origin by C<$d-x> and C<$d-y>.

The size of the rectangle is unchanged.

=begin code
method offset ( Num() $d-x, Num() $d-y --> CArray[N-Rect] )
=end code

=item $d-x; the horizontal offset.
=item $d-y; the vertical offset.

Return value; the offset rectangle. 

=begin comment

=head2 Example
# Example for offset

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 offset-r

Offsets the origin of the given rectangle by C<$d-x> and C<$d-y>.

The size of the rectangle is left unchanged.

=begin code
method offset-r ( Num() $d-x, Num() $d-y, CArray[N-Rect] $res )
=end code

=item $d-x; the horizontal offset.
=item $d-y; the vertical offset.
=item $res; return location for the offset
  rectangle.

=begin comment

=head2 Example
# Example for offset-r

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 round-extents

Rounds the origin of the given rectangle to its nearest
integer value and and recompute the size so that the
rectangle is large enough to contain all the conrners
of the original rectangle.

This function is the equivalent of calling B<floor> on
the coordinates of the origin, and recomputing the size
calling B<ceil> on the bottom-right coordinates.

If you want to be sure that the rounded rectangle
completely covers the area that was covered by the
original rectangle — i.e. you want to cover the area
including all its corners — this function will make sure
that the size is recomputed taking into account the ceiling
of the coordinates of the bottom-right corner.
If the difference between the original coordinates and the
coordinates of the rounded rectangle is greater than the
difference between the original size and and the rounded
size, then the move of the origin would not be compensated
by a move in the anti-origin, leaving the corners of the
original rectangle outside the rounded one.

=begin code
method round-extents ( CArray[N-Rect] $res )
=end code

=item $res; return location for the
  rectangle with rounded extents.

=begin comment

=head2 Example
# Example for round-extents

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 scale

Scales the size and origin of a rectangle horizontaly by C<$s-h>,
and vertically by C<$s-v>. The result C<$res> is normalized.

=begin code
method scale ( Num() $s-h, Num() $s-v, CArray[N-Rect] $res )
=end code

=item $s-h; horizontal scale factor.
=item $s-v; vertical scale factor.
=item $res; return location for the
  scaled rectangle.

=begin comment

=head2 Example
# Example for scale

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 union

Computes the union of the two given rectangles.

![](rectangle-union.png)

The union in the image above is the blue outline.

=begin code
method union ( CArray[N-Rect] $b, CArray[N-Rect] $res )
=end code

=item $b; a B<Gnome::Graphene::N-Rect>.
=item $res; return location for a B<Gnome::Graphene::N-Rect>.

=begin comment

=head2 Example
# Example for union

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Functions]------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Functions
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 alloc

Allocates a new B<Gnome::Graphene::N-Rect>.

The contents of the returned rectangle are undefined.

=begin code
method alloc (--> CArray[N-Rect] )
=end code

Return value; the newly allocated rectangle. 

=begin comment

=head2 Example
# Example for alloc

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 zero

Returns a degenerate rectangle with origin fixed at (0, 0) and
a size of 0, 0.

=begin code
method zero (--> CArray[N-Rect] )
=end code

Return value; a fixed rectangle. 

=begin comment

=head2 Example
# Example for zero

=end comment

=end pod

