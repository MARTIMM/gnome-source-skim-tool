=comment Package: Graphene, C-Source: matrix
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Gnome::Graphene::N-Matrix

=head1 Description

A structure capable of holding a 4x4 matrix.

The contents of the B<Gnome::Graphene::N-Matrix> structure are private and
should never be accessed directly.

=begin comment

=head2 Example
# Example use of module Gnome::Graphene::Matrix

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

=head2 new

=head3 :native-object

Create an object using a native object from elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object :$native-object! )

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 alloc

Allocates a new B<Gnome::Graphene::N-Matrix>.

=begin code
method alloc ( --> Gnome::Graphene::Matrix \)
=end code

=begin comment

=head2 Example
# Example for alloc

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 decompose

Decomposes a transformation matrix into its component transformations.

The algorithm for decomposing a matrix is taken from the
[CSS3 Transforms specification](http://dev.w3.org/csswg/css-transforms/);
specifically, the decomposition code is based on the equivalent code
published in "Graphics Gems II", edited by Jim Arvo, and
[available online](http://tog.acm.org/resources/GraphicsGems/gemsii/unmatrix.c).

=begin code
method decompose ( N-Object $translate, N-Object $scale, N-Object $rotate, N-Object $shear, N-Object $perspective --> gboolean )
=end code

=item $translate; the translation vector
=item $scale; the scale vector
=item $rotate; the rotation quaternion
=item $shear; the shear vector
=item $perspective; the perspective vector

Return value; B<true> if the matrix could be decomposed. 

=begin comment

=head2 Example
# Example for decompose

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 determinant

Computes the determinant of the given matrix.

=begin code
method determinant (--> Num )
=end code

Return value; the value of the determinant. 

=begin comment

=head2 Example
# Example for determinant

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 equal

Checks whether the two given B<Gnome::Graphene::N-Matrix> matrices are equal.

=begin code
method equal ( N-Object $b --> gboolean )
=end code

=item $b; a B<Gnome::Graphene::N-Matrix>

Return value; B<true> if the two matrices are equal, and B<false> otherwise. 

=begin comment

=head2 Example
# Example for equal

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 equal-fast

Checks whether the two given B<Gnome::Graphene::N-Matrix> matrices are
byte-by-byte equal.

While this function is faster than C<.equal()>, it
can also return false negatives, so it should be used in
conjuction with either C<.equal()> or
C<.near()>. For instance:

=begin comment
<!-- language="C" -->
  if (graphene_matrix_equal_fast (a, b))
    {
      // matrices are definitely the same
    }
  else
    {
      if (graphene_matrix_equal (a, b))
        // matrices contain the same values within an epsilon of FLT_EPSILON
      else if (graphene_matrix_near (a, b, 0.0001))
        // matrices contain the same values within an epsilon of 0.0001
      else
        // matrices are not equal
    }

=end comment

=begin code
method equal-fast ( N-Object $b --> gboolean )
=end code

=item $b; a B<Gnome::Graphene::N-Matrix>

Return value; B<true> if the matrices are equal. and B<false> otherwise. 

=begin comment

=head2 Example
# Example for equal-fast

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 free

Frees the resources allocated by C<.alloc()>.

=begin code
method free ( )
=end code

=begin comment

=head2 Example
# Example for free

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-row
This function is not yet available

Retrieves the given row vector at C<$index-> inside a matrix.

=begin code
method get-row ( …, N-Object $res )
=end code

=item index; the index of the row vector, between 0 and 3. Note that each argument must be specified as a type followed by its value!
=item $res; return location for the B<graphene_vec>4_t
  that is used to store the row vector

=begin comment

=head2 Example
# Example for get-row

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-value
This function is not yet available

Retrieves the value at the given C<$row> and C<$col> index.

=begin code
method get-value ( …, … --> Num )
=end code

=item row; the row index. Note that each argument must be specified as a type followed by its value!
=item col; the column index. Note that each argument must be specified as a type followed by its value!

Return value; the value at the given indices. 

=begin comment

=head2 Example
# Example for get-value

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-x-scale

Retrieves the scaling factor on the X axis in C<$m>.

=begin code
method get-x-scale (--> Num )
=end code

Return value; the value of the scaling factor. 

=begin comment

=head2 Example
# Example for get-x-scale

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-x-translation

Retrieves the translation component on the X axis from C<$m>.

=begin code
method get-x-translation (--> Num )
=end code

Return value; the translation component. 

=begin comment

=head2 Example
# Example for get-x-translation

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-y-scale

Retrieves the scaling factor on the Y axis in C<$m>.

=begin code
method get-y-scale (--> Num )
=end code

Return value; the value of the scaling factor. 

=begin comment

=head2 Example
# Example for get-y-scale

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-y-translation

Retrieves the translation component on the Y axis from C<$m>.

=begin code
method get-y-translation (--> Num )
=end code

Return value; the translation component. 

=begin comment

=head2 Example
# Example for get-y-translation

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-z-scale

Retrieves the scaling factor on the Z axis in C<$m>.

=begin code
method get-z-scale (--> Num )
=end code

Return value; the value of the scaling factor. 

=begin comment

=head2 Example
# Example for get-z-scale

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-z-translation

Retrieves the translation component on the Z axis from C<$m>.

=begin code
method get-z-translation (--> Num )
=end code

Return value; the translation component. 

=begin comment

=head2 Example
# Example for get-z-translation

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 init-from-2d

Initializes a B<Gnome::Graphene::N-Matrix> from the values of an affine
transformation matrix.

The arguments map to the following matrix layout:

=begin comment
<!-- language="plain" -->
  ⎛ xx  yx ⎞   ⎛  a   b  0 ⎞
  ⎜ xy  yy ⎟ = ⎜  c   d  0 ⎟
  ⎝ x0  y0 ⎠   ⎝ tx  ty  1 ⎠

=end comment

This function can be used to convert between an affine matrix type
from other libraries and a B<Gnome::Graphene::N-Matrix>.

=begin code
method init-from-2d ( Num() $xx, Num() $yx, Num() $xy, Num() $yy, Num() $x0, Num() $y0 --> N-Object )
=end code

=item $xx; the xx member.
=item $yx; the yx member.
=item $xy; the xy member.
=item $yy; the yy member.
=item $x0; the x0 member.
=item $y0; the y0 member.

Return value; the initialized matrix. 

=begin comment

=head2 Example
# Example for init-from-2d

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 init-from-float

Initializes a B<Gnome::Graphene::N-Matrix> with the given array of floating
point values.

=begin code
method init-from-float ( Num() $v --> N-Object )
=end code

=item $v; an array of at least 16 floating
  point values.

Return value; the initialized matrix. 

=begin comment

=head2 Example
# Example for init-from-float

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 init-from-matrix

Initializes a B<Gnome::Graphene::N-Matrix> using the values of the
given matrix.

=begin code
method init-from-matrix ( N-Object $src --> N-Object )
=end code

=item $src; a B<Gnome::Graphene::N-Matrix>

Return value; the initialized matrix. 

=begin comment

=head2 Example
# Example for init-from-matrix

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 init-from-vec4

Initializes a B<Gnome::Graphene::N-Matrix> with the given four row
vectors.

=begin code
method init-from-vec4 ( N-Object $v0, N-Object $v1, N-Object $v2, N-Object $v3 --> N-Object )
=end code

=item $v0; the first row vector
=item $v1; the second row vector
=item $v2; the third row vector
=item $v3; the fourth row vector

Return value; the initialized matrix. 

=begin comment

=head2 Example
# Example for init-from-vec4

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 init-frustum

Initializes a B<Gnome::Graphene::N-Matrix> compatible with B<Gnome::Graphene::N-Frustum>.

See also: graphene_frustum_init_from_matrix()

=begin code
method init-frustum ( Num() $left, Num() $right, Num() $bottom, Num() $top, Num() $z-near, Num() $z-far --> N-Object )
=end code

=item $left; distance of the left clipping plane.
=item $right; distance of the right clipping plane.
=item $bottom; distance of the bottom clipping plane.
=item $top; distance of the top clipping plane.
=item $z-near; distance of the near clipping plane.
=item $z-far; distance of the far clipping plane.

Return value; the initialized matrix. 

=begin comment

=head2 Example
# Example for init-frustum

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 init-identity

Initializes a B<Gnome::Graphene::N-Matrix> with the identity matrix.

=begin code
method init-identity (--> N-Object )
=end code

Return value; the initialized matrix. 

=begin comment

=head2 Example
# Example for init-identity

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 init-look-at

Initializes a B<Gnome::Graphene::N-Matrix> so that it positions the "camera"
at the given C<$eye> coordinates towards an object at the C<$center>
coordinates. The top of the camera is aligned to the direction
of the C<$up> vector.

Before the transform, the camera is assumed to be placed at the
origin, looking towards the negative Z axis, with the top side of
the camera facing in the direction of the Y axis and the right
side in the direction of the X axis.

In theory, one could use C<$m> to transform a model of such a camera
into world-space. However, it is more common to use the inverse of C<$m> to transform another object from world coordinates to the view
coordinates of the camera. Typically you would then apply the
camera projection transform to get from view to screen
coordinates.

=begin code
method init-look-at ( N-Object $eye, N-Object $center, N-Object $up --> N-Object )
=end code

=item $eye; the vector describing the position to look from
=item $center; the vector describing the position to look at
=item $up; the vector describing the world's upward direction; usually,
  this is the graphene_vec3_y_axis() vector

Return value; the initialized matrix. 

=begin comment

=head2 Example
# Example for init-look-at

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 init-ortho

Initializes a B<Gnome::Graphene::N-Matrix> with an orthographic projection.

=begin code
method init-ortho ( Num() $left, Num() $right, Num() $top, Num() $bottom, Num() $z-near, Num() $z-far --> N-Object )
=end code

=item $left; the left edge of the clipping plane.
=item $right; the right edge of the clipping plane.
=item $top; the top edge of the clipping plane.
=item $bottom; the bottom edge of the clipping plane.
=item $z-near; the distance of the near clipping plane.
=item $z-far; the distance of the far clipping plane.

Return value; the initialized matrix. 

=begin comment

=head2 Example
# Example for init-ortho

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 init-perspective

Initializes a B<Gnome::Graphene::N-Matrix> with a perspective projection.

=begin code
method init-perspective ( Num() $fovy, Num() $aspect, Num() $z-near, Num() $z-far --> N-Object )
=end code

=item $fovy; the field of view angle, in degrees.
=item $aspect; the aspect value.
=item $z-near; the near Z plane.
=item $z-far; the far Z plane.

Return value; the initialized matrix. 

=begin comment

=head2 Example
# Example for init-perspective

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 init-rotate

Initializes C<$m> to represent a rotation of C<$angle> degrees on
the axis represented by the C<$axis> vector.

=begin code
method init-rotate ( Num() $angle, N-Object $axis --> N-Object )
=end code

=item $angle; the rotation angle, in degrees.
=item $axis; the axis vector as a B<graphene_vec>3_t

Return value; the initialized matrix. 

=begin comment

=head2 Example
# Example for init-rotate

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 init-scale

Initializes a B<Gnome::Graphene::N-Matrix> with the given scaling factors.

=begin code
method init-scale ( Num() $x, Num() $y, Num() $z --> N-Object )
=end code

=item $x; the scale factor on the X axis.
=item $y; the scale factor on the Y axis.
=item $z; the scale factor on the Z axis.

Return value; the initialized matrix. 

=begin comment

=head2 Example
# Example for init-scale

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 init-skew

Initializes a B<Gnome::Graphene::N-Matrix> with a skew transformation
with the given factors.

=begin code
method init-skew ( Num() $x-skew, Num() $y-skew --> N-Object )
=end code

=item $x-skew; skew factor, in radians, on the X axis.
=item $y-skew; skew factor, in radians, on the Y axis.

Return value; the initialized matrix. 

=begin comment

=head2 Example
# Example for init-skew

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 init-translate

Initializes a B<Gnome::Graphene::N-Matrix> with a translation to the
given coordinates.

=begin code
method init-translate ( N-Object $p --> N-Object )
=end code

=item $p; the translation coordinates

Return value; the initialized matrix. 

=begin comment

=head2 Example
# Example for init-translate

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 interpolate

Linearly interpolates the two given B<Gnome::Graphene::N-Matrix> by
interpolating the decomposed transformations separately.

If either matrix cannot be reduced to their transformations
then the interpolation cannot be performed, and this function
will return an identity matrix.

=begin code
method interpolate ( N-Object $b, Num() $factor, N-Object $res )
=end code

=item $b; a B<Gnome::Graphene::N-Matrix>
=item $factor; the linear interpolation factor.
=item $res; return location for the
  interpolated matrix

=begin comment

=head2 Example
# Example for interpolate

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 inverse

Inverts the given matrix.

=begin code
method inverse ( N-Object $res --> gboolean )
=end code

=item $res; return location for the
  inverse matrix

Return value; B<true> if the matrix is invertible. 

=begin comment

=head2 Example
# Example for inverse

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 is-2d

Checks whether the given B<Gnome::Graphene::N-Matrix> is compatible with an
a 2D affine transformation matrix.

=begin code
method is-2d (--> gboolean )
=end code

Return value; B<true> if the matrix is compatible with an affine
  transformation matrix. 

=begin comment

=head2 Example
# Example for is-2d

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 is-backface-visible

Checks whether a B<Gnome::Graphene::N-Matrix> has a visible back face.

=begin code
method is-backface-visible (--> gboolean )
=end code

Return value; B<true> if the back face of the matrix is visible. 

=begin comment

=head2 Example
# Example for is-backface-visible

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 is-identity

Checks whether the given B<Gnome::Graphene::N-Matrix> is the identity matrix.

=begin code
method is-identity (--> gboolean )
=end code

Return value; B<true> if the matrix is the identity matrix. 

=begin comment

=head2 Example
# Example for is-identity

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 is-singular

Checks whether a matrix is singular.

=begin code
method is-singular (--> gboolean )
=end code

Return value; B<true> if the matrix is singular. 

=begin comment

=head2 Example
# Example for is-singular

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 multiply

Multiplies two B<Gnome::Graphene::N-Matrix>.

Matrix multiplication is not commutative in general; the order of the factors matters.
The product of this multiplication is ( C<$a> × C<$b>)

=begin code
method multiply ( N-Object $b, N-Object $res )
=end code

=item $b; a B<Gnome::Graphene::N-Matrix>
=item $res; return location for the matrix
  result

=begin comment

=head2 Example
# Example for multiply

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 near

Compares the two given B<Gnome::Graphene::N-Matrix> matrices and checks
whether their values are within the given C<$epsilon> of each
other.

=begin code
method near ( N-Object $b, Num() $epsilon --> gboolean )
=end code

=item $b; a B<Gnome::Graphene::N-Matrix>
=item $epsilon; the threshold between the two matrices.

Return value; B<true> if the two matrices are near each other, and
  B<false> otherwise. 

=begin comment

=head2 Example
# Example for near

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 normalize

Normalizes the given B<Gnome::Graphene::N-Matrix>.

=begin code
method normalize ( N-Object $res )
=end code

=item $res; return location for the normalized matrix

=begin comment

=head2 Example
# Example for normalize

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 perspective

Applies a perspective of C<$depth> to the matrix.

=begin code
method perspective ( Num() $depth, N-Object $res )
=end code

=item $depth; the depth of the perspective.
=item $res; return location for the
  perspective matrix

=begin comment

=head2 Example
# Example for perspective

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 print

Prints the contents of a matrix to the standard error stream.

This function is only useful for debugging; there are no guarantees
made on the format of the output.

=begin code
method print ( )
=end code

=begin comment

=head2 Example
# Example for print

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 project-point

Projects a B<Gnome::Graphene::N-Point> using the matrix C<$m>.

=begin code
method project-point ( N-Object $p, N-Object $res )
=end code

=item $p; a B<Gnome::Graphene::N-Point>
=item $res; return location for the projected
  point

=begin comment

=head2 Example
# Example for project-point

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 project-rect

Projects all corners of a B<Gnome::Graphene::N-Rect> using the given matrix.

See also: C<.project-point()>

=begin code
method project-rect ( N-Object $r, N-Object $res )
=end code

=item $r; a B<Gnome::Graphene::N-Rect>
=item $res; return location for the projected
  rectangle

=begin comment

=head2 Example
# Example for project-rect

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 project-rect-bounds

Projects a B<Gnome::Graphene::N-Rect> using the given matrix.

The resulting rectangle is the axis aligned bounding rectangle capable
of fully containing the projected rectangle.

=begin code
method project-rect-bounds ( N-Object $r, N-Object $res )
=end code

=item $r; a B<Gnome::Graphene::N-Rect>
=item $res; return location for the projected
  rectangle

=begin comment

=head2 Example
# Example for project-rect-bounds

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 rotate

Adds a rotation transformation to C<$m>, using the given C<$angle>
and C<$axis> vector.

This is the equivalent of calling C<.init-rotate()> and
then multiplying the matrix C<$m> with the rotation matrix.

=begin code
method rotate ( Num() $angle, N-Object $axis )
=end code

=item $angle; the rotation angle, in degrees.
=item $axis; the rotation axis, as a B<graphene_vec>3_t

=begin comment

=head2 Example
# Example for rotate

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 rotate-euler

Adds a rotation transformation to C<$m>, using the given
B<Gnome::Graphene::N-Euler>.

=begin code
method rotate-euler ( N-Object $e )
=end code

=item $e; a rotation described by a B<Gnome::Graphene::N-Euler>

=begin comment

=head2 Example
# Example for rotate-euler

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 rotate-quaternion

Adds a rotation transformation to C<$m>, using the given
B<Gnome::Graphene::N-Quaternion>.

This is the equivalent of calling graphene_quaternion_to_matrix() and
then multiplying C<$m> with the rotation matrix.

=begin code
method rotate-quaternion ( N-Object $q )
=end code

=item $q; a rotation described by a B<Gnome::Graphene::N-Quaternion>

=begin comment

=head2 Example
# Example for rotate-quaternion

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 rotate-x

Adds a rotation transformation around the X axis to C<$m>, using
the given C<$angle>.

See also: C<.rotate()>

=begin code
method rotate-x ( Num() $angle )
=end code

=item $angle; the rotation angle, in degrees.

=begin comment

=head2 Example
# Example for rotate-x

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 rotate-y

Adds a rotation transformation around the Y axis to C<$m>, using
the given C<$angle>.

See also: C<.rotate()>

=begin code
method rotate-y ( Num() $angle )
=end code

=item $angle; the rotation angle, in degrees.

=begin comment

=head2 Example
# Example for rotate-y

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 rotate-z

Adds a rotation transformation around the Z axis to C<$m>, using
the given C<$angle>.

See also: C<.rotate()>

=begin code
method rotate-z ( Num() $angle )
=end code

=item $angle; the rotation angle, in degrees.

=begin comment

=head2 Example
# Example for rotate-z

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 scale

Adds a scaling transformation to C<$m>, using the three
given factors.

This is the equivalent of calling C<.init-scale()> and then
multiplying the matrix C<$m> with the scale matrix.

=begin code
method scale ( Num() $factor-x, Num() $factor-y, Num() $factor-z )
=end code

=item $factor-x; scaling factor on the X axis.
=item $factor-y; scaling factor on the Y axis.
=item $factor-z; scaling factor on the Z axis.

=begin comment

=head2 Example
# Example for scale

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 skew-xy

Adds a skew of C<$factor> on the X and Y axis to the given matrix.

=begin code
method skew-xy ( Num() $factor )
=end code

=item $factor; skew factor.

=begin comment

=head2 Example
# Example for skew-xy

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 skew-xz

Adds a skew of C<$factor> on the X and Z axis to the given matrix.

=begin code
method skew-xz ( Num() $factor )
=end code

=item $factor; skew factor.

=begin comment

=head2 Example
# Example for skew-xz

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 skew-yz

Adds a skew of C<$factor> on the Y and Z axis to the given matrix.

=begin code
method skew-yz ( Num() $factor )
=end code

=item $factor; skew factor.

=begin comment

=head2 Example
# Example for skew-yz

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 to-2d

Converts a B<Gnome::Graphene::N-Matrix> to an affine transformation
matrix, if the given matrix is compatible.

The returned values have the following layout:

=begin comment
<!-- language="plain" -->
  ⎛ xx  yx ⎞   ⎛  a   b  0 ⎞
  ⎜ xy  yy ⎟ = ⎜  c   d  0 ⎟
  ⎝ x0  y0 ⎠   ⎝ tx  ty  1 ⎠

=end comment

This function can be used to convert between a B<Gnome::Graphene::N-Matrix>
and an affine matrix type from other libraries.

=begin code
method to-2d ( Num() $xx, Num() $yx, Num() $xy, Num() $yy, Num() $x0, Num() $y0 --> gboolean )
=end code

=item $xx; (transfer ownership: full) return location for the xx member.
=item $yx; (transfer ownership: full) return location for the yx member.
=item $xy; (transfer ownership: full) return location for the xy member.
=item $yy; (transfer ownership: full) return location for the yy member.
=item $x0; (transfer ownership: full) return location for the x0 member.
=item $y0; (transfer ownership: full) return location for the y0 member.

Return value; B<true> if the matrix is compatible with an affine
  transformation matrix. 

=begin comment

=head2 Example
# Example for to-2d

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 to-float

Converts a B<Gnome::Graphene::N-Matrix> to an array of floating point
values.

=begin code
method to-float ( Num() $v )
=end code

=item $v; return location
  for an array of floating point values. The array must be capable
  of holding at least 16 values..

=begin comment

=head2 Example
# Example for to-float

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 transform-bounds

Transforms each corner of a B<Gnome::Graphene::N-Rect> using the given matrix C<$m>.

The result is the axis aligned bounding rectangle containing the coplanar
quadrilateral.

See also: C<.transform-point()>

=begin code
method transform-bounds ( N-Object $r, N-Object $res )
=end code

=item $r; a B<Gnome::Graphene::N-Rect>
=item $res; return location for the bounds
  of the transformed rectangle

=begin comment

=head2 Example
# Example for transform-bounds

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 transform-box

Transforms the vertices of a B<Gnome::Graphene::N-Box> using the given matrix C<$m>.

The result is the axis aligned bounding box containing the transformed
vertices.

=begin code
method transform-box ( N-Object $b, N-Object $res )
=end code

=item $b; a B<Gnome::Graphene::N-Box>
=item $res; return location for the bounds
  of the transformed box

=begin comment

=head2 Example
# Example for transform-box

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 transform-point

Transforms the given B<Gnome::Graphene::N-Point> using the matrix C<$m>.

Unlike C<.transform-vec3()>, this function will take into
account the fourth row vector of the B<Gnome::Graphene::N-Matrix> when computing
the dot product of each row vector of the matrix.

See also: graphene_simd4x4f_point3_mul()

=begin code
method transform-point ( N-Object $p, N-Object $res )
=end code

=item $p; a B<Gnome::Graphene::N-Point>
=item $res; return location for the
  transformed B<Gnome::Graphene::N-Point>

=begin comment

=head2 Example
# Example for transform-point

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 transform-point3d

Transforms the given B<graphene_point>3d_t using the matrix C<$m>.

Unlike C<.transform-vec3()>, this function will take into
account the fourth row vector of the B<Gnome::Graphene::N-Matrix> when computing
the dot product of each row vector of the matrix.

See also: graphene_simd4x4f_point3_mul()

=begin code
method transform-point3d ( N-Object $p, N-Object $res )
=end code

=item $p; a B<graphene_point>3d_t
=item $res; return location for the result

=begin comment

=head2 Example
# Example for transform-point3d

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 transform-ray

Transform a B<Gnome::Graphene::N-Ray> using the given matrix C<$m>.

=begin code
method transform-ray ( N-Object $r, N-Object $res )
=end code

=item $r; a B<Gnome::Graphene::N-Ray>
=item $res; return location for the
  transformed ray

=begin comment

=head2 Example
# Example for transform-ray

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 transform-rect

Transforms each corner of a B<Gnome::Graphene::N-Rect> using the given matrix C<$m>.

The result is a coplanar quadrilateral.

See also: C<.transform-point()>

=begin code
method transform-rect ( N-Object $r, N-Object $res )
=end code

=item $r; a B<Gnome::Graphene::N-Rect>
=item $res; return location for the
  transformed quad

=begin comment

=head2 Example
# Example for transform-rect

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 transform-sphere

Transforms a B<Gnome::Graphene::N-Sphere> using the given matrix C<$m>. The
result is the bounding sphere containing the transformed sphere.

=begin code
method transform-sphere ( N-Object $s, N-Object $res )
=end code

=item $s; a B<Gnome::Graphene::N-Sphere>
=item $res; return location for the bounds
  of the transformed sphere

=begin comment

=head2 Example
# Example for transform-sphere

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 transform-vec3

Transforms the given B<graphene_vec>3_t using the matrix C<$m>.

This function will multiply the X, Y, and Z row vectors of the matrix C<$m>
with the corresponding components of the vector C<$v>. The W row vector will
be ignored.

See also: graphene_simd4x4f_vec3_mul()

=begin code
method transform-vec3 ( N-Object $v, N-Object $res )
=end code

=item $v; a B<graphene_vec>3_t
=item $res; return location for a B<graphene_vec>3_t

=begin comment

=head2 Example
# Example for transform-vec3

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 transform-vec4

Transforms the given B<graphene_vec>4_t using the matrix C<$m>.

See also: graphene_simd4x4f_vec4_mul()

=begin code
method transform-vec4 ( N-Object $v, N-Object $res )
=end code

=item $v; a B<graphene_vec>4_t
=item $res; return location for a B<graphene_vec>4_t

=begin comment

=head2 Example
# Example for transform-vec4

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 translate

Adds a translation transformation to C<$m> using the coordinates
of the given B<graphene_point>3d_t.

This is the equivalent of calling C<.init-translate()> and
then multiplying C<$m> with the translation matrix.

=begin code
method translate ( N-Object $pos )
=end code

=item $pos; a B<graphene_point>3d_t

=begin comment

=head2 Example
# Example for translate

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 transpose

Transposes the given matrix.

=begin code
method transpose ( N-Object $res )
=end code

=item $res; return location for the
  transposed matrix

=begin comment

=head2 Example
# Example for transpose

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 unproject-point3d

Unprojects the given C<$point> using the C<$projection> matrix and
a C<$modelview> matrix.

=begin code
method unproject-point3d ( N-Object $modelview, N-Object $point, N-Object $res )
=end code

=item $modelview; a B<Gnome::Graphene::N-Matrix> for the modelview matrix; this is
  the inverse of the modelview used when projecting the point
=item $point; a B<graphene_point>3d_t with the coordinates of the point
=item $res; return location for the unprojected
  point

=begin comment

=head2 Example
# Example for unproject-point3d

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 untransform-bounds

Undoes the transformation on the corners of a B<Gnome::Graphene::N-Rect> using the
given matrix, within the given axis aligned rectangular C<$bounds>.

=begin code
method untransform-bounds ( N-Object $r, N-Object $bounds, N-Object $res )
=end code

=item $r; a B<Gnome::Graphene::N-Rect>
=item $bounds; the bounds of the transformation
=item $res; return location for the
  untransformed rectangle

=begin comment

=head2 Example
# Example for untransform-bounds

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 untransform-point

Undoes the transformation of a B<Gnome::Graphene::N-Point> using the
given matrix, within the given axis aligned rectangular C<$bounds>.

=begin code
method untransform-point ( N-Object $p, N-Object $bounds, N-Object $res --> gboolean )
=end code

=item $p; a B<Gnome::Graphene::N-Point>
=item $bounds; the bounds of the transformation
=item $res; return location for the
  untransformed point

Return value; B<true> if the point was successfully untransformed. 

=begin comment

=head2 Example
# Example for untransform-point

=end comment

=end pod

