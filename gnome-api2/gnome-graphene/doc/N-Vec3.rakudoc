=comment Package: Graphene, C-Source: vec
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Gnome::Graphene::N-Vec3

=head1 Description

A structure capable of holding a vector with three dimensions: x, y, and z.

The contents of the B<graphene_vec>3_t structure are private and should
never be accessed directly.

=begin comment

=head2 Example
# Example use of module Gnome::Graphene::Vec3

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

=head2 new

=head3 :native-object

Create an object using a native object from elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object :$native-object! )

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 alloc

Allocates a new B<graphene_vec>3_t structure.

The contents of the returned structure are undefined.

Use C<.init()> to initialize the vector.

=begin code
method alloc ( --> Gnome::Graphene::Vec3 \)
=end code

=begin comment

=head2 Example
# Example for alloc

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 add

Adds each component of the two given vectors.

=begin code
method add ( CArray[N-Vec3] $b, CArray[N-Vec3] $res )
=end code

=item $b; a B<graphene_vec>3_t.
=item $res; return location for the resulting vector.

=begin comment

=head2 Example
# Example for add

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 cross

Computes the cross product of the two given vectors.

=begin code
method cross ( CArray[N-Vec3] $b, CArray[N-Vec3] $res )
=end code

=item $b; a B<graphene_vec>3_t.
=item $res; return location for the resulting vector.

=begin comment

=head2 Example
# Example for cross

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 divide

Divides each component of the first operand C<$a> by the corresponding
component of the second operand C<$b>, and places the results into the
vector C<$res>.

=begin code
method divide ( CArray[N-Vec3] $b, CArray[N-Vec3] $res )
=end code

=item $b; a B<graphene_vec>3_t.
=item $res; return location for the resulting vector.

=begin comment

=head2 Example
# Example for divide

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 dot

Computes the dot product of the two given vectors.

=begin code
method dot ( CArray[N-Vec3] $b --> Num )
=end code

=item $b; a B<graphene_vec>3_t.

Return value; the value of the dot product. 

=begin comment

=head2 Example
# Example for dot

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 equal
This function is not yet available

Checks whether the two given B<graphene_vec>3_t are equal.

=begin code
method equal ( CArray[N-Vec3] $v2 )
=end code

=item $v2; a B<graphene_vec>3_t.

=begin comment

=head2 Example
# Example for equal

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 free

Frees the resources allocated by C<$v>

=begin code
method free ( )
=end code

=begin comment

=head2 Example
# Example for free

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-x

Retrieves the first component of the given vector C<$v>.

=begin code
method get-x (--> Num )
=end code

Return value; the value of the first component of the vector. 

=begin comment

=head2 Example
# Example for get-x

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-xy

Creates a B<graphene_vec>2_t that contains the first and second
components of the given B<graphene_vec>3_t.

=begin code
method get-xy ( CArray[N-Vec2] $res )
=end code

=item $res; return location for a B<graphene_vec>2_t.

=begin comment

=head2 Example
# Example for get-xy

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-xy0

Creates a B<graphene_vec>3_t that contains the first two components of
the given B<graphene_vec>3_t, and the third component set to 0.

=begin code
method get-xy0 ( CArray[N-Vec3] $res )
=end code

=item $res; return location for a B<graphene_vec>3_t.

=begin comment

=head2 Example
# Example for get-xy0

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-xyz0

Converts a B<graphene_vec>3_t in a B<graphene_vec>4_t using 0.0
as the value for the fourth component of the resulting vector.

=begin code
method get-xyz0 ( CArray[N-Vec4] $res )
=end code

=item $res; return location for the vector.

=begin comment

=head2 Example
# Example for get-xyz0

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-xyz1

Converts a B<graphene_vec>3_t in a B<graphene_vec>4_t using 1.0
as the value for the fourth component of the resulting vector.

=begin code
method get-xyz1 ( CArray[N-Vec4] $res )
=end code

=item $res; return location for the vector.

=begin comment

=head2 Example
# Example for get-xyz1

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-xyzw

Converts a B<graphene_vec>3_t in a B<graphene_vec>4_t using C<$w> as
the value of the fourth component of the resulting vector.

=begin code
method get-xyzw ( Num() $w, CArray[N-Vec4] $res )
=end code

=item $w; the value of the W component.
=item $res; return location for the vector.

=begin comment

=head2 Example
# Example for get-xyzw

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-y

Retrieves the second component of the given vector C<$v>.

=begin code
method get-y (--> Num )
=end code

Return value; the value of the second component of the vector. 

=begin comment

=head2 Example
# Example for get-y

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-z

Retrieves the third component of the given vector C<$v>.

=begin code
method get-z (--> Num )
=end code

Return value; the value of the third component of the vector. 

=begin comment

=head2 Example
# Example for get-z

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 init

Initializes a B<graphene_vec>3_t using the given values.

This function can be called multiple times.

=begin code
method init ( Num() $x, Num() $y, Num() $z --> CArray[N-Vec3] )
=end code

=item $x; the X field of the vector.
=item $y; the Y field of the vector.
=item $z; the Z field of the vector.

Return value; a pointer to the initialized
  vector. 

=begin comment

=head2 Example
# Example for init

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 init-from-float

Initializes a B<graphene_vec>3_t with the values from an array.

=begin code
method init-from-float ( Num() $src --> CArray[N-Vec3] )
=end code

=item $src; an array of 3 floating point values.

Return value; the initialized vector. 

=begin comment

=head2 Example
# Example for init-from-float

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 init-from-vec3

Initializes a B<graphene_vec>3_t with the values of another
B<graphene_vec>3_t.

=begin code
method init-from-vec3 ( CArray[N-Vec3] $src --> CArray[N-Vec3] )
=end code

=item $src; a B<graphene_vec>3_t.

Return value; the initialized vector. 

=begin comment

=head2 Example
# Example for init-from-vec3

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 interpolate

Linearly interpolates C<$v1> and C<$v2> using the given C<$factor>.

=begin code
method interpolate ( CArray[N-Vec3] $v2, Num() $factor, CArray[N-Vec3] $res )
=end code

=item $v2; a B<graphene_vec>3_t.
=item $factor; the interpolation factor.
=item $res; the interpolated vector.

=begin comment

=head2 Example
# Example for interpolate

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 length

Retrieves the length of the given vector C<$v>.

=begin code
method length (--> Num )
=end code

Return value; the value of the length of the vector. 

=begin comment

=head2 Example
# Example for length

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 max

Compares each component of the two given vectors and creates a
vector that contains the maximum values.

=begin code
method max ( CArray[N-Vec3] $b, CArray[N-Vec3] $res )
=end code

=item $b; a B<graphene_vec>3_t.
=item $res; return location for the result vector.

=begin comment

=head2 Example
# Example for max

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 min

Compares each component of the two given vectors and creates a
vector that contains the minimum values.

=begin code
method min ( CArray[N-Vec3] $b, CArray[N-Vec3] $res )
=end code

=item $b; a B<graphene_vec>3_t.
=item $res; return location for the result vector.

=begin comment

=head2 Example
# Example for min

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 multiply

Multiplies each component of the two given vectors.

=begin code
method multiply ( CArray[N-Vec3] $b, CArray[N-Vec3] $res )
=end code

=item $b; a B<graphene_vec>3_t.
=item $res; return location for the resulting vector.

=begin comment

=head2 Example
# Example for multiply

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 near
This function is not yet available

Compares the two given B<graphene_vec>3_t vectors and checks
whether their values are within the given C<$epsilon>.

=begin code
method near ( CArray[N-Vec3] $v2, Num() $epsilon )
=end code

=item $v2; a B<graphene_vec>3_t.
=item $epsilon; the threshold between the two vectors.

=begin comment

=head2 Example
# Example for near

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 negate

Negates the given B<graphene_vec>3_t.

=begin code
method negate ( CArray[N-Vec3] $res )
=end code

=item $res; return location for the result vector.

=begin comment

=head2 Example
# Example for negate

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 normalize

Normalizes the given B<graphene_vec>3_t.

=begin code
method normalize ( CArray[N-Vec3] $res )
=end code

=item $res; return location for the normalized vector.

=begin comment

=head2 Example
# Example for normalize

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 scale

Multiplies all components of the given vector with the given scalar C<$factor>.

=begin code
method scale ( Num() $factor, CArray[N-Vec3] $res )
=end code

=item $factor; the scalar factor.
=item $res; return location for the result vector.

=begin comment

=head2 Example
# Example for scale

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 subtract

Subtracts from each component of the first operand C<$a> the
corresponding component of the second operand C<$b> and places
each result into the components of C<$res>.

=begin code
method subtract ( CArray[N-Vec3] $b, CArray[N-Vec3] $res )
=end code

=item $b; a B<graphene_vec>3_t.
=item $res; return location for the resulting vector.

=begin comment

=head2 Example
# Example for subtract

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 to-float

Copies the components of a B<graphene_vec>3_t into the given array.

=begin code
method to-float ( Num() $dest )
=end code

=item $dest; return location for
  an array of floating point values.

=begin comment

=head2 Example
# Example for to-float

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Functions]------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Functions
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 one

Provides a constant pointer to a vector with three components,
all sets to 1.

=begin code
method one (--> CArray[N-Vec3] )
=end code

Return value; a constant vector. 

=begin comment

=head2 Example
# Example for one

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 x-axis

Provides a constant pointer to a vector with three components
with values set to (1, 0, 0).

=begin code
method x-axis (--> CArray[N-Vec3] )
=end code

Return value; a constant vector. 

=begin comment

=head2 Example
# Example for x-axis

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 y-axis

Provides a constant pointer to a vector with three components
with values set to (0, 1, 0).

=begin code
method y-axis (--> CArray[N-Vec3] )
=end code

Return value; a constant vector. 

=begin comment

=head2 Example
# Example for y-axis

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 z-axis

Provides a constant pointer to a vector with three components
with values set to (0, 0, 1).

=begin code
method z-axis (--> CArray[N-Vec3] )
=end code

Return value; a constant vector. 

=begin comment

=head2 Example
# Example for z-axis

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 zero

Provides a constant pointer to a vector with three components,
all sets to 0.

=begin code
method zero (--> CArray[N-Vec3] )
=end code

Return value; a constant vector. 

=begin comment

=head2 Example
# Example for zero

=end comment

=end pod

