# Command to generate: gnome-source-skim-tool.raku -c -t -v Gtk3 aboutdialog

#TL:1:Gnome::Gtk3::AboutDialog:
#-------------------------------------------------------------------------------
#--[Module Imports]-------------------------------------------------------------
#-------------------------------------------------------------------------------

use Test;


#use Gnome::Gtk3::AboutDialog:api<2>;
#use Gnome::Gtk3::T-Aboutdialog:api<2>;
use Gnome::N::GlibToRakuTypes:api<2>;
use Gnome::N::N-GObject:api<2>;
use Gnome::N::NativeLib:api<2>;
use Gnome::N::X:api<2>;

#-------------------------------------------------------------------------------
#--[Test init]------------------------------------------------------------------
#-------------------------------------------------------------------------------

#Gnome::N::debug(:on);
my Gnome::Gtk3::AboutDialog $aboutdialog;

#-------------------------------------------------------------------------------
#--[Class init tests]-----------------------------------------------------------
#-------------------------------------------------------------------------------

subtest 'ISA test', {
  #TB:1:new()
  $aboutdialog .= new;
  ok $aboutdialog.is-valid, '.new()';

};

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# set environment variable 'raku-test-all' if rest must be tested too.
unless %*ENV<raku_test_all>:exists {
  done-testing;
  exit;
}

#-------------------------------------------------------------------------------
#--[Inheritance test]-----------------------------------------------------------
#-------------------------------------------------------------------------------

#TB:1:Inheriting
subtest 'Inherit Gnome::Gtk3::AboutDialog', {
  class MyClass is Gnome::Gtk3::AboutDialog {
    method new ( |c ) {
      self.bless( :GtkAboutDialog, |c);
    }

    submethod BUILD ( *%options ) {

    }
  }

  my MyClass $aboutdialog .= new;
  isa-ok $aboutdialog, Gnome::Gtk3::AboutDialog, 'MyClass.new()';
}

#-------------------------------------------------------------------------------
subtest 'Method tests', {
  with $aboutdialog {
    my Str $name;
    my N-GObject() $logo;
    my Array[Str] $documenters;
    my Str $comments;
    my Str $icon-name;
    my Array[Str] $authors;
    my Str $license;
    my GtkLicense $license-type;
    my Str $version;
    my Bool() $wrap-license;
    my Str $website-label;
    my Str $section-name;
    my Str $website;
    my Array[Str] $people;
    my Array[Str] $artists;
    my Str $copyright;
    my Str $translator-credits;


#`{{
    #TB:0:set-wrap-license()
    $wrap-license = True;
    lives-ok { .set-wrap-license( $wrap-license); }, '.set-wrap-license()';
    #TB:0:get-wrap-license()
    is .get-wrap-license(), '…', '.get-wrap-license()';

    #TB:0:set-website-label()
    $website-label = 'text';
    lives-ok { .set-website-label( $website-label); }, '.set-website-label()';
    #TB:0:get-website-label()
    is .get-website-label(), '…', '.get-website-label()';

    #TB:0:set-website()
    $website = 'text';
    lives-ok { .set-website( $website); }, '.set-website()';
    #TB:0:get-website()
    is .get-website(), '…', '.get-website()';

    #TB:0:set-version()
    $version = 'text';
    lives-ok { .set-version( $version); }, '.set-version()';
    #TB:0:get-version()
    is .get-version(), '…', '.get-version()';

    #TB:0:set-translator-credits()
    $translator-credits = 'text';
    lives-ok { .set-translator-credits( $translator-credits); }, '.set-translator-credits()';
    #TB:0:get-translator-credits()
    is .get-translator-credits(), '…', '.get-translator-credits()';

    #TB:0:set-program-name()
    $name = 'text';
    lives-ok { .set-program-name( $name); }, '.set-program-name()';
    #TB:0:get-program-name()
    is .get-program-name(), '…', '.get-program-name()';

    #TB:0:set-logo-icon-name()
    $icon-name = 'text';
    lives-ok { .set-logo-icon-name( $icon-name); }, '.set-logo-icon-name()';
    #TB:0:get-logo-icon-name()
    is .get-logo-icon-name(), '…', '.get-logo-icon-name()';

    #TB:0:set-logo()
    $logo = …;  # a native object
    lives-ok { .set-logo( $logo); }, '.set-logo()';
    #TB:0:get-logo()
    is .get-logo(), '…', '.get-logo()';

    #TB:0:set-license-type()
    $license-type = …;  # a GEnum:GtkLicense enum
    lives-ok { .set-license-type( $license-type); }, '.set-license-type()';
    #TB:0:get-license-type()
    is .get-license-type(), '…', '.get-license-type()';

    #TB:0:set-license()
    $license = 'text';
    lives-ok { .set-license( $license); }, '.set-license()';
    #TB:0:get-license()
    is .get-license(), '…', '.get-license()';

    #TB:0:set-documenters()
    $documenters = '…';
    lives-ok { .set-documenters( $documenters); }, '.set-documenters()';
    #TB:0:get-documenters()
    is .get-documenters(), '…', '.get-documenters()';

    #TB:0:set-copyright()
    $copyright = 'text';
    lives-ok { .set-copyright( $copyright); }, '.set-copyright()';
    #TB:0:get-copyright()
    is .get-copyright(), '…', '.get-copyright()';

    #TB:0:set-comments()
    $comments = 'text';
    lives-ok { .set-comments( $comments); }, '.set-comments()';
    #TB:0:get-comments()
    is .get-comments(), '…', '.get-comments()';

    #TB:0:set-authors()
    $authors = '…';
    lives-ok { .set-authors( $authors); }, '.set-authors()';
    #TB:0:get-authors()
    is .get-authors(), '…', '.get-authors()';

    #TB:0:set-artists()
    $artists = '…';
    lives-ok { .set-artists( $artists); }, '.set-artists()';
    #TB:0:get-artists()
    is .get-artists(), '…', '.get-artists()';

    #TB:0:add-credit-section()
    ok .add-credit-section( $section-name, $people), '.add-credit-section()';

}}
  }
};

#-------------------------------------------------------------------------------
done-testing;

=finish

#-------------------------------------------------------------------------------
subtest 'Signals …', {
  use Gnome::Gtk3::Main;

  my Gnome::Gtk3::Main $main .= new;

  class SignalHandlers {
    has Bool $!signal-processed = False;

    method … (
      'any-args',
      Gnome::Gtk3::AboutDialog() :$_native-object, gulong :$_handler-id
      # --> …
    ) {

      isa-ok $_native-object, Gnome::Gtk3::AboutDialog;
      $!signal-processed = True;
    }

    method signal-emitter ( Gnome::Gtk3::AboutDialog :$_widget --> Str ) {

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      $_widget.emit-by-name(
        'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      );
      is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      #$!signal-processed = False;
      #$_widget.emit-by-name(
      #  'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      #);
      #is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }
      sleep(0.4);
      $main.gtk-main-quit;

      'done'
    }
  }

  my Gnome::Gtk3::AboutDialog $aboutdialog .= new;

  #my Gnome::Gtk3::Window $w .= new;
  #$w.add($m);

  my SignalHandlers $sh .= new;
  $aboutdialog.register-signal( $sh, 'method', 'signal');

  my Promise $p = $i.start-thread(
    $sh, 'signal-emitter',
    # :!new-context,
    # :start-time(now + 1)
  );

  is $main.gtk-main-level, 0, "loop level 0";
  $main.gtk-main;
  #is $main.gtk-main-level, 0, "loop level is 0 again";

  is $p.result, 'done', 'emitter finished';
}

