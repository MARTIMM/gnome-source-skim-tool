=comment Package: Gdk4, C-Source: enums
use v6.d;

=begin pod
=TITLE Gnome::Gdk4::T-enums
=end pod

#-------------------------------------------------------------------------------
#--[Constants]------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Constants

=head2 GDK_ACTION_ALL

Defines all possible DND actions.

This can be used in C<.status()> in class C<Gnome::Gdk4::Drop> messages when any drop
can be accepted or a more specific drop method is not yet known.

=head2 GDK_MODIFIER_MASK

A mask covering all entries in C<bit field GdkModifierType defined in Gnome::Gdk4::T-enums>.
=end pod

#-------------------------------------------------------------------------------
#--[Enumerations]---------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Enumerations

=head2 GdkAxisUse

Defines how device axes are interpreted by GTK.

Note that the X and Y axes are not really needed; pointer devices
report their location via the x/y members of events regardless. Whether
X and Y are present as axes depends on the GDK backend.
=item C<GDK_AXIS_IGNORE>; the axis is ignored.
=item C<GDK_AXIS_X>; the axis is used as the x axis.
=item C<GDK_AXIS_Y>; the axis is used as the y axis.
=item C<GDK_AXIS_DELTA_X>; the axis is used as the scroll x delta
=item C<GDK_AXIS_DELTA_Y>; the axis is used as the scroll y delta
=item C<GDK_AXIS_PRESSURE>; the axis is used for pressure information.
=item C<GDK_AXIS_XTILT>; the axis is used for x tilt information.
=item C<GDK_AXIS_YTILT>; the axis is used for y tilt information.
=item C<GDK_AXIS_WHEEL>; the axis is used for wheel information.
=item C<GDK_AXIS_DISTANCE>; the axis is used for pen/tablet distance information
=item C<GDK_AXIS_ROTATION>; the axis is used for pen rotation information
=item C<GDK_AXIS_SLIDER>; the axis is used for pen slider information
=item C<GDK_AXIS_LAST>; a constant equal to the numerically highest axis value.

=head2 GdkGLError

Error enumeration for B<Gnome::Gdk4::GLContext>.
=item C<GDK_GL_ERROR_NOT_AVAILABLE>; OpenGL support is not available
=item C<GDK_GL_ERROR_UNSUPPORTED_FORMAT>; The requested visual format is not supported
=item C<GDK_GL_ERROR_UNSUPPORTED_PROFILE>; The requested profile is not supported
=item C<GDK_GL_ERROR_COMPILATION_FAILED>; The shader compilation failed
=item C<GDK_GL_ERROR_LINK_FAILED>; The shader linking failed

=head2 GdkGravity

Defines the reference point of a surface and is used in B<Gnome::Gdk4::N-PopupLayout>.
=item C<GDK_GRAVITY_NORTH_WEST>; the reference point is at the top left corner.
=item C<GDK_GRAVITY_NORTH>; the reference point is in the middle of the top edge.
=item C<GDK_GRAVITY_NORTH_EAST>; the reference point is at the top right corner.
=item C<GDK_GRAVITY_WEST>; the reference point is at the middle of the left edge.
=item C<GDK_GRAVITY_CENTER>; the reference point is at the center of the surface.
=item C<GDK_GRAVITY_EAST>; the reference point is at the middle of the right edge.
=item C<GDK_GRAVITY_SOUTH_WEST>; the reference point is at the lower left corner.
=item C<GDK_GRAVITY_SOUTH>; the reference point is at the middle of the lower edge.
=item C<GDK_GRAVITY_SOUTH_EAST>; the reference point is at the lower right corner.
=item C<GDK_GRAVITY_STATIC>; the reference point is at the top left corner of the
 surface itself, ignoring window manager decorations.

=head2 GdkMemoryFormat

C<enumeration GdkMemoryFormat defined in Gnome::Gdk4::T-enums> describes formats that image data can have in memory.

It describes formats by listing the contents of the memory passed to it.
So GDK_MEMORY_A8R8G8B8 will be 1 byte (8 bits) of alpha, followed by a
byte each of red, green and blue. It is not endian-dependent, so
CAIRO_FORMAT_ARGB32 is represented by different B<GdkMemoryFormats>
on architectures with different endiannesses.

Its naming is modelled after
[VkFormat](https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#VkFormat)
for details).
=item C<GDK_MEMORY_B8G8R8A8_PREMULTIPLIED>; 4 bytes; for blue, green, red, alpha.
  The color values are premultiplied with the alpha value.
=item C<GDK_MEMORY_A8R8G8B8_PREMULTIPLIED>; 4 bytes; for alpha, red, green, blue.
  The color values are premultiplied with the alpha value.
=item C<GDK_MEMORY_R8G8B8A8_PREMULTIPLIED>; 4 bytes; for red, green, blue, alpha
  The color values are premultiplied with the alpha value.
=item C<GDK_MEMORY_B8G8R8A8>; 4 bytes; for blue, green, red, alpha.
=item C<GDK_MEMORY_A8R8G8B8>; 4 bytes; for alpha, red, green, blue.
=item C<GDK_MEMORY_R8G8B8A8>; 4 bytes; for red, green, blue, alpha.
=item C<GDK_MEMORY_A8B8G8R8>; 4 bytes; for alpha, blue, green, red.
=item C<GDK_MEMORY_R8G8B8>; 3 bytes; for red, green, blue. The data is opaque.
=item C<GDK_MEMORY_B8G8R8>; 3 bytes; for blue, green, red. The data is opaque.
=item C<GDK_MEMORY_R16G16B16>; 3 guint16 values; for red, green, blue. Since: 4.6
=item C<GDK_MEMORY_R16G16B16A16_PREMULTIPLIED>; 4 guint16 values; for red, green,
  blue, alpha. The color values are premultiplied with the alpha value.
 Since: 4.6
=item C<GDK_MEMORY_R16G16B16A16>; 4 guint16 values; for red, green, blue, alpha.
 Since: 4.6
=item C<GDK_MEMORY_R16G16B16_FLOAT>; 3 half-float values; for red, green, blue.
  The data is opaque. Since: 4.6
=item C<GDK_MEMORY_R16G16B16A16_FLOAT_PREMULTIPLIED>; 4 half-float values; for
  red, green, blue and alpha. The color values are premultiplied with
  the alpha value. Since: 4.6
=item C<GDK_MEMORY_R16G16B16A16_FLOAT>; 4 half-float values; for red, green,
  blue and alpha. Since: 4.6
=item C<GDK_MEMORY_R32G32B32_FLOAT>; 
=item C<GDK_MEMORY_R32G32B32A32_FLOAT_PREMULTIPLIED>; 4 float values; for
  red, green, blue and alpha. The color values are premultiplied with
  the alpha value. Since: 4.6
=item C<GDK_MEMORY_R32G32B32A32_FLOAT>; 4 float values; for red, green, blue and
  alpha. Since: 4.6
=item C<GDK_MEMORY_N_FORMATS>; The number of formats. This value will change as
  more formats get added, so do not rely on its concrete integer.

=head2 GdkVulkanError

Error enumeration for B<Gnome::Gdk4::VulkanContext>.
=item C<GDK_VULKAN_ERROR_UNSUPPORTED>; Vulkan is not supported on this backend or has not been
  compiled in.
=item C<GDK_VULKAN_ERROR_NOT_AVAILABLE>; Vulkan support is not available on this Surface
=end pod

#-------------------------------------------------------------------------------
#--[Bitfields]------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Bitfields

=head2 GdkAxisFlags

Flags describing the current capabilities of a device/tool.

=item C<GDK_AXIS_FLAG_X>; X axis is present
=item C<GDK_AXIS_FLAG_Y>; Y axis is present
=item C<GDK_AXIS_FLAG_DELTA_X>; Scroll X delta axis is present
=item C<GDK_AXIS_FLAG_DELTA_Y>; Scroll Y delta axis is present
=item C<GDK_AXIS_FLAG_PRESSURE>; Pressure axis is present
=item C<GDK_AXIS_FLAG_XTILT>; X tilt axis is present
=item C<GDK_AXIS_FLAG_YTILT>; Y tilt axis is present
=item C<GDK_AXIS_FLAG_WHEEL>; Wheel axis is present
=item C<GDK_AXIS_FLAG_DISTANCE>; Distance axis is present
=item C<GDK_AXIS_FLAG_ROTATION>; Z-axis rotation is present
=item C<GDK_AXIS_FLAG_SLIDER>; Slider axis is present

=head2 GdkDragAction

Used in B<Gnome::Gdk4::Drop> and B<Gnome::Gdk4::Drag> to indicate the actions that the
destination can and should do with the dropped data.

=item C<GDK_ACTION_COPY>; Copy the data.
=item C<GDK_ACTION_MOVE>; Move the data, i.e. first copy it, then delete
  it from the source using the DELETE target of the X selection protocol.
=item C<GDK_ACTION_LINK>; Add a link to the data. Note that this is only
  useful if source and destination agree on what it means, and is not
  supported on all platforms.
=item C<GDK_ACTION_ASK>; Ask the user what to do with the data.

=head2 GdkModifierType

Flags to indicate the state of modifier keys and mouse buttons
in events.

Typical modifier keys are Shift, Control, Meta, Super, Hyper, Alt, Compose,
Apple, CapsLock or ShiftLock.

Note that GDK may add internal values to events which include values outside
of this enumeration. Your code should preserve and ignore them.  You can use
C<GDK_MODIFIER_MASK> to remove all private values.

=item C<GDK_SHIFT_MASK>; the Shift key.
=item C<GDK_LOCK_MASK>; a Lock key (depending on the modifier mapping of the
 X server this may either be CapsLock or ShiftLock).
=item C<GDK_CONTROL_MASK>; the Control key.
=item C<GDK_ALT_MASK>; the fourth modifier key (it depends on the modifier
 mapping of the X server which key is interpreted as this modifier, but
 normally it is the Alt key).
=item C<GDK_BUTTON1_MASK>; the first mouse button.
=item C<GDK_BUTTON2_MASK>; the second mouse button.
=item C<GDK_BUTTON3_MASK>; the third mouse button.
=item C<GDK_BUTTON4_MASK>; the fourth mouse button.
=item C<GDK_BUTTON5_MASK>; the fifth mouse button.
=item C<GDK_SUPER_MASK>; the Super modifier
=item C<GDK_HYPER_MASK>; the Hyper modifier
=item C<GDK_META_MASK>; the Meta modifier
=end pod

