=comment Package: Gdk4, C-Source: texture
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=TITLE Gnome::Gdk4::Texture
=head1 Description

B<Gnome::Gdk4::Texture> is the basic element used to refer to pixel data.

It is primarily meant for pixel data that will not change over
multiple frames, and will be used for a long time.

There are various ways to create B<Gnome::Gdk4::Texture> objects from a
B<Gnome::Gdk4::Texture>, or a Cairo surface, or other pixel data.

The ownership of the pixel data is transferred to the B<Gnome::Gdk4::Texture>
instance; you can only make a copy of it, via C<.download()>.

B<Gnome::Gdk4::Texture> is an immutable object: That means you cannot change
anything about it other than increasing the reference count via
C<.ref()> in class C<Gnome::GObject::Object>, and consequently, it is a thread-safe object.

=begin comment

=head2 Example
# Example use of module Gnome::Gdk4::Texture

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

=head2 new

=head3 :native-object

Create an object using a native object from elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object() :$native-object! )

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-for-pixbuf

Creates a new texture object representing the B<Gnome::GdkPixbuf::Pixbuf>.

This function is threadsafe, so that you can e.g. use GTask
and C<.run-in-thread()> in class C<Gnome::Gio::Task> to avoid blocking the main thread
while loading a big image.

=begin code
method new-for-pixbuf ( N-Object() $pixbuf --> Gnome::Gdk4::Texture \)
=end code

=item $pixbuf; a B<Gnome::GdkPixbuf::Pixbuf>.

=begin comment

=head2 Example
# Example for new-for-pixbuf

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-from-bytes

Creates a new texture by loading an image from memory,

The file format is detected automatically. The supported formats
are PNG and JPEG, though more formats might be available.

If undefined is returned, then C<$error> will be set.

This function is threadsafe, so that you can e.g. use GTask
and C<.run-in-thread()> in class C<Gnome::Gio::Task> to avoid blocking the main thread
while loading a big image.

=begin code
method new-from-bytes ( N-Object $bytes, CArray[N-Error] $err --> Gnome::Gdk4::Texture \)
=end code

=item $bytes; a B<Gnome::Glib::N-Bytes> containing the data to load
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

=begin comment

=head2 Example
# Example for new-from-bytes

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-from-file

Creates a new texture by loading an image from a file.

The file format is detected automatically. The supported formats
are PNG and JPEG, though more formats might be available.

If undefined is returned, then C<$error> will be set.

This function is threadsafe, so that you can e.g. use GTask
and C<.run-in-thread()> in class C<Gnome::Gio::Task> to avoid blocking the main thread
while loading a big image.

=begin code
method new-from-file ( N-Object() $file, CArray[N-Error] $err --> Gnome::Gdk4::Texture \)
=end code

=item $file; B<Gnome::Gio::R-File> to load.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

=begin comment

=head2 Example
# Example for new-from-file

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-from-filename

Creates a new texture by loading an image from a file.

The file format is detected automatically. The supported formats
are PNG and JPEG, though more formats might be available.

If undefined is returned, then C<$error> will be set.

This function is threadsafe, so that you can e.g. use GTask
and C<.run-in-thread()> in class C<Gnome::Gio::Task> to avoid blocking the main thread
while loading a big image.

=begin code
method new-from-filename ( Str $path, CArray[N-Error] $err --> Gnome::Gdk4::Texture \)
=end code

=item $path; the filename to load.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

=begin comment

=head2 Example
# Example for new-from-filename

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 new-from-resource

Creates a new texture by loading an image from a resource.

The file format is detected automatically. The supported formats
are PNG and JPEG, though more formats might be available.

It is a fatal error if C<$resource-path> does not specify a valid
image resource and the program will abort if that happens.
If you are unsure about the validity of a resource, use
C<.new-from-file()> to load it.

This function is threadsafe, so that you can e.g. use GTask
and C<.run-in-thread()> in class C<Gnome::Gio::Task> to avoid blocking the main thread
while loading a big image.

=begin code
method new-from-resource ( Str $resource-path --> Gnome::Gdk4::Texture \)
=end code

=item $resource-path; the path of the resource file.

=begin comment

=head2 Example
# Example for new-from-resource

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 download

Downloads the C<$texture> into local memory.

This may be an expensive operation, as the actual texture data
may reside on a GPU or on a remote display server.

The data format of the downloaded data is equivalent to
%CAIRO_FORMAT_ARGB32, so every downloaded pixel requires
4 bytes of memory.

Downloading a texture into a Cairo image surface:
=begin comment
surface = cairo_image_surface_create (CAIRO_FORMAT_ARGB32,
                                      gdk_texture_get_width (texture),
                                      gdk_texture_get_height (texture));
gdk_texture_download (texture,
                      cairo_image_surface_get_data (surface),
                      cairo_image_surface_get_stride (surface));
cairo_surface_mark_dirty (surface);

=end comment

=begin code
method download ( Str $data, Int() $stride )
=end code

=item $data; pointer to enough memory to be filled with the
  downloaded data of C<$texture>.
=item $stride; rowstride in bytes.

=begin comment

=head2 Example
# Example for download

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-height

Returns the height of the C<$texture>, in pixels.

=begin code
method get-height (--> Int )
=end code

Return value; the height of the B<Gnome::Gdk4::Texture>. 

=begin comment

=head2 Example
# Example for get-height

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-width

Returns the width of C<$texture>, in pixels.

=begin code
method get-width (--> Int )
=end code

Return value; the width of the B<Gnome::Gdk4::Texture>. 

=begin comment

=head2 Example
# Example for get-width

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 save-to-png

Store the given C<$texture> to the C<$filename> as a PNG file.

This is a utility function intended for debugging and testing.
If you want more control over formats, proper error handling or
want to store to a B<Gnome::Gdk4::Texture> or other location, you might want to
use C<.save-to-png-bytes()> or look into the
gdk-pixbuf library.

=begin code
method save-to-png ( Str $filename --> Bool )
=end code

=item $filename; the filename to store to.

Return value; C<True> if saving succeeded, C<False> on failure.. 

=begin comment

=head2 Example
# Example for save-to-png

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 save-to-png-bytes

Store the given C<$texture> in memory as a PNG file.

Use C<.new-from-bytes()> to read it back.

If you want to serialize a texture, this is a convenient and
portable way to do that.

If you need more control over the generated image, such as
attaching metadata, you should look into an image handling
library such as the gdk-pixbuf library.

If you are dealing with high dynamic range float data, you
might also want to consider C<.save-to-tiff-bytes()>
instead.

=begin code
method save-to-png-bytes (--> N-Object )
=end code

Return value; a newly allocated B<Gnome::Glib::N-Bytes> containing PNG data. 

=begin comment

=head2 Example
# Example for save-to-png-bytes

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 save-to-tiff

Store the given C<$texture> to the C<$filename> as a TIFF file.

GTK will attempt to store data without loss.

=begin code
method save-to-tiff ( Str $filename --> Bool )
=end code

=item $filename; the filename to store to.

Return value; C<True> if saving succeeded, C<False> on failure.. 

=begin comment

=head2 Example
# Example for save-to-tiff

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 save-to-tiff-bytes

Store the given C<$texture> in memory as a TIFF file.

Use C<.new-from-bytes()> to read it back.

This function is intended to store a representation of the
texture's data that is as accurate as possible. This is
particularly relevant when working with high dynamic range
images and floating-point texture data.

If that is not your concern and you are interested in a
smaller size and a more portable format, you might want to
use C<.save-to-png-bytes()>.

=begin code
method save-to-tiff-bytes (--> N-Object )
=end code

Return value; a newly allocated B<Gnome::Glib::N-Bytes> containing TIFF data. 

=begin comment

=head2 Example
# Example for save-to-tiff-bytes

=end comment

=end pod

