=comment Package: Gdk4, C-Source: drop
use v6.d;

#-------------------------------------------------------------------------------
#--[Class Description]----------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=TITLE Gnome::Gdk4::Drop
=head1 Description

The B<Gnome::Gdk4::Drop> object represents the target of an ongoing DND operation.

Possible drop sites get informed about the status of the ongoing drag
operation with events of type C<GDK_DRAG_ENTER>, C<GDK_DRAG_LEAVE>,
C<GDK_DRAG_MOTION> and C<GDK_DROP_START>. The B<Gnome::Gdk4::Drop> object can be obtained
from these B<Gnome::Gdk4::Event> types using C<.get-drop()> in class C<Gnome::Gdk4::DNDEvent>.

The actual data transfer is initiated from the target side via an async
read, using one of the B<Gnome::Gdk4::Drop> methods for this purpose:
C<.read-async()> or C<.read-value-async()>.

GTK provides a higher level abstraction based on top of these functions,
and so they are not normally needed in GTK applications. See the
"Drag and Drop" section of the GTK documentation for more information.

=begin comment

=head2 Example
# Example use of module Gnome::Gdk4::Drop

=end comment

=end pod

#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

=head2 new

=head3 :native-object

Create an object using a native object from elsewhere. See also B<Gnome::N::TopLevelSupportClass>.

  multi method new ( N-Object :$native-object! )

=end pod

#-------------------------------------------------------------------------------
#--[Methods]--------------------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Methods
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 finish

Ends the drag operation after a drop.

The C<$action> must be a single action selected from the actions
available via C<.get-actions()>.

=begin code
method finish ( UInt $action )
=end code

=item $action; the action performed by the destination or 0 if the drop failed.

=begin comment

=head2 Example
# Example for finish

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-actions

Returns the possible actions for this B<Gnome::Gdk4::Drop>.

If this value contains multiple actions - i.e.
C<.DragAction.is-unique()> returns C<False> for the result -
C<.finish()> must choose the action to use when
accepting the drop. This will only happen if you passed
C<GDK_ACTION_ASK> as one of the possible actions in
C<.status()>. C<GDK_ACTION_ASK> itself will not
be included in the actions returned by this function.

This value may change over the lifetime of the B<Gnome::Gdk4::Drop>
both as a response to source side actions as well as to calls to
C<.status()> or C<.finish()>. The source
side will not change this value anymore once a drop has started.

=begin code
method get-actions (--> UInt )
=end code

Return value; The possible B<GdkDragActions>. 

=begin comment

=head2 Example
# Example for get-actions

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-device

Returns the B<Gnome::Gdk4::Device> performing the drop.

=begin code
method get-device (--> N-Object )
=end code

Return value; The B<Gnome::Gdk4::Device> performing the drop.. 

=begin comment

=head2 Example
# Example for get-device

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-display

Gets the B<Gnome::Gdk4::Display> that C<$self> was created for.

=begin code
method get-display (--> N-Object )
=end code

Return value; a B<Gnome::Gdk4::Display>. 

=begin comment

=head2 Example
# Example for get-display

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-drag

If this is an in-app drag-and-drop operation, returns the B<Gnome::Gdk4::Drag>
that corresponds to this drop.

If it is not, undefined is returned.

=begin code
method get-drag (--> N-Object )
=end code

Return value; the corresponding B<Gnome::Gdk4::Drag>. 

=begin comment

=head2 Example
# Example for get-drag

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-formats

Returns the B<Gnome::Gdk4::N-ContentFormats> that the drop offers the data
to be read in.

=begin code
method get-formats (--> N-Object )
=end code

Return value; The possible B<Gnome::Gdk4::N-ContentFormats>. 

=begin comment

=head2 Example
# Example for get-formats

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 get-surface

Returns the B<Gnome::Gdk4::Surface> performing the drop.

=begin code
method get-surface (--> N-Object )
=end code

Return value; The B<Gnome::Gdk4::Surface> performing the drop.. 

=begin comment

=head2 Example
# Example for get-surface

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 read-async

Asynchronously read the dropped data from a B<Gnome::Gdk4::Drop>
in a format that complies with one of the mime types.

=begin code
method read-async ( Array[Str] $mime-types, Int() $io-priority, N-Object() $cancellable, GAsyncReadyCallback &callback, gpointer $user-data )
=end code

=item $mime-types; 
  pointer to an array of mime types.
=item $io-priority; the I/O priority for the read operation.
=item $cancellable; optional B<Gnome::Gio::Cancellable> object.
=item GAsyncReadyCallback &callback; a B<Gnome::Gio::T-iotypes> to call when
  the request is satisfied. The function must be specified with the following signature; C<:( N-Object $source-object, N-Object $res, gpointer $data )>.
=item $user-data; the data to pass to C<$callback>.

=begin comment

=head2 Example
# Example for read-async

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 read-finish

Finishes an async drop read operation.

Note that you must not use blocking read calls on the returned stream
in the GTK thread, since some platforms might require communication with
GTK to complete the data transfer. You can use async APIs such as
g_input_stream_read_bytes_async().

See C<.read-async()>.

=begin code
method read-finish ( N-Object() $result, Array[Str] $out-mime-type, CArray[N-Error] $err --> N-Object )
=end code

=item $result; a B<Gnome::Gio::R-AsyncResult>.
=item $out-mime-type; (transfer ownership: full) return location for the used mime type.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; the B<Gnome::Gio::InputStream>. 

=begin comment

=head2 Example
# Example for read-finish

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 read-value-async

Asynchronously request the drag operation's contents converted
to the given C<$type>.

When the operation is finished C<$callback> will be called. You must
then call C<.read-value-finish()> to get the resulting
B<Gnome::GObject::N-Value>.

For local drag-and-drop operations that are available in the given
B<Gnome::GObject::Drop>, the value will be copied directly. Otherwise, GDK will
try to use C<.content-deserialize-async()> to convert the data.

=begin code
method read-value-async ( GType $type, Int() $io-priority, N-Object() $cancellable, GAsyncReadyCallback &callback, gpointer $user-data )
=end code

=item $type; a B<Gnome::GObject::Drop> to read.
=item $io-priority; the I/O priority of the request..
=item $cancellable; optional B<Gnome::Gio::Cancellable> object, undefined to ignore..
=item GAsyncReadyCallback &callback; callback to call when the request is satisfied. The function must be specified with the following signature; C<:( N-Object $source-object, N-Object $res, gpointer $data )>.
=item $user-data; the data to pass to callback function.

=begin comment

=head2 Example
# Example for read-value-async

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 read-value-finish

Finishes an async drop read.

See C<.read-value-async()>.

=begin code
method read-value-finish ( N-Object() $result, CArray[N-Error] $err --> N-Object )
=end code

=item $result; a B<Gnome::Gio::R-AsyncResult>.
=item $err; Error object. When defined, an error can be returned when there is one.
Use C<Pointer> when you want to ignore the error.
.

Return value; a B<Gnome::GObject::N-Value> containing the result.. 

=begin comment

=head2 Example
# Example for read-value-finish

=end comment

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 status

Selects all actions that are potentially supported by the destination.

When calling this function, do not restrict the passed in actions to
the ones provided by C<.get-actions()>. Those actions may
change in the future, even depending on the actions you provide here.

The C<$preferred> action is a hint to the drag-and-drop mechanism about which
action to use when multiple actions are possible.

This function should be called by drag destinations in response to
C<GDK_DRAG_ENTER> or C<GDK_DRAG_MOTION> events. If the destination does
not yet know the exact actions it supports, it should set any possible
actions first and then later call this function again.

=begin code
method status ( UInt $actions, UInt $preferred )
=end code

=item $actions; Supported actions of the destination, or 0 to indicate
   that a drop will not be accepted.
=item $preferred; A unique action that's a member of C<$actions> indicating the
   preferred action.

=begin comment

=head2 Example
# Example for status

=end comment

=end pod

