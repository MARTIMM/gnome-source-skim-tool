=comment Package: Gdk4, C-Source: paintable
use v6.d;

#TL:1:Gnome::Gdk4::R-Paintable:
#-------------------------------------------------------------------------------
#--[Module Imports]-------------------------------------------------------------
#-------------------------------------------------------------------------------

use NativeCall;
use Test;

use Gnome::Glib::T-error:api<2>;

use Gnome::Gio::File:api<2>;

use Gnome::Gdk4::Texture:api<2>;
use Gnome::Gdk4::T-paintable:api<2>;

use Gnome::N::GlibToRakuTypes:api<2>;
use Gnome::N::N-Object:api<2>;
use Gnome::N::NativeLib:api<2>;
use Gnome::N::X:api<2>;

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# set environment variable 'raku-test-all' if rest must be tested too.
unless %*ENV<raku_test_all>:exists {
  done-testing;
  exit;
}

#-------------------------------------------------------------------------------
subtest 'Method tests', {

#  my Gnome::Gio::File $file .= new-for-path('t/Data/gt-k-raku.png');
  my Gnome::Gio::File $file .= new-for-path('t/Data/gtk-raku.png');

  my $e = CArray[N-Error].new(N-Error);
  my Gnome::Gdk4::Texture $r-paintable .= new-from-file( $file, $e);
  ok !$e[0], 'Texture initialized for paintable role test';

  with $r-paintable {
    my gdouble $specified-width;
    my gdouble $default-height;
    my N-Object $snapshot;
    my gdouble $height;
    my gdouble $specified-height;
    my CArray[gdouble] $concrete-height;
    my gdouble $default-width;
    my gdouble $width;
    my CArray[gdouble] $concrete-width;


#`{{
    #TM:0:compute-concrete-size()
    ok .compute-concrete-size( $specified-width, $specified-height, $default-width, $default-height, $concrete-width, $concrete-height), '.compute-concrete-size()';

    #TM:0:get-current-image()
     .get-current-image(), '…', '.get-current-image()';

    #TM:0:get-flags()
     .get-flags(), '…', '.get-flags()';

    #TM:0:get-intrinsic-aspect-ratio()
     .get-intrinsic-aspect-ratio(), '…', '.get-intrinsic-aspect-ratio()';

    #TM:0:get-intrinsic-height()
     .get-intrinsic-height(), '…', '.get-intrinsic-height()';

    #TM:0:get-intrinsic-width()
     .get-intrinsic-width(), '…', '.get-intrinsic-width()';

    #TM:0:invalidate-contents()
    ok .invalidate-contents(), '.invalidate-contents()';

    #TM:0:invalidate-size()
    ok .invalidate-size(), '.invalidate-size()';

    #TM:0:snapshot()
    ok .snapshot( $snapshot, $width, $height), '.snapshot()';

}}
  }
};

#-------------------------------------------------------------------------------
done-testing;

=finish

#-------------------------------------------------------------------------------
subtest 'Signals …', {
  use Gnome::Gtk3::Main;

  my Gnome::Gtk3::Main $main .= new;

  class SignalHandlers {
    has Bool $!signal-processed = False;

    method … (
      'any-args',
      Gnome::Gdk4::Paintable() :$_native-object, gulong :$_handler-id
      # --> …
    ) {

      isa-ok $_native-object, Gnome::Gdk4::Paintable;
      $!signal-processed = True;
    }

    method signal-emitter ( Gnome::Gdk4::Paintable :$_widget --> Str ) {

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      $_widget.emit-by-name(
        'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      );
      is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      #$!signal-processed = False;
      #$_widget.emit-by-name(
      #  'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      #);
      #is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }
      sleep(0.4);
      $main.gtk-main-quit;

      'done'
    }
  }

  my Gnome::Gdk4::Paintable $r-paintable .= new;

  #my Gnome::Gtk3::Window $w .= new;
  #$w.add($m);

  my SignalHandlers $sh .= new;
  $r-paintable.register-signal( $sh, 'method', 'signal');

  my Promise $p = $i.start-thread(
    $sh, 'signal-emitter',
    # :!new-context,
    # :start-time(now + 1)
  );

  is $main.gtk-main-level, 0, "loop level 0";
  $main.gtk-main;
  #is $main.gtk-main-level, 0, "loop level is 0 again";

  is $p.result, 'done', 'emitter finished';
}

