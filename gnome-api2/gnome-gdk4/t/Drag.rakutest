=comment Package: Gdk4, C-Source: drag
use v6.d;

#TL:1:Gnome::Gdk4::Drag:
#-------------------------------------------------------------------------------
#--[Module Imports]-------------------------------------------------------------
#-------------------------------------------------------------------------------

use NativeCall;
use Test;


use Gnome::Gdk4::Drag:api<2>;
use Gnome::Gdk4::N-ContentFormats:api<2>;
use Gnome::Gdk4::T-enums:api<2>;
use Gnome::Gdk4::T-types:api<2>;
use Gnome::N::GlibToRakuTypes:api<2>;
use Gnome::N::N-Object:api<2>;
use Gnome::N::NativeLib:api<2>;
use Gnome::N::X:api<2>;

#-------------------------------------------------------------------------------
#--[Test preparation]-----------------------------------------------------------
#-------------------------------------------------------------------------------

#Gnome::N::debug(:on);
my Gnome::Gdk4::Drag $drag;

#-------------------------------------------------------------------------------
#--[Class init tests]-----------------------------------------------------------
#-------------------------------------------------------------------------------

subtest 'ISA test', {
  given $drag {

#`{{
}}
  }
};

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# set environment variable 'raku-test-all' if rest must be tested too.
unless %*ENV<raku_test_all>:exists {
  done-testing;
  exit;
}

#-------------------------------------------------------------------------------
subtest 'Method tests', {
  with $drag {
    my gint $hot-x;
    my gboolean $success;
    my gint $hot-y;


#`{{
    #TM:0:drop-done()
    ok .drop-done( $success), '.drop-done()';

    #TM:0:get-actions()
     .get-actions(), '…', '.get-actions()';

    #TM:0:get-content()
     .get-content(), '…', '.get-content()';

    #TM:0:get-device()
     .get-device(), '…', '.get-device()';

    #TM:0:get-display()
     .get-display(), '…', '.get-display()';

    #TM:0:get-drag-surface()
     .get-drag-surface(), '…', '.get-drag-surface()';

    #TM:0:get-formats()
     .get-formats(), '…', '.get-formats()';

    #TM:0:get-selected-action()
     .get-selected-action(), '…', '.get-selected-action()';

    #TM:0:get-surface()
     .get-surface(), '…', '.get-surface()';

    #TM:0:set-hotspot()
    $hot-x = '…';
    $hot-y = '…';
    .set-hotspot( $hot-x, $hot-y);
    ok True, '.set-hotspot()';

}}
  }
};

#-------------------------------------------------------------------------------
subtest 'Function tests', {
  with $drag {
    my N-Object() $device;
    my Num() $dx;
    my N-Object() $content;
    my Num() $dy;
    my N-Object() $surface;
    my UInt $actions;


#`{{
    #TM:0:begin()
    ok .begin( $surface, $device, $content, $actions, $dx, $dy), '.begin()';

}}
  }
};

#-------------------------------------------------------------------------------
done-testing;

=finish

#-------------------------------------------------------------------------------
subtest 'Signals …', {
  use Gnome::Gtk3::Main;

  my Gnome::Gtk3::Main $main .= new;

  class SignalHandlers {
    has Bool $!signal-processed = False;

    method … (
      'any-args',
      Gnome::Gdk4::Drag() :$_native-object, gulong :$_handler-id
      # --> …
    ) {

      isa-ok $_native-object, Gnome::Gdk4::Drag;
      $!signal-processed = True;
    }

    method signal-emitter ( Gnome::Gdk4::Drag :$_widget --> Str ) {

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      $_widget.emit-by-name(
        'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      );
      is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }

      #$!signal-processed = False;
      #$_widget.emit-by-name(
      #  'signal',
      #  'any-args',
      #  :return-type(int32),
      #  :parameters([int32,])
      #);
      #is $!signal-processed, True, ''…' signal processed';

      while $main.gtk-events-pending() { $main.iteration-do(False); }
      sleep(0.4);
      $main.gtk-main-quit;

      'done'
    }
  }

  my Gnome::Gdk4::Drag $drag .= new;

  #my Gnome::Gtk3::Window $w .= new;
  #$w.add($m);

  my SignalHandlers $sh .= new;
  $drag.register-signal( $sh, 'method', 'signal');

  my Promise $p = $i.start-thread(
    $sh, 'signal-emitter',
    # :!new-context,
    # :start-time(now + 1)
  );

  is $main.gtk-main-level, 0, "loop level 0";
  $main.gtk-main;
  #is $main.gtk-main-level, 0, "loop level is 0 again";

  is $p.result, 'done', 'emitter finished';
}

