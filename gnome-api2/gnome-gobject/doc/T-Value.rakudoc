# Package: GObject, C-Source: value
use v6.d;

=begin pod
=head1 Gnome::GObject::T-Value
=end pod
#-------------------------------------------------------------------------------
#--[Class Initialization]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Class initialization

=head2 new

Initialization of a type class is simple.

  method new ( )

=end pod

=begin pod
=head1 Constants

=head2 G_VALUE_INTERNED_STRING

For string values, indicates that the string contained is canonical and will exist for the duration of the process. See C<.set-interned-string()>.

=head2 G_VALUE_NOCOPY_CONTENTS

If passed to G_VALUE_COLLECT(), allocated data won't be copied but used verbatim. This does not affect ref-counted types like objects. This does not affect usage of C<.copy()>, the data will be copied if it is not ref-counted.
=end pod

#-------------------------------------------------------------------------------
#--[Standalone Functions]-------------------------------------------------------
#-------------------------------------------------------------------------------

=begin pod
=head1 Standalone Functions
=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 value-register-transform-func

Registers a value transformation function for use in C<.transform()>.
A previously registered transformation function for C<$src_type> and C<$dest_type>
will be replaced.

=begin code
method value-register-transform-func ( GType $src-type, GType $dest-type, &transform-func )
=end code

=item $src-type; Source type..
=item $dest-type; Target type..
=item &transform-func; a function which transforms values of type C<$src_type>
 into value of type C<$dest_type>. Tthe function must be specified with following signature; C<:( N-Value $src-value, N-Value $dest-value )>.

=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 value-type-compatible

Returns whether a B<Gnome::GObject::N-Value> of type C<$src_type> can be copied into a B<Gnome::GObject::N-Value> of type C<$dest_type>.

=begin code
method value-type-compatible ( GType $src-type, GType $dest-type --> Bool )
=end code

=item $src-type; source type to be copied..
=item $dest-type; destination type for copying..

Return value; C<True> if C<.copy()> is possible with C<$src_type> and C<$dest_type>.. 


=end pod

#-------------------------------------------------------------------------------
=begin pod
=head2 value-type-transformable

Check whether C<.transform()> is able to transform values of type C<$src_type> into values of type C<$dest_type>. Note that for the types to be transformable, they must be compatible or a transformation function must be registered.

=begin code
method value-type-transformable ( GType $src-type, GType $dest-type --> Bool )
=end code

=item $src-type; Source type..
=item $dest-type; Target type..

Return value; C<True> if the transformation is possible, C<False> otherwise.. 


=end pod

