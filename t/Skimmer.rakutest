
use Test;

use Gnome::SourceSkimTool::ConstEnumType;
use Gnome::SourceSkimTool::Prepare;
use Gnome::SourceSkimTool::GenRakuModule;

#-------------------------------------------------------------------------------
my SkimSource $*gnome-package = Gtk3;
my Str $*gnome-class = 'Label';
my Bool $*verbose;# = False;
my Hash $*work-data;

my Gnome::SourceSkimTool::Prepare $prep .= new;
my Gnome::SourceSkimTool::GenRakuModule $r .= new;

subtest 'search-name', {
  my Hash $h = $r.search-name('GtkLabel');
  is $h<rname>, 'Gnome::Gtk3::Label', "search class GtkLabel ≡ '$h<rname>'";
  is $h<parent>, 'Gnome::Gtk3::Misc',
     "search parent of GtkLabel ≡ '$h<parent>'";
  is $h<raku-package>, 'Gnome::Gtk3', "found in '$h<raku-package>'";
  
  $h = $r.search-name('GtkX');
  ok !$h.defined, "search class: GtkX, nothing found";

  $h = $r.search-name('g_markup_escape_text');
  is $h<rname>, 'markup-escape-text',
     "search function: g_markup_escape_text ≡ '$h<rname>'";
  is $h<raku-package>, 'Gnome::Glib', "found in '$h<raku-package>'";
}













#-------------------------------------------------------------------------------
done-testing;


=finish

use Gnome::SourceSkimTool::ConstEnumType;
use Gnome::SourceSkimTool::Prepare;
use Gnome::SourceSkimTool::SkimGirSource;


#-------------------------------------------------------------------------------
constant \Prepare = Gnome::SourceSkimTool::Prepare;

# pick a class with no other prefix specified
my SkimSource $*gnome-package = Gtk3;
my Str $*gnome-class = 'GtkButton';
my Hash $*work-data;

my Bool $*verbose = False;

#-------------------------------------------------------------------------------
my Prepare $gfl;
my Gnome::SourceSkimTool::SkimGirSource $sgd;
my Int $level;

#-------------------------------------------------------------------------------
subtest 'Prepare', {

  # read from 'gtkbutton.xml'
  $*gnome-class = 'GtkButton';
  $level = 0;

  $gfl .= new;

  is $*work-data<source-dir>,
    ( [~] SKIMTOOLROOT, 'Gnome/gtk+-', VGtk3, '/gtk' ),
    'source-dir';

  my Str $gd = $*work-data<gtkdoc-dir>;
  ok $gd ~~ m/ 'Gtkdoc/Gtk3' $/, 'gtkdoc-dir';
  ok $gd.IO.d, 'check dir: ' ~ $gd;

  if "$gd/docs".IO ~~ :d {
    skip 'Don\'t need to do long running test all the time', 1;
  }

  else {
    $gfl.generate-gtkdoc;
  }

  ok "$gd/gtk3-sections.txt".IO.r, 'check phase 1: ' ~ "$gd/gtk3-sections.txt";
  ok "$gd/docs".IO.d, 'check dir: ' ~ "$gd/docs";
  ok "$gd/docs/gtkaboutdialog.xml".IO.r,
      'check phase 3: ' ~ "$gd/docs/gtkaboutdialog.xml";

  is $*work-data<library>, '&gtk-lib', 'check library: ' ~ $*work-data<library>;
  is $*work-data<skim-module-result>, SKIMTOOLDATA ~ 'Gtk3/GtkButton.yaml',
    'skim-module-result';
  is RAKUMODS, 'xt/NewRakuModules/', 'check RAKUMODS: ' ~ RAKUMODS;
}


#-------------------------------------------------------------------------------
subtest 'DocSearch', {
  $level = 0;
  $sgd .= new;
##`{{

  $sgd.process-gtkdocs;
  
  $*verbose = True;
  $gfl.display-hash(
    $sgd.functions<gtk-button-get-focus-on-click>,
    :label<get-focus-on-click>
  );

#`{{

#  display-function-info(%(:doc($sgd.description)));
#  display-function-info($sgd.functions);
#  display-function-info($sgd.signals);
#  display-function-info($sgd.properties);
#  display-function-info($sgd.objects);

  like $sgd.description, / '=head1' \s+ Description /,
       '.process-gtkdocs(): description';
  ok $sgd.functions<gtk-button-new>:exists,
       '.process-gtkdocs(): functions';
  ok $sgd.signals<GtkButton-released>:exists,
       '.process-gtkdocs(): signals';
  ok $sgd.properties<GtkButton--use-underline>:exists,
       '.process-gtkdocs(): properties';
}}

#`{{
  $sgd.process-apidocs;
  is $sgd.objects<gtk_window_set_icon><object>, 'GtkWindow', '.process-apidocs(): api doc';

  ok $sgd.objects<gtk_button_get_alignment><deprecated>,
    'function gtk_button_get_alignment is deprecated';
  ok $sgd.objects<GtkButton::leave><deprecated>,
       'signal ::leave is deprecated';
  ok $sgd.objects<GtkButton:yalign><deprecated>,
       'property :yalign is deprecated';
}}
}

#`{{
#-------------------------------------------------------------------------------
subtest 'other module', {
  $level = 0;

  # change module to test for structures defining enums
  #$*sub-prefix = 'gtk_window';

  $gfl .= new;
  my Str $gd = $gfl.set-gtkdoc-dir;
  $sgd .= new;
  $sgd.process-gtkdocs;

  display-function-info($sgd.types);
}
}}

#TODO Add raku class name to classes in objects.yaml
#TODO Add interface (roles) to most highest level of class.
#TODO Add callback arg count to signals
#TODO rename 1st arg to :$_widget and drop last user data pointer
#TODO generate Raku module
#TODO test dump of generated Raku module
#TODO mark C-lang examples in comments, indented and unformatted
#TODO add gnome packages for gdk-pixbuf, cairo-gobject and pangocairo

#-------------------------------------------------------------------------------
done-testing;

#BUG; module result of function not always correct, name has wrong text

#`{{
#-------------------------------------------------------------------------------
sub display-function-info ( Hash $info ) {
  for $info.keys.sort -> $k {
    say '' if $level == 0;
    if $info{$k} ~~ Hash {
      say '  ' x $level, $k, ':';
      $level++;
      display-function-info($info{$k});
      $level--;
    }

    else {
      say '  ' x $level, $k, ': ', $info{$k}.gist;
    }
  }
}
}}

