use Gnome::SourceSkimTool::ConstEnumType;
use Gnome::SourceSkimTool::GetFileList;
use Gnome::SourceSkimTool::SkimGtkDoc;

use Test;

#-------------------------------------------------------------------------------
constant \GetFileList = Gnome::SourceSkimTool::GetFileList;

# pick a class with no other prefix specified
my Str $*sub-prefix = 'gtk_button';
#my Str $*other-prefix = 'gtk_button';

my Bool $*class-is-leaf = False;
my Bool $*class-is-role = False; # is leaf implicitly
my Bool $*class-is-top = False;

# needed dynamic variable set by main program
my SkimSource $*use-doc-source;
#my Str $*lib-classname;
#my Str $*raku-classname;
#my Str $*raku-parent-classname;
my Str $*library;
#my Str $*raku-modname;
#my Str $*raku-parent-modname;
#my Str $*include-content;
#my Str $*source-content;
my Str $*dump-result-dir;



#-------------------------------------------------------------------------------
my GetFileList $gfl;
my Int $level = 0;

#-------------------------------------------------------------------------------
subtest 'GetFileList', {

  # dies because tests are not done in a gnome raku repo
  dies-ok { $gfl .= new; }, 'dies when no path set/found';
  $gfl .= new(:test-cwd<gnome-gtk3>);

  is $gfl.set-source-dir,
    ( [~] SKIMTOOLROOT, 'Gnome/gtk+-', VGtk3, '/gtk' ),
    '.set-source-dir()';
  is $*use-doc-source, Gtk3, 'check $*use-doc-source: ' ~ $*use-doc-source;

  my Str $gd = $gfl.set-gtkdoc-dir;
  if "$gd/docs".IO ~~ :d {
    skip 'Don\'t need to do long running test all the time', 2;
  }

  else {
    ok $gd ~~ m/ 'Gtkdoc/Gtk3' $/, '.set-gtkdoc-dir()';
    ok $gd.IO.d, 'check dir: ' ~ $gd;
    ok "$gd/gtk3.types".IO.r, 'check a file: ' ~ "$gd/gtk3.types";

    $gfl.generate-gtkdoc;
    ok "$gd/docs".IO.d, 'check dir: ' ~ "$gd/docs";
    ok "$gd/docs/gtkaboutdialog.xml".IO.d,
       'check dir: ' ~ "$gd/docs/gtkaboutdialog.xml";
  }

  is $*library, '&gtk-lib', 'check $*library: ' ~ $*library;
  is $*dump-result-dir, 'xt/NewModules',
    'check $*dump-result-dir: ' ~ $*dump-result-dir;
}

#-------------------------------------------------------------------------------
subtest 'DocSearch', {

  my Gnome::SourceSkimTool::SkimGtkDoc $sgd .= new;
  $sgd.process-gtkdocs(:test-cwd<gnome-gtk3>);

  display-function-info($sgd.functions);

  like $sgd.description, / '=head1' \s+ Description /,
       '.process-gtkdocs(): description';
  ok $sgd.functions<gtk-button-new>:exists,
       '.process-gtkdocs(): functions';
  ok $sgd.functions<gtk-button-get-alignment><deprecated>,
    'function gtk-button-get-alignment is deprecated';
}

#-------------------------------------------------------------------------------
done-testing;

#-------------------------------------------------------------------------------
sub display-function-info ( Hash $info ) {
  for $info.keys.sort -> $k {
    say '' if $level == 0;
    if $info{$k} ~~ Hash {
      say '  ' x $level, $k, ':';
      $level++;
      display-function-info($info{$k});
      $level--;
    }

    else {
      say '  ' x $level, $k, ': ', $info{$k}.gist;
    }
  }
}

=finish


#-------------------------------------------------------------------------------
my GetFileList $gfl .= new;
my Gnome::SourceSkimTool::HCSkim $hc-skim .= new;

#-------------------------------------------------------------------------------
subtest 'GetFileList', {
  is $gfl.set-source-dir,
    ( [~] SKIMTOOLROOT, 'Gnome/gtk+-', VGtk3, '/gtk' ),
    '.set-source-dir()';

  # Test version picks default gtk version 3 source directory
  lives-ok { $gfl.make-dir-list; }, '.make-dir-list()';
  my @list = $gfl.load-dir-list;
  ok @list.elems > 100, '.load-dir-list()';

  lives-ok { $gfl.get-sources; }, '.get-sources()';
  is $*library, '&gtk-lib', 'check $*library: ' ~ $*library;
  is $*raku-modname, 'Gtk3', 'check $*raku-modname: ' ~ $*raku-modname;
  is $*lib-classname, 'GtkButton', 'check $*lib-classname: ' ~ $*lib-classname;
  is $*raku-classname, 'Button', 'check $*raku-classname: ' ~ $*raku-classname;
  is $*dump-result-dir, 'xt/NewModules',
    'check $*dump-result-dir: ' ~ $*dump-result-dir;
}

#-------------------------------------------------------------------------------
subtest 'HCSkim', {
  $hc-skim.guess-parent-classes;
  is $*raku-parent-classname, 'Bin',
    'check $*raku-parent-classname: ' ~ $*raku-parent-classname;
  is $*raku-parent-modname, 'Gtk3',
    'check $*raku-parent-modname: ' ~ $*raku-parent-modname;
}

#note $*include-content.substr( 800, 100);
#note $*source-content.substr( 800, 100);


done-testing;
#=finish